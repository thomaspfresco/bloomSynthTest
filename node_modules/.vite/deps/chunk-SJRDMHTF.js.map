{
  "version": 3,
  "sources": ["../../tone/Tone/core/type/Conversions.ts", "../../automation-events/src/functions/create-extended-exponential-ramp-to-value-automation-event.ts", "../../automation-events/src/functions/create-extended-linear-ramp-to-value-automation-event.ts", "../../automation-events/src/functions/create-set-value-automation-event.ts", "../../automation-events/src/functions/create-set-value-curve-automation-event.ts", "../../automation-events/src/functions/get-target-value-at-time.ts", "../../automation-events/src/guards/exponential-ramp-to-value-automation-event.ts", "../../automation-events/src/guards/linear-ramp-to-value-automation-event.ts", "../../automation-events/src/guards/any-ramp-to-value-automation-event.ts", "../../automation-events/src/guards/set-value-automation-event.ts", "../../automation-events/src/guards/set-value-curve-automation-event.ts", "../../automation-events/src/functions/get-value-of-automation-event-at-index-at-time.ts", "../../automation-events/src/functions/get-end-time-and-value-of-previous-automation-event.ts", "../../automation-events/src/guards/cancel-and-hold-automation-event.ts", "../../automation-events/src/guards/cancel-scheduled-values-automation-event.ts", "../../automation-events/src/functions/get-event-time.ts", "../../automation-events/src/functions/get-exponential-ramp-value-at-time.ts", "../../automation-events/src/functions/get-linear-ramp-value-at-time.ts", "../../automation-events/src/functions/interpolate-value.ts", "../../automation-events/src/functions/get-value-curve-value-at-time.ts", "../../automation-events/src/guards/set-target-automation-event.ts", "../../automation-events/src/classes/automation-event-list.ts", "../../automation-events/src/functions/create-cancel-and-hold-automation-event.ts", "../../automation-events/src/functions/create-cancel-scheduled-values-automation-event.ts", "../../automation-events/src/functions/create-exponential-ramp-to-value-automation-event.ts", "../../automation-events/src/functions/create-linear-ramp-to-value-automation-event.ts", "../../automation-events/src/functions/create-set-target-automation-event.ts", "../../standardized-audio-context/src/factories/abort-error.ts", "../../standardized-audio-context/src/factories/add-active-input-connection-to-audio-node.ts", "../../standardized-audio-context/src/factories/add-audio-node-connections.ts", "../../standardized-audio-context/src/factories/add-audio-param-connections.ts", "../../standardized-audio-context/src/globals.ts", "../../standardized-audio-context/src/helpers/is-constructible.ts", "../../standardized-audio-context/src/helpers/split-import-statements.ts", "../../standardized-audio-context/src/factories/add-audio-worklet-module.ts", "../../standardized-audio-context/src/helpers/get-value-for-key.ts", "../../standardized-audio-context/src/helpers/pick-element-from-set.ts", "../../standardized-audio-context/src/helpers/delete-passive-input-connection-to-audio-node.ts", "../../standardized-audio-context/src/helpers/get-event-listeners-of-audio-node.ts", "../../standardized-audio-context/src/helpers/set-internal-state-to-active.ts", "../../standardized-audio-context/src/guards/audio-worklet-node.ts", "../../standardized-audio-context/src/helpers/set-internal-state-to-passive.ts", "../../standardized-audio-context/src/helpers/set-internal-state-to-passive-when-necessary.ts", "../../standardized-audio-context/src/factories/add-connection-to-audio-node.ts", "../../standardized-audio-context/src/factories/add-passive-input-connection-to-audio-node.ts", "../../standardized-audio-context/src/factories/add-silent-connection.ts", "../../standardized-audio-context/src/factories/add-unrendered-audio-worklet-node.ts", "../../standardized-audio-context/src/factories/analyser-node-constructor.ts", "../../standardized-audio-context/src/helpers/is-owned-by-context.ts", "../../standardized-audio-context/src/factories/analyser-node-renderer-factory.ts", "../../standardized-audio-context/src/helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support.ts", "../../standardized-audio-context/src/factories/index-size-error.ts", "../../standardized-audio-context/src/helpers/wrap-audio-buffer-get-channel-data-method.ts", "../../standardized-audio-context/src/factories/audio-buffer-constructor.ts", "../../standardized-audio-context/src/constants.ts", "../../standardized-audio-context/src/helpers/is-active-audio-node.ts", "../../standardized-audio-context/src/factories/audio-buffer-source-node-constructor.ts", "../../standardized-audio-context/src/factories/audio-buffer-source-node-renderer-factory.ts", "../../standardized-audio-context/src/guards/audio-buffer-source-node.ts", "../../standardized-audio-context/src/guards/biquad-filter-node.ts", "../../standardized-audio-context/src/guards/constant-source-node.ts", "../../standardized-audio-context/src/guards/gain-node.ts", "../../standardized-audio-context/src/guards/oscillator-node.ts", "../../standardized-audio-context/src/guards/stereo-panner-node.ts", "../../standardized-audio-context/src/helpers/get-audio-node-connections.ts", "../../standardized-audio-context/src/helpers/get-audio-param-connections.ts", "../../standardized-audio-context/src/helpers/deactivate-active-audio-node-input-connections.ts", "../../standardized-audio-context/src/helpers/deactivate-audio-graph.ts", "../../standardized-audio-context/src/helpers/is-valid-latency-hint.ts", "../../standardized-audio-context/src/factories/audio-context-constructor.ts", "../../standardized-audio-context/src/factories/audio-destination-node-constructor.ts", "../../standardized-audio-context/src/factories/audio-destination-node-renderer-factory.ts", "../../standardized-audio-context/src/factories/audio-listener-factory.ts", "../../standardized-audio-context/src/guards/audio-node.ts", "../../standardized-audio-context/src/guards/audio-node-output-connection.ts", "../../standardized-audio-context/src/helpers/insert-element-in-set.ts", "../../standardized-audio-context/src/helpers/add-active-input-connection-to-audio-param.ts", "../../standardized-audio-context/src/helpers/add-passive-input-connection-to-audio-param.ts", "../../standardized-audio-context/src/guards/native-audio-node-faker.ts", "../../standardized-audio-context/src/helpers/connect-native-audio-node-to-native-audio-node.ts", "../../standardized-audio-context/src/helpers/delete-active-input-connection.ts", "../../standardized-audio-context/src/helpers/delete-active-input-connection-to-audio-param.ts", "../../standardized-audio-context/src/helpers/delete-event-listeners-of-audio-node.ts", "../../standardized-audio-context/src/helpers/delete-passive-input-connection-to-audio-param.ts", "../../standardized-audio-context/src/helpers/disconnect-native-audio-node-from-native-audio-node.ts", "../../standardized-audio-context/src/helpers/get-native-audio-node.ts", "../../standardized-audio-context/src/helpers/get-native-audio-param.ts", "../../standardized-audio-context/src/helpers/is-part-of-a-cycle.ts", "../../standardized-audio-context/src/helpers/is-passive-audio-node.ts", "../../standardized-audio-context/src/helpers/test-audio-node-disconnect-method-support.ts", "../../standardized-audio-context/src/helpers/visit-each-audio-node-once.ts", "../../standardized-audio-context/src/guards/native-audio-node.ts", "../../standardized-audio-context/src/helpers/wrap-audio-node-disconnect-method.ts", "../../standardized-audio-context/src/factories/audio-node-constructor.ts", "../../standardized-audio-context/src/factories/audio-param-factory.ts", "../../standardized-audio-context/src/factories/audio-param-renderer.ts", "../../standardized-audio-context/src/read-only-map.ts", "../../standardized-audio-context/src/factories/audio-worklet-node-constructor.ts", "../../standardized-audio-context/src/helpers/copy-from-channel.ts", "../../standardized-audio-context/src/helpers/copy-to-channel.ts", "../../standardized-audio-context/src/helpers/create-nested-arrays.ts", "../../standardized-audio-context/src/helpers/get-audio-worklet-processor.ts", "../../standardized-audio-context/src/factories/audio-worklet-node-renderer-factory.ts", "../../standardized-audio-context/src/factories/base-audio-context-constructor.ts", "../../standardized-audio-context/src/factories/biquad-filter-node-constructor.ts", "../../standardized-audio-context/src/factories/biquad-filter-node-renderer-factory.ts", "../../standardized-audio-context/src/factories/cache-test-result.ts", "../../standardized-audio-context/src/factories/channel-merger-node-constructor.ts", "../../standardized-audio-context/src/factories/channel-merger-node-renderer-factory.ts", "../../standardized-audio-context/src/factories/channel-splitter-node-constructor.ts", "../../standardized-audio-context/src/factories/channel-splitter-node-renderer-factory.ts", "../../standardized-audio-context/src/factories/connect-audio-param.ts", "../../standardized-audio-context/src/factories/connect-multiple-outputs.ts", "../../standardized-audio-context/src/factories/connected-native-audio-buffer-source-node-factory.ts", "../../standardized-audio-context/src/factories/constant-source-node-constructor.ts", "../../standardized-audio-context/src/factories/constant-source-node-renderer-factory.ts", "../../standardized-audio-context/src/factories/convert-number-to-unsigned-long.ts", "../../standardized-audio-context/src/factories/convolver-node-constructor.ts", "../../standardized-audio-context/src/factories/convolver-node-renderer-factory.ts", "../../standardized-audio-context/src/factories/create-native-offline-audio-context.ts", "../../standardized-audio-context/src/factories/data-clone-error.ts", "../../standardized-audio-context/src/helpers/detach-array-buffer.ts", "../../standardized-audio-context/src/factories/decode-audio-data.ts", "../../standardized-audio-context/src/factories/decrement-cycle-counter.ts", "../../standardized-audio-context/src/factories/delay-node-constructor.ts", "../../standardized-audio-context/src/factories/delay-node-renderer-factory.ts", "../../standardized-audio-context/src/factories/delete-active-input-connection-to-audio-node.ts", "../../standardized-audio-context/src/factories/delete-unrendered-audio-worklet-node.ts", "../../standardized-audio-context/src/guards/delay-node.ts", "../../standardized-audio-context/src/factories/detect-cycles.ts", "../../standardized-audio-context/src/factories/disconnect-multiple-outputs.ts", "../../standardized-audio-context/src/factories/dynamics-compressor-node-constructor.ts", "../../standardized-audio-context/src/factories/dynamics-compressor-node-renderer-factory.ts", "../../standardized-audio-context/src/factories/encoding-error.ts", "../../standardized-audio-context/src/factories/evaluate-source.ts", "../../standardized-audio-context/src/factories/event-target-constructor.ts", "../../standardized-audio-context/src/factories/expose-current-frame-and-current-time.ts", "../../standardized-audio-context/src/factories/fetch-source.ts", "../../standardized-audio-context/src/factories/gain-node-constructor.ts", "../../standardized-audio-context/src/factories/gain-node-renderer-factory.ts", "../../standardized-audio-context/src/factories/get-active-audio-worklet-node-inputs.ts", "../../standardized-audio-context/src/factories/get-audio-node-renderer.ts", "../../standardized-audio-context/src/factories/get-audio-node-tail-time.ts", "../../standardized-audio-context/src/factories/get-audio-param-renderer.ts", "../../standardized-audio-context/src/factories/get-backup-offline-audio-context.ts", "../../standardized-audio-context/src/factories/invalid-state-error.ts", "../../standardized-audio-context/src/factories/get-native-context.ts", "../../standardized-audio-context/src/factories/get-or-create-backup-offline-audio-context.ts", "../../standardized-audio-context/src/factories/get-unrendered-audio-worklet-nodes.ts", "../../standardized-audio-context/src/factories/invalid-access-error.ts", "../../standardized-audio-context/src/helpers/wrap-iir-filter-node-get-frequency-response-method.ts", "../../standardized-audio-context/src/factories/iir-filter-node-constructor.ts", "../../standardized-audio-context/src/helpers/filter-buffer.ts", "../../standardized-audio-context/src/factories/iir-filter-node-renderer-factory.ts", "../../standardized-audio-context/src/factories/increment-cycle-counter-factory.ts", "../../standardized-audio-context/src/factories/is-any-audio-context.ts", "../../standardized-audio-context/src/factories/is-any-audio-node.ts", "../../standardized-audio-context/src/factories/is-any-audio-param.ts", "../../standardized-audio-context/src/factories/is-any-offline-audio-context.ts", "../../standardized-audio-context/src/factories/is-native-audio-context.ts", "../../standardized-audio-context/src/factories/is-native-audio-node.ts", "../../standardized-audio-context/src/factories/is-native-audio-param.ts", "../../standardized-audio-context/src/factories/is-native-context.ts", "../../standardized-audio-context/src/factories/is-native-offline-audio-context.ts", "../../standardized-audio-context/src/factories/is-secure-context.ts", "../../standardized-audio-context/src/factories/is-supported-promise.ts", "../../standardized-audio-context/src/factories/media-element-audio-source-node-constructor.ts", "../../standardized-audio-context/src/factories/media-stream-audio-destination-node-constructor.ts", "../../standardized-audio-context/src/factories/media-stream-audio-source-node-constructor.ts", "../../standardized-audio-context/src/factories/media-stream-track-audio-source-node-constructor.ts", "../../standardized-audio-context/src/factories/minimal-audio-context-constructor.ts", "../../standardized-audio-context/src/factories/minimal-base-audio-context-constructor.ts", "../../standardized-audio-context/src/helpers/test-promise-support.ts", "../../standardized-audio-context/src/factories/minimal-offline-audio-context-constructor.ts", "../../standardized-audio-context/src/factories/monitor-connections.ts", "../../standardized-audio-context/src/helpers/assign-native-audio-node-option.ts", "../../standardized-audio-context/src/helpers/assign-native-audio-node-options.ts", "../../standardized-audio-context/src/helpers/test-analyser-node-get-float-time-domain-data-method-support.ts", "../../standardized-audio-context/src/helpers/wrap-analyser-node-get-float-time-domain-data-method.ts", "../../standardized-audio-context/src/factories/native-analyser-node-factory.ts", "../../standardized-audio-context/src/factories/native-audio-buffer-constructor.ts", "../../standardized-audio-context/src/helpers/assign-native-audio-node-audio-param-value.ts", "../../standardized-audio-context/src/helpers/wrap-audio-buffer-source-node-start-method-consecutive-calls.ts", "../../standardized-audio-context/src/helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters.ts", "../../standardized-audio-context/src/helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters.ts", "../../standardized-audio-context/src/factories/native-audio-buffer-source-node-factory.ts", "../../standardized-audio-context/src/factories/native-audio-context-constructor.ts", "../../standardized-audio-context/src/factories/native-audio-destination-node.ts", "../../standardized-audio-context/src/factories/native-audio-worklet-node-constructor.ts", "../../standardized-audio-context/src/helpers/test-clonability-of-audio-worklet-node-options.ts", "../../standardized-audio-context/src/factories/native-audio-worklet-node-factory.ts", "../../standardized-audio-context/src/helpers/compute-buffer-size.ts", "../../standardized-audio-context/src/helpers/clone-audio-worklet-node-options.ts", "../../standardized-audio-context/src/helpers/create-audio-worklet-processor-promise.ts", "../../standardized-audio-context/src/helpers/create-audio-worklet-processor.ts", "../../standardized-audio-context/src/factories/native-audio-worklet-node-faker-factory.ts", "../../standardized-audio-context/src/factories/native-biquad-filter-node.ts", "../../standardized-audio-context/src/factories/native-channel-merger-node-factory.ts", "../../standardized-audio-context/src/helpers/wrap-channel-splitter-node.ts", "../../standardized-audio-context/src/factories/native-channel-splitter-node.ts", "../../standardized-audio-context/src/factories/native-constant-source-node-factory.ts", "../../standardized-audio-context/src/helpers/intercept-connections.ts", "../../standardized-audio-context/src/factories/native-constant-source-node-faker-factory.ts", "../../standardized-audio-context/src/factories/native-convolver-node-factory.ts", "../../standardized-audio-context/src/factories/native-delay-node.ts", "../../standardized-audio-context/src/factories/native-dynamics-compressor-node-factory.ts", "../../standardized-audio-context/src/factories/native-gain-node.ts", "../../standardized-audio-context/src/factories/native-iir-filter-node-factory.ts", "../../standardized-audio-context/src/factories/native-iir-filter-node-faker-factory.ts", "../../standardized-audio-context/src/factories/native-media-element-audio-source-node.ts", "../../standardized-audio-context/src/factories/native-media-stream-audio-destination-node.ts", "../../standardized-audio-context/src/factories/native-media-stream-audio-source-node.ts", "../../standardized-audio-context/src/factories/native-media-stream-track-audio-source-node-factory.ts", "../../standardized-audio-context/src/factories/native-offline-audio-context-constructor.ts", "../../standardized-audio-context/src/factories/native-oscillator-node-factory.ts", "../../standardized-audio-context/src/factories/native-panner-node-factory.ts", "../../standardized-audio-context/src/factories/native-panner-node-faker-factory.ts", "../../standardized-audio-context/src/factories/native-periodic-wave-factory.ts", "../../standardized-audio-context/src/factories/native-script-processor-node.ts", "../../standardized-audio-context/src/factories/native-stereo-panner-node-factory.ts", "../../standardized-audio-context/src/factories/native-stereo-panner-node-faker-factory.ts", "../../standardized-audio-context/src/factories/native-wave-shaper-node-factory.ts", "../../standardized-audio-context/src/factories/native-wave-shaper-node-faker-factory.ts", "../../standardized-audio-context/src/factories/not-supported-error.ts", "../../standardized-audio-context/src/factories/offline-audio-context-constructor.ts", "../../standardized-audio-context/src/factories/oscillator-node-constructor.ts", "../../standardized-audio-context/src/factories/oscillator-node-renderer-factory.ts", "../../standardized-audio-context/src/factories/panner-node-constructor.ts", "../../standardized-audio-context/src/factories/panner-node-renderer-factory.ts", "../../standardized-audio-context/src/factories/periodic-wave-constructor.ts", "../../standardized-audio-context/src/factories/render-automation.ts", "../../standardized-audio-context/src/factories/render-inputs-of-audio-node.ts", "../../standardized-audio-context/src/factories/render-inputs-of-audio-param.ts", "../../standardized-audio-context/src/factories/render-native-offline-audio-context.ts", "../../standardized-audio-context/src/factories/set-active-audio-worklet-node-inputs.ts", "../../standardized-audio-context/src/factories/set-audio-node-tail-time.ts", "../../standardized-audio-context/src/factories/start-rendering.ts", "../../standardized-audio-context/src/factories/stereo-panner-node-constructor.ts", "../../standardized-audio-context/src/factories/stereo-panner-node-renderer-factory.ts", "../../standardized-audio-context/src/factories/test-audio-buffer-constructor-support.ts", "../../standardized-audio-context/src/factories/test-audio-buffer-copy-channel-methods-subarray-support.ts", "../../standardized-audio-context/src/factories/test-audio-context-close-method-support.ts", "../../standardized-audio-context/src/factories/test-audio-context-decode-audio-data-method-type-error-support.ts", "../../standardized-audio-context/src/factories/test-audio-context-options-support.ts", "../../standardized-audio-context/src/factories/test-audio-node-connect-method-support.ts", "../../standardized-audio-context/src/factories/test-audio-worklet-processor-no-outputs-support.ts", "../../standardized-audio-context/src/factories/test-audio-worklet-processor-post-message-support.ts", "../../standardized-audio-context/src/factories/test-channel-merger-node-channel-count-support.ts", "../../standardized-audio-context/src/factories/test-constant-source-node-accurate-scheduling-support.ts", "../../standardized-audio-context/src/factories/test-convolver-node-buffer-reassignability-support.ts", "../../standardized-audio-context/src/factories/test-convolver-node-channel-count-support.ts", "../../standardized-audio-context/src/factories/test-is-secure-context-support.ts", "../../standardized-audio-context/src/factories/test-media-stream-audio-source-node-media-stream-without-audio-track-support.ts", "../../standardized-audio-context/src/factories/test-offline-audio-context-current-time-support.ts", "../../standardized-audio-context/src/factories/test-stereo-panner-node-default-value-support.ts", "../../standardized-audio-context/src/factories/unknown-error.ts", "../../standardized-audio-context/src/factories/wave-shaper-node-constructor.ts", "../../standardized-audio-context/src/factories/wave-shaper-node-renderer-factory.ts", "../../standardized-audio-context/src/factories/window.ts", "../../standardized-audio-context/src/factories/wrap-audio-buffer-copy-channel-methods.ts", "../../standardized-audio-context/src/factories/wrap-audio-buffer-copy-channel-methods-out-of-bounds.ts", "../../standardized-audio-context/src/factories/wrap-audio-buffer-source-node-stop-method-nullified-buffer.ts", "../../standardized-audio-context/src/factories/wrap-channel-merger-node.ts", "../../standardized-audio-context/src/helpers/get-first-sample.ts", "../../standardized-audio-context/src/helpers/is-dc-curve.ts", "../../standardized-audio-context/src/helpers/overwrite-accessors.ts", "../../standardized-audio-context/src/helpers/sanitize-audio-worklet-node-options.ts", "../../standardized-audio-context/src/helpers/sanitize-channel-splitter-options.ts", "../../standardized-audio-context/src/helpers/sanitize-periodic-wave-options.ts", "../../standardized-audio-context/src/helpers/set-value-at-time-until-possible.ts", "../../standardized-audio-context/src/helpers/test-audio-buffer-source-node-start-method-consecutive-calls-support.ts", "../../standardized-audio-context/src/helpers/test-audio-buffer-source-node-start-method-offset-clamping-support.ts", "../../standardized-audio-context/src/helpers/test-audio-buffer-source-node-stop-method-nullified-buffer-support.ts", "../../standardized-audio-context/src/helpers/test-audio-scheduled-source-node-start-method-negative-parameters-support.ts", "../../standardized-audio-context/src/helpers/test-audio-scheduled-source-node-stop-method-consecutive-calls-support.ts", "../../standardized-audio-context/src/helpers/test-audio-scheduled-source-node-stop-method-negative-parameters-support.ts", "../../standardized-audio-context/src/helpers/test-audio-worklet-node-options-clonability.ts", "../../standardized-audio-context/src/helpers/test-dom-exception-constructor-support.ts", "../../standardized-audio-context/src/helpers/test-transferables-support.ts", "../../standardized-audio-context/src/helpers/wrap-audio-buffer-source-node-start-method-offset-clamping.ts", "../../standardized-audio-context/src/helpers/wrap-audio-scheduled-source-node-stop-method-consecutive-calls.ts", "../../standardized-audio-context/src/helpers/wrap-event-listener.ts", "../../standardized-audio-context/src/module.ts", "../../tone/Tone/core/util/AdvancedTypeCheck.ts", "../../tone/Tone/core/util/TypeCheck.ts", "../../tone/Tone/core/util/Defaults.ts", "../../tone/Tone/version.ts", "../../tone/Tone/core/util/Debug.ts", "../../tone/Tone/core/context/AudioContext.ts", "../../tone/Tone/core/Tone.ts", "../../tone/Tone/core/util/Math.ts", "../../tone/Tone/core/util/Timeline.ts", "../../tslib/tslib.es6.mjs", "../../tone/Tone/core/clock/Ticker.ts", "../../tone/Tone/core/context/ContextInitialization.ts", "../../tone/Tone/core/util/Emitter.ts", "../../tone/Tone/core/context/BaseContext.ts", "../../tone/Tone/core/context/Context.ts", "../../tone/Tone/core/context/DummyContext.ts", "../../tone/Tone/core/util/Interface.ts", "../../tone/Tone/core/context/ToneAudioBuffer.ts", "../../tone/Tone/core/context/OfflineContext.ts", "../../tone/Tone/core/Global.ts", "../../tone/Tone/core/type/TimeBase.ts", "../../tone/Tone/core/type/Time.ts", "../../tone/Tone/core/type/Frequency.ts", "../../tone/Tone/core/type/TransportTime.ts", "../../tone/Tone/core/context/ToneWithContext.ts", "../../tone/Tone/core/context/Param.ts", "../../tone/Tone/core/context/ToneAudioNode.ts", "../../tone/Tone/core/context/Gain.ts", "../../tone/Tone/component/channel/Volume.ts", "../../tone/Tone/instrument/Instrument.ts"],
  "sourcesContent": ["import { Decibels, GainFactor, Hertz, Interval, MidiNote, NormalRange } from \"./Units\";\n\n/**\n * Equal power gain scale. Good for cross-fading.\n * @param  percent (0-1)\n */\nexport function equalPowerScale(percent: NormalRange): number {\n\tconst piFactor = 0.5 * Math.PI;\n\treturn Math.sin(percent * piFactor);\n}\n\n/**\n * Convert decibels into gain.\n */\nexport function dbToGain(db: Decibels): GainFactor {\n\treturn Math.pow(10, db / 20);\n}\n\n/**\n * Convert gain to decibels.\n */\nexport function gainToDb(gain: GainFactor): Decibels {\n\treturn 20 * (Math.log(gain) / Math.LN10);\n}\n\n/**\n * Convert an interval (in semitones) to a frequency ratio.\n * @param interval the number of semitones above the base note\n * @example\n * Tone.intervalToFrequencyRatio(0); // 1\n * Tone.intervalToFrequencyRatio(12); // 2\n * Tone.intervalToFrequencyRatio(-12); // 0.5\n */\nexport function intervalToFrequencyRatio(interval: Interval): number {\n\treturn Math.pow(2, (interval / 12));\n}\n\n/**\n * The Global [concert tuning pitch](https://en.wikipedia.org/wiki/Concert_pitch) which is used\n * to generate all the other pitch values from notes. A4's values in Hertz.\n */\nlet A4: Hertz = 440;\n\nexport function getA4(): Hertz {\n\treturn A4;\n}\n\nexport function setA4(freq: Hertz): void {\n\tA4 = freq;\n}\n\n/**\n * Convert a frequency value to a MIDI note.\n * @param frequency The value to frequency value to convert.\n * @example\n * Tone.ftom(440); // returns 69\n */\nexport function ftom(frequency: Hertz): MidiNote {\n\treturn Math.round(ftomf(frequency)) as MidiNote;\n}\n\n/**\n * Convert a frequency to a floating point midi value\n */\nexport function ftomf(frequency: Hertz): number {\n\treturn 69 + 12 * Math.log2(frequency / A4);\n}\n\n/**\n * Convert a MIDI note to frequency value.\n * @param  midi The midi number to convert.\n * @return The corresponding frequency value\n * @example\n * Tone.mtof(69); // 440\n */\nexport function mtof(midi: MidiNote): Hertz {\n\treturn A4 * Math.pow(2, (midi - 69) / 12);\n}\n", "import { IExtendedExponentialRampToValueAutomationEvent } from '../interfaces';\n\nexport const createExtendedExponentialRampToValueAutomationEvent = (\n    value: number,\n    endTime: number,\n    insertTime: number\n): IExtendedExponentialRampToValueAutomationEvent => {\n    return { endTime, insertTime, type: 'exponentialRampToValue', value };\n};\n", "import { IExtendedLinearRampToValueAutomationEvent } from '../interfaces';\n\nexport const createExtendedLinearRampToValueAutomationEvent = (\n    value: number,\n    endTime: number,\n    insertTime: number\n): IExtendedLinearRampToValueAutomationEvent => {\n    return { endTime, insertTime, type: 'linearRampToValue', value };\n};\n", "import { ISetValueAutomationEvent } from '../interfaces';\n\nexport const createSetValueAutomationEvent = (value: number, startTime: number): ISetValueAutomationEvent => {\n    return { startTime, type: 'setValue', value };\n};\n", "import { ISetValueCurveAutomationEvent } from '../interfaces';\n\nexport const createSetValueCurveAutomationEvent = (\n    values: Float32Array,\n    startTime: number,\n    duration: number\n): ISetValueCurveAutomationEvent => {\n    return { duration, startTime, type: 'setValueCurve', values };\n};\n", "import { ISetTargetAutomationEvent } from '../interfaces';\n\nexport const getTargetValueAtTime = (\n    time: number,\n    valueAtStartTime: number,\n    { startTime, target, timeConstant }: ISetTargetAutomationEvent\n): number => {\n    return target + (valueAtStartTime - target) * Math.exp((startTime - time) / timeConstant);\n};\n", "import { IExponentialRampToValueAutomationEvent } from '../interfaces';\nimport { TAutomationEvent } from '../types';\n\nexport const isExponentialRampToValueAutomationEvent = (\n    automationEvent: TAutomationEvent\n): automationEvent is IExponentialRampToValueAutomationEvent => {\n    return automationEvent.type === 'exponentialRampToValue';\n};\n", "import { ILinearRampToValueAutomationEvent } from '../interfaces';\nimport { TAutomationEvent } from '../types';\n\nexport const isLinearRampToValueAutomationEvent = (\n    automationEvent: TAutomationEvent\n): automationEvent is ILinearRampToValueAutomationEvent => {\n    return automationEvent.type === 'linearRampToValue';\n};\n", "import { IExponentialRampToValueAutomationEvent, ILinearRampToValueAutomationEvent } from '../interfaces';\nimport { TAutomationEvent } from '../types';\nimport { isExponentialRampToValueAutomationEvent } from './exponential-ramp-to-value-automation-event';\nimport { isLinearRampToValueAutomationEvent } from './linear-ramp-to-value-automation-event';\n\nexport const isAnyRampToValueAutomationEvent = (\n    automationEvent: TAutomationEvent\n): automationEvent is IExponentialRampToValueAutomationEvent | ILinearRampToValueAutomationEvent => {\n    return isExponentialRampToValueAutomationEvent(automationEvent) || isLinearRampToValueAutomationEvent(automationEvent);\n};\n", "import { ISetValueAutomationEvent } from '../interfaces';\nimport { TAutomationEvent } from '../types';\n\nexport const isSetValueAutomationEvent = (automationEvent: TAutomationEvent): automationEvent is ISetValueAutomationEvent => {\n    return automationEvent.type === 'setValue';\n};\n", "import { ISetValueCurveAutomationEvent } from '../interfaces';\nimport { TAutomationEvent } from '../types';\n\nexport const isSetValueCurveAutomationEvent = (automationEvent: TAutomationEvent): automationEvent is ISetValueCurveAutomationEvent => {\n    return automationEvent.type === 'setValueCurve';\n};\n", "import { getTargetValueAtTime } from '../functions/get-target-value-at-time';\nimport { isAnyRampToValueAutomationEvent } from '../guards/any-ramp-to-value-automation-event';\nimport { isSetValueAutomationEvent } from '../guards/set-value-automation-event';\nimport { isSetValueCurveAutomationEvent } from '../guards/set-value-curve-automation-event';\nimport { TPersistentAutomationEvent } from '../types';\n\nexport const getValueOfAutomationEventAtIndexAtTime = (\n    automationEvents: TPersistentAutomationEvent[],\n    index: number,\n    time: number,\n    defaultValue: number\n): number => {\n    const automationEvent = automationEvents[index];\n\n    return automationEvent === undefined\n        ? defaultValue\n        : isAnyRampToValueAutomationEvent(automationEvent) || isSetValueAutomationEvent(automationEvent)\n        ? automationEvent.value\n        : isSetValueCurveAutomationEvent(automationEvent)\n        ? automationEvent.values[automationEvent.values.length - 1]\n        : getTargetValueAtTime(\n              time,\n              getValueOfAutomationEventAtIndexAtTime(automationEvents, index - 1, automationEvent.startTime, defaultValue),\n              automationEvent\n          );\n};\n", "import { getValueOfAutomationEventAtIndexAtTime } from '../functions/get-value-of-automation-event-at-index-at-time';\nimport { isAnyRampToValueAutomationEvent } from '../guards/any-ramp-to-value-automation-event';\nimport { isSetValueAutomationEvent } from '../guards/set-value-automation-event';\nimport { isSetValueCurveAutomationEvent } from '../guards/set-value-curve-automation-event';\nimport { IExtendedExponentialRampToValueAutomationEvent, IExtendedLinearRampToValueAutomationEvent } from '../interfaces';\nimport { TPersistentAutomationEvent } from '../types';\n\nexport const getEndTimeAndValueOfPreviousAutomationEvent = (\n    automationEvents: TPersistentAutomationEvent[],\n    index: number,\n    currentAutomationEvent: TPersistentAutomationEvent,\n    nextAutomationEvent: IExtendedExponentialRampToValueAutomationEvent | IExtendedLinearRampToValueAutomationEvent,\n    defaultValue: number\n): [number, number] => {\n    return currentAutomationEvent === undefined\n        ? [nextAutomationEvent.insertTime, defaultValue]\n        : isAnyRampToValueAutomationEvent(currentAutomationEvent)\n        ? [currentAutomationEvent.endTime, currentAutomationEvent.value]\n        : isSetValueAutomationEvent(currentAutomationEvent)\n        ? [currentAutomationEvent.startTime, currentAutomationEvent.value]\n        : isSetValueCurveAutomationEvent(currentAutomationEvent)\n        ? [\n              currentAutomationEvent.startTime + currentAutomationEvent.duration,\n              currentAutomationEvent.values[currentAutomationEvent.values.length - 1]\n          ]\n        : [\n              currentAutomationEvent.startTime,\n              getValueOfAutomationEventAtIndexAtTime(automationEvents, index - 1, currentAutomationEvent.startTime, defaultValue)\n          ];\n};\n", "import { ICancelAndHoldAutomationEvent } from '../interfaces';\nimport { TAutomationEvent } from '../types';\n\nexport const isCancelAndHoldAutomationEvent = (automationEvent: TAutomationEvent): automationEvent is ICancelAndHoldAutomationEvent => {\n    return automationEvent.type === 'cancelAndHold';\n};\n", "import { ICancelScheduledValuesAutomationEvent } from '../interfaces';\nimport { TAutomationEvent } from '../types';\n\nexport const isCancelScheduledValuesAutomationEvent = (\n    automationEvent: TAutomationEvent\n): automationEvent is ICancelScheduledValuesAutomationEvent => {\n    return automationEvent.type === 'cancelScheduledValues';\n};\n", "import { isCancelAndHoldAutomationEvent } from '../guards/cancel-and-hold-automation-event';\nimport { isCancelScheduledValuesAutomationEvent } from '../guards/cancel-scheduled-values-automation-event';\nimport { isExponentialRampToValueAutomationEvent } from '../guards/exponential-ramp-to-value-automation-event';\nimport { isLinearRampToValueAutomationEvent } from '../guards/linear-ramp-to-value-automation-event';\nimport { TAutomationEvent } from '../types';\n\nexport const getEventTime = (automationEvent: TAutomationEvent): number => {\n    if (isCancelAndHoldAutomationEvent(automationEvent) || isCancelScheduledValuesAutomationEvent(automationEvent)) {\n        return automationEvent.cancelTime;\n    }\n\n    if (isExponentialRampToValueAutomationEvent(automationEvent) || isLinearRampToValueAutomationEvent(automationEvent)) {\n        return automationEvent.endTime;\n    }\n\n    return automationEvent.startTime;\n};\n", "import { IExponentialRampToValueAutomationEvent } from '../interfaces';\n\nexport const getExponentialRampValueAtTime = (\n    time: number,\n    startTime: number,\n    valueAtStartTime: number,\n    { endTime, value }: IExponentialRampToValueAutomationEvent\n) => {\n    if (valueAtStartTime === value) {\n        return value;\n    }\n\n    if ((0 < valueAtStartTime && 0 < value) || (valueAtStartTime < 0 && value < 0)) {\n        return valueAtStartTime * (value / valueAtStartTime) ** ((time - startTime) / (endTime - startTime));\n    }\n\n    return 0;\n};\n", "import { ILinearRampToValueAutomationEvent } from '../interfaces';\n\nexport const getLinearRampValueAtTime = (\n    time: number,\n    startTime: number,\n    valueAtStartTime: number,\n    { endTime, value }: ILinearRampToValueAutomationEvent\n) => {\n    return valueAtStartTime + ((time - startTime) / (endTime - startTime)) * (value - valueAtStartTime);\n};\n", "export const interpolateValue = (values: Float32Array, theoreticIndex: number) => {\n    const lowerIndex = Math.floor(theoreticIndex);\n    const upperIndex = Math.ceil(theoreticIndex);\n\n    if (lowerIndex === upperIndex) {\n        return values[lowerIndex];\n    }\n\n    return (1 - (theoreticIndex - lowerIndex)) * values[lowerIndex] + (1 - (upperIndex - theoreticIndex)) * values[upperIndex];\n};\n", "import { ISetValueCurveAutomationEvent } from '../interfaces';\nimport { interpolateValue } from './interpolate-value';\n\nexport const getValueCurveValueAtTime = (time: number, { duration, startTime, values }: ISetValueCurveAutomationEvent): number => {\n    const theoreticIndex = ((time - startTime) / duration) * (values.length - 1);\n\n    return interpolateValue(values, theoreticIndex);\n};\n", "import { ISetTargetAutomationEvent } from '../interfaces';\nimport { TAutomationEvent } from '../types';\n\nexport const isSetTargetAutomationEvent = (automationEvent: TAutomationEvent): automationEvent is ISetTargetAutomationEvent => {\n    return automationEvent.type === 'setTarget';\n};\n", "import { createExtendedExponentialRampToValueAutomationEvent } from '../functions/create-extended-exponential-ramp-to-value-automation-event';\nimport { createExtendedLinearRampToValueAutomationEvent } from '../functions/create-extended-linear-ramp-to-value-automation-event';\nimport { createSetValueAutomationEvent } from '../functions/create-set-value-automation-event';\nimport { createSetValueCurveAutomationEvent } from '../functions/create-set-value-curve-automation-event';\nimport { getEndTimeAndValueOfPreviousAutomationEvent } from '../functions/get-end-time-and-value-of-previous-automation-event';\nimport { getEventTime } from '../functions/get-event-time';\nimport { getExponentialRampValueAtTime } from '../functions/get-exponential-ramp-value-at-time';\nimport { getLinearRampValueAtTime } from '../functions/get-linear-ramp-value-at-time';\nimport { getTargetValueAtTime } from '../functions/get-target-value-at-time';\nimport { getValueCurveValueAtTime } from '../functions/get-value-curve-value-at-time';\nimport { getValueOfAutomationEventAtIndexAtTime } from '../functions/get-value-of-automation-event-at-index-at-time';\nimport { isAnyRampToValueAutomationEvent } from '../guards/any-ramp-to-value-automation-event';\nimport { isCancelAndHoldAutomationEvent } from '../guards/cancel-and-hold-automation-event';\nimport { isCancelScheduledValuesAutomationEvent } from '../guards/cancel-scheduled-values-automation-event';\nimport { isExponentialRampToValueAutomationEvent } from '../guards/exponential-ramp-to-value-automation-event';\nimport { isLinearRampToValueAutomationEvent } from '../guards/linear-ramp-to-value-automation-event';\nimport { isSetTargetAutomationEvent } from '../guards/set-target-automation-event';\nimport { isSetValueAutomationEvent } from '../guards/set-value-automation-event';\nimport { isSetValueCurveAutomationEvent } from '../guards/set-value-curve-automation-event';\nimport { TAutomationEvent, TPersistentAutomationEvent } from '../types';\n\nexport class AutomationEventList {\n    private _automationEvents: TPersistentAutomationEvent[];\n\n    private _currenTime: number;\n\n    private _defaultValue: number;\n\n    constructor(defaultValue: number) {\n        this._automationEvents = [];\n        this._currenTime = 0;\n        this._defaultValue = defaultValue;\n    }\n\n    public [Symbol.iterator](): Iterator<TPersistentAutomationEvent> {\n        return this._automationEvents[Symbol.iterator]();\n    }\n\n    public add(automationEvent: TAutomationEvent): boolean {\n        const eventTime = getEventTime(automationEvent);\n\n        if (isCancelAndHoldAutomationEvent(automationEvent) || isCancelScheduledValuesAutomationEvent(automationEvent)) {\n            const index = this._automationEvents.findIndex((currentAutomationEvent) => {\n                if (isCancelScheduledValuesAutomationEvent(automationEvent) && isSetValueCurveAutomationEvent(currentAutomationEvent)) {\n                    return currentAutomationEvent.startTime + currentAutomationEvent.duration >= eventTime;\n                }\n\n                return getEventTime(currentAutomationEvent) >= eventTime;\n            });\n            const removedAutomationEvent = this._automationEvents[index];\n\n            if (index !== -1) {\n                this._automationEvents = this._automationEvents.slice(0, index);\n            }\n\n            if (isCancelAndHoldAutomationEvent(automationEvent)) {\n                const lastAutomationEvent = this._automationEvents[this._automationEvents.length - 1];\n\n                if (removedAutomationEvent !== undefined && isAnyRampToValueAutomationEvent(removedAutomationEvent)) {\n                    if (lastAutomationEvent !== undefined && isSetTargetAutomationEvent(lastAutomationEvent)) {\n                        throw new Error('The internal list is malformed.');\n                    }\n\n                    const startTime =\n                        lastAutomationEvent === undefined\n                            ? removedAutomationEvent.insertTime\n                            : isSetValueCurveAutomationEvent(lastAutomationEvent)\n                            ? lastAutomationEvent.startTime + lastAutomationEvent.duration\n                            : getEventTime(lastAutomationEvent);\n                    const startValue =\n                        lastAutomationEvent === undefined\n                            ? this._defaultValue\n                            : isSetValueCurveAutomationEvent(lastAutomationEvent)\n                            ? lastAutomationEvent.values[lastAutomationEvent.values.length - 1]\n                            : lastAutomationEvent.value;\n                    const value = isExponentialRampToValueAutomationEvent(removedAutomationEvent)\n                        ? getExponentialRampValueAtTime(eventTime, startTime, startValue, removedAutomationEvent)\n                        : getLinearRampValueAtTime(eventTime, startTime, startValue, removedAutomationEvent);\n                    const truncatedAutomationEvent = isExponentialRampToValueAutomationEvent(removedAutomationEvent)\n                        ? createExtendedExponentialRampToValueAutomationEvent(value, eventTime, this._currenTime)\n                        : createExtendedLinearRampToValueAutomationEvent(value, eventTime, this._currenTime);\n\n                    this._automationEvents.push(truncatedAutomationEvent);\n                }\n\n                if (lastAutomationEvent !== undefined && isSetTargetAutomationEvent(lastAutomationEvent)) {\n                    this._automationEvents.push(createSetValueAutomationEvent(this.getValue(eventTime), eventTime));\n                }\n\n                if (\n                    lastAutomationEvent !== undefined &&\n                    isSetValueCurveAutomationEvent(lastAutomationEvent) &&\n                    lastAutomationEvent.startTime + lastAutomationEvent.duration > eventTime\n                ) {\n                    const duration = eventTime - lastAutomationEvent.startTime;\n                    const ratio = (lastAutomationEvent.values.length - 1) / lastAutomationEvent.duration;\n                    const length = Math.max(2, 1 + Math.ceil(duration * ratio));\n                    const fraction = (duration / (length - 1)) * ratio;\n                    const values = lastAutomationEvent.values.slice(0, length);\n\n                    if (fraction < 1) {\n                        for (let i = 1; i < length; i += 1) {\n                            const factor = (fraction * i) % 1;\n\n                            values[i] = lastAutomationEvent.values[i - 1] * (1 - factor) + lastAutomationEvent.values[i] * factor;\n                        }\n                    }\n\n                    this._automationEvents[this._automationEvents.length - 1] = createSetValueCurveAutomationEvent(\n                        values,\n                        lastAutomationEvent.startTime,\n                        duration\n                    );\n                }\n            }\n        } else {\n            const index = this._automationEvents.findIndex((currentAutomationEvent) => getEventTime(currentAutomationEvent) > eventTime);\n\n            const previousAutomationEvent =\n                index === -1 ? this._automationEvents[this._automationEvents.length - 1] : this._automationEvents[index - 1];\n\n            if (\n                previousAutomationEvent !== undefined &&\n                isSetValueCurveAutomationEvent(previousAutomationEvent) &&\n                getEventTime(previousAutomationEvent) + previousAutomationEvent.duration > eventTime\n            ) {\n                return false;\n            }\n\n            const persistentAutomationEvent = isExponentialRampToValueAutomationEvent(automationEvent)\n                ? createExtendedExponentialRampToValueAutomationEvent(automationEvent.value, automationEvent.endTime, this._currenTime)\n                : isLinearRampToValueAutomationEvent(automationEvent)\n                ? createExtendedLinearRampToValueAutomationEvent(automationEvent.value, eventTime, this._currenTime)\n                : automationEvent;\n\n            if (index === -1) {\n                this._automationEvents.push(persistentAutomationEvent);\n            } else {\n                if (\n                    isSetValueCurveAutomationEvent(automationEvent) &&\n                    eventTime + automationEvent.duration > getEventTime(this._automationEvents[index])\n                ) {\n                    return false;\n                }\n\n                this._automationEvents.splice(index, 0, persistentAutomationEvent);\n            }\n        }\n\n        return true;\n    }\n\n    public flush(time: number): void {\n        const index = this._automationEvents.findIndex((currentAutomationEvent) => getEventTime(currentAutomationEvent) > time);\n\n        if (index > 1) {\n            const remainingAutomationEvents = this._automationEvents.slice(index - 1);\n            const firstRemainingAutomationEvent = remainingAutomationEvents[0];\n\n            if (isSetTargetAutomationEvent(firstRemainingAutomationEvent)) {\n                remainingAutomationEvents.unshift(\n                    createSetValueAutomationEvent(\n                        getValueOfAutomationEventAtIndexAtTime(\n                            this._automationEvents,\n                            index - 2,\n                            firstRemainingAutomationEvent.startTime,\n                            this._defaultValue\n                        ),\n                        firstRemainingAutomationEvent.startTime\n                    )\n                );\n            }\n\n            this._automationEvents = remainingAutomationEvents;\n        }\n    }\n\n    public getValue(time: number): number {\n        if (this._automationEvents.length === 0) {\n            return this._defaultValue;\n        }\n\n        const indexOfNextEvent = this._automationEvents.findIndex((automationEvent) => getEventTime(automationEvent) > time);\n        const nextAutomationEvent = this._automationEvents[indexOfNextEvent];\n        const indexOfCurrentEvent = (indexOfNextEvent === -1 ? this._automationEvents.length : indexOfNextEvent) - 1;\n        const currentAutomationEvent = this._automationEvents[indexOfCurrentEvent];\n\n        if (\n            currentAutomationEvent !== undefined &&\n            isSetTargetAutomationEvent(currentAutomationEvent) &&\n            (nextAutomationEvent === undefined ||\n                !isAnyRampToValueAutomationEvent(nextAutomationEvent) ||\n                nextAutomationEvent.insertTime > time)\n        ) {\n            return getTargetValueAtTime(\n                time,\n                getValueOfAutomationEventAtIndexAtTime(\n                    this._automationEvents,\n                    indexOfCurrentEvent - 1,\n                    currentAutomationEvent.startTime,\n                    this._defaultValue\n                ),\n                currentAutomationEvent\n            );\n        }\n\n        if (\n            currentAutomationEvent !== undefined &&\n            isSetValueAutomationEvent(currentAutomationEvent) &&\n            (nextAutomationEvent === undefined || !isAnyRampToValueAutomationEvent(nextAutomationEvent))\n        ) {\n            return currentAutomationEvent.value;\n        }\n\n        if (\n            currentAutomationEvent !== undefined &&\n            isSetValueCurveAutomationEvent(currentAutomationEvent) &&\n            (nextAutomationEvent === undefined ||\n                !isAnyRampToValueAutomationEvent(nextAutomationEvent) ||\n                currentAutomationEvent.startTime + currentAutomationEvent.duration > time)\n        ) {\n            if (time < currentAutomationEvent.startTime + currentAutomationEvent.duration) {\n                return getValueCurveValueAtTime(time, currentAutomationEvent);\n            }\n\n            return currentAutomationEvent.values[currentAutomationEvent.values.length - 1];\n        }\n\n        if (\n            currentAutomationEvent !== undefined &&\n            isAnyRampToValueAutomationEvent(currentAutomationEvent) &&\n            (nextAutomationEvent === undefined || !isAnyRampToValueAutomationEvent(nextAutomationEvent))\n        ) {\n            return currentAutomationEvent.value;\n        }\n\n        if (nextAutomationEvent !== undefined && isExponentialRampToValueAutomationEvent(nextAutomationEvent)) {\n            const [startTime, value] = getEndTimeAndValueOfPreviousAutomationEvent(\n                this._automationEvents,\n                indexOfCurrentEvent,\n                currentAutomationEvent,\n                nextAutomationEvent,\n                this._defaultValue\n            );\n\n            return getExponentialRampValueAtTime(time, startTime, value, nextAutomationEvent);\n        }\n\n        if (nextAutomationEvent !== undefined && isLinearRampToValueAutomationEvent(nextAutomationEvent)) {\n            const [startTime, value] = getEndTimeAndValueOfPreviousAutomationEvent(\n                this._automationEvents,\n                indexOfCurrentEvent,\n                currentAutomationEvent,\n                nextAutomationEvent,\n                this._defaultValue\n            );\n\n            return getLinearRampValueAtTime(time, startTime, value, nextAutomationEvent);\n        }\n\n        return this._defaultValue;\n    }\n}\n", "import { ICancelAndHoldAutomationEvent } from '../interfaces';\n\nexport const createCancelAndHoldAutomationEvent = (cancelTime: number): ICancelAndHoldAutomationEvent => {\n    return { cancelTime, type: 'cancelAndHold' };\n};\n", "import { ICancelScheduledValuesAutomationEvent } from '../interfaces';\n\nexport const createCancelScheduledValuesAutomationEvent = (cancelTime: number): ICancelScheduledValuesAutomationEvent => {\n    return { cancelTime, type: 'cancelScheduledValues' };\n};\n", "import { IExponentialRampToValueAutomationEvent } from '../interfaces';\n\nexport const createExponentialRampToValueAutomationEvent = (value: number, endTime: number): IExponentialRampToValueAutomationEvent => {\n    return { endTime, type: 'exponentialRampToValue', value };\n};\n", "import { ILinearRampToValueAutomationEvent } from '../interfaces';\n\nexport const createLinearRampToValueAutomationEvent = (value: number, endTime: number): ILinearRampToValueAutomationEvent => {\n    return { endTime, type: 'linearRampToValue', value };\n};\n", "import { ISetTargetAutomationEvent } from '../interfaces';\n\nexport const createSetTargetAutomationEvent = (target: number, startTime: number, timeConstant: number): ISetTargetAutomationEvent => {\n    return { startTime, target, timeConstant, type: 'setTarget' };\n};\n", "import { TAbortErrorFactory } from '../types';\n\nexport const createAbortError: TAbortErrorFactory = () => new DOMException('', 'AbortError');\n", "import { TAddActiveInputConnectionToAudioNodeFactory } from '../types/add-active-input-connection-to-audio-node-factory';\n\nexport const createAddActiveInputConnectionToAudioNode: TAddActiveInputConnectionToAudioNodeFactory = (insertElementInSet) => {\n    return (activeInputs, source, [output, input, eventListener], ignoreDuplicates) => {\n        insertElementInSet(\n            activeInputs[input],\n            [source, output, eventListener],\n            (activeInputConnection) => activeInputConnection[0] === source && activeInputConnection[1] === output,\n            ignoreDuplicates\n        );\n    };\n};\n", "import { IAudioNode, IAudioNodeRenderer, IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport { TActiveInputConnection, TAddAudioNodeConnectionsFactory, TContext, TNativeAudioNode } from '../types';\n\nexport const createAddAudioNodeConnections: TAddAudioNodeConnectionsFactory = (audioNodeConnectionsStore) => {\n    return <T extends TContext>(\n        audioNode: IAudioNode<T>,\n        audioNodeRenderer: T extends IMinimalOfflineAudioContext | IOfflineAudioContext ? IAudioNodeRenderer<T, IAudioNode<T>> : null,\n        nativeAudioNode: TNativeAudioNode\n    ) => {\n        const activeInputs = [];\n\n        for (let i = 0; i < nativeAudioNode.numberOfInputs; i += 1) {\n            activeInputs.push(new Set<TActiveInputConnection<T>>());\n        }\n\n        audioNodeConnectionsStore.set(audioNode, {\n            activeInputs,\n            outputs: new Set(),\n            passiveInputs: new WeakMap(),\n            renderer: audioNodeRenderer\n        });\n    };\n};\n", "import { IAudioParam, IAudioParamRenderer, IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport { TAddAudioParamConnectionsFactory, TContext } from '../types';\n\nexport const createAddAudioParamConnections: TAddAudioParamConnectionsFactory = (audioParamConnectionsStore) => {\n    return <T extends TContext>(\n        audioParam: IAudioParam,\n        audioParamRenderer: T extends IMinimalOfflineAudioContext | IOfflineAudioContext ? IAudioParamRenderer : null\n    ) => {\n        audioParamConnectionsStore.set(audioParam, { activeInputs: new Set(), passiveInputs: new WeakMap(), renderer: audioParamRenderer });\n    };\n};\n", "import { IAudioNode, IAudioWorkletProcessor, IAudioWorkletProcessorConstructor } from './interfaces';\nimport {\n    TAudioNodeConnectionsStore,\n    TAudioNodeStore,\n    TAudioParamConnectionsStore,\n    TAudioParamStore,\n    TContext,\n    TContextStore,\n    TCycleCounters,\n    TInternalStateEventListener,\n    TNativeAudioWorkletNode,\n    TNativeContext\n} from './types';\n\nexport const ACTIVE_AUDIO_NODE_STORE: WeakSet<IAudioNode<TContext>> = new WeakSet();\n\nexport const AUDIO_NODE_CONNECTIONS_STORE: TAudioNodeConnectionsStore = new WeakMap();\n\nexport const AUDIO_NODE_STORE: TAudioNodeStore = new WeakMap();\n\nexport const AUDIO_PARAM_CONNECTIONS_STORE: TAudioParamConnectionsStore = new WeakMap();\n\nexport const AUDIO_PARAM_STORE: TAudioParamStore = new WeakMap();\n\nexport const CONTEXT_STORE: TContextStore = new WeakMap();\n\nexport const EVENT_LISTENERS: WeakMap<IAudioNode<TContext>, Set<TInternalStateEventListener>> = new WeakMap();\n\nexport const CYCLE_COUNTERS: TCycleCounters = new WeakMap();\n\n// This clunky name is borrowed from the spec. :-)\nexport const NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS: WeakMap<\n    TNativeContext,\n    Map<string, IAudioWorkletProcessorConstructor>\n> = new WeakMap();\n\nexport const NODE_TO_PROCESSOR_MAPS: WeakMap<\n    TNativeContext,\n    WeakMap<TNativeAudioWorkletNode, Promise<IAudioWorkletProcessor>>\n> = new WeakMap();\n", "import { TConstructor } from '../types';\n\nconst handler = {\n    construct(): any {\n        return handler;\n    }\n};\n\nexport const isConstructible = (constructible: TConstructor): boolean => {\n    try {\n        const proxy = new Proxy(constructible, handler);\n\n        new proxy(); // tslint:disable-line:no-unused-expression\n    } catch {\n        return false;\n    }\n\n    return true;\n};\n", "/*\n * This massive regex tries to cover all the following cases.\n *\n * import './path';\n * import defaultImport from './path';\n * import { namedImport } from './path';\n * import { namedImport as renamendImport } from './path';\n * import * as namespaceImport from './path';\n * import defaultImport, { namedImport } from './path';\n * import defaultImport, { namedImport as renamendImport } from './path';\n * import defaultImport, * as namespaceImport from './path';\n */\nconst IMPORT_STATEMENT_REGEX = /^import(?:(?:[\\s]+[\\w]+|(?:[\\s]+[\\w]+[\\s]*,)?[\\s]*\\{[\\s]*[\\w]+(?:[\\s]+as[\\s]+[\\w]+)?(?:[\\s]*,[\\s]*[\\w]+(?:[\\s]+as[\\s]+[\\w]+)?)*[\\s]*}|(?:[\\s]+[\\w]+[\\s]*,)?[\\s]*\\*[\\s]+as[\\s]+[\\w]+)[\\s]+from)?(?:[\\s]*)(\"([^\"\\\\]|\\\\.)+\"|'([^'\\\\]|\\\\.)+')(?:[\\s]*);?/; // tslint:disable-line:max-line-length\n\nexport const splitImportStatements = (source: string, url: string): [string, string] => {\n    const importStatements = [];\n\n    let sourceWithoutImportStatements = source.replace(/^[\\s]+/, '');\n    let result = sourceWithoutImportStatements.match(IMPORT_STATEMENT_REGEX);\n\n    while (result !== null) {\n        const unresolvedUrl = result[1].slice(1, -1);\n\n        const importStatementWithResolvedUrl = result[0]\n            .replace(/([\\s]+)?;?$/, '')\n            .replace(unresolvedUrl, new URL(unresolvedUrl, url).toString());\n        importStatements.push(importStatementWithResolvedUrl);\n\n        sourceWithoutImportStatements = sourceWithoutImportStatements.slice(result[0].length).replace(/^[\\s]+/, '');\n        result = sourceWithoutImportStatements.match(IMPORT_STATEMENT_REGEX);\n    }\n\n    return [importStatements.join(';'), sourceWithoutImportStatements];\n};\n", "import { NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS } from '../globals';\nimport { isConstructible } from '../helpers/is-constructible';\nimport { splitImportStatements } from '../helpers/split-import-statements';\nimport { IAudioWorkletProcessorConstructor } from '../interfaces';\nimport { TAddAudioWorkletModuleFactory, TEvaluateAudioWorkletGlobalScopeFunction } from '../types';\n\nconst verifyParameterDescriptors = (parameterDescriptors: IAudioWorkletProcessorConstructor['parameterDescriptors']) => {\n    if (parameterDescriptors !== undefined && !Array.isArray(parameterDescriptors)) {\n        throw new TypeError('The parameterDescriptors property of given value for processorCtor is not an array.');\n    }\n};\n\nconst verifyProcessorCtor = <T extends IAudioWorkletProcessorConstructor>(processorCtor: T) => {\n    if (!isConstructible(processorCtor)) {\n        throw new TypeError('The given value for processorCtor should be a constructor.');\n    }\n\n    if (processorCtor.prototype === null || typeof processorCtor.prototype !== 'object') {\n        throw new TypeError('The given value for processorCtor should have a prototype.');\n    }\n};\n\nexport const createAddAudioWorkletModule: TAddAudioWorkletModuleFactory = (\n    cacheTestResult,\n    createNotSupportedError,\n    evaluateSource,\n    exposeCurrentFrameAndCurrentTime,\n    fetchSource,\n    getNativeContext,\n    getOrCreateBackupOfflineAudioContext,\n    isNativeOfflineAudioContext,\n    nativeAudioWorkletNodeConstructor,\n    ongoingRequests,\n    resolvedRequests,\n    testAudioWorkletProcessorPostMessageSupport,\n    window\n) => {\n    let index = 0;\n\n    return (context, moduleURL, options = { credentials: 'omit' }) => {\n        const resolvedRequestsOfContext = resolvedRequests.get(context);\n\n        if (resolvedRequestsOfContext !== undefined && resolvedRequestsOfContext.has(moduleURL)) {\n            return Promise.resolve();\n        }\n\n        const ongoingRequestsOfContext = ongoingRequests.get(context);\n\n        if (ongoingRequestsOfContext !== undefined) {\n            const promiseOfOngoingRequest = ongoingRequestsOfContext.get(moduleURL);\n\n            if (promiseOfOngoingRequest !== undefined) {\n                return promiseOfOngoingRequest;\n            }\n        }\n\n        const nativeContext = getNativeContext(context);\n\n        // Bug #59: Safari does not implement the audioWorklet property.\n        const promise =\n            nativeContext.audioWorklet === undefined\n                ? fetchSource(moduleURL)\n                      .then(([source, absoluteUrl]) => {\n                          const [importStatements, sourceWithoutImportStatements] = splitImportStatements(source, absoluteUrl);\n\n                          /*\n                           * This is the unminified version of the code used below:\n                           *\n                           * ```js\n                           * ${ importStatements };\n                           * ((a, b) => {\n                           *     (a[b] = a[b] || [ ]).push(\n                           *         (AudioWorkletProcessor, global, registerProcessor, sampleRate, self, window) => {\n                           *             ${ sourceWithoutImportStatements }\n                           *         }\n                           *     );\n                           * })(window, '_AWGS');\n                           * ```\n                           */\n                          // tslint:disable-next-line:max-line-length\n                          const wrappedSource = `${importStatements};((a,b)=>{(a[b]=a[b]||[]).push((AudioWorkletProcessor,global,registerProcessor,sampleRate,self,window)=>{${sourceWithoutImportStatements}\n})})(window,'_AWGS')`;\n\n                          // @todo Evaluating the given source code is a possible security problem.\n                          return evaluateSource(wrappedSource);\n                      })\n                      .then(() => {\n                          const evaluateAudioWorkletGlobalScope = (<TEvaluateAudioWorkletGlobalScopeFunction[]>(<any>window)._AWGS).pop();\n\n                          if (evaluateAudioWorkletGlobalScope === undefined) {\n                              // Bug #182 Chrome and Edge do throw an instance of a SyntaxError instead of a DOMException.\n                              throw new SyntaxError();\n                          }\n\n                          exposeCurrentFrameAndCurrentTime(nativeContext.currentTime, nativeContext.sampleRate, () =>\n                              evaluateAudioWorkletGlobalScope(\n                                  class AudioWorkletProcessor {},\n                                  undefined,\n                                  (name, processorCtor) => {\n                                      if (name.trim() === '') {\n                                          throw createNotSupportedError();\n                                      }\n\n                                      const nodeNameToProcessorConstructorMap = NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.get(nativeContext);\n\n                                      if (nodeNameToProcessorConstructorMap !== undefined) {\n                                          if (nodeNameToProcessorConstructorMap.has(name)) {\n                                              throw createNotSupportedError();\n                                          }\n\n                                          verifyProcessorCtor(processorCtor);\n                                          verifyParameterDescriptors(processorCtor.parameterDescriptors);\n\n                                          nodeNameToProcessorConstructorMap.set(name, processorCtor);\n                                      } else {\n                                          verifyProcessorCtor(processorCtor);\n                                          verifyParameterDescriptors(processorCtor.parameterDescriptors);\n\n                                          NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.set(nativeContext, new Map([[name, processorCtor]]));\n                                      }\n                                  },\n                                  nativeContext.sampleRate,\n                                  undefined,\n                                  undefined\n                              )\n                          );\n                      })\n                : Promise.all([\n                      fetchSource(moduleURL),\n                      Promise.resolve(\n                          cacheTestResult(testAudioWorkletProcessorPostMessageSupport, testAudioWorkletProcessorPostMessageSupport)\n                      )\n                  ]).then(([[source, absoluteUrl], isSupportingPostMessage]) => {\n                      const currentIndex = index + 1;\n\n                      index = currentIndex;\n\n                      const [importStatements, sourceWithoutImportStatements] = splitImportStatements(source, absoluteUrl);\n                      /*\n                       * Bug #179: Firefox does not allow to transfer any buffer which has been passed to the process() method as an argument.\n                       *\n                       * This is the unminified version of the code used below.\n                       *\n                       * ```js\n                       * class extends AudioWorkletProcessor {\n                       *\n                       *     __buffers = new WeakSet();\n                       *\n                       *     constructor () {\n                       *         super();\n                       *\n                       *         this.port.postMessage = ((postMessage) => {\n                       *             return (message, transferables) => {\n                       *                 const filteredTransferables = (transferables)\n                       *                     ? transferables.filter((transferable) => !this.__buffers.has(transferable))\n                       *                     : transferables;\n                       *\n                       *                 return postMessage.call(this.port, message, filteredTransferables);\n                       *              };\n                       *         })(this.port.postMessage);\n                       *     }\n                       * }\n                       * ```\n                       */\n                      const patchedAudioWorkletProcessor = isSupportingPostMessage\n                          ? 'AudioWorkletProcessor'\n                          : 'class extends AudioWorkletProcessor {__b=new WeakSet();constructor(){super();(p=>p.postMessage=(q=>(m,t)=>q.call(p,m,t?t.filter(u=>!this.__b.has(u)):t))(p.postMessage))(this.port)}}';\n                      /*\n                       * Bug #170: Chrome and Edge do call process() with an array with empty channelData for each input if no input is connected.\n                       *\n                       * Bug #179: Firefox does not allow to transfer any buffer which has been passed to the process() method as an argument.\n                       *\n                       * Bug #190: Safari doesn't throw an error when loading an unparsable module.\n                       *\n                       * This is the unminified version of the code used below:\n                       *\n                       * ```js\n                       * `${ importStatements };\n                       * ((AudioWorkletProcessor, registerProcessor) => {${ sourceWithoutImportStatements }\n                       * })(\n                       *     ${ patchedAudioWorkletProcessor },\n                       *     (name, processorCtor) => registerProcessor(name, class extends processorCtor {\n                       *\n                       *         __collectBuffers = (array) => {\n                       *             array.forEach((element) => this.__buffers.add(element.buffer));\n                       *         };\n                       *\n                       *         process (inputs, outputs, parameters) {\n                       *             inputs.forEach(this.__collectBuffers);\n                       *             outputs.forEach(this.__collectBuffers);\n                       *             this.__collectBuffers(Object.values(parameters));\n                       *\n                       *             return super.process(\n                       *                 (inputs.map((input) => input.some((channelData) => channelData.length === 0)) ? [ ] : input),\n                       *                 outputs,\n                       *                 parameters\n                       *             );\n                       *         }\n                       *\n                       *     })\n                       * );\n                       *\n                       * registerProcessor(`__sac${currentIndex}`, class extends AudioWorkletProcessor{\n                       *\n                       *     process () {\n                       *         return false;\n                       *     }\n                       *\n                       * })`\n                       * ```\n                       */\n                      const memberDefinition = isSupportingPostMessage ? '' : '__c = (a) => a.forEach(e=>this.__b.add(e.buffer));';\n                      const bufferRegistration = isSupportingPostMessage\n                          ? ''\n                          : 'i.forEach(this.__c);o.forEach(this.__c);this.__c(Object.values(p));';\n                      const wrappedSource = `${importStatements};((AudioWorkletProcessor,registerProcessor)=>{${sourceWithoutImportStatements}\n})(${patchedAudioWorkletProcessor},(n,p)=>registerProcessor(n,class extends p{${memberDefinition}process(i,o,p){${bufferRegistration}return super.process(i.map(j=>j.some(k=>k.length===0)?[]:j),o,p)}}));registerProcessor('__sac${currentIndex}',class extends AudioWorkletProcessor{process(){return !1}})`;\n                      const blob = new Blob([wrappedSource], { type: 'application/javascript; charset=utf-8' });\n                      const url = URL.createObjectURL(blob);\n\n                      return nativeContext.audioWorklet\n                          .addModule(url, options)\n                          .then(() => {\n                              if (isNativeOfflineAudioContext(nativeContext)) {\n                                  return nativeContext;\n                              }\n\n                              // Bug #186: Chrome and Edge do not allow to create an AudioWorkletNode on a closed AudioContext.\n                              const backupOfflineAudioContext = getOrCreateBackupOfflineAudioContext(nativeContext);\n\n                              return backupOfflineAudioContext.audioWorklet.addModule(url, options).then(() => backupOfflineAudioContext);\n                          })\n                          .then((nativeContextOrBackupOfflineAudioContext) => {\n                              if (nativeAudioWorkletNodeConstructor === null) {\n                                  throw new SyntaxError();\n                              }\n\n                              try {\n                                  // Bug #190: Safari doesn't throw an error when loading an unparsable module.\n                                  new nativeAudioWorkletNodeConstructor(nativeContextOrBackupOfflineAudioContext, `__sac${currentIndex}`); // tslint:disable-line:no-unused-expression\n                              } catch {\n                                  throw new SyntaxError();\n                              }\n                          })\n                          .finally(() => URL.revokeObjectURL(url));\n                  });\n\n        if (ongoingRequestsOfContext === undefined) {\n            ongoingRequests.set(context, new Map([[moduleURL, promise]]));\n        } else {\n            ongoingRequestsOfContext.set(moduleURL, promise);\n        }\n\n        promise\n            .then(() => {\n                const updatedResolvedRequestsOfContext = resolvedRequests.get(context);\n\n                if (updatedResolvedRequestsOfContext === undefined) {\n                    resolvedRequests.set(context, new Set([moduleURL]));\n                } else {\n                    updatedResolvedRequestsOfContext.add(moduleURL);\n                }\n            })\n            .finally(() => {\n                const updatedOngoingRequestsOfContext = ongoingRequests.get(context);\n\n                if (updatedOngoingRequestsOfContext !== undefined) {\n                    updatedOngoingRequestsOfContext.delete(moduleURL);\n                }\n            });\n\n        return promise;\n    };\n};\n", "import { TGetValueForKeyFunction } from '../types';\n\nexport const getValueForKey: TGetValueForKeyFunction = (map, key) => {\n    const value = map.get(key);\n\n    if (value === undefined) {\n        throw new Error('A value with the given key could not be found.');\n    }\n\n    return value;\n};\n", "import { TPickElementFromSetFunction } from '../types';\n\nexport const pickElementFromSet: TPickElementFromSetFunction = (set, predicate) => {\n    const matchingElements = Array.from(set).filter(predicate);\n\n    if (matchingElements.length > 1) {\n        throw Error('More than one element was found.');\n    }\n\n    if (matchingElements.length === 0) {\n        throw Error('No element was found.');\n    }\n\n    const [matchingElement] = matchingElements;\n\n    set.delete(matchingElement);\n\n    return matchingElement;\n};\n", "import { IAudioNode } from '../interfaces';\nimport { TContext, TPassiveAudioNodeInputConnection } from '../types';\nimport { getValueForKey } from './get-value-for-key';\nimport { pickElementFromSet } from './pick-element-from-set';\n\nexport const deletePassiveInputConnectionToAudioNode = <T extends TContext>(\n    passiveInputs: WeakMap<IAudioNode<T>, Set<TPassiveAudioNodeInputConnection>>,\n    source: IAudioNode<T>,\n    output: number,\n    input: number\n) => {\n    const passiveInputConnections = getValueForKey(passiveInputs, source);\n    const matchingConnection = pickElementFromSet(\n        passiveInputConnections,\n        (passiveInputConnection) => passiveInputConnection[0] === output && passiveInputConnection[1] === input\n    );\n\n    if (passiveInputConnections.size === 0) {\n        passiveInputs.delete(source);\n    }\n\n    return matchingConnection;\n};\n", "import { EVENT_LISTENERS } from '../globals';\nimport { TGetEventListenersOfAudioNodeFunction } from '../types';\nimport { getValueForKey } from './get-value-for-key';\n\nexport const getEventListenersOfAudioNode: TGetEventListenersOfAudioNodeFunction = (audioNode) => {\n    return getValueForKey(EVENT_LISTENERS, audioNode);\n};\n", "import { ACTIVE_AUDIO_NODE_STORE } from '../globals';\nimport { IAudioNode } from '../interfaces';\nimport { TContext } from '../types';\nimport { getEventListenersOfAudioNode } from './get-event-listeners-of-audio-node';\n\nexport const setInternalStateToActive = <T extends TContext>(audioNode: IAudioNode<T>) => {\n    if (ACTIVE_AUDIO_NODE_STORE.has(audioNode)) {\n        throw new Error('The AudioNode is already stored.');\n    }\n\n    ACTIVE_AUDIO_NODE_STORE.add(audioNode);\n\n    getEventListenersOfAudioNode(audioNode).forEach((eventListener) => eventListener(true));\n};\n", "import { IAudioNode, IAudioWorkletNode } from '../interfaces';\nimport { TContext } from '../types';\n\nexport const isAudioWorkletNode = <T extends TContext>(audioNode: IAudioNode<T>): audioNode is IAudioWorkletNode<T> => {\n    return 'port' in audioNode;\n};\n", "import { ACTIVE_AUDIO_NODE_STORE } from '../globals';\nimport { IAudioNode } from '../interfaces';\nimport { TContext } from '../types';\nimport { getEventListenersOfAudioNode } from './get-event-listeners-of-audio-node';\n\nexport const setInternalStateToPassive = <T extends TContext>(audioNode: IAudioNode<T>) => {\n    if (!ACTIVE_AUDIO_NODE_STORE.has(audioNode)) {\n        throw new Error('The AudioNode is not stored.');\n    }\n\n    ACTIVE_AUDIO_NODE_STORE.delete(audioNode);\n\n    getEventListenersOfAudioNode(audioNode).forEach((eventListener) => eventListener(false));\n};\n", "import { isAudioWorkletNode } from '../guards/audio-worklet-node';\nimport { IAudioNode } from '../interfaces';\nimport { TActiveInputConnection, TContext } from '../types';\nimport { setInternalStateToPassive } from './set-internal-state-to-passive';\n\n// Set the internalState of the audioNode to 'passive' if it is not an AudioWorkletNode and if it has no 'active' input connections.\nexport const setInternalStateToPassiveWhenNecessary = <T extends TContext>(\n    audioNode: IAudioNode<T>,\n    activeInputs: Set<TActiveInputConnection<T>>[]\n) => {\n    if (!isAudioWorkletNode(audioNode) && activeInputs.every((connections) => connections.size === 0)) {\n        setInternalStateToPassive(audioNode);\n    }\n};\n", "import { deletePassiveInputConnectionToAudioNode } from '../helpers/delete-passive-input-connection-to-audio-node';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassiveWhenNecessary } from '../helpers/set-internal-state-to-passive-when-necessary';\nimport { IAudioNode } from '../interfaces';\nimport { TAddConnectionToAudioNodeFactory, TContext, TInternalStateEventListener } from '../types';\n\nexport const createAddConnectionToAudioNode: TAddConnectionToAudioNodeFactory = (\n    addActiveInputConnectionToAudioNode,\n    addPassiveInputConnectionToAudioNode,\n    connectNativeAudioNodeToNativeAudioNode,\n    deleteActiveInputConnectionToAudioNode,\n    disconnectNativeAudioNodeFromNativeAudioNode,\n    getAudioNodeConnections,\n    getAudioNodeTailTime,\n    getEventListenersOfAudioNode,\n    getNativeAudioNode,\n    insertElementInSet,\n    isActiveAudioNode,\n    isPartOfACycle,\n    isPassiveAudioNode\n) => {\n    const tailTimeTimeoutIds = new WeakMap<IAudioNode<TContext>, number>();\n\n    return (source, destination, output, input, isOffline) => {\n        const { activeInputs, passiveInputs } = getAudioNodeConnections(destination);\n        const { outputs } = getAudioNodeConnections(source);\n        const eventListeners = getEventListenersOfAudioNode(source);\n\n        const eventListener: TInternalStateEventListener = (isActive) => {\n            const nativeDestinationAudioNode = getNativeAudioNode(destination);\n            const nativeSourceAudioNode = getNativeAudioNode(source);\n\n            if (isActive) {\n                const partialConnection = deletePassiveInputConnectionToAudioNode(passiveInputs, source, output, input);\n\n                addActiveInputConnectionToAudioNode(activeInputs, source, partialConnection, false);\n\n                if (!isOffline && !isPartOfACycle(source)) {\n                    connectNativeAudioNodeToNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output, input);\n                }\n\n                if (isPassiveAudioNode(destination)) {\n                    setInternalStateToActive(destination);\n                }\n            } else {\n                const partialConnection = deleteActiveInputConnectionToAudioNode(activeInputs, source, output, input);\n\n                addPassiveInputConnectionToAudioNode(passiveInputs, input, partialConnection, false);\n\n                if (!isOffline && !isPartOfACycle(source)) {\n                    disconnectNativeAudioNodeFromNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output, input);\n                }\n\n                const tailTime = getAudioNodeTailTime(destination);\n\n                if (tailTime === 0) {\n                    if (isActiveAudioNode(destination)) {\n                        setInternalStateToPassiveWhenNecessary(destination, activeInputs);\n                    }\n                } else {\n                    const tailTimeTimeoutId = tailTimeTimeoutIds.get(destination);\n\n                    if (tailTimeTimeoutId !== undefined) {\n                        clearTimeout(tailTimeTimeoutId);\n                    }\n\n                    tailTimeTimeoutIds.set(\n                        destination,\n                        setTimeout(() => {\n                            if (isActiveAudioNode(destination)) {\n                                setInternalStateToPassiveWhenNecessary(destination, activeInputs);\n                            }\n                        }, tailTime * 1000)\n                    );\n                }\n            }\n        };\n\n        if (\n            insertElementInSet(\n                outputs,\n                [destination, output, input],\n                (outputConnection) =>\n                    outputConnection[0] === destination && outputConnection[1] === output && outputConnection[2] === input,\n                true\n            )\n        ) {\n            eventListeners.add(eventListener);\n\n            if (isActiveAudioNode(source)) {\n                addActiveInputConnectionToAudioNode(activeInputs, source, [output, input, eventListener], true);\n            } else {\n                addPassiveInputConnectionToAudioNode(passiveInputs, input, [source, output, eventListener], true);\n            }\n\n            return true;\n        }\n\n        return false;\n    };\n};\n", "import { TAddPassiveInputConnectionToAudioNodeFactory } from '../types';\n\nexport const createAddPassiveInputConnectionToAudioNode: TAddPassiveInputConnectionToAudioNodeFactory = (insertElementInSet) => {\n    return (passiveInputs, input, [source, output, eventListener], ignoreDuplicates) => {\n        const passiveInputConnections = passiveInputs.get(source);\n\n        if (passiveInputConnections === undefined) {\n            passiveInputs.set(source, new Set([[output, input, eventListener]]));\n        } else {\n            insertElementInSet(\n                passiveInputConnections,\n                [output, input, eventListener],\n                (passiveInputConnection) => passiveInputConnection[0] === output && passiveInputConnection[1] === input,\n                ignoreDuplicates\n            );\n        }\n    };\n};\n", "import { TAddSilentConnectionFactory } from '../types';\n\nexport const createAddSilentConnection: TAddSilentConnectionFactory = (createNativeGainNode) => {\n    return (nativeContext, nativeAudioScheduledSourceNode) => {\n        const nativeGainNode = createNativeGainNode(nativeContext, {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete',\n            gain: 0\n        });\n\n        nativeAudioScheduledSourceNode.connect(nativeGainNode).connect(nativeContext.destination);\n\n        const disconnect = () => {\n            nativeAudioScheduledSourceNode.removeEventListener('ended', disconnect);\n            nativeAudioScheduledSourceNode.disconnect(nativeGainNode);\n            nativeGainNode.disconnect();\n        };\n\n        nativeAudioScheduledSourceNode.addEventListener('ended', disconnect);\n    };\n};\n", "import { TAddUnrenderedAudioWorkletNodeFactory } from '../types';\n\nexport const createAddUnrenderedAudioWorkletNode: TAddUnrenderedAudioWorkletNodeFactory = (getUnrenderedAudioWorkletNodes) => {\n    return (nativeContext, audioWorkletNode) => {\n        getUnrenderedAudioWorkletNodes(nativeContext).add(audioWorkletNode);\n    };\n};\n", "import { IAnalyserNode, IAnalyserOptions } from '../interfaces';\nimport { TAnalyserNodeConstructorFactory, TAudioNodeRenderer, TContext, TNativeAnalyserNode } from '../types';\n\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    fftSize: 2048,\n    maxDecibels: -30,\n    minDecibels: -100,\n    smoothingTimeConstant: 0.8\n} as const;\n\nexport const createAnalyserNodeConstructor: TAnalyserNodeConstructorFactory = (\n    audionNodeConstructor,\n    createAnalyserNodeRenderer,\n    createIndexSizeError,\n    createNativeAnalyserNode,\n    getNativeContext,\n    isNativeOfflineAudioContext\n) => {\n    return class AnalyserNode<T extends TContext> extends audionNodeConstructor<T> implements IAnalyserNode<T> {\n        private _nativeAnalyserNode: TNativeAnalyserNode;\n\n        constructor(context: T, options?: Partial<IAnalyserOptions>) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeAnalyserNode = createNativeAnalyserNode(nativeContext, mergedOptions);\n            const analyserNodeRenderer = <TAudioNodeRenderer<T, this>>(\n                (isNativeOfflineAudioContext(nativeContext) ? createAnalyserNodeRenderer() : null)\n            );\n\n            super(context, false, nativeAnalyserNode, analyserNodeRenderer);\n\n            this._nativeAnalyserNode = nativeAnalyserNode;\n        }\n\n        get fftSize(): number {\n            return this._nativeAnalyserNode.fftSize;\n        }\n\n        set fftSize(value) {\n            this._nativeAnalyserNode.fftSize = value;\n        }\n\n        get frequencyBinCount(): number {\n            return this._nativeAnalyserNode.frequencyBinCount;\n        }\n\n        get maxDecibels(): number {\n            return this._nativeAnalyserNode.maxDecibels;\n        }\n\n        set maxDecibels(value) {\n            // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n            const maxDecibels = this._nativeAnalyserNode.maxDecibels;\n\n            this._nativeAnalyserNode.maxDecibels = value;\n\n            if (!(value > this._nativeAnalyserNode.minDecibels)) {\n                this._nativeAnalyserNode.maxDecibels = maxDecibels;\n\n                throw createIndexSizeError();\n            }\n        }\n\n        get minDecibels(): number {\n            return this._nativeAnalyserNode.minDecibels;\n        }\n\n        set minDecibels(value) {\n            // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n            const minDecibels = this._nativeAnalyserNode.minDecibels;\n\n            this._nativeAnalyserNode.minDecibels = value;\n\n            if (!(this._nativeAnalyserNode.maxDecibels > value)) {\n                this._nativeAnalyserNode.minDecibels = minDecibels;\n\n                throw createIndexSizeError();\n            }\n        }\n\n        get smoothingTimeConstant(): number {\n            return this._nativeAnalyserNode.smoothingTimeConstant;\n        }\n\n        set smoothingTimeConstant(value) {\n            this._nativeAnalyserNode.smoothingTimeConstant = value;\n        }\n\n        public getByteFrequencyData(array: Uint8Array): void {\n            this._nativeAnalyserNode.getByteFrequencyData(array);\n        }\n\n        public getByteTimeDomainData(array: Uint8Array): void {\n            this._nativeAnalyserNode.getByteTimeDomainData(array);\n        }\n\n        public getFloatFrequencyData(array: Float32Array): void {\n            this._nativeAnalyserNode.getFloatFrequencyData(array);\n        }\n\n        public getFloatTimeDomainData(array: Float32Array): void {\n            this._nativeAnalyserNode.getFloatTimeDomainData(array);\n        }\n    };\n};\n", "import { TNativeAudioNode, TNativeContext } from '../types';\n\nexport const isOwnedByContext = (nativeAudioNode: TNativeAudioNode, nativeContext: TNativeContext): boolean => {\n    return nativeAudioNode.context === nativeContext;\n};\n", "import { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { IAnalyserNode, IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport { TAnalyserNodeRendererFactoryFactory, TNativeAnalyserNode, TNativeOfflineAudioContext } from '../types';\n\nexport const createAnalyserNodeRendererFactory: TAnalyserNodeRendererFactoryFactory = (\n    createNativeAnalyserNode,\n    getNativeAudioNode,\n    renderInputsOfAudioNode\n) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>() => {\n        const renderedNativeAnalyserNodes = new WeakMap<TNativeOfflineAudioContext, TNativeAnalyserNode>();\n\n        const createAnalyserNode = async (proxy: IAnalyserNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext) => {\n            let nativeAnalyserNode = getNativeAudioNode<T, TNativeAnalyserNode>(proxy);\n\n            // If the initially used nativeAnalyserNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeAnalyserNodeIsOwnedByContext = isOwnedByContext(nativeAnalyserNode, nativeOfflineAudioContext);\n\n            if (!nativeAnalyserNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeAnalyserNode.channelCount,\n                    channelCountMode: nativeAnalyserNode.channelCountMode,\n                    channelInterpretation: nativeAnalyserNode.channelInterpretation,\n                    fftSize: nativeAnalyserNode.fftSize,\n                    maxDecibels: nativeAnalyserNode.maxDecibels,\n                    minDecibels: nativeAnalyserNode.minDecibels,\n                    smoothingTimeConstant: nativeAnalyserNode.smoothingTimeConstant\n                };\n\n                nativeAnalyserNode = createNativeAnalyserNode(nativeOfflineAudioContext, options);\n            }\n\n            renderedNativeAnalyserNodes.set(nativeOfflineAudioContext, nativeAnalyserNode);\n\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAnalyserNode);\n\n            return nativeAnalyserNode;\n        };\n\n        return {\n            render(proxy: IAnalyserNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext): Promise<TNativeAnalyserNode> {\n                const renderedNativeAnalyserNode = renderedNativeAnalyserNodes.get(nativeOfflineAudioContext);\n\n                if (renderedNativeAnalyserNode !== undefined) {\n                    return Promise.resolve(renderedNativeAnalyserNode);\n                }\n\n                return createAnalyserNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n", "import { TNativeAudioBuffer } from '../types';\n\nexport const testAudioBufferCopyChannelMethodsOutOfBoundsSupport = (nativeAudioBuffer: TNativeAudioBuffer): boolean => {\n    try {\n        nativeAudioBuffer.copyToChannel(new Float32Array(1), 0, -1);\n    } catch {\n        return false;\n    }\n\n    return true;\n};\n", "import { TIndexSizeErrorFactory } from '../types';\n\nexport const createIndexSizeError: TIndexSizeErrorFactory = () => new DOMException('', 'IndexSizeError');\n", "import { createIndexSizeError } from '../factories/index-size-error';\nimport { TNativeAudioBuffer } from '../types';\n\nexport const wrapAudioBufferGetChannelDataMethod = (audioBuffer: TNativeAudioBuffer): void => {\n    audioBuffer.getChannelData = ((getChannelData) => {\n        return (channel: number) => {\n            try {\n                return getChannelData.call(audioBuffer, channel);\n            } catch (err) {\n                if (err.code === 12) {\n                    throw createIndexSizeError();\n                }\n\n                throw err;\n            }\n        };\n    })(audioBuffer.getChannelData);\n};\n", "import { testAudioBufferCopyChannelMethodsOutOfBoundsSupport } from '../helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support';\nimport { wrapAudioBufferGetChannelDataMethod } from '../helpers/wrap-audio-buffer-get-channel-data-method';\nimport { IAudioBuffer, IAudioBufferOptions } from '../interfaces';\nimport { TAudioBufferConstructorFactory, TNativeOfflineAudioContext } from '../types';\n\nconst DEFAULT_OPTIONS = {\n    numberOfChannels: 1\n} as const;\n\nexport const createAudioBufferConstructor: TAudioBufferConstructorFactory = (\n    audioBufferStore,\n    cacheTestResult,\n    createNotSupportedError,\n    nativeAudioBufferConstructor,\n    nativeOfflineAudioContextConstructor,\n    testNativeAudioBufferConstructorSupport,\n    wrapAudioBufferCopyChannelMethods,\n    wrapAudioBufferCopyChannelMethodsOutOfBounds\n) => {\n    let nativeOfflineAudioContext: null | TNativeOfflineAudioContext = null;\n\n    return class AudioBuffer implements IAudioBuffer {\n        // This field needs to be defined to convince TypeScript that the IAudioBuffer will be implemented.\n        public copyFromChannel!: (destination: Float32Array, channelNumber: number, bufferOffset?: number) => void;\n\n        // This field needs to be defined to convince TypeScript that the IAudioBuffer will be implemented.\n        public copyToChannel!: (source: Float32Array, channelNumber: number, bufferOffset?: number) => void;\n\n        // This field needs to be defined to convince TypeScript that the IAudioBuffer will be implemented.\n        public duration!: number;\n\n        // This field needs to be defined to convince TypeScript that the IAudioBuffer will be implemented.\n        public getChannelData!: (channel: number) => Float32Array;\n\n        // This field needs to be defined to convince TypeScript that the IAudioBuffer will be implemented.\n        public length!: number;\n\n        // This field needs to be defined to convince TypeScript that the IAudioBuffer will be implemented.\n        public numberOfChannels!: number;\n\n        // This field needs to be defined to convince TypeScript that the IAudioBuffer will be implemented.\n        public sampleRate!: number;\n\n        constructor(options: IAudioBufferOptions) {\n            if (nativeOfflineAudioContextConstructor === null) {\n                throw new Error('Missing the native OfflineAudioContext constructor.');\n            }\n\n            const { length, numberOfChannels, sampleRate } = { ...DEFAULT_OPTIONS, ...options };\n\n            if (nativeOfflineAudioContext === null) {\n                nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n            }\n\n            /*\n             * Bug #99: Firefox does not throw a NotSupportedError when the numberOfChannels is zero. But it only does it when using the\n             * factory function. But since Firefox also supports the constructor everything should be fine.\n             */\n            const audioBuffer =\n                nativeAudioBufferConstructor !== null &&\n                cacheTestResult(testNativeAudioBufferConstructorSupport, testNativeAudioBufferConstructorSupport)\n                    ? new nativeAudioBufferConstructor({ length, numberOfChannels, sampleRate })\n                    : nativeOfflineAudioContext.createBuffer(numberOfChannels, length, sampleRate);\n\n            // Bug #99: Safari does not throw an error when the numberOfChannels is zero.\n            if (audioBuffer.numberOfChannels === 0) {\n                throw createNotSupportedError();\n            }\n\n            // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n            // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n            if (typeof audioBuffer.copyFromChannel !== 'function') {\n                wrapAudioBufferCopyChannelMethods(audioBuffer);\n                wrapAudioBufferGetChannelDataMethod(audioBuffer);\n                // Bug #157: Firefox does not allow the bufferOffset to be out-of-bounds.\n            } else if (\n                !cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () =>\n                    testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer)\n                )\n            ) {\n                wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n            }\n\n            audioBufferStore.add(audioBuffer);\n\n            /*\n             * This does violate all good pratices but it is necessary to allow this AudioBuffer to be used with native\n             * (Offline)AudioContexts.\n             */\n            return audioBuffer;\n        }\n\n        public static [Symbol.hasInstance](instance: unknown): boolean {\n            return (\n                (instance !== null && typeof instance === 'object' && Object.getPrototypeOf(instance) === AudioBuffer.prototype) ||\n                audioBufferStore.has(<any>instance)\n            );\n        }\n    };\n};\n", "export const MOST_NEGATIVE_SINGLE_FLOAT = -3.4028234663852886e38;\n\nexport const MOST_POSITIVE_SINGLE_FLOAT = -MOST_NEGATIVE_SINGLE_FLOAT;\n", "import { ACTIVE_AUDIO_NODE_STORE } from '../globals';\nimport { TIsActiveAudioNodeFunction } from '../types';\n\nexport const isActiveAudioNode: TIsActiveAudioNodeFunction = (audioNode) => ACTIVE_AUDIO_NODE_STORE.has(audioNode);\n", "import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { isActiveAudioNode } from '../helpers/is-active-audio-node';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassive } from '../helpers/set-internal-state-to-passive';\nimport { IAudioBufferSourceNode, IAudioBufferSourceOptions, IAudioParam, IAudioScheduledSourceNodeEventMap } from '../interfaces';\nimport {\n    TAnyAudioBuffer,\n    TAudioBufferSourceNodeConstructorFactory,\n    TAudioBufferSourceNodeRenderer,\n    TContext,\n    TEventHandler,\n    TNativeAudioBufferSourceNode\n} from '../types';\n\nconst DEFAULT_OPTIONS = {\n    buffer: null,\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    // Bug #149: Safari does not yet support the detune AudioParam.\n    loop: false,\n    loopEnd: 0,\n    loopStart: 0,\n    playbackRate: 1\n} as const;\n\nexport const createAudioBufferSourceNodeConstructor: TAudioBufferSourceNodeConstructorFactory = (\n    audioNodeConstructor,\n    createAudioBufferSourceNodeRenderer,\n    createAudioParam,\n    createInvalidStateError,\n    createNativeAudioBufferSourceNode,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    wrapEventListener\n) => {\n    return class AudioBufferSourceNode<T extends TContext>\n        extends audioNodeConstructor<T, IAudioScheduledSourceNodeEventMap>\n        implements IAudioBufferSourceNode<T>\n    {\n        private _audioBufferSourceNodeRenderer: TAudioBufferSourceNodeRenderer<T>;\n\n        private _isBufferNullified: boolean;\n\n        private _isBufferSet: boolean;\n\n        private _nativeAudioBufferSourceNode: TNativeAudioBufferSourceNode;\n\n        private _onended: null | TEventHandler<this>;\n\n        private _playbackRate: IAudioParam;\n\n        constructor(context: T, options?: Partial<IAudioBufferSourceOptions>) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const audioBufferSourceNodeRenderer = <TAudioBufferSourceNodeRenderer<T>>(\n                (isOffline ? createAudioBufferSourceNodeRenderer() : null)\n            );\n\n            super(context, false, nativeAudioBufferSourceNode, audioBufferSourceNodeRenderer);\n\n            this._audioBufferSourceNodeRenderer = audioBufferSourceNodeRenderer;\n            this._isBufferNullified = false;\n            this._isBufferSet = mergedOptions.buffer !== null;\n            this._nativeAudioBufferSourceNode = nativeAudioBufferSourceNode;\n            this._onended = null;\n            // Bug #73: Safari does not export the correct values for maxValue and minValue.\n            this._playbackRate = createAudioParam(\n                this,\n                isOffline,\n                nativeAudioBufferSourceNode.playbackRate,\n                MOST_POSITIVE_SINGLE_FLOAT,\n                MOST_NEGATIVE_SINGLE_FLOAT\n            );\n        }\n\n        get buffer(): null | TAnyAudioBuffer {\n            if (this._isBufferNullified) {\n                return null;\n            }\n\n            return this._nativeAudioBufferSourceNode.buffer;\n        }\n\n        set buffer(value) {\n            this._nativeAudioBufferSourceNode.buffer = value;\n\n            // Bug #72: Only Chrome & Edge do not allow to reassign the buffer yet.\n            if (value !== null) {\n                if (this._isBufferSet) {\n                    throw createInvalidStateError();\n                }\n\n                this._isBufferSet = true;\n            }\n        }\n\n        get loop(): boolean {\n            return this._nativeAudioBufferSourceNode.loop;\n        }\n\n        set loop(value) {\n            this._nativeAudioBufferSourceNode.loop = value;\n        }\n\n        get loopEnd(): number {\n            return this._nativeAudioBufferSourceNode.loopEnd;\n        }\n\n        set loopEnd(value) {\n            this._nativeAudioBufferSourceNode.loopEnd = value;\n        }\n\n        get loopStart(): number {\n            return this._nativeAudioBufferSourceNode.loopStart;\n        }\n\n        set loopStart(value) {\n            this._nativeAudioBufferSourceNode.loopStart = value;\n        }\n\n        get onended(): null | TEventHandler<this> {\n            return this._onended;\n        }\n\n        set onended(value) {\n            const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n\n            this._nativeAudioBufferSourceNode.onended = wrappedListener;\n\n            const nativeOnEnded = this._nativeAudioBufferSourceNode.onended;\n\n            this._onended = nativeOnEnded !== null && nativeOnEnded === wrappedListener ? value : nativeOnEnded;\n        }\n\n        get playbackRate(): IAudioParam {\n            return this._playbackRate;\n        }\n\n        public start(when = 0, offset = 0, duration?: number): void {\n            this._nativeAudioBufferSourceNode.start(when, offset, duration);\n\n            if (this._audioBufferSourceNodeRenderer !== null) {\n                this._audioBufferSourceNodeRenderer.start = duration === undefined ? [when, offset] : [when, offset, duration];\n            }\n\n            if (this.context.state !== 'closed') {\n                setInternalStateToActive(this);\n\n                const resetInternalStateToPassive = () => {\n                    this._nativeAudioBufferSourceNode.removeEventListener('ended', resetInternalStateToPassive);\n\n                    if (isActiveAudioNode(this)) {\n                        setInternalStateToPassive(this);\n                    }\n                };\n\n                this._nativeAudioBufferSourceNode.addEventListener('ended', resetInternalStateToPassive);\n            }\n        }\n\n        public stop(when = 0): void {\n            this._nativeAudioBufferSourceNode.stop(when);\n\n            if (this._audioBufferSourceNodeRenderer !== null) {\n                this._audioBufferSourceNodeRenderer.stop = when;\n            }\n        }\n    };\n};\n", "import { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { IAudioBufferSourceNode, IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport { TAudioBufferSourceNodeRendererFactoryFactory, TNativeAudioBufferSourceNode, TNativeOfflineAudioContext } from '../types';\n\nexport const createAudioBufferSourceNodeRendererFactory: TAudioBufferSourceNodeRendererFactoryFactory = (\n    connectAudioParam,\n    createNativeAudioBufferSourceNode,\n    getNativeAudioNode,\n    renderAutomation,\n    renderInputsOfAudioNode\n) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>() => {\n        const renderedNativeAudioBufferSourceNodes = new WeakMap<TNativeOfflineAudioContext, TNativeAudioBufferSourceNode>();\n\n        let start: null | [number, number] | [number, number, number] = null;\n        let stop: null | number = null;\n\n        const createAudioBufferSourceNode = async (\n            proxy: IAudioBufferSourceNode<T>,\n            nativeOfflineAudioContext: TNativeOfflineAudioContext\n        ) => {\n            let nativeAudioBufferSourceNode = getNativeAudioNode<T, TNativeAudioBufferSourceNode>(proxy);\n\n            /*\n             * If the initially used nativeAudioBufferSourceNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeAudioBufferSourceNodeIsOwnedByContext = isOwnedByContext(nativeAudioBufferSourceNode, nativeOfflineAudioContext);\n\n            if (!nativeAudioBufferSourceNodeIsOwnedByContext) {\n                const options = {\n                    buffer: nativeAudioBufferSourceNode.buffer,\n                    channelCount: nativeAudioBufferSourceNode.channelCount,\n                    channelCountMode: nativeAudioBufferSourceNode.channelCountMode,\n                    channelInterpretation: nativeAudioBufferSourceNode.channelInterpretation,\n                    // Bug #149: Safari does not yet support the detune AudioParam.\n                    loop: nativeAudioBufferSourceNode.loop,\n                    loopEnd: nativeAudioBufferSourceNode.loopEnd,\n                    loopStart: nativeAudioBufferSourceNode.loopStart,\n                    playbackRate: nativeAudioBufferSourceNode.playbackRate.value\n                };\n\n                nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext, options);\n\n                if (start !== null) {\n                    nativeAudioBufferSourceNode.start(...start);\n                }\n\n                if (stop !== null) {\n                    nativeAudioBufferSourceNode.stop(stop);\n                }\n            }\n\n            renderedNativeAudioBufferSourceNodes.set(nativeOfflineAudioContext, nativeAudioBufferSourceNode);\n\n            if (!nativeAudioBufferSourceNodeIsOwnedByContext) {\n                // Bug #149: Safari does not yet support the detune AudioParam.\n                await renderAutomation(nativeOfflineAudioContext, proxy.playbackRate, nativeAudioBufferSourceNode.playbackRate);\n            } else {\n                // Bug #149: Safari does not yet support the detune AudioParam.\n                await connectAudioParam(nativeOfflineAudioContext, proxy.playbackRate, nativeAudioBufferSourceNode.playbackRate);\n            }\n\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioBufferSourceNode);\n\n            return nativeAudioBufferSourceNode;\n        };\n\n        return {\n            set start(value: [number, number] | [number, number, number]) {\n                start = value;\n            },\n            set stop(value: number) {\n                stop = value;\n            },\n            render(\n                proxy: IAudioBufferSourceNode<T>,\n                nativeOfflineAudioContext: TNativeOfflineAudioContext\n            ): Promise<TNativeAudioBufferSourceNode> {\n                const renderedNativeAudioBufferSourceNode = renderedNativeAudioBufferSourceNodes.get(nativeOfflineAudioContext);\n\n                if (renderedNativeAudioBufferSourceNode !== undefined) {\n                    return Promise.resolve(renderedNativeAudioBufferSourceNode);\n                }\n\n                return createAudioBufferSourceNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n", "import { IAudioBufferSourceNode, IAudioNode } from '../interfaces';\nimport { TContext } from '../types';\n\nexport const isAudioBufferSourceNode = <T extends TContext>(audioNode: IAudioNode<T>): audioNode is IAudioBufferSourceNode<T> => {\n    return 'playbackRate' in audioNode;\n};\n", "import { IAudioNode, IBiquadFilterNode } from '../interfaces';\nimport { TContext } from '../types';\n\nexport const isBiquadFilterNode = <T extends TContext>(audioNode: IAudioNode<T>): audioNode is IBiquadFilterNode<T> => {\n    return 'frequency' in audioNode && 'gain' in audioNode;\n};\n", "import { IAudioNode, IConstantSourceNode } from '../interfaces';\nimport { TContext } from '../types';\n\nexport const isConstantSourceNode = <T extends TContext>(audioNode: IAudioNode<T>): audioNode is IConstantSourceNode<T> => {\n    return 'offset' in audioNode;\n};\n", "import { IAudioNode, IGainNode } from '../interfaces';\nimport { TContext } from '../types';\n\nexport const isGainNode = <T extends TContext>(audioNode: IAudioNode<T>): audioNode is IGainNode<T> => {\n    return !('frequency' in audioNode) && 'gain' in audioNode;\n};\n", "import { IAudioNode, IOscillatorNode } from '../interfaces';\nimport { TContext } from '../types';\n\nexport const isOscillatorNode = <T extends TContext>(audioNode: IAudioNode<T>): audioNode is IOscillatorNode<T> => {\n    return 'detune' in audioNode && 'frequency' in audioNode;\n};\n", "import { IAudioNode, IStereoPannerNode } from '../interfaces';\nimport { TContext } from '../types';\n\nexport const isStereoPannerNode = <T extends TContext>(audioNode: IAudioNode<T>): audioNode is IStereoPannerNode<T> => {\n    return 'pan' in audioNode;\n};\n", "import { AUDIO_NODE_CONNECTIONS_STORE } from '../globals';\nimport { IAudioNode } from '../interfaces';\nimport { TAudioNodeConnections, TContext, TGetAudioNodeConnectionsFunction } from '../types';\nimport { getValueForKey } from './get-value-for-key';\n\nexport const getAudioNodeConnections: TGetAudioNodeConnectionsFunction = <T extends TContext>(\n    audioNode: IAudioNode<T>\n): TAudioNodeConnections<T> => {\n    return <TAudioNodeConnections<T>>getValueForKey(AUDIO_NODE_CONNECTIONS_STORE, audioNode);\n};\n", "import { AUDIO_PARAM_CONNECTIONS_STORE } from '../globals';\nimport { IAudioParam } from '../interfaces';\nimport { TAudioParamConnections, TContext, TGetAudioParamConnectionsFunction } from '../types';\nimport { getValueForKey } from './get-value-for-key';\n\nexport const getAudioParamConnections: TGetAudioParamConnectionsFunction = <T extends TContext>(\n    audioParam: IAudioParam\n): TAudioParamConnections<T> => {\n    return <TAudioParamConnections<T>>getValueForKey(AUDIO_PARAM_CONNECTIONS_STORE, audioParam);\n};\n", "import { isAudioBufferSourceNode } from '../guards/audio-buffer-source-node';\nimport { isAudioWorkletNode } from '../guards/audio-worklet-node';\nimport { isBiquadFilterNode } from '../guards/biquad-filter-node';\nimport { isConstantSourceNode } from '../guards/constant-source-node';\nimport { isGainNode } from '../guards/gain-node';\nimport { isOscillatorNode } from '../guards/oscillator-node';\nimport { isStereoPannerNode } from '../guards/stereo-panner-node';\nimport { IAudioNode } from '../interfaces';\nimport { TContext } from '../types';\nimport { getAudioNodeConnections } from './get-audio-node-connections';\nimport { getAudioParamConnections } from './get-audio-param-connections';\nimport { isActiveAudioNode } from './is-active-audio-node';\nimport { setInternalStateToPassive } from './set-internal-state-to-passive';\n\nexport const deactivateActiveAudioNodeInputConnections = <T extends TContext>(\n    audioNode: IAudioNode<T>,\n    trace: readonly IAudioNode<T>[]\n) => {\n    const { activeInputs } = getAudioNodeConnections(audioNode);\n\n    activeInputs.forEach((connections) =>\n        connections.forEach(([source]) => {\n            if (!trace.includes(audioNode)) {\n                deactivateActiveAudioNodeInputConnections(source, [...trace, audioNode]);\n            }\n        })\n    );\n\n    const audioParams = isAudioBufferSourceNode(audioNode)\n        ? [\n              // Bug #149: Safari does not yet support the detune AudioParam.\n              audioNode.playbackRate\n          ]\n        : isAudioWorkletNode(audioNode)\n        ? Array.from(audioNode.parameters.values())\n        : isBiquadFilterNode(audioNode)\n        ? [audioNode.Q, audioNode.detune, audioNode.frequency, audioNode.gain]\n        : isConstantSourceNode(audioNode)\n        ? [audioNode.offset]\n        : isGainNode(audioNode)\n        ? [audioNode.gain]\n        : isOscillatorNode(audioNode)\n        ? [audioNode.detune, audioNode.frequency]\n        : isStereoPannerNode(audioNode)\n        ? [audioNode.pan]\n        : [];\n\n    for (const audioParam of audioParams) {\n        const audioParamConnections = getAudioParamConnections<T>(audioParam);\n\n        if (audioParamConnections !== undefined) {\n            audioParamConnections.activeInputs.forEach(([source]) => deactivateActiveAudioNodeInputConnections(source, trace));\n        }\n    }\n\n    if (isActiveAudioNode(audioNode)) {\n        setInternalStateToPassive(audioNode);\n    }\n};\n", "import { IAudioDestinationNode } from '../interfaces';\nimport { TContext } from '../types';\nimport { deactivateActiveAudioNodeInputConnections } from './deactivate-active-audio-node-input-connections';\n\nexport const deactivateAudioGraph = <T extends TContext>(context: T): void => {\n    deactivateActiveAudioNodeInputConnections(<IAudioDestinationNode<T>>context.destination, []);\n};\n", "import { IAudioContextOptions } from '../interfaces';\n\nexport const isValidLatencyHint = (latencyHint: IAudioContextOptions['latencyHint']) => {\n    return (\n        latencyHint === undefined ||\n        typeof latencyHint === 'number' ||\n        (typeof latencyHint === 'string' && (latencyHint === 'balanced' || latencyHint === 'interactive' || latencyHint === 'playback'))\n    );\n};\n", "import { deactivateAudioGraph } from '../helpers/deactivate-audio-graph';\nimport { isValidLatencyHint } from '../helpers/is-valid-latency-hint';\nimport {\n    IAudioContext,\n    IAudioContextOptions,\n    IMediaElementAudioSourceNode,\n    IMediaStreamAudioDestinationNode,\n    IMediaStreamAudioSourceNode,\n    IMediaStreamTrackAudioSourceNode\n} from '../interfaces';\nimport { TAudioContextConstructorFactory, TAudioContextState, TNativeAudioContext, TNativeGainNode, TNativeOscillatorNode } from '../types';\n\nexport const createAudioContextConstructor: TAudioContextConstructorFactory = (\n    baseAudioContextConstructor,\n    createInvalidStateError,\n    createNotSupportedError,\n    createUnknownError,\n    mediaElementAudioSourceNodeConstructor,\n    mediaStreamAudioDestinationNodeConstructor,\n    mediaStreamAudioSourceNodeConstructor,\n    mediaStreamTrackAudioSourceNodeConstructor,\n    nativeAudioContextConstructor\n) => {\n    return class AudioContext extends baseAudioContextConstructor<IAudioContext> implements IAudioContext {\n        private _baseLatency: number;\n\n        private _nativeAudioContext: TNativeAudioContext;\n\n        private _nativeGainNode: null | TNativeGainNode;\n\n        private _nativeOscillatorNode: null | TNativeOscillatorNode;\n\n        private _state: null | 'suspended';\n\n        constructor(options: IAudioContextOptions = {}) {\n            if (nativeAudioContextConstructor === null) {\n                throw new Error('Missing the native AudioContext constructor.');\n            }\n\n            let nativeAudioContext: TNativeAudioContext;\n\n            try {\n                nativeAudioContext = new nativeAudioContextConstructor(options);\n            } catch (err) {\n                // Bug #192 Safari does throw a SyntaxError if the sampleRate is not supported.\n                if (err.code === 12 && err.message === 'sampleRate is not in range') {\n                    throw createNotSupportedError();\n                }\n\n                throw err;\n            }\n\n            // Bug #131 Safari returns null when there are four other AudioContexts running already.\n            if (nativeAudioContext === null) {\n                throw createUnknownError();\n            }\n\n            // Bug #51 Only Chrome and Edge throw an error if the given latencyHint is invalid.\n            if (!isValidLatencyHint(options.latencyHint)) {\n                throw new TypeError(\n                    `The provided value '${options.latencyHint}' is not a valid enum value of type AudioContextLatencyCategory.`\n                );\n            }\n\n            // Bug #150 Safari does not support setting the sampleRate.\n            if (options.sampleRate !== undefined && nativeAudioContext.sampleRate !== options.sampleRate) {\n                throw createNotSupportedError();\n            }\n\n            super(nativeAudioContext, 2);\n\n            const { latencyHint } = options;\n            const { sampleRate } = nativeAudioContext;\n\n            // @todo The values for 'balanced', 'interactive' and 'playback' are just copied from Chrome's implementation.\n            this._baseLatency =\n                typeof nativeAudioContext.baseLatency === 'number'\n                    ? nativeAudioContext.baseLatency\n                    : latencyHint === 'balanced'\n                    ? 512 / sampleRate\n                    : latencyHint === 'interactive' || latencyHint === undefined\n                    ? 256 / sampleRate\n                    : latencyHint === 'playback'\n                    ? 1024 / sampleRate\n                    : /*\n                       * @todo The min (256) and max (16384) values are taken from the allowed bufferSize values of a\n                       * ScriptProcessorNode.\n                       */\n                      (Math.max(2, Math.min(128, Math.round((latencyHint * sampleRate) / 128))) * 128) / sampleRate;\n            this._nativeAudioContext = nativeAudioContext;\n\n            // Bug #188: Safari will set the context's state to 'interrupted' in case the user switches tabs.\n            if (nativeAudioContextConstructor.name === 'webkitAudioContext') {\n                this._nativeGainNode = nativeAudioContext.createGain();\n                this._nativeOscillatorNode = nativeAudioContext.createOscillator();\n\n                this._nativeGainNode.gain.value = 1e-37;\n\n                this._nativeOscillatorNode.connect(this._nativeGainNode).connect(nativeAudioContext.destination);\n                this._nativeOscillatorNode.start();\n            } else {\n                this._nativeGainNode = null;\n                this._nativeOscillatorNode = null;\n            }\n\n            this._state = null;\n\n            /*\n             * Bug #34: Chrome and Edge pretend to be running right away, but fire an onstatechange event when the state actually changes\n             * to 'running'.\n             */\n            if (nativeAudioContext.state === 'running') {\n                this._state = 'suspended';\n\n                const revokeState = () => {\n                    if (this._state === 'suspended') {\n                        this._state = null;\n                    }\n\n                    nativeAudioContext.removeEventListener('statechange', revokeState);\n                };\n\n                nativeAudioContext.addEventListener('statechange', revokeState);\n            }\n        }\n\n        get baseLatency(): number {\n            return this._baseLatency;\n        }\n\n        get state(): TAudioContextState {\n            return this._state !== null ? this._state : this._nativeAudioContext.state;\n        }\n\n        public close(): Promise<void> {\n            // Bug #35: Firefox does not throw an error if the AudioContext was closed before.\n            if (this.state === 'closed') {\n                return this._nativeAudioContext.close().then(() => {\n                    throw createInvalidStateError();\n                });\n            }\n\n            // Bug #34: If the state was set to suspended before it should be revoked now.\n            if (this._state === 'suspended') {\n                this._state = null;\n            }\n\n            return this._nativeAudioContext.close().then(() => {\n                if (this._nativeGainNode !== null && this._nativeOscillatorNode !== null) {\n                    this._nativeOscillatorNode.stop();\n\n                    this._nativeGainNode.disconnect();\n                    this._nativeOscillatorNode.disconnect();\n                }\n\n                deactivateAudioGraph(this);\n            });\n        }\n\n        public createMediaElementSource(mediaElement: HTMLMediaElement): IMediaElementAudioSourceNode<this> {\n            return new mediaElementAudioSourceNodeConstructor(this, { mediaElement });\n        }\n\n        public createMediaStreamDestination(): IMediaStreamAudioDestinationNode<this> {\n            return new mediaStreamAudioDestinationNodeConstructor(this);\n        }\n\n        public createMediaStreamSource(mediaStream: MediaStream): IMediaStreamAudioSourceNode<this> {\n            return new mediaStreamAudioSourceNodeConstructor(this, { mediaStream });\n        }\n\n        public createMediaStreamTrackSource(mediaStreamTrack: MediaStreamTrack): IMediaStreamTrackAudioSourceNode<this> {\n            return new mediaStreamTrackAudioSourceNodeConstructor(this, { mediaStreamTrack });\n        }\n\n        public resume(): Promise<void> {\n            if (this._state === 'suspended') {\n                return new Promise((resolve, reject) => {\n                    const resolvePromise = () => {\n                        this._nativeAudioContext.removeEventListener('statechange', resolvePromise);\n\n                        if (this._nativeAudioContext.state === 'running') {\n                            resolve();\n                        } else {\n                            this.resume().then(resolve, reject);\n                        }\n                    };\n\n                    this._nativeAudioContext.addEventListener('statechange', resolvePromise);\n                });\n            }\n\n            return this._nativeAudioContext.resume().catch((err) => {\n                // Bug #55: Chrome and Edge do throw an InvalidAccessError instead of an InvalidStateError.\n                // Bug #56: Safari invokes the catch handler but without an error.\n                if (err === undefined || err.code === 15) {\n                    throw createInvalidStateError();\n                }\n\n                throw err;\n            });\n        }\n\n        public suspend(): Promise<void> {\n            return this._nativeAudioContext.suspend().catch((err) => {\n                // Bug #56: Safari invokes the catch handler but without an error.\n                if (err === undefined) {\n                    throw createInvalidStateError();\n                }\n\n                throw err;\n            });\n        }\n    };\n};\n", "import { IAudioDestinationNode } from '../interfaces';\nimport {\n    TAudioDestinationNodeConstructorFactory,\n    TAudioNodeRenderer,\n    TChannelCountMode,\n    TContext,\n    TNativeAudioDestinationNode\n} from '../types';\n\nexport const createAudioDestinationNodeConstructor: TAudioDestinationNodeConstructorFactory = (\n    audioNodeConstructor,\n    createAudioDestinationNodeRenderer,\n    createIndexSizeError,\n    createInvalidStateError,\n    createNativeAudioDestinationNode,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    renderInputsOfAudioNode\n) => {\n    return class AudioDestinationNode<T extends TContext> extends audioNodeConstructor<T> implements IAudioDestinationNode<T> {\n        private _isNodeOfNativeOfflineAudioContext: boolean;\n\n        private _nativeAudioDestinationNode: TNativeAudioDestinationNode;\n\n        constructor(context: T, channelCount: number) {\n            const nativeContext = getNativeContext(context);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const nativeAudioDestinationNode = createNativeAudioDestinationNode(nativeContext, channelCount, isOffline);\n            const audioDestinationNodeRenderer = <TAudioNodeRenderer<T, this>>(\n                (isOffline ? createAudioDestinationNodeRenderer(renderInputsOfAudioNode) : null)\n            );\n\n            super(context, false, nativeAudioDestinationNode, audioDestinationNodeRenderer);\n\n            this._isNodeOfNativeOfflineAudioContext = isOffline;\n            this._nativeAudioDestinationNode = nativeAudioDestinationNode;\n        }\n\n        get channelCount(): number {\n            return this._nativeAudioDestinationNode.channelCount;\n        }\n\n        set channelCount(value) {\n            // Bug #52: Chrome, Edge & Safari do not throw an exception at all.\n            // Bug #54: Firefox does throw an IndexSizeError.\n            if (this._isNodeOfNativeOfflineAudioContext) {\n                throw createInvalidStateError();\n            }\n\n            // Bug #47: The AudioDestinationNode in Safari does not initialize the maxChannelCount property correctly.\n            if (value > this._nativeAudioDestinationNode.maxChannelCount) {\n                throw createIndexSizeError();\n            }\n\n            this._nativeAudioDestinationNode.channelCount = value;\n        }\n\n        get channelCountMode(): TChannelCountMode {\n            return this._nativeAudioDestinationNode.channelCountMode;\n        }\n\n        set channelCountMode(value) {\n            // Bug #53: No browser does throw an exception yet.\n            if (this._isNodeOfNativeOfflineAudioContext) {\n                throw createInvalidStateError();\n            }\n\n            this._nativeAudioDestinationNode.channelCountMode = value;\n        }\n\n        get maxChannelCount(): number {\n            return this._nativeAudioDestinationNode.maxChannelCount;\n        }\n    };\n};\n", "import { IAudioDestinationNode, IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport {\n    TAudioDestinationNodeRendererFactory,\n    TNativeAudioDestinationNode,\n    TNativeOfflineAudioContext,\n    TRenderInputsOfAudioNodeFunction\n} from '../types';\n\nexport const createAudioDestinationNodeRenderer: TAudioDestinationNodeRendererFactory = <\n    T extends IMinimalOfflineAudioContext | IOfflineAudioContext\n>(\n    renderInputsOfAudioNode: TRenderInputsOfAudioNodeFunction\n) => {\n    const renderedNativeAudioDestinationNodes = new WeakMap<TNativeOfflineAudioContext, TNativeAudioDestinationNode>();\n\n    const createAudioDestinationNode = async (proxy: IAudioDestinationNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext) => {\n        const nativeAudioDestinationNode = nativeOfflineAudioContext.destination;\n\n        renderedNativeAudioDestinationNodes.set(nativeOfflineAudioContext, nativeAudioDestinationNode);\n\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioDestinationNode);\n\n        return nativeAudioDestinationNode;\n    };\n\n    return {\n        render(\n            proxy: IAudioDestinationNode<T>,\n            nativeOfflineAudioContext: TNativeOfflineAudioContext\n        ): Promise<TNativeAudioDestinationNode> {\n            const renderedNativeAudioDestinationNode = renderedNativeAudioDestinationNodes.get(nativeOfflineAudioContext);\n\n            if (renderedNativeAudioDestinationNode !== undefined) {\n                return Promise.resolve(renderedNativeAudioDestinationNode);\n            }\n\n            return createAudioDestinationNode(proxy, nativeOfflineAudioContext);\n        }\n    };\n};\n", "import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { IAudioParam } from '../interfaces';\nimport { TAudioListenerFactoryFactory } from '../types';\n\nexport const createAudioListenerFactory: TAudioListenerFactoryFactory = (\n    createAudioParam,\n    createNativeChannelMergerNode,\n    createNativeConstantSourceNode,\n    createNativeScriptProcessorNode,\n    createNotSupportedError,\n    getFirstSample,\n    isNativeOfflineAudioContext,\n    overwriteAccessors\n) => {\n    return (context, nativeContext) => {\n        const nativeListener = nativeContext.listener;\n\n        // Bug #117: Only Chrome & Edge support the new interface already.\n        const createFakeAudioParams = () => {\n            const buffer = new Float32Array(1);\n            const channelMergerNode = createNativeChannelMergerNode(nativeContext, {\n                channelCount: 1,\n                channelCountMode: 'explicit',\n                channelInterpretation: 'speakers',\n                numberOfInputs: 9\n            });\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n\n            let isScriptProcessorNodeCreated = false;\n            let lastOrientation: [number, number, number, number, number, number] = [0, 0, -1, 0, 1, 0];\n            let lastPosition: [number, number, number] = [0, 0, 0];\n\n            const createScriptProcessorNode = () => {\n                if (isScriptProcessorNodeCreated) {\n                    return;\n                }\n\n                isScriptProcessorNodeCreated = true;\n\n                const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, 256, 9, 0);\n\n                // tslint:disable-next-line:deprecation\n                scriptProcessorNode.onaudioprocess = ({ inputBuffer }) => {\n                    const orientation: [number, number, number, number, number, number] = [\n                        getFirstSample(inputBuffer, buffer, 0),\n                        getFirstSample(inputBuffer, buffer, 1),\n                        getFirstSample(inputBuffer, buffer, 2),\n                        getFirstSample(inputBuffer, buffer, 3),\n                        getFirstSample(inputBuffer, buffer, 4),\n                        getFirstSample(inputBuffer, buffer, 5)\n                    ];\n\n                    if (orientation.some((value, index) => value !== lastOrientation[index])) {\n                        nativeListener.setOrientation(...orientation); // tslint:disable-line:deprecation\n\n                        lastOrientation = orientation;\n                    }\n\n                    const positon: [number, number, number] = [\n                        getFirstSample(inputBuffer, buffer, 6),\n                        getFirstSample(inputBuffer, buffer, 7),\n                        getFirstSample(inputBuffer, buffer, 8)\n                    ];\n\n                    if (positon.some((value, index) => value !== lastPosition[index])) {\n                        nativeListener.setPosition(...positon); // tslint:disable-line:deprecation\n\n                        lastPosition = positon;\n                    }\n                };\n\n                channelMergerNode.connect(scriptProcessorNode);\n            };\n            const createSetOrientation = (index: number) => (value: number) => {\n                if (value !== lastOrientation[index]) {\n                    lastOrientation[index] = value;\n\n                    nativeListener.setOrientation(...lastOrientation); // tslint:disable-line:deprecation\n                }\n            };\n            const createSetPosition = (index: number) => (value: number) => {\n                if (value !== lastPosition[index]) {\n                    lastPosition[index] = value;\n\n                    nativeListener.setPosition(...lastPosition); // tslint:disable-line:deprecation\n                }\n            };\n            const createFakeAudioParam = (input: number, initialValue: number, setValue: (value: number) => void) => {\n                const constantSourceNode = createNativeConstantSourceNode(nativeContext, {\n                    channelCount: 1,\n                    channelCountMode: 'explicit',\n                    channelInterpretation: 'discrete',\n                    offset: initialValue\n                });\n\n                constantSourceNode.connect(channelMergerNode, 0, input);\n\n                // @todo This should be stopped when the context is closed.\n                constantSourceNode.start();\n\n                Object.defineProperty(constantSourceNode.offset, 'defaultValue', {\n                    get(): number {\n                        return initialValue;\n                    }\n                });\n\n                /*\n                 * Bug #62 & #74: Safari does not support ConstantSourceNodes and does not export the correct values for maxValue and\n                 * minValue for GainNodes.\n                 */\n                const audioParam = createAudioParam(\n                    <any>{ context },\n                    isOffline,\n                    constantSourceNode.offset,\n                    MOST_POSITIVE_SINGLE_FLOAT,\n                    MOST_NEGATIVE_SINGLE_FLOAT\n                );\n\n                overwriteAccessors(\n                    audioParam,\n                    'value',\n                    (get) => () => get.call(audioParam),\n                    (set) => (value) => {\n                        try {\n                            set.call(audioParam, value);\n                        } catch (err) {\n                            if (err.code !== 9) {\n                                throw err;\n                            }\n                        }\n\n                        createScriptProcessorNode();\n\n                        if (isOffline) {\n                            // Bug #117: Using setOrientation() and setPosition() doesn't work with an OfflineAudioContext.\n                            setValue(value);\n                        }\n                    }\n                );\n\n                audioParam.cancelAndHoldAtTime = ((cancelAndHoldAtTime) => {\n                    if (isOffline) {\n                        return () => {\n                            throw createNotSupportedError();\n                        };\n                    }\n\n                    return (...args: Parameters<IAudioParam['cancelAndHoldAtTime']>) => {\n                        const value = cancelAndHoldAtTime.apply(audioParam, args);\n\n                        createScriptProcessorNode();\n\n                        return value;\n                    };\n                })(audioParam.cancelAndHoldAtTime);\n                audioParam.cancelScheduledValues = ((cancelScheduledValues) => {\n                    if (isOffline) {\n                        return () => {\n                            throw createNotSupportedError();\n                        };\n                    }\n\n                    return (...args: Parameters<IAudioParam['cancelScheduledValues']>) => {\n                        const value = cancelScheduledValues.apply(audioParam, args);\n\n                        createScriptProcessorNode();\n\n                        return value;\n                    };\n                })(audioParam.cancelScheduledValues);\n                audioParam.exponentialRampToValueAtTime = ((exponentialRampToValueAtTime) => {\n                    if (isOffline) {\n                        return () => {\n                            throw createNotSupportedError();\n                        };\n                    }\n\n                    return (...args: Parameters<IAudioParam['exponentialRampToValueAtTime']>) => {\n                        const value = exponentialRampToValueAtTime.apply(audioParam, args);\n\n                        createScriptProcessorNode();\n\n                        return value;\n                    };\n                })(audioParam.exponentialRampToValueAtTime);\n                audioParam.linearRampToValueAtTime = ((linearRampToValueAtTime) => {\n                    if (isOffline) {\n                        return () => {\n                            throw createNotSupportedError();\n                        };\n                    }\n\n                    return (...args: Parameters<IAudioParam['linearRampToValueAtTime']>) => {\n                        const value = linearRampToValueAtTime.apply(audioParam, args);\n\n                        createScriptProcessorNode();\n\n                        return value;\n                    };\n                })(audioParam.linearRampToValueAtTime);\n                audioParam.setTargetAtTime = ((setTargetAtTime) => {\n                    if (isOffline) {\n                        return () => {\n                            throw createNotSupportedError();\n                        };\n                    }\n\n                    return (...args: Parameters<IAudioParam['setTargetAtTime']>) => {\n                        const value = setTargetAtTime.apply(audioParam, args);\n\n                        createScriptProcessorNode();\n\n                        return value;\n                    };\n                })(audioParam.setTargetAtTime);\n                audioParam.setValueAtTime = ((setValueAtTime) => {\n                    if (isOffline) {\n                        return () => {\n                            throw createNotSupportedError();\n                        };\n                    }\n\n                    return (...args: Parameters<IAudioParam['setValueAtTime']>) => {\n                        const value = setValueAtTime.apply(audioParam, args);\n\n                        createScriptProcessorNode();\n\n                        return value;\n                    };\n                })(audioParam.setValueAtTime);\n                audioParam.setValueCurveAtTime = ((setValueCurveAtTime) => {\n                    if (isOffline) {\n                        return () => {\n                            throw createNotSupportedError();\n                        };\n                    }\n\n                    return (...args: Parameters<IAudioParam['setValueCurveAtTime']>) => {\n                        const value = setValueCurveAtTime.apply(audioParam, args);\n\n                        createScriptProcessorNode();\n\n                        return value;\n                    };\n                })(audioParam.setValueCurveAtTime);\n\n                return audioParam;\n            };\n\n            return {\n                forwardX: createFakeAudioParam(0, 0, createSetOrientation(0)),\n                forwardY: createFakeAudioParam(1, 0, createSetOrientation(1)),\n                forwardZ: createFakeAudioParam(2, -1, createSetOrientation(2)),\n                positionX: createFakeAudioParam(6, 0, createSetPosition(0)),\n                positionY: createFakeAudioParam(7, 0, createSetPosition(1)),\n                positionZ: createFakeAudioParam(8, 0, createSetPosition(2)),\n                upX: createFakeAudioParam(3, 0, createSetOrientation(3)),\n                upY: createFakeAudioParam(4, 1, createSetOrientation(4)),\n                upZ: createFakeAudioParam(5, 0, createSetOrientation(5))\n            };\n        };\n\n        const { forwardX, forwardY, forwardZ, positionX, positionY, positionZ, upX, upY, upZ } =\n            nativeListener.forwardX === undefined ? createFakeAudioParams() : nativeListener;\n\n        return {\n            get forwardX(): IAudioParam {\n                return forwardX;\n            },\n            get forwardY(): IAudioParam {\n                return forwardY;\n            },\n            get forwardZ(): IAudioParam {\n                return forwardZ;\n            },\n            get positionX(): IAudioParam {\n                return positionX;\n            },\n            get positionY(): IAudioParam {\n                return positionY;\n            },\n            get positionZ(): IAudioParam {\n                return positionZ;\n            },\n            get upX(): IAudioParam {\n                return upX;\n            },\n            get upY(): IAudioParam {\n                return upY;\n            },\n            get upZ(): IAudioParam {\n                return upZ;\n            }\n        };\n    };\n};\n", "import { IAudioNode, IAudioParam } from '../interfaces';\nimport { TContext } from '../types';\n\nexport const isAudioNode = <T extends TContext>(\n    audioNodeOrAudioParam: IAudioNode<T> | IAudioParam\n): audioNodeOrAudioParam is IAudioNode<T> => {\n    return 'context' in audioNodeOrAudioParam;\n};\n", "import { TAudioNodeOutputConnection, TContext, TOutputConnection } from '../types';\nimport { isAudioNode } from './audio-node';\n\nexport const isAudioNodeOutputConnection = <T extends TContext>(\n    outputConnection: TOutputConnection<T>\n): outputConnection is TAudioNodeOutputConnection<T> => {\n    return isAudioNode(outputConnection[0]);\n};\n", "import { TInsertElementInSetFunction } from '../types';\n\nexport const insertElementInSet: TInsertElementInSetFunction = (set, element, predicate, ignoreDuplicates) => {\n    for (const lmnt of set) {\n        if (predicate(lmnt)) {\n            if (ignoreDuplicates) {\n                return false;\n            }\n\n            throw Error('The set contains at least one similar element.');\n        }\n    }\n\n    set.add(element);\n\n    return true;\n};\n", "import { IAudioNode } from '../interfaces';\nimport { TActiveInputConnection, TContext, TPassiveAudioParamInputConnection } from '../types';\nimport { insertElementInSet } from './insert-element-in-set';\n\nexport const addActiveInputConnectionToAudioParam = <T extends TContext>(\n    activeInputs: Set<TActiveInputConnection<T>>,\n    source: IAudioNode<T>,\n    [output, eventListener]: TPassiveAudioParamInputConnection,\n    ignoreDuplicates: boolean\n) => {\n    insertElementInSet(\n        activeInputs,\n        [source, output, eventListener],\n        (activeInputConnection) => activeInputConnection[0] === source && activeInputConnection[1] === output,\n        ignoreDuplicates\n    );\n};\n", "import { IAudioNode } from '../interfaces';\nimport { TActiveInputConnection, TContext, TPassiveAudioParamInputConnection } from '../types';\nimport { insertElementInSet } from './insert-element-in-set';\n\nexport const addPassiveInputConnectionToAudioParam = <T extends TContext>(\n    passiveInputs: WeakMap<IAudioNode<T>, Set<TPassiveAudioParamInputConnection>>,\n    [source, output, eventListener]: TActiveInputConnection<T>,\n    ignoreDuplicates: boolean\n) => {\n    const passiveInputConnections = passiveInputs.get(source);\n\n    if (passiveInputConnections === undefined) {\n        passiveInputs.set(source, new Set([[output, eventListener]]));\n    } else {\n        insertElementInSet(\n            passiveInputConnections,\n            [output, eventListener],\n            (passiveInputConnection) => passiveInputConnection[0] === output,\n            ignoreDuplicates\n        );\n    }\n};\n", "import { INativeAudioNodeFaker } from '../interfaces';\nimport { TNativeAudioNode } from '../types';\n\nexport const isNativeAudioNodeFaker = (\n    nativeAudioNodeOrNativeAudioNodeFaker: TNativeAudioNode | INativeAudioNodeFaker\n): nativeAudioNodeOrNativeAudioNodeFaker is INativeAudioNodeFaker => {\n    return 'inputs' in nativeAudioNodeOrNativeAudioNodeFaker;\n};\n", "import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { INativeAudioNodeFaker } from '../interfaces';\nimport { TConnectNativeAudioNodeToNativeAudioNodeFunction, TNativeAudioNode } from '../types';\n\nexport const connectNativeAudioNodeToNativeAudioNode: TConnectNativeAudioNodeToNativeAudioNodeFunction = (\n    nativeSourceAudioNode: INativeAudioNodeFaker | TNativeAudioNode,\n    nativeDestinationAudioNode: INativeAudioNodeFaker | TNativeAudioNode,\n    output: number,\n    input: number\n): [TNativeAudioNode, number, number] => {\n    if (isNativeAudioNodeFaker(nativeDestinationAudioNode)) {\n        const fakeNativeDestinationAudioNode = nativeDestinationAudioNode.inputs[input];\n\n        nativeSourceAudioNode.connect(fakeNativeDestinationAudioNode, output, 0);\n\n        return [fakeNativeDestinationAudioNode, output, 0];\n    }\n\n    nativeSourceAudioNode.connect(nativeDestinationAudioNode, output, input);\n\n    return [nativeDestinationAudioNode, output, input];\n};\n", "import { IAudioNode } from '../interfaces';\nimport { TActiveInputConnection, TContext } from '../types';\n\nexport const deleteActiveInputConnection = <T extends TContext>(\n    activeInputConnections: Set<TActiveInputConnection<T>>,\n    source: IAudioNode<T>,\n    output: number\n): null | TActiveInputConnection<T> => {\n    for (const activeInputConnection of activeInputConnections) {\n        if (activeInputConnection[0] === source && activeInputConnection[1] === output) {\n            activeInputConnections.delete(activeInputConnection);\n\n            return activeInputConnection;\n        }\n    }\n\n    return null;\n};\n", "import { IAudioNode } from '../interfaces';\nimport { TActiveInputConnection, TContext } from '../types';\nimport { pickElementFromSet } from './pick-element-from-set';\n\nexport const deleteActiveInputConnectionToAudioParam = <T extends TContext>(\n    activeInputs: Set<TActiveInputConnection<T>>,\n    source: IAudioNode<T>,\n    output: number\n) => {\n    return pickElementFromSet(\n        activeInputs,\n        (activeInputConnection) => activeInputConnection[0] === source && activeInputConnection[1] === output\n    );\n};\n", "import { IAudioNode } from '../interfaces';\nimport { TContext, TInternalStateEventListener } from '../types';\nimport { getEventListenersOfAudioNode } from './get-event-listeners-of-audio-node';\n\nexport const deleteEventListenerOfAudioNode = <T extends TContext>(\n    audioNode: IAudioNode<T>,\n    eventListener: TInternalStateEventListener\n) => {\n    const eventListeners = getEventListenersOfAudioNode(audioNode);\n\n    if (!eventListeners.delete(eventListener)) {\n        throw new Error('Missing the expected event listener.');\n    }\n};\n", "import { IAudioNode } from '../interfaces';\nimport { TContext, TPassiveAudioParamInputConnection } from '../types';\nimport { getValueForKey } from './get-value-for-key';\nimport { pickElementFromSet } from './pick-element-from-set';\n\nexport const deletePassiveInputConnectionToAudioParam = <T extends TContext>(\n    passiveInputs: WeakMap<IAudioNode<T>, Set<TPassiveAudioParamInputConnection>>,\n    source: IAudioNode<T>,\n    output: number\n) => {\n    const passiveInputConnections = getValueForKey(passiveInputs, source);\n    const matchingConnection = pickElementFromSet(\n        passiveInputConnections,\n        (passiveInputConnection) => passiveInputConnection[0] === output\n    );\n\n    if (passiveInputConnections.size === 0) {\n        passiveInputs.delete(source);\n    }\n\n    return matchingConnection;\n};\n", "import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { TDisconnectNativeAudioNodeFromNativeAudioNodeFunction } from '../types';\n\nexport const disconnectNativeAudioNodeFromNativeAudioNode: TDisconnectNativeAudioNodeFromNativeAudioNodeFunction = (\n    nativeSourceAudioNode,\n    nativeDestinationAudioNode,\n    output,\n    input\n) => {\n    if (isNativeAudioNodeFaker(nativeDestinationAudioNode)) {\n        nativeSourceAudioNode.disconnect(nativeDestinationAudioNode.inputs[input], output, 0);\n    } else {\n        nativeSourceAudioNode.disconnect(nativeDestinationAudioNode, output, input);\n    }\n};\n", "import { AUDIO_NODE_STORE } from '../globals';\nimport { IAudioNode, INativeAudioNodeFaker } from '../interfaces';\nimport { TContext, TGetNativeAudioNodeFunction, TNativeAudioNode } from '../types';\nimport { getValueForKey } from './get-value-for-key';\n\nexport const getNativeAudioNode: TGetNativeAudioNodeFunction = <T extends TContext, U extends TNativeAudioNode | INativeAudioNodeFaker>(\n    audioNode: IAudioNode<T>\n): U => {\n    return <U>getValueForKey(AUDIO_NODE_STORE, audioNode);\n};\n", "import { AUDIO_PARAM_STORE } from '../globals';\nimport { IAudioParam } from '../interfaces';\nimport { TNativeAudioParam } from '../types';\nimport { getValueForKey } from './get-value-for-key';\n\nexport const getNativeAudioParam = (audioParam: IAudioParam): TNativeAudioParam => {\n    return getValueForKey(AUDIO_PARAM_STORE, audioParam);\n};\n", "import { CYCLE_COUNTERS } from '../globals';\nimport { TIsPartOfACycleFunction } from '../types';\n\nexport const isPartOfACycle: TIsPartOfACycleFunction = (audioNode) => {\n    return CYCLE_COUNTERS.has(audioNode);\n};\n", "import { ACTIVE_AUDIO_NODE_STORE } from '../globals';\nimport { TIsPassiveAudioNodeFunction } from '../types';\n\nexport const isPassiveAudioNode: TIsPassiveAudioNodeFunction = (audioNode) => {\n    return !ACTIVE_AUDIO_NODE_STORE.has(audioNode);\n};\n", "import { TNativeAudioContext, TNativeAudioWorkletNodeConstructor } from '../types';\n\nexport const testAudioNodeDisconnectMethodSupport = (\n    nativeAudioContext: TNativeAudioContext,\n    nativeAudioWorkletNodeConstructor: null | TNativeAudioWorkletNodeConstructor\n): Promise<boolean> => {\n    return new Promise((resolve) => {\n        /*\n         * This bug existed in Safari up until v14.0.2. Since AudioWorklets were not supported in Safari until v14.1 the presence of the\n         * constructor for an AudioWorkletNode can be used here to skip the test.\n         */\n        if (nativeAudioWorkletNodeConstructor !== null) {\n            resolve(true);\n        } else {\n            const analyzer = nativeAudioContext.createScriptProcessor(256, 1, 1); // tslint:disable-line deprecation\n            const dummy = nativeAudioContext.createGain();\n            // Bug #95: Safari does not play one sample buffers.\n            const ones = nativeAudioContext.createBuffer(1, 2, 44100);\n            const channelData = ones.getChannelData(0);\n\n            channelData[0] = 1;\n            channelData[1] = 1;\n\n            const source = nativeAudioContext.createBufferSource();\n\n            source.buffer = ones;\n            source.loop = true;\n\n            source.connect(analyzer).connect(nativeAudioContext.destination);\n            source.connect(dummy);\n            source.disconnect(dummy);\n\n            // tslint:disable-next-line:deprecation\n            analyzer.onaudioprocess = (event) => {\n                const chnnlDt = event.inputBuffer.getChannelData(0); // tslint:disable-line deprecation\n\n                if (Array.prototype.some.call(chnnlDt, (sample: number) => sample === 1)) {\n                    resolve(true);\n                } else {\n                    resolve(false);\n                }\n\n                source.stop();\n\n                analyzer.onaudioprocess = null; // tslint:disable-line:deprecation\n\n                source.disconnect(analyzer);\n                analyzer.disconnect(nativeAudioContext.destination);\n            };\n\n            source.start();\n        }\n    });\n};\n", "import { IAudioNode } from '../interfaces';\nimport { TContext } from '../types';\n\nexport const visitEachAudioNodeOnce = <T extends TContext>(\n    cycles: IAudioNode<T>[][],\n    visitor: (audioNode: IAudioNode<T>, count: number) => void\n): void => {\n    const counts = new Map<IAudioNode<T>, number>();\n\n    for (const cycle of cycles) {\n        for (const audioNode of cycle) {\n            const count = counts.get(audioNode);\n\n            counts.set(audioNode, count === undefined ? 1 : count + 1);\n        }\n    }\n\n    counts.forEach((count, audioNode) => visitor(audioNode, count));\n};\n", "import { TNativeAudioNode, TNativeAudioParam } from '../types';\n\nexport const isNativeAudioNode = (\n    nativeAudioNodeOrAudioParam: TNativeAudioNode | TNativeAudioParam\n): nativeAudioNodeOrAudioParam is TNativeAudioNode => {\n    return 'context' in nativeAudioNodeOrAudioParam;\n};\n", "import { isNativeAudioNode } from '../guards/native-audio-node';\nimport { TNativeAudioNode, TNativeAudioParam } from '../types';\n\nexport const wrapAudioNodeDisconnectMethod = (nativeAudioNode: TNativeAudioNode): void => {\n    const connections = new Map<TNativeAudioNode | TNativeAudioParam, { input: number; output: number }[]>();\n\n    nativeAudioNode.connect = <TNativeAudioNode['connect']>((connect) => {\n        // tslint:disable-next-line:invalid-void no-inferrable-types\n        return (destination: TNativeAudioNode | TNativeAudioParam, output = 0, input: number = 0): void | TNativeAudioNode => {\n            const returnValue = isNativeAudioNode(destination) ? connect(destination, output, input) : connect(destination, output);\n\n            // Save the new connection only if the calls to connect above didn't throw an error.\n            const connectionsToDestination = connections.get(destination);\n\n            if (connectionsToDestination === undefined) {\n                connections.set(destination, [{ input, output }]);\n            } else {\n                if (connectionsToDestination.every((connection) => connection.input !== input || connection.output !== output)) {\n                    connectionsToDestination.push({ input, output });\n                }\n            }\n\n            return returnValue;\n        };\n    })(nativeAudioNode.connect.bind(nativeAudioNode));\n\n    nativeAudioNode.disconnect = ((disconnect) => {\n        return (destinationOrOutput?: number | TNativeAudioNode | TNativeAudioParam, output?: number, input?: number): void => {\n            disconnect.apply(nativeAudioNode);\n\n            if (destinationOrOutput === undefined) {\n                connections.clear();\n            } else if (typeof destinationOrOutput === 'number') {\n                for (const [destination, connectionsToDestination] of connections) {\n                    const filteredConnections = connectionsToDestination.filter((connection) => connection.output !== destinationOrOutput);\n\n                    if (filteredConnections.length === 0) {\n                        connections.delete(destination);\n                    } else {\n                        connections.set(destination, filteredConnections);\n                    }\n                }\n            } else if (connections.has(destinationOrOutput)) {\n                if (output === undefined) {\n                    connections.delete(destinationOrOutput);\n                } else {\n                    const connectionsToDestination = connections.get(destinationOrOutput);\n\n                    if (connectionsToDestination !== undefined) {\n                        const filteredConnections = connectionsToDestination.filter(\n                            (connection) => connection.output !== output && (connection.input !== input || input === undefined)\n                        );\n\n                        if (filteredConnections.length === 0) {\n                            connections.delete(destinationOrOutput);\n                        } else {\n                            connections.set(destinationOrOutput, filteredConnections);\n                        }\n                    }\n                }\n            }\n\n            for (const [destination, connectionsToDestination] of connections) {\n                connectionsToDestination.forEach((connection) => {\n                    if (isNativeAudioNode(destination)) {\n                        nativeAudioNode.connect(destination, connection.output, connection.input);\n                    } else {\n                        nativeAudioNode.connect(destination, connection.output);\n                    }\n                });\n            }\n        };\n    })(nativeAudioNode.disconnect);\n};\n", "import { AUDIO_NODE_STORE, EVENT_LISTENERS } from '../globals';\nimport { isAudioNode } from '../guards/audio-node';\nimport { isAudioNodeOutputConnection } from '../guards/audio-node-output-connection';\nimport { addActiveInputConnectionToAudioParam } from '../helpers/add-active-input-connection-to-audio-param';\nimport { addPassiveInputConnectionToAudioParam } from '../helpers/add-passive-input-connection-to-audio-param';\nimport { connectNativeAudioNodeToNativeAudioNode } from '../helpers/connect-native-audio-node-to-native-audio-node';\nimport { deleteActiveInputConnection } from '../helpers/delete-active-input-connection';\nimport { deleteActiveInputConnectionToAudioParam } from '../helpers/delete-active-input-connection-to-audio-param';\nimport { deleteEventListenerOfAudioNode } from '../helpers/delete-event-listeners-of-audio-node';\nimport { deletePassiveInputConnectionToAudioNode } from '../helpers/delete-passive-input-connection-to-audio-node';\nimport { deletePassiveInputConnectionToAudioParam } from '../helpers/delete-passive-input-connection-to-audio-param';\nimport { disconnectNativeAudioNodeFromNativeAudioNode } from '../helpers/disconnect-native-audio-node-from-native-audio-node';\nimport { getAudioNodeConnections } from '../helpers/get-audio-node-connections';\nimport { getAudioParamConnections } from '../helpers/get-audio-param-connections';\nimport { getEventListenersOfAudioNode } from '../helpers/get-event-listeners-of-audio-node';\nimport { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { getNativeAudioParam } from '../helpers/get-native-audio-param';\nimport { insertElementInSet } from '../helpers/insert-element-in-set';\nimport { isActiveAudioNode } from '../helpers/is-active-audio-node';\nimport { isPartOfACycle } from '../helpers/is-part-of-a-cycle';\nimport { isPassiveAudioNode } from '../helpers/is-passive-audio-node';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassiveWhenNecessary } from '../helpers/set-internal-state-to-passive-when-necessary';\nimport { testAudioNodeDisconnectMethodSupport } from '../helpers/test-audio-node-disconnect-method-support';\nimport { visitEachAudioNodeOnce } from '../helpers/visit-each-audio-node-once';\nimport { wrapAudioNodeDisconnectMethod } from '../helpers/wrap-audio-node-disconnect-method';\nimport {\n    IAudioNode,\n    IAudioNodeRenderer,\n    IAudioParam,\n    IMinimalOfflineAudioContext,\n    INativeAudioNodeFaker,\n    IOfflineAudioContext\n} from '../interfaces';\nimport {\n    TAudioNodeConstructorFactory,\n    TChannelCountMode,\n    TChannelInterpretation,\n    TContext,\n    TInternalStateEventListener,\n    TNativeAudioNode,\n    TNativeAudioParam\n} from '../types';\n\nconst addConnectionToAudioParamOfAudioContext = <T extends TContext>(\n    source: IAudioNode<T>,\n    destination: IAudioParam,\n    output: number,\n    isOffline: boolean\n): boolean => {\n    const { activeInputs, passiveInputs } = getAudioParamConnections<T>(destination);\n    const { outputs } = getAudioNodeConnections(source);\n    const eventListeners = getEventListenersOfAudioNode(source);\n\n    const eventListener: TInternalStateEventListener = (isActive) => {\n        const nativeAudioNode = getNativeAudioNode(source);\n        const nativeAudioParam = getNativeAudioParam(destination);\n\n        if (isActive) {\n            const partialConnection = deletePassiveInputConnectionToAudioParam(passiveInputs, source, output);\n\n            addActiveInputConnectionToAudioParam(activeInputs, source, partialConnection, false);\n\n            if (!isOffline && !isPartOfACycle(source)) {\n                nativeAudioNode.connect(nativeAudioParam, output);\n            }\n        } else {\n            const partialConnection = deleteActiveInputConnectionToAudioParam(activeInputs, source, output);\n\n            addPassiveInputConnectionToAudioParam(passiveInputs, partialConnection, false);\n\n            if (!isOffline && !isPartOfACycle(source)) {\n                nativeAudioNode.disconnect(nativeAudioParam, output);\n            }\n        }\n    };\n\n    if (\n        insertElementInSet(\n            outputs,\n            [destination, output],\n            (outputConnection) => outputConnection[0] === destination && outputConnection[1] === output,\n            true\n        )\n    ) {\n        eventListeners.add(eventListener);\n\n        if (isActiveAudioNode(source)) {\n            addActiveInputConnectionToAudioParam(activeInputs, source, [output, eventListener], true);\n        } else {\n            addPassiveInputConnectionToAudioParam(passiveInputs, [source, output, eventListener], true);\n        }\n\n        return true;\n    }\n\n    return false;\n};\n\nconst deleteInputConnectionOfAudioNode = <T extends TContext>(\n    source: IAudioNode<T>,\n    destination: IAudioNode<T>,\n    output: number,\n    input: number\n): [null | TInternalStateEventListener, boolean] => {\n    const { activeInputs, passiveInputs } = getAudioNodeConnections(destination);\n\n    const activeInputConnection = deleteActiveInputConnection(activeInputs[input], source, output);\n\n    if (activeInputConnection === null) {\n        const passiveInputConnection = deletePassiveInputConnectionToAudioNode(passiveInputs, source, output, input);\n\n        return [passiveInputConnection[2], false];\n    }\n\n    return [activeInputConnection[2], true];\n};\n\nconst deleteInputConnectionOfAudioParam = <T extends TContext>(\n    source: IAudioNode<T>,\n    destination: IAudioParam,\n    output: number\n): [null | TInternalStateEventListener, boolean] => {\n    const { activeInputs, passiveInputs } = getAudioParamConnections<T>(destination);\n\n    const activeInputConnection = deleteActiveInputConnection(activeInputs, source, output);\n\n    if (activeInputConnection === null) {\n        const passiveInputConnection = deletePassiveInputConnectionToAudioParam(passiveInputs, source, output);\n\n        return [passiveInputConnection[1], false];\n    }\n\n    return [activeInputConnection[2], true];\n};\n\nconst deleteInputsOfAudioNode = <T extends TContext>(\n    source: IAudioNode<T>,\n    isOffline: boolean,\n    destination: IAudioNode<T>,\n    output: number,\n    input: number\n) => {\n    const [listener, isActive] = deleteInputConnectionOfAudioNode(source, destination, output, input);\n\n    if (listener !== null) {\n        deleteEventListenerOfAudioNode(source, listener);\n\n        if (isActive && !isOffline && !isPartOfACycle(source)) {\n            disconnectNativeAudioNodeFromNativeAudioNode(getNativeAudioNode(source), getNativeAudioNode(destination), output, input);\n        }\n    }\n\n    if (isActiveAudioNode(destination)) {\n        const { activeInputs } = getAudioNodeConnections(destination);\n\n        setInternalStateToPassiveWhenNecessary(destination, activeInputs);\n    }\n};\n\nconst deleteInputsOfAudioParam = <T extends TContext>(\n    source: IAudioNode<T>,\n    isOffline: boolean,\n    destination: IAudioParam,\n    output: number\n) => {\n    const [listener, isActive] = deleteInputConnectionOfAudioParam(source, destination, output);\n\n    if (listener !== null) {\n        deleteEventListenerOfAudioNode(source, listener);\n\n        if (isActive && !isOffline && !isPartOfACycle(source)) {\n            getNativeAudioNode(source).disconnect(getNativeAudioParam(destination), output);\n        }\n    }\n};\n\nconst deleteAnyConnection = <T extends TContext>(source: IAudioNode<T>, isOffline: boolean): (IAudioNode<T> | IAudioParam)[] => {\n    const audioNodeConnectionsOfSource = getAudioNodeConnections(source);\n    const destinations = [];\n\n    for (const outputConnection of audioNodeConnectionsOfSource.outputs) {\n        if (isAudioNodeOutputConnection(outputConnection)) {\n            deleteInputsOfAudioNode(source, isOffline, ...outputConnection);\n        } else {\n            deleteInputsOfAudioParam(source, isOffline, ...outputConnection);\n        }\n\n        destinations.push(outputConnection[0]);\n    }\n\n    audioNodeConnectionsOfSource.outputs.clear();\n\n    return destinations;\n};\n\nconst deleteConnectionAtOutput = <T extends TContext>(\n    source: IAudioNode<T>,\n    isOffline: boolean,\n    output: number\n): (IAudioNode<T> | IAudioParam)[] => {\n    const audioNodeConnectionsOfSource = getAudioNodeConnections(source);\n    const destinations = [];\n\n    for (const outputConnection of audioNodeConnectionsOfSource.outputs) {\n        if (outputConnection[1] === output) {\n            if (isAudioNodeOutputConnection(outputConnection)) {\n                deleteInputsOfAudioNode(source, isOffline, ...outputConnection);\n            } else {\n                deleteInputsOfAudioParam(source, isOffline, ...outputConnection);\n            }\n\n            destinations.push(outputConnection[0]);\n            audioNodeConnectionsOfSource.outputs.delete(outputConnection);\n        }\n    }\n\n    return destinations;\n};\n\nconst deleteConnectionToDestination = <T extends TContext, U extends TContext>(\n    source: IAudioNode<T>,\n    isOffline: boolean,\n    destination: IAudioNode<U> | IAudioParam,\n    output?: number,\n    input?: number\n): (IAudioNode<T> | IAudioParam)[] => {\n    const audioNodeConnectionsOfSource = getAudioNodeConnections(source);\n\n    return Array.from(audioNodeConnectionsOfSource.outputs)\n        .filter(\n            (outputConnection) =>\n                outputConnection[0] === destination &&\n                (output === undefined || outputConnection[1] === output) &&\n                (input === undefined || outputConnection[2] === input)\n        )\n        .map((outputConnection) => {\n            if (isAudioNodeOutputConnection(outputConnection)) {\n                deleteInputsOfAudioNode(source, isOffline, ...outputConnection);\n            } else {\n                deleteInputsOfAudioParam(source, isOffline, ...outputConnection);\n            }\n\n            audioNodeConnectionsOfSource.outputs.delete(outputConnection);\n\n            return outputConnection[0];\n        });\n};\n\nexport const createAudioNodeConstructor: TAudioNodeConstructorFactory = (\n    addAudioNodeConnections,\n    addConnectionToAudioNode,\n    cacheTestResult,\n    createIncrementCycleCounter,\n    createIndexSizeError,\n    createInvalidAccessError,\n    createNotSupportedError,\n    decrementCycleCounter,\n    detectCycles,\n    eventTargetConstructor,\n    getNativeContext,\n    isNativeAudioContext,\n    isNativeAudioNode,\n    isNativeAudioParam,\n    isNativeOfflineAudioContext,\n    nativeAudioWorkletNodeConstructor\n) => {\n    return class AudioNode<T extends TContext, EventMap extends Record<string, Event> = {}>\n        extends eventTargetConstructor<EventMap>\n        implements IAudioNode<T, EventMap>\n    {\n        private _context: T;\n\n        private _nativeAudioNode: INativeAudioNodeFaker | TNativeAudioNode;\n\n        constructor(\n            context: T,\n            isActive: boolean,\n            nativeAudioNode: INativeAudioNodeFaker | TNativeAudioNode,\n            audioNodeRenderer: T extends IMinimalOfflineAudioContext | IOfflineAudioContext ? IAudioNodeRenderer<T, IAudioNode<T>> : null\n        ) {\n            super(nativeAudioNode);\n\n            this._context = context;\n            this._nativeAudioNode = nativeAudioNode;\n\n            const nativeContext = getNativeContext(context);\n\n            // Bug #12: Safari does not support to disconnect a specific destination.\n            if (\n                isNativeAudioContext(nativeContext) &&\n                true !==\n                    cacheTestResult(testAudioNodeDisconnectMethodSupport, () => {\n                        return testAudioNodeDisconnectMethodSupport(nativeContext, nativeAudioWorkletNodeConstructor);\n                    })\n            ) {\n                wrapAudioNodeDisconnectMethod(nativeAudioNode);\n            }\n\n            AUDIO_NODE_STORE.set(this, nativeAudioNode);\n            EVENT_LISTENERS.set(this, new Set());\n\n            if (context.state !== 'closed' && isActive) {\n                setInternalStateToActive(this);\n            }\n\n            addAudioNodeConnections(this, audioNodeRenderer, nativeAudioNode);\n        }\n\n        get channelCount(): number {\n            return this._nativeAudioNode.channelCount;\n        }\n\n        set channelCount(value) {\n            this._nativeAudioNode.channelCount = value;\n        }\n\n        get channelCountMode(): TChannelCountMode {\n            return this._nativeAudioNode.channelCountMode;\n        }\n\n        set channelCountMode(value) {\n            this._nativeAudioNode.channelCountMode = value;\n        }\n\n        get channelInterpretation(): TChannelInterpretation {\n            return this._nativeAudioNode.channelInterpretation;\n        }\n\n        set channelInterpretation(value) {\n            this._nativeAudioNode.channelInterpretation = value;\n        }\n\n        get context(): T {\n            return this._context;\n        }\n\n        get numberOfInputs(): number {\n            return this._nativeAudioNode.numberOfInputs;\n        }\n\n        get numberOfOutputs(): number {\n            return this._nativeAudioNode.numberOfOutputs;\n        }\n\n        public connect<U extends TContext, V extends IAudioNode<U>>(destinationNode: V, output?: number, input?: number): V;\n        public connect(destinationParam: IAudioParam, output?: number): void;\n        // tslint:disable-next-line:invalid-void\n        public connect<U extends TContext, V extends IAudioNode<U>>(destination: V | IAudioParam, output = 0, input = 0): void | V {\n            // Bug #174: Safari does expose a wrong numberOfOutputs for MediaStreamAudioDestinationNodes.\n            if (output < 0 || output >= this._nativeAudioNode.numberOfOutputs) {\n                throw createIndexSizeError();\n            }\n\n            const nativeContext = getNativeContext(this._context);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n\n            if (isNativeAudioNode(destination) || isNativeAudioParam(destination)) {\n                throw createInvalidAccessError();\n            }\n\n            if (isAudioNode(destination)) {\n                const nativeDestinationAudioNode = getNativeAudioNode(destination);\n\n                try {\n                    const connection = connectNativeAudioNodeToNativeAudioNode(\n                        this._nativeAudioNode,\n                        nativeDestinationAudioNode,\n                        output,\n                        input\n                    );\n\n                    const isPassive = isPassiveAudioNode(this);\n\n                    if (isOffline || isPassive) {\n                        this._nativeAudioNode.disconnect(...connection);\n                    }\n\n                    if (this.context.state !== 'closed' && !isPassive && isPassiveAudioNode(destination)) {\n                        setInternalStateToActive(destination);\n                    }\n                } catch (err) {\n                    // Bug #41: Safari does not throw the correct exception so far.\n                    if (err.code === 12) {\n                        throw createInvalidAccessError();\n                    }\n\n                    throw err;\n                }\n\n                const isNewConnectionToAudioNode = addConnectionToAudioNode(\n                    this,\n                    <IAudioNode<TContext>>destination,\n                    output,\n                    input,\n                    isOffline\n                );\n\n                // Bug #164: Only Firefox detects cycles so far.\n                if (isNewConnectionToAudioNode) {\n                    const cycles = detectCycles([this], <IAudioNode<T>>(<unknown>destination));\n\n                    visitEachAudioNodeOnce(cycles, createIncrementCycleCounter(isOffline));\n                }\n\n                return destination;\n            }\n\n            const nativeAudioParam = getNativeAudioParam(destination);\n\n            /*\n             * Bug #73, #147 & #153: Safari does not support to connect an input signal to the playbackRate AudioParam of an\n             * AudioBufferSourceNode. This can't be easily detected and that's why the outdated name property is used here to identify\n             * Safari. In addition to that the maxValue property is used to only detect the affected versions below v14.0.2.\n             */\n            if ((<TNativeAudioParam & { name: string }>nativeAudioParam).name === 'playbackRate' && nativeAudioParam.maxValue === 1024) {\n                throw createNotSupportedError();\n            }\n\n            try {\n                this._nativeAudioNode.connect(nativeAudioParam, output);\n\n                if (isOffline || isPassiveAudioNode(this)) {\n                    this._nativeAudioNode.disconnect(nativeAudioParam, output);\n                }\n            } catch (err) {\n                // Bug #58: Safari doesn't throw an InvalidAccessError yet.\n                if (err.code === 12) {\n                    throw createInvalidAccessError();\n                }\n\n                throw err;\n            }\n\n            const isNewConnectionToAudioParam = addConnectionToAudioParamOfAudioContext(this, destination, output, isOffline);\n\n            // Bug #164: Only Firefox detects cycles so far.\n            if (isNewConnectionToAudioParam) {\n                const cycles = detectCycles([this], destination);\n\n                visitEachAudioNodeOnce(cycles, createIncrementCycleCounter(isOffline));\n            }\n        }\n\n        public disconnect(output?: number): void;\n        public disconnect<U extends TContext>(destinationNode: IAudioNode<U>, output?: number, input?: number): void;\n        public disconnect(destinationParam: IAudioParam, output?: number): void;\n        public disconnect<U extends TContext>(\n            destinationOrOutput?: number | IAudioNode<U> | IAudioParam,\n            output?: number,\n            input?: number\n        ): void {\n            let destinations: (IAudioNode<T> | IAudioParam)[];\n\n            const nativeContext = getNativeContext(this._context);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n\n            if (destinationOrOutput === undefined) {\n                destinations = deleteAnyConnection(this, isOffline);\n            } else if (typeof destinationOrOutput === 'number') {\n                if (destinationOrOutput < 0 || destinationOrOutput >= this.numberOfOutputs) {\n                    throw createIndexSizeError();\n                }\n\n                destinations = deleteConnectionAtOutput(this, isOffline, destinationOrOutput);\n            } else {\n                if (output !== undefined && (output < 0 || output >= this.numberOfOutputs)) {\n                    throw createIndexSizeError();\n                }\n\n                if (isAudioNode(destinationOrOutput) && input !== undefined && (input < 0 || input >= destinationOrOutput.numberOfInputs)) {\n                    throw createIndexSizeError();\n                }\n\n                destinations = deleteConnectionToDestination(this, isOffline, destinationOrOutput, output, input);\n\n                if (destinations.length === 0) {\n                    throw createInvalidAccessError();\n                }\n            }\n\n            // Bug #164: Only Firefox detects cycles so far.\n            for (const destination of destinations) {\n                const cycles = detectCycles([this], destination);\n\n                visitEachAudioNodeOnce(cycles, decrementCycleCounter);\n            }\n        }\n    };\n};\n", "import { AutomationEventList } from 'automation-events';\nimport { IAudioNode, IAudioParam, IAudioParamRenderer, IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport { TAudioParamFactoryFactory, TContext, TNativeAudioParam } from '../types';\n\nexport const createAudioParamFactory: TAudioParamFactoryFactory = (\n    addAudioParamConnections,\n    audioParamAudioNodeStore,\n    audioParamStore,\n    createAudioParamRenderer,\n    createCancelAndHoldAutomationEvent,\n    createCancelScheduledValuesAutomationEvent,\n    createExponentialRampToValueAutomationEvent,\n    createLinearRampToValueAutomationEvent,\n    createSetTargetAutomationEvent,\n    createSetValueAutomationEvent,\n    createSetValueCurveAutomationEvent,\n    nativeAudioContextConstructor,\n    setValueAtTimeUntilPossible\n) => {\n    return <T extends TContext>(\n        audioNode: IAudioNode<T>,\n        isAudioParamOfOfflineAudioContext: boolean,\n        nativeAudioParam: TNativeAudioParam,\n        maxValue: null | number = null,\n        minValue: null | number = null\n    ): IAudioParam => {\n        // Bug #196 Only Safari sets the defaultValue to the initial value.\n        const defaultValue = nativeAudioParam.value;\n        const automationEventList = new AutomationEventList(defaultValue);\n        const audioParamRenderer = isAudioParamOfOfflineAudioContext ? createAudioParamRenderer(automationEventList) : null;\n        const audioParam = {\n            get defaultValue(): number {\n                return defaultValue;\n            },\n            get maxValue(): number {\n                return maxValue === null ? nativeAudioParam.maxValue : maxValue;\n            },\n            get minValue(): number {\n                return minValue === null ? nativeAudioParam.minValue : minValue;\n            },\n            get value(): number {\n                return nativeAudioParam.value;\n            },\n            set value(value) {\n                nativeAudioParam.value = value;\n\n                // Bug #98: Firefox & Safari do not yet treat the value setter like a call to setValueAtTime().\n                audioParam.setValueAtTime(value, audioNode.context.currentTime);\n            },\n            cancelAndHoldAtTime(cancelTime: number): IAudioParam {\n                // Bug #28: Firefox & Safari do not yet implement cancelAndHoldAtTime().\n                if (typeof nativeAudioParam.cancelAndHoldAtTime === 'function') {\n                    if (audioParamRenderer === null) {\n                        automationEventList.flush(audioNode.context.currentTime);\n                    }\n\n                    automationEventList.add(createCancelAndHoldAutomationEvent(cancelTime));\n                    nativeAudioParam.cancelAndHoldAtTime(cancelTime);\n                } else {\n                    const previousLastEvent = Array.from(automationEventList).pop();\n\n                    if (audioParamRenderer === null) {\n                        automationEventList.flush(audioNode.context.currentTime);\n                    }\n\n                    automationEventList.add(createCancelAndHoldAutomationEvent(cancelTime));\n\n                    const currentLastEvent = Array.from(automationEventList).pop();\n\n                    nativeAudioParam.cancelScheduledValues(cancelTime);\n\n                    if (previousLastEvent !== currentLastEvent && currentLastEvent !== undefined) {\n                        if (currentLastEvent.type === 'exponentialRampToValue') {\n                            nativeAudioParam.exponentialRampToValueAtTime(currentLastEvent.value, currentLastEvent.endTime);\n                        } else if (currentLastEvent.type === 'linearRampToValue') {\n                            nativeAudioParam.linearRampToValueAtTime(currentLastEvent.value, currentLastEvent.endTime);\n                        } else if (currentLastEvent.type === 'setValue') {\n                            nativeAudioParam.setValueAtTime(currentLastEvent.value, currentLastEvent.startTime);\n                        } else if (currentLastEvent.type === 'setValueCurve') {\n                            nativeAudioParam.setValueCurveAtTime(\n                                currentLastEvent.values,\n                                currentLastEvent.startTime,\n                                currentLastEvent.duration\n                            );\n                        }\n                    }\n                }\n\n                return audioParam;\n            },\n            cancelScheduledValues(cancelTime: number): IAudioParam {\n                if (audioParamRenderer === null) {\n                    automationEventList.flush(audioNode.context.currentTime);\n                }\n\n                automationEventList.add(createCancelScheduledValuesAutomationEvent(cancelTime));\n                nativeAudioParam.cancelScheduledValues(cancelTime);\n\n                return audioParam;\n            },\n            exponentialRampToValueAtTime(value: number, endTime: number): IAudioParam {\n                // Bug #45: Safari does not throw an error yet.\n                if (value === 0) {\n                    throw new RangeError();\n                }\n\n                // Bug #187: Safari does not throw an error yet.\n                if (!Number.isFinite(endTime) || endTime < 0) {\n                    throw new RangeError();\n                }\n\n                const currentTime = audioNode.context.currentTime;\n\n                if (audioParamRenderer === null) {\n                    automationEventList.flush(currentTime);\n                }\n\n                // Bug #194: Firefox does not implicitly call setValueAtTime() if there is no previous event.\n                if (Array.from(automationEventList).length === 0) {\n                    automationEventList.add(createSetValueAutomationEvent(defaultValue, currentTime));\n                    nativeAudioParam.setValueAtTime(defaultValue, currentTime);\n                }\n\n                automationEventList.add(createExponentialRampToValueAutomationEvent(value, endTime));\n                nativeAudioParam.exponentialRampToValueAtTime(value, endTime);\n\n                return audioParam;\n            },\n            linearRampToValueAtTime(value: number, endTime: number): IAudioParam {\n                const currentTime = audioNode.context.currentTime;\n\n                if (audioParamRenderer === null) {\n                    automationEventList.flush(currentTime);\n                }\n\n                // Bug #195: Firefox does not implicitly call setValueAtTime() if there is no previous event.\n                if (Array.from(automationEventList).length === 0) {\n                    automationEventList.add(createSetValueAutomationEvent(defaultValue, currentTime));\n                    nativeAudioParam.setValueAtTime(defaultValue, currentTime);\n                }\n\n                automationEventList.add(createLinearRampToValueAutomationEvent(value, endTime));\n                nativeAudioParam.linearRampToValueAtTime(value, endTime);\n\n                return audioParam;\n            },\n            setTargetAtTime(target: number, startTime: number, timeConstant: number): IAudioParam {\n                if (audioParamRenderer === null) {\n                    automationEventList.flush(audioNode.context.currentTime);\n                }\n\n                automationEventList.add(createSetTargetAutomationEvent(target, startTime, timeConstant));\n                nativeAudioParam.setTargetAtTime(target, startTime, timeConstant);\n\n                return audioParam;\n            },\n            setValueAtTime(value: number, startTime: number): IAudioParam {\n                if (audioParamRenderer === null) {\n                    automationEventList.flush(audioNode.context.currentTime);\n                }\n\n                automationEventList.add(createSetValueAutomationEvent(value, startTime));\n                nativeAudioParam.setValueAtTime(value, startTime);\n\n                return audioParam;\n            },\n            setValueCurveAtTime(values: Iterable<number>, startTime: number, duration: number): IAudioParam {\n                // Bug 183: Safari only accepts a Float32Array.\n                const convertedValues = values instanceof Float32Array ? values : new Float32Array(values);\n                /*\n                 * Bug #152: Safari does not correctly interpolate the values of the curve.\n                 * @todo Unfortunately there is no way to test for this behavior in a synchronous fashion which is why testing for the\n                 * existence of the webkitAudioContext is used as a workaround here.\n                 */\n                if (nativeAudioContextConstructor !== null && nativeAudioContextConstructor.name === 'webkitAudioContext') {\n                    const endTime = startTime + duration;\n                    const sampleRate = audioNode.context.sampleRate;\n                    const firstSample = Math.ceil(startTime * sampleRate);\n                    const lastSample = Math.floor(endTime * sampleRate);\n                    const numberOfInterpolatedValues = lastSample - firstSample;\n                    const interpolatedValues = new Float32Array(numberOfInterpolatedValues);\n\n                    for (let i = 0; i < numberOfInterpolatedValues; i += 1) {\n                        const theoreticIndex = ((convertedValues.length - 1) / duration) * ((firstSample + i) / sampleRate - startTime);\n                        const lowerIndex = Math.floor(theoreticIndex);\n                        const upperIndex = Math.ceil(theoreticIndex);\n\n                        interpolatedValues[i] =\n                            lowerIndex === upperIndex\n                                ? convertedValues[lowerIndex]\n                                : (1 - (theoreticIndex - lowerIndex)) * convertedValues[lowerIndex] +\n                                  (1 - (upperIndex - theoreticIndex)) * convertedValues[upperIndex];\n                    }\n\n                    if (audioParamRenderer === null) {\n                        automationEventList.flush(audioNode.context.currentTime);\n                    }\n\n                    automationEventList.add(createSetValueCurveAutomationEvent(interpolatedValues, startTime, duration));\n                    nativeAudioParam.setValueCurveAtTime(interpolatedValues, startTime, duration);\n\n                    const timeOfLastSample = lastSample / sampleRate;\n\n                    if (timeOfLastSample < endTime) {\n                        setValueAtTimeUntilPossible(audioParam, interpolatedValues[interpolatedValues.length - 1], timeOfLastSample);\n                    }\n\n                    setValueAtTimeUntilPossible(audioParam, convertedValues[convertedValues.length - 1], endTime);\n                } else {\n                    if (audioParamRenderer === null) {\n                        automationEventList.flush(audioNode.context.currentTime);\n                    }\n\n                    automationEventList.add(createSetValueCurveAutomationEvent(convertedValues, startTime, duration));\n                    nativeAudioParam.setValueCurveAtTime(convertedValues, startTime, duration);\n                }\n\n                return audioParam;\n            }\n        };\n\n        audioParamStore.set(audioParam, nativeAudioParam);\n        audioParamAudioNodeStore.set(audioParam, audioNode);\n\n        addAudioParamConnections(\n            audioParam,\n            <T extends IMinimalOfflineAudioContext | IOfflineAudioContext ? IAudioParamRenderer : null>audioParamRenderer\n        );\n\n        return audioParam;\n    };\n};\n", "import { TAudioParamRendererFactory, TNativeAudioParam } from '../types';\n\nexport const createAudioParamRenderer: TAudioParamRendererFactory = (automationEventList) => {\n    return {\n        replay(audioParam: TNativeAudioParam): void {\n            for (const automationEvent of automationEventList) {\n                if (automationEvent.type === 'exponentialRampToValue') {\n                    const { endTime, value } = automationEvent;\n\n                    audioParam.exponentialRampToValueAtTime(value, endTime);\n                } else if (automationEvent.type === 'linearRampToValue') {\n                    const { endTime, value } = automationEvent;\n\n                    audioParam.linearRampToValueAtTime(value, endTime);\n                } else if (automationEvent.type === 'setTarget') {\n                    const { startTime, target, timeConstant } = automationEvent;\n\n                    audioParam.setTargetAtTime(target, startTime, timeConstant);\n                } else if (automationEvent.type === 'setValue') {\n                    const { startTime, value } = automationEvent;\n\n                    audioParam.setValueAtTime(value, startTime);\n                } else if (automationEvent.type === 'setValueCurve') {\n                    const { duration, startTime, values } = automationEvent;\n\n                    audioParam.setValueCurveAtTime(values, startTime, duration);\n                } else {\n                    throw new Error(\"Can't apply an unknown automation.\");\n                }\n            }\n        }\n    };\n};\n", "import { IReadOnlyMap } from './interfaces';\n\nexport class ReadOnlyMap<T, U> implements IReadOnlyMap<T, U> {\n    private _map: Map<T, U>;\n\n    constructor(parameters: [T, U][]) {\n        this._map = new Map(parameters);\n    }\n\n    get size(): number {\n        return this._map.size;\n    }\n\n    public entries(): IterableIterator<[T, U]> {\n        return this._map.entries();\n    }\n\n    public forEach(callback: (audioParam: U, name: T, map: ReadOnlyMap<T, U>) => void, thisArg: any = null): void {\n        return this._map.forEach((value: U, key: T) => callback.call(thisArg, value, key, this));\n    }\n\n    public get(name: T): undefined | U {\n        return this._map.get(name);\n    }\n\n    public has(name: T): boolean {\n        return this._map.has(name);\n    }\n\n    public keys(): IterableIterator<T> {\n        return this._map.keys();\n    }\n\n    public values(): IterableIterator<U> {\n        return this._map.values();\n    }\n}\n", "import { NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS } from '../globals';\nimport {\n    IAudioParam,\n    IAudioWorkletNode,\n    IAudioWorkletNodeEventMap,\n    IAudioWorkletNodeOptions,\n    IMinimalAudioContext,\n    IMinimalOfflineAudioContext,\n    IOfflineAudioContext,\n    IReadOnlyMap\n} from '../interfaces';\nimport { ReadOnlyMap } from '../read-only-map';\nimport {\n    TAudioNodeRenderer,\n    TAudioParamMap,\n    TAudioWorkletNodeConstructorFactory,\n    TContext,\n    TErrorEventHandler,\n    TNativeAudioContext,\n    TNativeAudioParam,\n    TNativeAudioWorkletNode\n} from '../types';\n\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    // Bug #61: The channelCountMode should be 'max' according to the spec but is set to 'explicit' to achieve consistent behavior.\n    channelCountMode: 'explicit',\n    channelInterpretation: 'speakers',\n    numberOfInputs: 1,\n    numberOfOutputs: 1,\n    parameterData: {},\n    processorOptions: {}\n} as const;\n\nexport const createAudioWorkletNodeConstructor: TAudioWorkletNodeConstructorFactory = (\n    addUnrenderedAudioWorkletNode,\n    audioNodeConstructor,\n    createAudioParam,\n    createAudioWorkletNodeRenderer,\n    createNativeAudioWorkletNode,\n    getAudioNodeConnections,\n    getBackupOfflineAudioContext,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    nativeAudioWorkletNodeConstructor,\n    sanitizeAudioWorkletNodeOptions,\n    setActiveAudioWorkletNodeInputs,\n    testAudioWorkletNodeOptionsClonability,\n    wrapEventListener\n) => {\n    return class AudioWorkletNode<T extends TContext>\n        extends audioNodeConstructor<T, IAudioWorkletNodeEventMap>\n        implements IAudioWorkletNode<T>\n    {\n        private _nativeAudioWorkletNode: TNativeAudioWorkletNode;\n\n        private _onprocessorerror: null | TErrorEventHandler<this>;\n\n        private _parameters: null | TAudioParamMap;\n\n        constructor(context: T, name: string, options?: Partial<IAudioWorkletNodeOptions>) {\n            const nativeContext = getNativeContext(context);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const mergedOptions = sanitizeAudioWorkletNodeOptions({ ...DEFAULT_OPTIONS, ...options });\n\n            // Bug #191: Safari doesn't throw an error if the options aren't clonable.\n            testAudioWorkletNodeOptionsClonability(mergedOptions);\n\n            const nodeNameToProcessorConstructorMap = NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.get(nativeContext);\n            const processorConstructor = nodeNameToProcessorConstructorMap?.get(name);\n            // Bug #186: Chrome and Edge do not allow to create an AudioWorkletNode on a closed AudioContext.\n            const nativeContextOrBackupOfflineAudioContext =\n                isOffline || nativeContext.state !== 'closed'\n                    ? nativeContext\n                    : getBackupOfflineAudioContext(<TNativeAudioContext>nativeContext) ?? nativeContext;\n            const nativeAudioWorkletNode = createNativeAudioWorkletNode(\n                nativeContextOrBackupOfflineAudioContext,\n                isOffline ? null : (<IMinimalAudioContext>(<any>context)).baseLatency,\n                nativeAudioWorkletNodeConstructor,\n                name,\n                processorConstructor,\n                mergedOptions\n            );\n            const audioWorkletNodeRenderer = <TAudioNodeRenderer<T, this>>(\n                (isOffline ? createAudioWorkletNodeRenderer(name, mergedOptions, processorConstructor) : null)\n            );\n\n            /*\n             * @todo Add a mechanism to switch an AudioWorkletNode to passive once the process() function of the AudioWorkletProcessor\n             * returns false.\n             */\n            super(context, true, nativeAudioWorkletNode, audioWorkletNodeRenderer);\n\n            const parameters: [string, IAudioParam][] = [];\n\n            nativeAudioWorkletNode.parameters.forEach((nativeAudioParam, nm) => {\n                const audioParam = createAudioParam(this, isOffline, nativeAudioParam);\n\n                parameters.push([nm, audioParam]);\n            });\n\n            this._nativeAudioWorkletNode = nativeAudioWorkletNode;\n            this._onprocessorerror = null;\n            this._parameters = new ReadOnlyMap(parameters);\n\n            /*\n             * Bug #86 & #87: Invoking the renderer of an AudioWorkletNode might be necessary if it has no direct or indirect connection to\n             * the destination.\n             */\n            if (isOffline) {\n                addUnrenderedAudioWorkletNode(nativeContext, <IAudioWorkletNode<IMinimalOfflineAudioContext | IOfflineAudioContext>>this);\n            }\n\n            const { activeInputs } = getAudioNodeConnections(this);\n\n            setActiveAudioWorkletNodeInputs(nativeAudioWorkletNode, activeInputs);\n        }\n\n        get onprocessorerror(): null | TErrorEventHandler<this> {\n            return this._onprocessorerror;\n        }\n\n        set onprocessorerror(value) {\n            const wrappedListener = typeof value === 'function' ? wrapEventListener(this, <EventListenerOrEventListenerObject>value) : null;\n\n            this._nativeAudioWorkletNode.onprocessorerror = wrappedListener;\n\n            const nativeOnProcessorError = this._nativeAudioWorkletNode.onprocessorerror;\n\n            this._onprocessorerror =\n                nativeOnProcessorError !== null && nativeOnProcessorError === wrappedListener\n                    ? value\n                    : <null | TErrorEventHandler<this>>nativeOnProcessorError;\n        }\n\n        get parameters(): TAudioParamMap {\n            if (this._parameters === null) {\n                // @todo The definition that TypeScript uses of the AudioParamMap is lacking many methods.\n                return <IReadOnlyMap<string, TNativeAudioParam>>this._nativeAudioWorkletNode.parameters;\n            }\n\n            return this._parameters;\n        }\n\n        get port(): MessagePort {\n            return this._nativeAudioWorkletNode.port;\n        }\n    };\n};\n", "import { TNativeAudioBuffer } from '../types';\n\nexport function copyFromChannel(\n    audioBuffer: TNativeAudioBuffer,\n    parent: { [key: number]: Float32Array },\n    key: number,\n    channelNumber: number,\n    bufferOffset: number\n): void;\nexport function copyFromChannel(\n    audioBuffer: TNativeAudioBuffer,\n    parent: { [key: string]: Float32Array },\n    key: string,\n    channelNumber: number,\n    bufferOffset: number\n): void;\nexport function copyFromChannel(\n    audioBuffer: TNativeAudioBuffer,\n    // @todo There is currently no way to define something like { [ key: number | string ]: Float32Array }\n    parent: any,\n    key: number | string,\n    channelNumber: number,\n    bufferOffset: number\n): void {\n    if (typeof audioBuffer.copyFromChannel === 'function') {\n        // The byteLength will be 0 when the ArrayBuffer was transferred.\n        if (parent[key].byteLength === 0) {\n            parent[key] = new Float32Array(128);\n        }\n\n        audioBuffer.copyFromChannel(parent[key], channelNumber, bufferOffset);\n\n        // Bug #5: Safari does not support copyFromChannel().\n    } else {\n        const channelData = audioBuffer.getChannelData(channelNumber);\n\n        // The byteLength will be 0 when the ArrayBuffer was transferred.\n        if (parent[key].byteLength === 0) {\n            parent[key] = channelData.slice(bufferOffset, bufferOffset + 128);\n        } else {\n            const slicedInput = new Float32Array(channelData.buffer, bufferOffset * Float32Array.BYTES_PER_ELEMENT, 128);\n\n            parent[key].set(slicedInput);\n        }\n    }\n}\n", "import { TNativeAudioBuffer } from '../types';\n\nexport const copyToChannel = (\n    audioBuffer: TNativeAudioBuffer,\n    parent: { [key: number]: Float32Array },\n    key: number,\n    channelNumber: number,\n    bufferOffset: number\n): void => {\n    if (typeof audioBuffer.copyToChannel === 'function') {\n        // The byteLength will be 0 when the ArrayBuffer was transferred.\n        if (parent[key].byteLength !== 0) {\n            audioBuffer.copyToChannel(parent[key], channelNumber, bufferOffset);\n        }\n\n        // Bug #5: Safari does not support copyToChannel().\n    } else {\n        // The byteLength will be 0 when the ArrayBuffer was transferred.\n        if (parent[key].byteLength !== 0) {\n            audioBuffer.getChannelData(channelNumber).set(parent[key], bufferOffset);\n        }\n    }\n};\n", "export const createNestedArrays = (x: number, y: number | number[]): Float32Array[][] => {\n    const arrays: Float32Array[][] = [];\n\n    for (let i = 0; i < x; i += 1) {\n        const array = [];\n\n        const length = typeof y === 'number' ? y : y[i];\n\n        for (let j = 0; j < length; j += 1) {\n            array.push(new Float32Array(128));\n        }\n\n        arrays.push(array);\n    }\n\n    return arrays;\n};\n", "import { NODE_TO_PROCESSOR_MAPS } from '../globals';\nimport { IAudioNode, IAudioWorkletProcessor } from '../interfaces';\nimport { TContext, TNativeAudioWorkletNode, TNativeOfflineAudioContext } from '../types';\nimport { getNativeAudioNode } from './get-native-audio-node';\nimport { getValueForKey } from './get-value-for-key';\n\nexport const getAudioWorkletProcessor = <T extends TContext>(\n    nativeOfflineAudioContext: TNativeOfflineAudioContext,\n    proxy: IAudioNode<T>\n): Promise<IAudioWorkletProcessor> => {\n    const nodeToProcessorMap = getValueForKey(NODE_TO_PROCESSOR_MAPS, nativeOfflineAudioContext);\n    const nativeAudioWorkletNode = getNativeAudioNode<T, TNativeAudioWorkletNode>(proxy);\n\n    return getValueForKey(nodeToProcessorMap, nativeAudioWorkletNode);\n};\n", "import { copyFromChannel } from '../helpers/copy-from-channel';\nimport { copyToChannel } from '../helpers/copy-to-channel';\nimport { createNestedArrays } from '../helpers/create-nested-arrays';\nimport { getAudioNodeConnections } from '../helpers/get-audio-node-connections';\nimport { getAudioWorkletProcessor } from '../helpers/get-audio-worklet-processor';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport {\n    IAudioWorkletNode,\n    IAudioWorkletNodeOptions,\n    IAudioWorkletProcessorConstructor,\n    IMinimalOfflineAudioContext,\n    IOfflineAudioContext,\n    IReadOnlyMap\n} from '../interfaces';\nimport {\n    TAudioWorkletNodeRendererFactoryFactory,\n    TExposeCurrentFrameAndCurrentTimeFunction,\n    TNativeAudioBuffer,\n    TNativeAudioNode,\n    TNativeAudioParam,\n    TNativeAudioWorkletNode,\n    TNativeChannelMergerNode,\n    TNativeChannelSplitterNode,\n    TNativeGainNode,\n    TNativeOfflineAudioContext\n} from '../types';\n\nconst processBuffer = async <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>(\n    proxy: IAudioWorkletNode<T>,\n    renderedBuffer: null | TNativeAudioBuffer,\n    nativeOfflineAudioContext: TNativeOfflineAudioContext,\n    options: IAudioWorkletNodeOptions,\n    outputChannelCount: number[],\n    processorConstructor: undefined | IAudioWorkletProcessorConstructor,\n    exposeCurrentFrameAndCurrentTime: TExposeCurrentFrameAndCurrentTimeFunction\n): Promise<null | TNativeAudioBuffer> => {\n    // Ceil the length to the next full render quantum.\n    // Bug #17: Safari does not yet expose the length.\n    const length = renderedBuffer === null ? Math.ceil(proxy.context.length / 128) * 128 : renderedBuffer.length;\n    const numberOfInputChannels = options.channelCount * options.numberOfInputs;\n    const numberOfOutputChannels = outputChannelCount.reduce((sum, value) => sum + value, 0);\n    const processedBuffer =\n        numberOfOutputChannels === 0\n            ? null\n            : nativeOfflineAudioContext.createBuffer(numberOfOutputChannels, length, nativeOfflineAudioContext.sampleRate);\n\n    if (processorConstructor === undefined) {\n        throw new Error('Missing the processor constructor.');\n    }\n\n    const audioNodeConnections = getAudioNodeConnections(proxy);\n    const audioWorkletProcessor = await getAudioWorkletProcessor(nativeOfflineAudioContext, proxy);\n    const inputs = createNestedArrays(options.numberOfInputs, options.channelCount);\n    const outputs = createNestedArrays(options.numberOfOutputs, outputChannelCount);\n    const parameters: { [name: string]: Float32Array } = Array.from(proxy.parameters.keys()).reduce(\n        (prmtrs, name) => ({ ...prmtrs, [name]: new Float32Array(128) }),\n        {}\n    );\n\n    for (let i = 0; i < length; i += 128) {\n        if (options.numberOfInputs > 0 && renderedBuffer !== null) {\n            for (let j = 0; j < options.numberOfInputs; j += 1) {\n                for (let k = 0; k < options.channelCount; k += 1) {\n                    copyFromChannel(renderedBuffer, inputs[j], k, k, i);\n                }\n            }\n        }\n\n        if (processorConstructor.parameterDescriptors !== undefined && renderedBuffer !== null) {\n            processorConstructor.parameterDescriptors.forEach(({ name }, index) => {\n                copyFromChannel(renderedBuffer, parameters, name, numberOfInputChannels + index, i);\n            });\n        }\n\n        for (let j = 0; j < options.numberOfInputs; j += 1) {\n            for (let k = 0; k < outputChannelCount[j]; k += 1) {\n                // The byteLength will be 0 when the ArrayBuffer was transferred.\n                if (outputs[j][k].byteLength === 0) {\n                    outputs[j][k] = new Float32Array(128);\n                }\n            }\n        }\n\n        try {\n            const potentiallyEmptyInputs = inputs.map((input, index) => {\n                if (audioNodeConnections.activeInputs[index].size === 0) {\n                    return [];\n                }\n\n                return input;\n            });\n            const activeSourceFlag = exposeCurrentFrameAndCurrentTime(\n                i / nativeOfflineAudioContext.sampleRate,\n                nativeOfflineAudioContext.sampleRate,\n                () => audioWorkletProcessor.process(potentiallyEmptyInputs, outputs, parameters)\n            );\n\n            if (processedBuffer !== null) {\n                for (let j = 0, outputChannelSplitterNodeOutput = 0; j < options.numberOfOutputs; j += 1) {\n                    for (let k = 0; k < outputChannelCount[j]; k += 1) {\n                        copyToChannel(processedBuffer, outputs[j], k, outputChannelSplitterNodeOutput + k, i);\n                    }\n\n                    outputChannelSplitterNodeOutput += outputChannelCount[j];\n                }\n            }\n\n            if (!activeSourceFlag) {\n                break;\n            }\n        } catch (error) {\n            proxy.dispatchEvent(\n                new ErrorEvent('processorerror', {\n                    colno: error.colno,\n                    filename: error.filename,\n                    lineno: error.lineno,\n                    message: error.message\n                })\n            );\n\n            break;\n        }\n    }\n\n    return processedBuffer;\n};\n\nexport const createAudioWorkletNodeRendererFactory: TAudioWorkletNodeRendererFactoryFactory = (\n    connectAudioParam,\n    connectMultipleOutputs,\n    createNativeAudioBufferSourceNode,\n    createNativeChannelMergerNode,\n    createNativeChannelSplitterNode,\n    createNativeConstantSourceNode,\n    createNativeGainNode,\n    deleteUnrenderedAudioWorkletNode,\n    disconnectMultipleOutputs,\n    exposeCurrentFrameAndCurrentTime,\n    getNativeAudioNode,\n    nativeAudioWorkletNodeConstructor,\n    nativeOfflineAudioContextConstructor,\n    renderAutomation,\n    renderInputsOfAudioNode,\n    renderNativeOfflineAudioContext\n) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>(\n        name: string,\n        options: IAudioWorkletNodeOptions,\n        processorConstructor: undefined | IAudioWorkletProcessorConstructor\n    ) => {\n        const renderedNativeAudioNodes = new WeakMap<TNativeOfflineAudioContext, TNativeAudioWorkletNode | TNativeGainNode>();\n\n        let processedBufferPromise: null | Promise<null | TNativeAudioBuffer> = null;\n\n        const createAudioNode = async (proxy: IAudioWorkletNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext) => {\n            let nativeAudioWorkletNode = getNativeAudioNode<T, TNativeAudioWorkletNode>(proxy);\n            let nativeOutputNodes: null | [TNativeChannelSplitterNode, TNativeChannelMergerNode[], TNativeGainNode] = null;\n\n            const nativeAudioWorkletNodeIsOwnedByContext = isOwnedByContext(nativeAudioWorkletNode, nativeOfflineAudioContext);\n            const outputChannelCount = Array.isArray(options.outputChannelCount)\n                ? options.outputChannelCount\n                : Array.from(options.outputChannelCount);\n\n            // Bug #61: Only Chrome, Edge & Firefox have an implementation of the AudioWorkletNode yet.\n            if (nativeAudioWorkletNodeConstructor === null) {\n                const numberOfOutputChannels = outputChannelCount.reduce((sum, value) => sum + value, 0);\n                const outputChannelSplitterNode = createNativeChannelSplitterNode(nativeOfflineAudioContext, {\n                    channelCount: Math.max(1, numberOfOutputChannels),\n                    channelCountMode: 'explicit',\n                    channelInterpretation: 'discrete',\n                    numberOfOutputs: Math.max(1, numberOfOutputChannels)\n                });\n                const outputChannelMergerNodes: TNativeChannelMergerNode[] = [];\n\n                for (let i = 0; i < proxy.numberOfOutputs; i += 1) {\n                    outputChannelMergerNodes.push(\n                        createNativeChannelMergerNode(nativeOfflineAudioContext, {\n                            channelCount: 1,\n                            channelCountMode: 'explicit',\n                            channelInterpretation: 'speakers',\n                            numberOfInputs: outputChannelCount[i]\n                        })\n                    );\n                }\n\n                const outputGainNode = createNativeGainNode(nativeOfflineAudioContext, {\n                    channelCount: options.channelCount,\n                    channelCountMode: options.channelCountMode,\n                    channelInterpretation: options.channelInterpretation,\n                    gain: 1\n                });\n\n                outputGainNode.connect = <TNativeAudioNode['connect']>connectMultipleOutputs.bind(null, outputChannelMergerNodes);\n                outputGainNode.disconnect = <TNativeAudioNode['disconnect']>disconnectMultipleOutputs.bind(null, outputChannelMergerNodes);\n\n                nativeOutputNodes = [outputChannelSplitterNode, outputChannelMergerNodes, outputGainNode];\n            } else if (!nativeAudioWorkletNodeIsOwnedByContext) {\n                nativeAudioWorkletNode = new nativeAudioWorkletNodeConstructor(nativeOfflineAudioContext, name);\n            }\n\n            renderedNativeAudioNodes.set(\n                nativeOfflineAudioContext,\n                nativeOutputNodes === null ? nativeAudioWorkletNode : nativeOutputNodes[2]\n            );\n\n            if (nativeOutputNodes !== null) {\n                if (processedBufferPromise === null) {\n                    if (processorConstructor === undefined) {\n                        throw new Error('Missing the processor constructor.');\n                    }\n\n                    if (nativeOfflineAudioContextConstructor === null) {\n                        throw new Error('Missing the native OfflineAudioContext constructor.');\n                    }\n\n                    // Bug #47: The AudioDestinationNode in Safari gets not initialized correctly.\n                    const numberOfInputChannels = proxy.channelCount * proxy.numberOfInputs;\n                    const numberOfParameters =\n                        processorConstructor.parameterDescriptors === undefined ? 0 : processorConstructor.parameterDescriptors.length;\n                    const numberOfChannels = numberOfInputChannels + numberOfParameters;\n\n                    const renderBuffer = async () => {\n                        const partialOfflineAudioContext = new nativeOfflineAudioContextConstructor(\n                            numberOfChannels,\n                            // Ceil the length to the next full render quantum.\n                            // Bug #17: Safari does not yet expose the length.\n                            Math.ceil(proxy.context.length / 128) * 128,\n                            nativeOfflineAudioContext.sampleRate\n                        );\n                        const gainNodes: TNativeGainNode[] = [];\n                        const inputChannelSplitterNodes = [];\n\n                        for (let i = 0; i < options.numberOfInputs; i += 1) {\n                            gainNodes.push(\n                                createNativeGainNode(partialOfflineAudioContext, {\n                                    channelCount: options.channelCount,\n                                    channelCountMode: options.channelCountMode,\n                                    channelInterpretation: options.channelInterpretation,\n                                    gain: 1\n                                })\n                            );\n                            inputChannelSplitterNodes.push(\n                                createNativeChannelSplitterNode(partialOfflineAudioContext, {\n                                    channelCount: options.channelCount,\n                                    channelCountMode: 'explicit',\n                                    channelInterpretation: 'discrete',\n                                    numberOfOutputs: options.channelCount\n                                })\n                            );\n                        }\n\n                        const constantSourceNodes = await Promise.all(\n                            Array.from(proxy.parameters.values()).map(async (audioParam) => {\n                                const constantSourceNode = createNativeConstantSourceNode(partialOfflineAudioContext, {\n                                    channelCount: 1,\n                                    channelCountMode: 'explicit',\n                                    channelInterpretation: 'discrete',\n                                    offset: audioParam.value\n                                });\n\n                                await renderAutomation(partialOfflineAudioContext, audioParam, constantSourceNode.offset);\n\n                                return constantSourceNode;\n                            })\n                        );\n\n                        const inputChannelMergerNode = createNativeChannelMergerNode(partialOfflineAudioContext, {\n                            channelCount: 1,\n                            channelCountMode: 'explicit',\n                            channelInterpretation: 'speakers',\n                            numberOfInputs: Math.max(1, numberOfInputChannels + numberOfParameters)\n                        });\n\n                        for (let i = 0; i < options.numberOfInputs; i += 1) {\n                            gainNodes[i].connect(inputChannelSplitterNodes[i]);\n\n                            for (let j = 0; j < options.channelCount; j += 1) {\n                                inputChannelSplitterNodes[i].connect(inputChannelMergerNode, j, i * options.channelCount + j);\n                            }\n                        }\n\n                        for (const [index, constantSourceNode] of constantSourceNodes.entries()) {\n                            constantSourceNode.connect(inputChannelMergerNode, 0, numberOfInputChannels + index);\n                            constantSourceNode.start(0);\n                        }\n\n                        inputChannelMergerNode.connect(partialOfflineAudioContext.destination);\n\n                        await Promise.all(\n                            gainNodes.map((gainNode) => renderInputsOfAudioNode(proxy, partialOfflineAudioContext, gainNode))\n                        );\n\n                        return renderNativeOfflineAudioContext(partialOfflineAudioContext);\n                    };\n\n                    processedBufferPromise = processBuffer(\n                        proxy,\n                        numberOfChannels === 0 ? null : await renderBuffer(),\n                        nativeOfflineAudioContext,\n                        options,\n                        outputChannelCount,\n                        processorConstructor,\n                        exposeCurrentFrameAndCurrentTime\n                    );\n                }\n\n                const processedBuffer = await processedBufferPromise;\n                const audioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext, {\n                    buffer: null,\n                    channelCount: 2,\n                    channelCountMode: 'max',\n                    channelInterpretation: 'speakers',\n                    loop: false,\n                    loopEnd: 0,\n                    loopStart: 0,\n                    playbackRate: 1\n                });\n                const [outputChannelSplitterNode, outputChannelMergerNodes, outputGainNode] = nativeOutputNodes;\n\n                if (processedBuffer !== null) {\n                    audioBufferSourceNode.buffer = processedBuffer;\n                    audioBufferSourceNode.start(0);\n                }\n\n                audioBufferSourceNode.connect(outputChannelSplitterNode);\n\n                for (let i = 0, outputChannelSplitterNodeOutput = 0; i < proxy.numberOfOutputs; i += 1) {\n                    const outputChannelMergerNode = outputChannelMergerNodes[i];\n\n                    for (let j = 0; j < outputChannelCount[i]; j += 1) {\n                        outputChannelSplitterNode.connect(outputChannelMergerNode, outputChannelSplitterNodeOutput + j, j);\n                    }\n\n                    outputChannelSplitterNodeOutput += outputChannelCount[i];\n                }\n\n                return outputGainNode;\n            }\n\n            if (!nativeAudioWorkletNodeIsOwnedByContext) {\n                for (const [nm, audioParam] of proxy.parameters.entries()) {\n                    await renderAutomation(\n                        nativeOfflineAudioContext,\n                        audioParam,\n                        // @todo The definition that TypeScript uses of the AudioParamMap is lacking many methods.\n                        <TNativeAudioParam>(<IReadOnlyMap<string, TNativeAudioParam>>nativeAudioWorkletNode.parameters).get(nm)\n                    );\n                }\n            } else {\n                for (const [nm, audioParam] of proxy.parameters.entries()) {\n                    await connectAudioParam(\n                        nativeOfflineAudioContext,\n                        audioParam,\n                        // @todo The definition that TypeScript uses of the AudioParamMap is lacking many methods.\n                        <TNativeAudioParam>(<IReadOnlyMap<string, TNativeAudioParam>>nativeAudioWorkletNode.parameters).get(nm)\n                    );\n                }\n            }\n\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioWorkletNode);\n\n            return nativeAudioWorkletNode;\n        };\n\n        return {\n            render(\n                proxy: IAudioWorkletNode<T>,\n                nativeOfflineAudioContext: TNativeOfflineAudioContext\n            ): Promise<TNativeAudioWorkletNode | TNativeGainNode> {\n                deleteUnrenderedAudioWorkletNode(nativeOfflineAudioContext, proxy);\n\n                const renderedNativeAudioWorkletNodeOrGainNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n\n                if (renderedNativeAudioWorkletNodeOrGainNode !== undefined) {\n                    return Promise.resolve(renderedNativeAudioWorkletNodeOrGainNode);\n                }\n\n                return createAudioNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n", "import {\n    IAnalyserNode,\n    IAudioBuffer,\n    IAudioBufferSourceNode,\n    IAudioNode,\n    IAudioWorklet,\n    IBaseAudioContext,\n    IBiquadFilterNode,\n    IConstantSourceNode,\n    IConvolverNode,\n    IDelayNode,\n    IDynamicsCompressorNode,\n    IGainNode,\n    IIIRFilterNode,\n    IOscillatorNode,\n    IPannerNode,\n    IPeriodicWave,\n    IPeriodicWaveConstraints,\n    IStereoPannerNode,\n    IWaveShaperNode,\n    IWorkletOptions\n} from '../interfaces';\nimport { TBaseAudioContextConstructorFactory, TContext, TDecodeErrorCallback, TDecodeSuccessCallback, TNativeContext } from '../types';\n\nexport const createBaseAudioContextConstructor: TBaseAudioContextConstructorFactory = (\n    addAudioWorkletModule,\n    analyserNodeConstructor,\n    audioBufferConstructor,\n    audioBufferSourceNodeConstructor,\n    biquadFilterNodeConstructor,\n    channelMergerNodeConstructor,\n    channelSplitterNodeConstructor,\n    constantSourceNodeConstructor,\n    convolverNodeConstructor,\n    decodeAudioData,\n    delayNodeConstructor,\n    dynamicsCompressorNodeConstructor,\n    gainNodeConstructor,\n    iIRFilterNodeConstructor,\n    minimalBaseAudioContextConstructor,\n    oscillatorNodeConstructor,\n    pannerNodeConstructor,\n    periodicWaveConstructor,\n    stereoPannerNodeConstructor,\n    waveShaperNodeConstructor\n) => {\n    return class BaseAudioContext<T extends TContext> extends minimalBaseAudioContextConstructor<T> implements IBaseAudioContext<T> {\n        private _audioWorklet: undefined | IAudioWorklet;\n\n        constructor(private _nativeContext: TNativeContext, numberOfChannels: number) {\n            super(_nativeContext, numberOfChannels);\n\n            this._audioWorklet =\n                addAudioWorkletModule === undefined\n                    ? undefined\n                    : {\n                          addModule: (moduleURL: string, options?: IWorkletOptions) => {\n                              return addAudioWorkletModule(<T>(<unknown>this), moduleURL, options);\n                          }\n                      };\n        }\n\n        get audioWorklet(): undefined | IAudioWorklet {\n            return this._audioWorklet;\n        }\n\n        public createAnalyser(): IAnalyserNode<T> {\n            return new analyserNodeConstructor(<T>(<unknown>this));\n        }\n\n        public createBiquadFilter(): IBiquadFilterNode<T> {\n            return new biquadFilterNodeConstructor(<T>(<unknown>this));\n        }\n\n        public createBuffer(numberOfChannels: number, length: number, sampleRate: number): IAudioBuffer {\n            return new audioBufferConstructor({ length, numberOfChannels, sampleRate });\n        }\n\n        public createBufferSource(): IAudioBufferSourceNode<T> {\n            return new audioBufferSourceNodeConstructor(<T>(<unknown>this));\n        }\n\n        public createChannelMerger(numberOfInputs = 6): IAudioNode<T> {\n            return new channelMergerNodeConstructor(<T>(<unknown>this), { numberOfInputs });\n        }\n\n        public createChannelSplitter(numberOfOutputs = 6): IAudioNode<T> {\n            return new channelSplitterNodeConstructor(<T>(<unknown>this), { numberOfOutputs });\n        }\n\n        public createConstantSource(): IConstantSourceNode<T> {\n            return new constantSourceNodeConstructor(<T>(<unknown>this));\n        }\n\n        public createConvolver(): IConvolverNode<T> {\n            return new convolverNodeConstructor(<T>(<unknown>this));\n        }\n\n        public createDelay(maxDelayTime = 1): IDelayNode<T> {\n            return new delayNodeConstructor(<T>(<unknown>this), { maxDelayTime });\n        }\n\n        public createDynamicsCompressor(): IDynamicsCompressorNode<T> {\n            return new dynamicsCompressorNodeConstructor(<T>(<unknown>this));\n        }\n\n        public createGain(): IGainNode<T> {\n            return new gainNodeConstructor(<T>(<unknown>this));\n        }\n\n        public createIIRFilter(feedforward: Iterable<number>, feedback: Iterable<number>): IIIRFilterNode<T> {\n            return new iIRFilterNodeConstructor(<T>(<unknown>this), { feedback, feedforward });\n        }\n\n        public createOscillator(): IOscillatorNode<T> {\n            return new oscillatorNodeConstructor(<T>(<unknown>this));\n        }\n\n        public createPanner(): IPannerNode<T> {\n            return new pannerNodeConstructor(<T>(<unknown>this));\n        }\n\n        public createPeriodicWave(\n            real: Iterable<number>,\n            imag: Iterable<number>,\n            constraints: Partial<IPeriodicWaveConstraints> = { disableNormalization: false }\n        ): IPeriodicWave {\n            return new periodicWaveConstructor(<T>(<unknown>this), { ...constraints, imag, real });\n        }\n\n        public createStereoPanner(): IStereoPannerNode<T> {\n            return new stereoPannerNodeConstructor(<T>(<unknown>this));\n        }\n\n        public createWaveShaper(): IWaveShaperNode<T> {\n            return new waveShaperNodeConstructor(<T>(<unknown>this));\n        }\n\n        public decodeAudioData(\n            audioData: ArrayBuffer,\n            successCallback?: TDecodeSuccessCallback,\n            errorCallback?: TDecodeErrorCallback\n        ): Promise<IAudioBuffer> {\n            return decodeAudioData(this._nativeContext, audioData).then(\n                (audioBuffer) => {\n                    if (typeof successCallback === 'function') {\n                        successCallback(audioBuffer);\n                    }\n\n                    return audioBuffer;\n                },\n                (err) => {\n                    if (typeof errorCallback === 'function') {\n                        errorCallback(err);\n                    }\n\n                    throw err;\n                }\n            );\n        }\n    };\n};\n", "import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { IAudioParam, IBiquadFilterNode, IBiquadFilterOptions } from '../interfaces';\nimport { TAudioNodeRenderer, TBiquadFilterNodeConstructorFactory, TBiquadFilterType, TContext, TNativeBiquadFilterNode } from '../types';\n\nconst DEFAULT_OPTIONS = {\n    Q: 1,\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    detune: 0,\n    frequency: 350,\n    gain: 0,\n    type: 'lowpass'\n} as const;\n\nexport const createBiquadFilterNodeConstructor: TBiquadFilterNodeConstructorFactory = (\n    audioNodeConstructor,\n    createAudioParam,\n    createBiquadFilterNodeRenderer,\n    createInvalidAccessError,\n    createNativeBiquadFilterNode,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    setAudioNodeTailTime\n) => {\n    return class BiquadFilterNode<T extends TContext> extends audioNodeConstructor<T> implements IBiquadFilterNode<T> {\n        private _detune: IAudioParam;\n\n        private _frequency: IAudioParam;\n\n        private _gain: IAudioParam;\n\n        private _nativeBiquadFilterNode: TNativeBiquadFilterNode;\n\n        private _Q: IAudioParam;\n\n        constructor(context: T, options?: Partial<IBiquadFilterOptions>) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const biquadFilterNodeRenderer = <TAudioNodeRenderer<T, this>>(isOffline ? createBiquadFilterNodeRenderer() : null);\n\n            super(context, false, nativeBiquadFilterNode, biquadFilterNodeRenderer);\n\n            // Bug #80: Safari does not export the correct values for maxValue and minValue.\n            this._Q = createAudioParam(this, isOffline, nativeBiquadFilterNode.Q, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            // Bug #78: Firefox & Safari do not export the correct values for maxValue and minValue.\n            this._detune = createAudioParam(\n                this,\n                isOffline,\n                nativeBiquadFilterNode.detune,\n                1200 * Math.log2(MOST_POSITIVE_SINGLE_FLOAT),\n                -1200 * Math.log2(MOST_POSITIVE_SINGLE_FLOAT)\n            );\n            // Bug #77: Firefox & Safari do not export the correct value for minValue.\n            this._frequency = createAudioParam(this, isOffline, nativeBiquadFilterNode.frequency, context.sampleRate / 2, 0);\n            // Bug #79: Firefox & Safari do not export the correct values for maxValue and minValue.\n            this._gain = createAudioParam(\n                this,\n                isOffline,\n                nativeBiquadFilterNode.gain,\n                40 * Math.log10(MOST_POSITIVE_SINGLE_FLOAT),\n                MOST_NEGATIVE_SINGLE_FLOAT\n            );\n            this._nativeBiquadFilterNode = nativeBiquadFilterNode;\n\n            // @todo Determine a meaningful tail-time instead of just using one second.\n            setAudioNodeTailTime(this, 1);\n        }\n\n        get detune(): IAudioParam {\n            return this._detune;\n        }\n\n        get frequency(): IAudioParam {\n            return this._frequency;\n        }\n\n        get gain(): IAudioParam {\n            return this._gain;\n        }\n\n        get Q(): IAudioParam {\n            return this._Q;\n        }\n\n        get type(): TBiquadFilterType {\n            return this._nativeBiquadFilterNode.type;\n        }\n\n        set type(value) {\n            this._nativeBiquadFilterNode.type = value;\n        }\n\n        public getFrequencyResponse(frequencyHz: Float32Array, magResponse: Float32Array, phaseResponse: Float32Array): void {\n            // Bug #189: Safari does throw an InvalidStateError.\n            try {\n                this._nativeBiquadFilterNode.getFrequencyResponse(frequencyHz, magResponse, phaseResponse);\n            } catch (err) {\n                if (err.code === 11) {\n                    throw createInvalidAccessError();\n                }\n\n                throw err;\n            }\n\n            // Bug #68: Safari does not throw an error if the parameters differ in their length.\n            if (frequencyHz.length !== magResponse.length || magResponse.length !== phaseResponse.length) {\n                throw createInvalidAccessError();\n            }\n        }\n    };\n};\n", "import { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { IBiquadFilterNode, IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport { TBiquadFilterNodeRendererFactoryFactory, TNativeBiquadFilterNode, TNativeOfflineAudioContext } from '../types';\n\nexport const createBiquadFilterNodeRendererFactory: TBiquadFilterNodeRendererFactoryFactory = (\n    connectAudioParam,\n    createNativeBiquadFilterNode,\n    getNativeAudioNode,\n    renderAutomation,\n    renderInputsOfAudioNode\n) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>() => {\n        const renderedNativeBiquadFilterNodes = new WeakMap<TNativeOfflineAudioContext, TNativeBiquadFilterNode>();\n\n        const createBiquadFilterNode = async (proxy: IBiquadFilterNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext) => {\n            let nativeBiquadFilterNode = getNativeAudioNode<T, TNativeBiquadFilterNode>(proxy);\n\n            /*\n             * If the initially used nativeBiquadFilterNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeBiquadFilterNodeIsOwnedByContext = isOwnedByContext(nativeBiquadFilterNode, nativeOfflineAudioContext);\n\n            if (!nativeBiquadFilterNodeIsOwnedByContext) {\n                const options = {\n                    Q: nativeBiquadFilterNode.Q.value,\n                    channelCount: nativeBiquadFilterNode.channelCount,\n                    channelCountMode: nativeBiquadFilterNode.channelCountMode,\n                    channelInterpretation: nativeBiquadFilterNode.channelInterpretation,\n                    detune: nativeBiquadFilterNode.detune.value,\n                    frequency: nativeBiquadFilterNode.frequency.value,\n                    gain: nativeBiquadFilterNode.gain.value,\n                    type: nativeBiquadFilterNode.type\n                };\n\n                nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeOfflineAudioContext, options);\n            }\n\n            renderedNativeBiquadFilterNodes.set(nativeOfflineAudioContext, nativeBiquadFilterNode);\n\n            if (!nativeBiquadFilterNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q);\n                await renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune);\n                await renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency);\n                await renderAutomation(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain);\n            } else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain);\n            }\n\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeBiquadFilterNode);\n\n            return nativeBiquadFilterNode;\n        };\n\n        return {\n            render(proxy: IBiquadFilterNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext): Promise<TNativeBiquadFilterNode> {\n                const renderedNativeBiquadFilterNode = renderedNativeBiquadFilterNodes.get(nativeOfflineAudioContext);\n\n                if (renderedNativeBiquadFilterNode !== undefined) {\n                    return Promise.resolve(renderedNativeBiquadFilterNode);\n                }\n\n                return createBiquadFilterNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n", "import { TCacheTestResultFactory } from '../types';\n\nexport const createCacheTestResult: TCacheTestResultFactory = (ongoingTests, testResults) => {\n    return (tester, test) => {\n        const cachedTestResult = testResults.get(tester);\n\n        if (cachedTestResult !== undefined) {\n            return cachedTestResult;\n        }\n\n        const ongoingTest = ongoingTests.get(tester);\n\n        if (ongoingTest !== undefined) {\n            return ongoingTest;\n        }\n\n        try {\n            const synchronousTestResult = test();\n\n            if (synchronousTestResult instanceof Promise) {\n                ongoingTests.set(tester, synchronousTestResult);\n\n                return synchronousTestResult\n                    .catch(() => false)\n                    .then((finalTestResult) => {\n                        ongoingTests.delete(tester);\n                        testResults.set(tester, finalTestResult);\n\n                        return finalTestResult;\n                    });\n            }\n\n            testResults.set(tester, synchronousTestResult);\n\n            return synchronousTestResult;\n        } catch {\n            testResults.set(tester, false);\n\n            return false;\n        }\n    };\n};\n", "import { IChannelMergerOptions } from '../interfaces';\nimport { TAudioNodeRenderer, TChannelMergerNodeConstructorFactory, TContext } from '../types';\n\nconst DEFAULT_OPTIONS = {\n    channelCount: 1,\n    channelCountMode: 'explicit',\n    channelInterpretation: 'speakers',\n    numberOfInputs: 6\n} as const;\n\nexport const createChannelMergerNodeConstructor: TChannelMergerNodeConstructorFactory = (\n    audioNodeConstructor,\n    createChannelMergerNodeRenderer,\n    createNativeChannelMergerNode,\n    getNativeContext,\n    isNativeOfflineAudioContext\n) => {\n    return class ChannelMergerNode<T extends TContext> extends audioNodeConstructor<T> {\n        constructor(context: T, options?: Partial<IChannelMergerOptions>) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeChannelMergerNode = createNativeChannelMergerNode(nativeContext, mergedOptions);\n            const channelMergerNodeRenderer = <TAudioNodeRenderer<T, this>>(\n                (isNativeOfflineAudioContext(nativeContext) ? createChannelMergerNodeRenderer() : null)\n            );\n\n            super(context, false, nativeChannelMergerNode, channelMergerNodeRenderer);\n        }\n    };\n};\n", "import { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { IAudioNode, IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport { TChannelMergerNodeRendererFactoryFactory, TNativeAudioNode, TNativeOfflineAudioContext } from '../types';\n\nexport const createChannelMergerNodeRendererFactory: TChannelMergerNodeRendererFactoryFactory = (\n    createNativeChannelMergerNode,\n    getNativeAudioNode,\n    renderInputsOfAudioNode\n) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>() => {\n        const renderedNativeAudioNodes = new WeakMap<TNativeOfflineAudioContext, TNativeAudioNode>();\n\n        const createAudioNode = async (proxy: IAudioNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext) => {\n            let nativeAudioNode = getNativeAudioNode<T, TNativeAudioNode>(proxy);\n\n            // If the initially used nativeAudioNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeAudioNodeIsOwnedByContext = isOwnedByContext(nativeAudioNode, nativeOfflineAudioContext);\n\n            if (!nativeAudioNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeAudioNode.channelCount,\n                    channelCountMode: nativeAudioNode.channelCountMode,\n                    channelInterpretation: nativeAudioNode.channelInterpretation,\n                    numberOfInputs: nativeAudioNode.numberOfInputs\n                };\n\n                nativeAudioNode = createNativeChannelMergerNode(nativeOfflineAudioContext, options);\n            }\n\n            renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioNode);\n\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioNode);\n\n            return nativeAudioNode;\n        };\n\n        return {\n            render(proxy: IAudioNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext): Promise<TNativeAudioNode> {\n                const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n\n                if (renderedNativeAudioNode !== undefined) {\n                    return Promise.resolve(renderedNativeAudioNode);\n                }\n\n                return createAudioNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n", "import { IChannelSplitterOptions } from '../interfaces';\nimport { TAudioNodeRenderer, TChannelSplitterNodeConstructorFactory, TContext } from '../types';\n\nconst DEFAULT_OPTIONS = {\n    channelCount: 6,\n    channelCountMode: 'explicit',\n    channelInterpretation: 'discrete',\n    numberOfOutputs: 6\n} as const;\n\nexport const createChannelSplitterNodeConstructor: TChannelSplitterNodeConstructorFactory = (\n    audioNodeConstructor,\n    createChannelSplitterNodeRenderer,\n    createNativeChannelSplitterNode,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    sanitizeChannelSplitterOptions\n) => {\n    return class ChannelSplitterNode<T extends TContext> extends audioNodeConstructor<T> {\n        constructor(context: T, options?: Partial<IChannelSplitterOptions>) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = sanitizeChannelSplitterOptions({ ...DEFAULT_OPTIONS, ...options });\n            const nativeChannelSplitterNode = createNativeChannelSplitterNode(nativeContext, mergedOptions);\n            const channelSplitterNodeRenderer = <TAudioNodeRenderer<T, this>>(\n                (isNativeOfflineAudioContext(nativeContext) ? createChannelSplitterNodeRenderer() : null)\n            );\n\n            super(context, false, nativeChannelSplitterNode, channelSplitterNodeRenderer);\n        }\n    };\n};\n", "import { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { IAudioNode, IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport { TChannelSplitterNodeRendererFactoryFactory, TNativeAudioNode, TNativeOfflineAudioContext } from '../types';\n\nexport const createChannelSplitterNodeRendererFactory: TChannelSplitterNodeRendererFactoryFactory = (\n    createNativeChannelSplitterNode,\n    getNativeAudioNode,\n    renderInputsOfAudioNode\n) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>() => {\n        const renderedNativeAudioNodes = new WeakMap<TNativeOfflineAudioContext, TNativeAudioNode>();\n\n        const createAudioNode = async (proxy: IAudioNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext) => {\n            let nativeAudioNode = getNativeAudioNode<T, TNativeAudioNode>(proxy);\n\n            // If the initially used nativeAudioNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeAudioNodeIsOwnedByContext = isOwnedByContext(nativeAudioNode, nativeOfflineAudioContext);\n\n            if (!nativeAudioNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeAudioNode.channelCount,\n                    channelCountMode: nativeAudioNode.channelCountMode,\n                    channelInterpretation: nativeAudioNode.channelInterpretation,\n                    numberOfOutputs: nativeAudioNode.numberOfOutputs\n                };\n\n                nativeAudioNode = createNativeChannelSplitterNode(nativeOfflineAudioContext, options);\n            }\n\n            renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioNode);\n\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioNode);\n\n            return nativeAudioNode;\n        };\n\n        return {\n            render(proxy: IAudioNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext): Promise<TNativeAudioNode> {\n                const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n\n                if (renderedNativeAudioNode !== undefined) {\n                    return Promise.resolve(renderedNativeAudioNode);\n                }\n\n                return createAudioNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n", "import { TConnectAudioParamFactory } from '../types';\n\nexport const createConnectAudioParam: TConnectAudioParamFactory = (renderInputsOfAudioParam) => {\n    return (nativeOfflineAudioContext, audioParam, nativeAudioParam) => {\n        return renderInputsOfAudioParam(audioParam, nativeOfflineAudioContext, nativeAudioParam);\n    };\n};\n", "import { isNativeAudioNode } from '../guards/native-audio-node';\nimport { TConnectMultipleOutputsFactory } from '../types';\n\nexport const createConnectMultipleOutputs: TConnectMultipleOutputsFactory = (createIndexSizeError) => {\n    return (outputAudioNodes, destination, output = 0, input = 0) => {\n        const outputAudioNode = outputAudioNodes[output];\n\n        if (outputAudioNode === undefined) {\n            throw createIndexSizeError();\n        }\n\n        if (isNativeAudioNode(destination)) {\n            return outputAudioNode.connect(destination, 0, input);\n        }\n\n        return outputAudioNode.connect(destination, 0);\n    };\n};\n", "import { TConnectedNativeAudioBufferSourceNodeFactoryFactory } from '../types';\n\nexport const createConnectedNativeAudioBufferSourceNodeFactory: TConnectedNativeAudioBufferSourceNodeFactoryFactory = (\n    createNativeAudioBufferSourceNode\n) => {\n    return (nativeContext, nativeAudioNode) => {\n        const nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext, {\n            buffer: null,\n            channelCount: 2,\n            channelCountMode: 'max',\n            channelInterpretation: 'speakers',\n            loop: false,\n            loopEnd: 0,\n            loopStart: 0,\n            playbackRate: 1\n        });\n        const nativeAudioBuffer = nativeContext.createBuffer(1, 2, 44100);\n\n        nativeAudioBufferSourceNode.buffer = nativeAudioBuffer;\n        nativeAudioBufferSourceNode.loop = true;\n\n        nativeAudioBufferSourceNode.connect(nativeAudioNode);\n        nativeAudioBufferSourceNode.start();\n\n        return () => {\n            nativeAudioBufferSourceNode.stop();\n            nativeAudioBufferSourceNode.disconnect(nativeAudioNode);\n        };\n    };\n};\n", "import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { isActiveAudioNode } from '../helpers/is-active-audio-node';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassive } from '../helpers/set-internal-state-to-passive';\nimport { IAudioParam, IAudioScheduledSourceNodeEventMap, IConstantSourceNode, IConstantSourceOptions } from '../interfaces';\nimport {\n    TConstantSourceNodeConstructorFactory,\n    TConstantSourceNodeRenderer,\n    TContext,\n    TEventHandler,\n    TNativeConstantSourceNode\n} from '../types';\n\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    offset: 1\n} as const;\n\nexport const createConstantSourceNodeConstructor: TConstantSourceNodeConstructorFactory = (\n    audioNodeConstructor,\n    createAudioParam,\n    createConstantSourceNodeRendererFactory,\n    createNativeConstantSourceNode,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    wrapEventListener\n) => {\n    return class ConstantSourceNode<T extends TContext>\n        extends audioNodeConstructor<T, IAudioScheduledSourceNodeEventMap>\n        implements IConstantSourceNode<T>\n    {\n        private _constantSourceNodeRenderer: TConstantSourceNodeRenderer<T>;\n\n        private _nativeConstantSourceNode: TNativeConstantSourceNode;\n\n        private _offset: IAudioParam;\n\n        private _onended: null | TEventHandler<this>;\n\n        constructor(context: T, options?: Partial<IConstantSourceOptions>) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeConstantSourceNode = createNativeConstantSourceNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const constantSourceNodeRenderer = <TConstantSourceNodeRenderer<T>>(\n                (isOffline ? createConstantSourceNodeRendererFactory() : null)\n            );\n\n            super(context, false, nativeConstantSourceNode, constantSourceNodeRenderer);\n\n            this._constantSourceNodeRenderer = constantSourceNodeRenderer;\n            this._nativeConstantSourceNode = nativeConstantSourceNode;\n            /*\n             * Bug #62 & #74: Safari does not support ConstantSourceNodes and does not export the correct values for maxValue and minValue\n             * for GainNodes.\n             */\n            this._offset = createAudioParam(\n                this,\n                isOffline,\n                nativeConstantSourceNode.offset,\n                MOST_POSITIVE_SINGLE_FLOAT,\n                MOST_NEGATIVE_SINGLE_FLOAT\n            );\n            this._onended = null;\n        }\n\n        get offset(): IAudioParam {\n            return this._offset;\n        }\n\n        get onended(): null | TEventHandler<this> {\n            return this._onended;\n        }\n\n        set onended(value) {\n            const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n\n            this._nativeConstantSourceNode.onended = wrappedListener;\n\n            const nativeOnEnded = this._nativeConstantSourceNode.onended;\n\n            this._onended = nativeOnEnded !== null && nativeOnEnded === wrappedListener ? value : nativeOnEnded;\n        }\n\n        public start(when = 0): void {\n            this._nativeConstantSourceNode.start(when);\n\n            if (this._constantSourceNodeRenderer !== null) {\n                this._constantSourceNodeRenderer.start = when;\n            }\n\n            if (this.context.state !== 'closed') {\n                setInternalStateToActive(this);\n\n                const resetInternalStateToPassive = () => {\n                    this._nativeConstantSourceNode.removeEventListener('ended', resetInternalStateToPassive);\n\n                    if (isActiveAudioNode(this)) {\n                        setInternalStateToPassive(this);\n                    }\n                };\n\n                this._nativeConstantSourceNode.addEventListener('ended', resetInternalStateToPassive);\n            }\n        }\n\n        public stop(when = 0): void {\n            this._nativeConstantSourceNode.stop(when);\n\n            if (this._constantSourceNodeRenderer !== null) {\n                this._constantSourceNodeRenderer.stop = when;\n            }\n        }\n    };\n};\n", "import { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { IConstantSourceNode, IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport { TConstantSourceNodeRendererFactoryFactory, TNativeConstantSourceNode, TNativeOfflineAudioContext } from '../types';\n\nexport const createConstantSourceNodeRendererFactory: TConstantSourceNodeRendererFactoryFactory = (\n    connectAudioParam,\n    createNativeConstantSourceNode,\n    getNativeAudioNode,\n    renderAutomation,\n    renderInputsOfAudioNode\n) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>() => {\n        const renderedNativeConstantSourceNodes = new WeakMap<TNativeOfflineAudioContext, TNativeConstantSourceNode>();\n\n        let start: null | number = null;\n        let stop: null | number = null;\n\n        const createConstantSourceNode = async (proxy: IConstantSourceNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext) => {\n            let nativeConstantSourceNode = getNativeAudioNode<T, TNativeConstantSourceNode>(proxy);\n\n            /*\n             * If the initially used nativeConstantSourceNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeConstantSourceNodeIsOwnedByContext = isOwnedByContext(nativeConstantSourceNode, nativeOfflineAudioContext);\n\n            if (!nativeConstantSourceNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeConstantSourceNode.channelCount,\n                    channelCountMode: nativeConstantSourceNode.channelCountMode,\n                    channelInterpretation: nativeConstantSourceNode.channelInterpretation,\n                    offset: nativeConstantSourceNode.offset.value\n                };\n\n                nativeConstantSourceNode = createNativeConstantSourceNode(nativeOfflineAudioContext, options);\n\n                if (start !== null) {\n                    nativeConstantSourceNode.start(start);\n                }\n\n                if (stop !== null) {\n                    nativeConstantSourceNode.stop(stop);\n                }\n            }\n\n            renderedNativeConstantSourceNodes.set(nativeOfflineAudioContext, nativeConstantSourceNode);\n\n            if (!nativeConstantSourceNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset);\n            } else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset);\n            }\n\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConstantSourceNode);\n\n            return nativeConstantSourceNode;\n        };\n\n        return {\n            set start(value: number) {\n                start = value;\n            },\n            set stop(value: number) {\n                stop = value;\n            },\n            render(\n                proxy: IConstantSourceNode<T>,\n                nativeOfflineAudioContext: TNativeOfflineAudioContext\n            ): Promise<TNativeConstantSourceNode> {\n                const renderedNativeConstantSourceNode = renderedNativeConstantSourceNodes.get(nativeOfflineAudioContext);\n\n                if (renderedNativeConstantSourceNode !== undefined) {\n                    return Promise.resolve(renderedNativeConstantSourceNode);\n                }\n\n                return createConstantSourceNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n", "import { TConvertNumberToUnsignedLongFactory } from '../types';\n\nexport const createConvertNumberToUnsignedLong: TConvertNumberToUnsignedLongFactory = (unit32Array) => {\n    return (value) => {\n        unit32Array[0] = value;\n\n        return unit32Array[0];\n    };\n};\n", "import { IConvolverNode, IConvolverOptions } from '../interfaces';\nimport { TAnyAudioBuffer, TAudioNodeRenderer, TContext, TConvolverNodeConstructorFactory, TNativeConvolverNode } from '../types';\n\nconst DEFAULT_OPTIONS = {\n    buffer: null,\n    channelCount: 2,\n    channelCountMode: 'clamped-max',\n    channelInterpretation: 'speakers',\n    disableNormalization: false\n} as const;\n\nexport const createConvolverNodeConstructor: TConvolverNodeConstructorFactory = (\n    audioNodeConstructor,\n    createConvolverNodeRenderer,\n    createNativeConvolverNode,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    setAudioNodeTailTime\n) => {\n    return class ConvolverNode<T extends TContext> extends audioNodeConstructor<T> implements IConvolverNode<T> {\n        private _isBufferNullified: boolean;\n\n        private _nativeConvolverNode: TNativeConvolverNode;\n\n        constructor(context: T, options?: Partial<IConvolverOptions>) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeConvolverNode = createNativeConvolverNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const convolverNodeRenderer = <TAudioNodeRenderer<T, this>>(isOffline ? createConvolverNodeRenderer() : null);\n\n            super(context, false, nativeConvolverNode, convolverNodeRenderer);\n\n            this._isBufferNullified = false;\n            this._nativeConvolverNode = nativeConvolverNode;\n\n            if (mergedOptions.buffer !== null) {\n                setAudioNodeTailTime(this, mergedOptions.buffer.duration);\n            }\n        }\n\n        get buffer(): null | TAnyAudioBuffer {\n            if (this._isBufferNullified) {\n                return null;\n            }\n\n            return this._nativeConvolverNode.buffer;\n        }\n\n        set buffer(value) {\n            this._nativeConvolverNode.buffer = value;\n\n            // Bug #115: Safari does not allow to set the buffer to null.\n            if (value === null && this._nativeConvolverNode.buffer !== null) {\n                const nativeContext = this._nativeConvolverNode.context;\n\n                this._nativeConvolverNode.buffer = nativeContext.createBuffer(1, 1, nativeContext.sampleRate);\n                this._isBufferNullified = true;\n\n                setAudioNodeTailTime(this, 0);\n            } else {\n                this._isBufferNullified = false;\n\n                setAudioNodeTailTime(this, this._nativeConvolverNode.buffer === null ? 0 : this._nativeConvolverNode.buffer.duration);\n            }\n        }\n\n        get normalize(): boolean {\n            return this._nativeConvolverNode.normalize;\n        }\n\n        set normalize(value) {\n            this._nativeConvolverNode.normalize = value;\n        }\n    };\n};\n", "import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { IConvolverNode, IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport { TConvolverNodeRendererFactoryFactory, TNativeConvolverNode, TNativeOfflineAudioContext } from '../types';\n\nexport const createConvolverNodeRendererFactory: TConvolverNodeRendererFactoryFactory = (\n    createNativeConvolverNode,\n    getNativeAudioNode,\n    renderInputsOfAudioNode\n) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>() => {\n        const renderedNativeConvolverNodes = new WeakMap<TNativeOfflineAudioContext, TNativeConvolverNode>();\n\n        const createConvolverNode = async (proxy: IConvolverNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext) => {\n            let nativeConvolverNode = getNativeAudioNode<T, TNativeConvolverNode>(proxy);\n\n            // If the initially used nativeConvolverNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeConvolverNodeIsOwnedByContext = isOwnedByContext(nativeConvolverNode, nativeOfflineAudioContext);\n\n            if (!nativeConvolverNodeIsOwnedByContext) {\n                const options = {\n                    buffer: nativeConvolverNode.buffer,\n                    channelCount: nativeConvolverNode.channelCount,\n                    channelCountMode: nativeConvolverNode.channelCountMode,\n                    channelInterpretation: nativeConvolverNode.channelInterpretation,\n                    disableNormalization: !nativeConvolverNode.normalize\n                };\n\n                nativeConvolverNode = createNativeConvolverNode(nativeOfflineAudioContext, options);\n            }\n\n            renderedNativeConvolverNodes.set(nativeOfflineAudioContext, nativeConvolverNode);\n\n            if (isNativeAudioNodeFaker(nativeConvolverNode)) {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode.inputs[0]);\n            } else {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode);\n            }\n\n            return nativeConvolverNode;\n        };\n\n        return {\n            render(proxy: IConvolverNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext): Promise<TNativeConvolverNode> {\n                const renderedNativeConvolverNode = renderedNativeConvolverNodes.get(nativeOfflineAudioContext);\n\n                if (renderedNativeConvolverNode !== undefined) {\n                    return Promise.resolve(renderedNativeConvolverNode);\n                }\n\n                return createConvolverNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n", "import { TCreateNativeOfflineAudioContextFactory } from '../types';\n\nexport const createCreateNativeOfflineAudioContext: TCreateNativeOfflineAudioContextFactory = (\n    createNotSupportedError,\n    nativeOfflineAudioContextConstructor\n) => {\n    return (numberOfChannels, length, sampleRate) => {\n        if (nativeOfflineAudioContextConstructor === null) {\n            throw new Error('Missing the native OfflineAudioContext constructor.');\n        }\n\n        try {\n            return new nativeOfflineAudioContextConstructor(numberOfChannels, length, sampleRate);\n        } catch (err) {\n            // Bug #143, #144 & #146: Safari throws a SyntaxError when numberOfChannels, length or sampleRate are invalid.\n            if (err.name === 'SyntaxError') {\n                throw createNotSupportedError();\n            }\n\n            throw err;\n        }\n    };\n};\n", "import { TDataCloneErrorFactory } from '../types';\n\nexport const createDataCloneError: TDataCloneErrorFactory = () => new DOMException('', 'DataCloneError');\n", "export const detachArrayBuffer = (arrayBuffer: ArrayBuffer): Promise<void> => {\n    const { port1, port2 } = new MessageChannel();\n\n    return new Promise((resolve) => {\n        const closeAndResolve = () => {\n            port2.onmessage = null;\n\n            port1.close();\n            port2.close();\n\n            resolve();\n        };\n\n        port2.onmessage = () => closeAndResolve();\n\n        try {\n            port1.postMessage(arrayBuffer, [arrayBuffer]);\n        } catch {\n            // Ignore errors.\n        } finally {\n            closeAndResolve();\n        }\n    });\n};\n", "import { detachArrayBuffer } from '../helpers/detach-array-buffer';\nimport { wrapAudioBufferGetChannelDataMethod } from '../helpers/wrap-audio-buffer-get-channel-data-method';\nimport { TDecodeAudioDataFactory } from '../types';\n\nexport const createDecodeAudioData: TDecodeAudioDataFactory = (\n    audioBufferStore,\n    cacheTestResult,\n    createDataCloneError,\n    createEncodingError,\n    detachedArrayBuffers,\n    getNativeContext,\n    isNativeContext,\n    testAudioBufferCopyChannelMethodsOutOfBoundsSupport,\n    testPromiseSupport,\n    wrapAudioBufferCopyChannelMethods,\n    wrapAudioBufferCopyChannelMethodsOutOfBounds\n) => {\n    return (anyContext, audioData) => {\n        const nativeContext = isNativeContext(anyContext) ? anyContext : getNativeContext(anyContext);\n\n        // Bug #43: Only Chrome and Edge do throw a DataCloneError.\n        if (detachedArrayBuffers.has(audioData)) {\n            const err = createDataCloneError();\n\n            return Promise.reject(err);\n        }\n\n        // The audioData parameter maybe of a type which can't be added to a WeakSet.\n        try {\n            detachedArrayBuffers.add(audioData);\n        } catch {\n            // Ignore errors.\n        }\n\n        // Bug #21: Safari does not support promises yet.\n        if (cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeContext))) {\n            return nativeContext.decodeAudioData(audioData).then((audioBuffer) => {\n                // Bug #133: Safari does neuter the ArrayBuffer.\n                detachArrayBuffer(audioData).catch(() => {\n                    // Ignore errors.\n                });\n\n                // Bug #157: Firefox does not allow the bufferOffset to be out-of-bounds.\n                if (\n                    !cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () =>\n                        testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer)\n                    )\n                ) {\n                    wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n                }\n\n                audioBufferStore.add(audioBuffer);\n\n                return audioBuffer;\n            });\n        }\n\n        // Bug #21: Safari does not return a Promise yet.\n        return new Promise((resolve, reject) => {\n            const complete = async () => {\n                // Bug #133: Safari does neuter the ArrayBuffer.\n                try {\n                    await detachArrayBuffer(audioData);\n                } catch {\n                    // Ignore errors.\n                }\n            };\n\n            const fail = (err: DOMException | Error) => {\n                reject(err);\n                complete();\n            };\n\n            // Bug #26: Safari throws a synchronous error.\n            try {\n                // Bug #1: Safari requires a successCallback.\n                nativeContext.decodeAudioData(\n                    audioData,\n                    (audioBuffer) => {\n                        // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n                        // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n                        if (typeof audioBuffer.copyFromChannel !== 'function') {\n                            wrapAudioBufferCopyChannelMethods(audioBuffer);\n                            wrapAudioBufferGetChannelDataMethod(audioBuffer);\n                        }\n\n                        audioBufferStore.add(audioBuffer);\n\n                        complete().then(() => resolve(audioBuffer));\n                    },\n                    (err: DOMException | Error) => {\n                        // Bug #4: Safari returns null instead of an error.\n                        if (err === null) {\n                            fail(createEncodingError());\n                        } else {\n                            fail(err);\n                        }\n                    }\n                );\n            } catch (err) {\n                fail(err);\n            }\n        });\n    };\n};\n", "import { isAudioNodeOutputConnection } from '../guards/audio-node-output-connection';\nimport { TDecrementCycleCounterFactory } from '../types';\n\nexport const createDecrementCycleCounter: TDecrementCycleCounterFactory = (\n    connectNativeAudioNodeToNativeAudioNode,\n    cycleCounters,\n    getAudioNodeConnections,\n    getNativeAudioNode,\n    getNativeAudioParam,\n    getNativeContext,\n    isActiveAudioNode,\n    isNativeOfflineAudioContext\n) => {\n    return (audioNode, count) => {\n        const cycleCounter = cycleCounters.get(audioNode);\n\n        if (cycleCounter === undefined) {\n            throw new Error('Missing the expected cycle count.');\n        }\n\n        const nativeContext = getNativeContext(audioNode.context);\n        const isOffline = isNativeOfflineAudioContext(nativeContext);\n\n        if (cycleCounter === count) {\n            cycleCounters.delete(audioNode);\n\n            if (!isOffline && isActiveAudioNode(audioNode)) {\n                const nativeSourceAudioNode = getNativeAudioNode(audioNode);\n                const { outputs } = getAudioNodeConnections(audioNode);\n\n                for (const output of outputs) {\n                    if (isAudioNodeOutputConnection(output)) {\n                        const nativeDestinationAudioNode = getNativeAudioNode(output[0]);\n\n                        connectNativeAudioNodeToNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output[1], output[2]);\n                    } else {\n                        const nativeDestinationAudioParam = getNativeAudioParam(output[0]);\n\n                        nativeSourceAudioNode.connect(nativeDestinationAudioParam, output[1]);\n                    }\n                }\n            }\n        } else {\n            cycleCounters.set(audioNode, cycleCounter - count);\n        }\n    };\n};\n", "import { IAudioParam, IDelayNode, IDelayOptions } from '../interfaces';\nimport { TAudioNodeRenderer, TContext, TDelayNodeConstructorFactory } from '../types';\n\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    delayTime: 0,\n    maxDelayTime: 1\n} as const;\n\nexport const createDelayNodeConstructor: TDelayNodeConstructorFactory = (\n    audioNodeConstructor,\n    createAudioParam,\n    createDelayNodeRenderer,\n    createNativeDelayNode,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    setAudioNodeTailTime\n) => {\n    return class DelayNode<T extends TContext> extends audioNodeConstructor<T> implements IDelayNode<T> {\n        private _delayTime: IAudioParam;\n\n        constructor(context: T, options?: Partial<IDelayOptions>) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeDelayNode = createNativeDelayNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const delayNodeRenderer = <TAudioNodeRenderer<T, this>>(isOffline ? createDelayNodeRenderer(mergedOptions.maxDelayTime) : null);\n\n            super(context, false, nativeDelayNode, delayNodeRenderer);\n\n            this._delayTime = createAudioParam(this, isOffline, nativeDelayNode.delayTime);\n\n            setAudioNodeTailTime(this, mergedOptions.maxDelayTime);\n        }\n\n        get delayTime(): IAudioParam {\n            return this._delayTime;\n        }\n    };\n};\n", "import { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { IDelayNode, IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport { TDelayNodeRendererFactoryFactory, TNativeDelayNode, TNativeOfflineAudioContext } from '../types';\n\nexport const createDelayNodeRendererFactory: TDelayNodeRendererFactoryFactory = (\n    connectAudioParam,\n    createNativeDelayNode,\n    getNativeAudioNode,\n    renderAutomation,\n    renderInputsOfAudioNode\n) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>(maxDelayTime: number) => {\n        const renderedNativeDelayNodes = new WeakMap<TNativeOfflineAudioContext, TNativeDelayNode>();\n\n        const createDelayNode = async (proxy: IDelayNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext) => {\n            let nativeDelayNode = getNativeAudioNode<T, TNativeDelayNode>(proxy);\n\n            // If the initially used nativeDelayNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeDelayNodeIsOwnedByContext = isOwnedByContext(nativeDelayNode, nativeOfflineAudioContext);\n\n            if (!nativeDelayNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeDelayNode.channelCount,\n                    channelCountMode: nativeDelayNode.channelCountMode,\n                    channelInterpretation: nativeDelayNode.channelInterpretation,\n                    delayTime: nativeDelayNode.delayTime.value,\n                    maxDelayTime\n                };\n\n                nativeDelayNode = createNativeDelayNode(nativeOfflineAudioContext, options);\n            }\n\n            renderedNativeDelayNodes.set(nativeOfflineAudioContext, nativeDelayNode);\n\n            if (!nativeDelayNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime);\n            } else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime);\n            }\n\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDelayNode);\n\n            return nativeDelayNode;\n        };\n\n        return {\n            render(proxy: IDelayNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext): Promise<TNativeDelayNode> {\n                const renderedNativeDelayNode = renderedNativeDelayNodes.get(nativeOfflineAudioContext);\n\n                if (renderedNativeDelayNode !== undefined) {\n                    return Promise.resolve(renderedNativeDelayNode);\n                }\n\n                return createDelayNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n", "import { TDeleteActiveInputConnectionToAudioNodeFactory } from '../types';\n\nexport const createDeleteActiveInputConnectionToAudioNode: TDeleteActiveInputConnectionToAudioNodeFactory = (pickElementFromSet) => {\n    return (activeInputs, source, output, input) => {\n        return pickElementFromSet(\n            activeInputs[input],\n            (activeInputConnection) => activeInputConnection[0] === source && activeInputConnection[1] === output\n        );\n    };\n};\n", "import { TDeleteUnrenderedAudioWorkletNodeFactory } from '../types';\n\nexport const createDeleteUnrenderedAudioWorkletNode: TDeleteUnrenderedAudioWorkletNodeFactory = (getUnrenderedAudioWorkletNodes) => {\n    return (nativeContext, audioWorkletNode) => {\n        getUnrenderedAudioWorkletNodes(nativeContext).delete(audioWorkletNode);\n    };\n};\n", "import { IAudioNode, IDelayNode } from '../interfaces';\nimport { TContext } from '../types';\n\nexport const isDelayNode = <T extends TContext>(audioNode: IAudioNode<T>): audioNode is IDelayNode<T> => {\n    return 'delayTime' in audioNode;\n};\n", "import { isAudioNode } from '../guards/audio-node';\nimport { isDelayNode } from '../guards/delay-node';\nimport { IAudioNode, IAudioParam } from '../interfaces';\nimport { TContext, TDetectCyclesFactory } from '../types';\n\nexport const createDetectCycles: TDetectCyclesFactory = (audioParamAudioNodeStore, getAudioNodeConnections, getValueForKey) => {\n    return function detectCycles<T extends TContext>(chain: IAudioNode<T>[], nextLink: IAudioNode<T> | IAudioParam): IAudioNode<T>[][] {\n        const audioNode = isAudioNode(nextLink) ? nextLink : <IAudioNode<T>>getValueForKey(audioParamAudioNodeStore, nextLink);\n\n        if (isDelayNode(audioNode)) {\n            return [];\n        }\n\n        if (chain[0] === audioNode) {\n            return [chain];\n        }\n\n        if (chain.includes(audioNode)) {\n            return [];\n        }\n\n        const { outputs } = getAudioNodeConnections(audioNode);\n\n        return Array.from(outputs)\n            .map((outputConnection) => detectCycles([...chain, audioNode], outputConnection[0]))\n            .reduce((mergedCycles, nestedCycles) => mergedCycles.concat(nestedCycles), []);\n    };\n};\n", "import { isNativeAudioNode } from '../guards/native-audio-node';\nimport { TDisconnectMultipleOutputsFactory, TIndexSizeErrorFactory, TNativeAudioNode } from '../types';\n\nconst getOutputAudioNodeAtIndex = (\n    createIndexSizeError: TIndexSizeErrorFactory,\n    outputAudioNodes: TNativeAudioNode[],\n    output: number\n): TNativeAudioNode => {\n    const outputAudioNode = outputAudioNodes[output];\n\n    if (outputAudioNode === undefined) {\n        throw createIndexSizeError();\n    }\n\n    return outputAudioNode;\n};\n\nexport const createDisconnectMultipleOutputs: TDisconnectMultipleOutputsFactory = (createIndexSizeError) => {\n    return (outputAudioNodes, destinationOrOutput = undefined, output = undefined, input = 0) => {\n        if (destinationOrOutput === undefined) {\n            return outputAudioNodes.forEach((outputAudioNode) => outputAudioNode.disconnect());\n        }\n\n        if (typeof destinationOrOutput === 'number') {\n            return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, destinationOrOutput).disconnect();\n        }\n\n        if (isNativeAudioNode(destinationOrOutput)) {\n            if (output === undefined) {\n                return outputAudioNodes.forEach((outputAudioNode) => outputAudioNode.disconnect(destinationOrOutput));\n            }\n\n            if (input === undefined) {\n                return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output).disconnect(destinationOrOutput, 0);\n            }\n\n            return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output).disconnect(destinationOrOutput, 0, input);\n        }\n\n        if (output === undefined) {\n            return outputAudioNodes.forEach((outputAudioNode) => outputAudioNode.disconnect(destinationOrOutput));\n        }\n\n        return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output).disconnect(destinationOrOutput, 0);\n    };\n};\n", "import { IAudioParam, IDynamicsCompressorNode, IDynamicsCompressorOptions } from '../interfaces';\nimport {\n    TAudioNodeRenderer,\n    TChannelCountMode,\n    TContext,\n    TDynamicsCompressorNodeConstructorFactory,\n    TNativeAudioParam,\n    TNativeDynamicsCompressorNode\n} from '../types';\n\nconst DEFAULT_OPTIONS = {\n    attack: 0.003,\n    channelCount: 2,\n    channelCountMode: 'clamped-max',\n    channelInterpretation: 'speakers',\n    knee: 30,\n    ratio: 12,\n    release: 0.25,\n    threshold: -24\n} as const;\n\nexport const createDynamicsCompressorNodeConstructor: TDynamicsCompressorNodeConstructorFactory = (\n    audioNodeConstructor,\n    createAudioParam,\n    createDynamicsCompressorNodeRenderer,\n    createNativeDynamicsCompressorNode,\n    createNotSupportedError,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    setAudioNodeTailTime\n) => {\n    return class DynamicsCompressorNode<T extends TContext> extends audioNodeConstructor<T> implements IDynamicsCompressorNode<T> {\n        private _attack: IAudioParam;\n\n        private _knee: IAudioParam;\n\n        private _nativeDynamicsCompressorNode: TNativeDynamicsCompressorNode;\n\n        private _ratio: IAudioParam;\n\n        private _release: IAudioParam;\n\n        private _threshold: IAudioParam;\n\n        constructor(context: T, options?: Partial<IDynamicsCompressorOptions>) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const dynamicsCompressorNodeRenderer = <TAudioNodeRenderer<T, this>>(isOffline ? createDynamicsCompressorNodeRenderer() : null);\n\n            super(context, false, nativeDynamicsCompressorNode, dynamicsCompressorNodeRenderer);\n\n            this._attack = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.attack);\n            this._knee = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.knee);\n            this._nativeDynamicsCompressorNode = nativeDynamicsCompressorNode;\n            this._ratio = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.ratio);\n            this._release = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.release);\n            this._threshold = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.threshold);\n\n            setAudioNodeTailTime(this, 0.006);\n        }\n\n        get attack(): IAudioParam {\n            return this._attack;\n        }\n\n        // Bug #108: Safari allows a channelCount of three and above which is why the getter and setter needs to be overwritten here.\n        get channelCount(): number {\n            return this._nativeDynamicsCompressorNode.channelCount;\n        }\n\n        set channelCount(value) {\n            const previousChannelCount = this._nativeDynamicsCompressorNode.channelCount;\n\n            this._nativeDynamicsCompressorNode.channelCount = value;\n\n            if (value > 2) {\n                this._nativeDynamicsCompressorNode.channelCount = previousChannelCount;\n\n                throw createNotSupportedError();\n            }\n        }\n\n        /*\n         * Bug #109: Only Chrome and Firefox disallow a channelCountMode of 'max' yet which is why the getter and setter needs to be\n         * overwritten here.\n         */\n        get channelCountMode(): TChannelCountMode {\n            return this._nativeDynamicsCompressorNode.channelCountMode;\n        }\n\n        set channelCountMode(value) {\n            const previousChannelCount = this._nativeDynamicsCompressorNode.channelCountMode;\n\n            this._nativeDynamicsCompressorNode.channelCountMode = value;\n\n            if (value === 'max') {\n                this._nativeDynamicsCompressorNode.channelCountMode = previousChannelCount;\n\n                throw createNotSupportedError();\n            }\n        }\n\n        get knee(): IAudioParam {\n            return this._knee;\n        }\n\n        get ratio(): IAudioParam {\n            return this._ratio;\n        }\n\n        get reduction(): number {\n            // Bug #111: Safari returns an AudioParam instead of a number.\n            if (typeof (<TNativeAudioParam>(<any>this._nativeDynamicsCompressorNode.reduction)).value === 'number') {\n                return (<TNativeAudioParam>(<any>this._nativeDynamicsCompressorNode.reduction)).value;\n            }\n\n            return this._nativeDynamicsCompressorNode.reduction;\n        }\n\n        get release(): IAudioParam {\n            return this._release;\n        }\n\n        get threshold(): IAudioParam {\n            return this._threshold;\n        }\n    };\n};\n", "import { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { IDynamicsCompressorNode, IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport { TDynamicsCompressorNodeRendererFactoryFactory, TNativeDynamicsCompressorNode, TNativeOfflineAudioContext } from '../types';\n\nexport const createDynamicsCompressorNodeRendererFactory: TDynamicsCompressorNodeRendererFactoryFactory = (\n    connectAudioParam,\n    createNativeDynamicsCompressorNode,\n    getNativeAudioNode,\n    renderAutomation,\n    renderInputsOfAudioNode\n) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>() => {\n        const renderedNativeDynamicsCompressorNodes = new WeakMap<TNativeOfflineAudioContext, TNativeDynamicsCompressorNode>();\n\n        const createDynamicsCompressorNode = async (\n            proxy: IDynamicsCompressorNode<T>,\n            nativeOfflineAudioContext: TNativeOfflineAudioContext\n        ) => {\n            let nativeDynamicsCompressorNode = getNativeAudioNode<T, TNativeDynamicsCompressorNode>(proxy);\n\n            /*\n             * If the initially used nativeDynamicsCompressorNode was not constructed on the same OfflineAudioContext it needs to be\n             * created again.\n             */\n            const nativeDynamicsCompressorNodeIsOwnedByContext = isOwnedByContext(nativeDynamicsCompressorNode, nativeOfflineAudioContext);\n\n            if (!nativeDynamicsCompressorNodeIsOwnedByContext) {\n                const options = {\n                    attack: nativeDynamicsCompressorNode.attack.value,\n                    channelCount: nativeDynamicsCompressorNode.channelCount,\n                    channelCountMode: nativeDynamicsCompressorNode.channelCountMode,\n                    channelInterpretation: nativeDynamicsCompressorNode.channelInterpretation,\n                    knee: nativeDynamicsCompressorNode.knee.value,\n                    ratio: nativeDynamicsCompressorNode.ratio.value,\n                    release: nativeDynamicsCompressorNode.release.value,\n                    threshold: nativeDynamicsCompressorNode.threshold.value\n                };\n\n                nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeOfflineAudioContext, options);\n            }\n\n            renderedNativeDynamicsCompressorNodes.set(nativeOfflineAudioContext, nativeDynamicsCompressorNode);\n\n            if (!nativeDynamicsCompressorNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack);\n                await renderAutomation(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee);\n                await renderAutomation(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio);\n                await renderAutomation(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release);\n                await renderAutomation(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold);\n            } else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold);\n            }\n\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDynamicsCompressorNode);\n\n            return nativeDynamicsCompressorNode;\n        };\n\n        return {\n            render(\n                proxy: IDynamicsCompressorNode<T>,\n                nativeOfflineAudioContext: TNativeOfflineAudioContext\n            ): Promise<TNativeDynamicsCompressorNode> {\n                const renderedNativeDynamicsCompressorNode = renderedNativeDynamicsCompressorNodes.get(nativeOfflineAudioContext);\n\n                if (renderedNativeDynamicsCompressorNode !== undefined) {\n                    return Promise.resolve(renderedNativeDynamicsCompressorNode);\n                }\n\n                return createDynamicsCompressorNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n", "import { TEncodingErrorFactory } from '../types';\n\nexport const createEncodingError: TEncodingErrorFactory = () => new DOMException('', 'EncodingError');\n", "import { TEvaluateSourceFactory } from '../types';\n\nexport const createEvaluateSource: TEvaluateSourceFactory = (window) => {\n    return (source) =>\n        new Promise((resolve, reject) => {\n            if (window === null) {\n                // Bug #182 Chrome and Edge do throw an instance of a SyntaxError instead of a DOMException.\n                reject(new SyntaxError());\n\n                return;\n            }\n\n            const head = window.document.head;\n\n            if (head === null) {\n                // Bug #182 Chrome and Edge do throw an instance of a SyntaxError instead of a DOMException.\n                reject(new SyntaxError());\n            } else {\n                const script = window.document.createElement('script');\n                // @todo Safari doesn't like URLs with a type of 'application/javascript; charset=utf-8'.\n                const blob = new Blob([source], { type: 'application/javascript' });\n                const url = URL.createObjectURL(blob);\n\n                const originalOnErrorHandler = window.onerror;\n\n                const removeErrorEventListenerAndRevokeUrl = () => {\n                    window.onerror = originalOnErrorHandler;\n\n                    URL.revokeObjectURL(url);\n                };\n\n                window.onerror = (message, src, lineno, colno, error) => {\n                    // @todo Edge thinks the source is the one of the html document.\n                    if (src === url || (src === window.location.href && lineno === 1 && colno === 1)) {\n                        removeErrorEventListenerAndRevokeUrl();\n                        reject(error);\n\n                        return false;\n                    }\n\n                    if (originalOnErrorHandler !== null) {\n                        return originalOnErrorHandler(message, src, lineno, colno, error);\n                    }\n                };\n\n                script.onerror = () => {\n                    removeErrorEventListenerAndRevokeUrl();\n                    // Bug #182 Chrome and Edge do throw an instance of a SyntaxError instead of a DOMException.\n                    reject(new SyntaxError());\n                };\n                script.onload = () => {\n                    removeErrorEventListenerAndRevokeUrl();\n                    resolve();\n                };\n                script.src = url;\n                script.type = 'module';\n\n                head.appendChild(script);\n            }\n        });\n};\n", "import { IEventTarget } from '../interfaces';\nimport { TEventHandler, TEventTargetConstructorFactory, TNativeEventTarget } from '../types';\n\nexport const createEventTargetConstructor: TEventTargetConstructorFactory = (wrapEventListener) => {\n    return class EventTarget<EventMap extends Record<string, Event>> implements IEventTarget<EventMap> {\n        private _listeners: WeakMap<EventListenerOrEventListenerObject, EventListenerOrEventListenerObject>;\n\n        constructor(private _nativeEventTarget: TNativeEventTarget) {\n            this._listeners = new WeakMap();\n        }\n\n        public addEventListener(\n            type: string,\n            listener: null | TEventHandler<this> | EventListenerOrEventListenerObject,\n            options?: boolean | AddEventListenerOptions\n        ): void {\n            if (listener !== null) {\n                let wrappedEventListener = this._listeners.get(listener);\n\n                if (wrappedEventListener === undefined) {\n                    wrappedEventListener = wrapEventListener(this, listener);\n\n                    if (typeof listener === 'function') {\n                        this._listeners.set(listener, wrappedEventListener);\n                    }\n                }\n\n                this._nativeEventTarget.addEventListener(type, wrappedEventListener, options);\n            }\n        }\n\n        public dispatchEvent(event: Event): boolean {\n            return this._nativeEventTarget.dispatchEvent(event);\n        }\n\n        public removeEventListener(\n            type: string,\n            listener: null | TEventHandler<this> | EventListenerOrEventListenerObject,\n            options?: boolean | EventListenerOptions\n        ): void {\n            const wrappedEventListener = listener === null ? undefined : this._listeners.get(listener);\n\n            this._nativeEventTarget.removeEventListener(type, wrappedEventListener === undefined ? null : wrappedEventListener, options);\n        }\n    };\n};\n", "import { TExposeCurrentFrameAndCurrentTimeFactory } from '../types';\n\nexport const createExposeCurrentFrameAndCurrentTime: TExposeCurrentFrameAndCurrentTimeFactory = (window) => {\n    return (currentTime, sampleRate, fn) => {\n        Object.defineProperties(window, {\n            currentFrame: {\n                configurable: true,\n                get(): number {\n                    return Math.round(currentTime * sampleRate);\n                }\n            },\n            currentTime: {\n                configurable: true,\n                get(): number {\n                    return currentTime;\n                }\n            }\n        });\n\n        try {\n            return fn();\n        } finally {\n            if (window !== null) {\n                delete (<any>window).currentFrame;\n                delete (<any>window).currentTime;\n            }\n        }\n    };\n};\n", "import { TFetchSourceFactory } from '../types';\n\nexport const createFetchSource: TFetchSourceFactory = (createAbortError) => {\n    return async (url) => {\n        try {\n            const response = await fetch(url);\n\n            if (response.ok) {\n                return [await response.text(), response.url];\n            }\n        } catch {\n            // Ignore errors.\n        } // tslint:disable-line:no-empty\n\n        throw createAbortError();\n    };\n};\n", "import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { IAudioParam, IGainNode, IGainOptions } from '../interfaces';\nimport { TAudioNodeRenderer, TContext, TGainNodeConstructorFactory } from '../types';\n\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    gain: 1\n} as const;\n\nexport const createGainNodeConstructor: TGainNodeConstructorFactory = (\n    audioNodeConstructor,\n    createAudioParam,\n    createGainNodeRenderer,\n    createNativeGainNode,\n    getNativeContext,\n    isNativeOfflineAudioContext\n) => {\n    return class GainNode<T extends TContext> extends audioNodeConstructor<T> implements IGainNode<T> {\n        private _gain: IAudioParam;\n\n        constructor(context: T, options?: Partial<IGainOptions>) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeGainNode = createNativeGainNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const gainNodeRenderer = <TAudioNodeRenderer<T, this>>(isOffline ? createGainNodeRenderer() : null);\n\n            super(context, false, nativeGainNode, gainNodeRenderer);\n\n            // Bug #74: Safari does not export the correct values for maxValue and minValue.\n            this._gain = createAudioParam(this, isOffline, nativeGainNode.gain, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n        }\n\n        get gain(): IAudioParam {\n            return this._gain;\n        }\n    };\n};\n", "import { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { IGainNode, IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport { TGainNodeRendererFactoryFactory, TNativeGainNode, TNativeOfflineAudioContext } from '../types';\n\nexport const createGainNodeRendererFactory: TGainNodeRendererFactoryFactory = (\n    connectAudioParam,\n    createNativeGainNode,\n    getNativeAudioNode,\n    renderAutomation,\n    renderInputsOfAudioNode\n) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>() => {\n        const renderedNativeGainNodes = new WeakMap<TNativeOfflineAudioContext, TNativeGainNode>();\n\n        const createGainNode = async (proxy: IGainNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext) => {\n            let nativeGainNode = getNativeAudioNode<T, TNativeGainNode>(proxy);\n\n            // If the initially used nativeGainNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeGainNodeIsOwnedByContext = isOwnedByContext(nativeGainNode, nativeOfflineAudioContext);\n\n            if (!nativeGainNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeGainNode.channelCount,\n                    channelCountMode: nativeGainNode.channelCountMode,\n                    channelInterpretation: nativeGainNode.channelInterpretation,\n                    gain: nativeGainNode.gain.value\n                };\n\n                nativeGainNode = createNativeGainNode(nativeOfflineAudioContext, options);\n            }\n\n            renderedNativeGainNodes.set(nativeOfflineAudioContext, nativeGainNode);\n\n            if (!nativeGainNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain);\n            } else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain);\n            }\n\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeGainNode);\n\n            return nativeGainNode;\n        };\n\n        return {\n            render(proxy: IGainNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext): Promise<TNativeGainNode> {\n                const renderedNativeGainNode = renderedNativeGainNodes.get(nativeOfflineAudioContext);\n\n                if (renderedNativeGainNode !== undefined) {\n                    return Promise.resolve(renderedNativeGainNode);\n                }\n\n                return createGainNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n", "import { TActiveInputConnection, TContext, TGetActiveAudioWorkletNodeInputsFactory, TNativeAudioWorkletNode } from '../types';\n\nexport const createGetActiveAudioWorkletNodeInputs: TGetActiveAudioWorkletNodeInputsFactory = (\n    activeAudioWorkletNodeInputsStore,\n    getValueForKey\n) => {\n    return <T extends TContext>(nativeAudioWorkletNode: TNativeAudioWorkletNode) =>\n        <Set<TActiveInputConnection<T>>[]>getValueForKey(activeAudioWorkletNodeInputsStore, nativeAudioWorkletNode);\n};\n", "import { IAudioNode, IAudioNodeRenderer, IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport { TGetAudioNodeRendererFactory } from '../types';\n\nexport const createGetAudioNodeRenderer: TGetAudioNodeRendererFactory = (getAudioNodeConnections) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>(\n        audioNode: IAudioNode<T>\n    ): IAudioNodeRenderer<T, IAudioNode<T>> => {\n        const audioNodeConnections = getAudioNodeConnections(audioNode);\n\n        if (audioNodeConnections.renderer === null) {\n            throw new Error('Missing the renderer of the given AudioNode in the audio graph.');\n        }\n\n        return <IAudioNodeRenderer<T, IAudioNode<T>>>audioNodeConnections.renderer;\n    };\n};\n", "import { TGetAudioNodeTailTimeFactory } from '../types';\n\nexport const createGetAudioNodeTailTime: TGetAudioNodeTailTimeFactory = (audioNodeTailTimeStore) => {\n    return (audioNode) => audioNodeTailTimeStore.get(audioNode) ?? 0;\n};\n", "import { IMinimalOfflineAudioContext } from '../interfaces';\nimport { TGetAudioParamRendererFactory } from '../types';\n\nexport const createGetAudioParamRenderer: TGetAudioParamRendererFactory = (getAudioParamConnections) => {\n    return (audioParam) => {\n        const audioParamConnections = getAudioParamConnections<IMinimalOfflineAudioContext>(audioParam);\n\n        if (audioParamConnections.renderer === null) {\n            throw new Error('Missing the renderer of the given AudioParam in the audio graph.');\n        }\n\n        return audioParamConnections.renderer;\n    };\n};\n", "import { TGetBackupOfflineAudioContextFactory } from '../types';\n\nexport const createGetBackupOfflineAudioContext: TGetBackupOfflineAudioContextFactory = (backupOfflineAudioContextStore) => {\n    return (nativeContext) => {\n        return backupOfflineAudioContextStore.get(nativeContext);\n    };\n};\n", "import { TInvalidStateErrorFactory } from '../types';\n\nexport const createInvalidStateError: TInvalidStateErrorFactory = () => new DOMException('', 'InvalidStateError');\n", "import { IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport { TContext, TGetNativeContextFactory, TNativeAudioContext, TNativeOfflineAudioContext } from '../types';\nimport { createInvalidStateError } from './invalid-state-error';\n\nexport const createGetNativeContext: TGetNativeContextFactory = (contextStore) => {\n    return <T extends TContext>(\n        context: T\n    ): T extends IMinimalOfflineAudioContext | IOfflineAudioContext ? TNativeOfflineAudioContext : TNativeAudioContext => {\n        const nativeContext = contextStore.get(context);\n\n        if (nativeContext === undefined) {\n            throw createInvalidStateError();\n        }\n\n        return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext ? TNativeOfflineAudioContext : TNativeAudioContext>(\n            nativeContext\n        );\n    };\n};\n", "import { TGetOrCreateBackupOfflineAudioContextFactory } from '../types';\n\nexport const createGetOrCreateBackupOfflineAudioContext: TGetOrCreateBackupOfflineAudioContextFactory = (\n    backupOfflineAudioContextStore,\n    nativeOfflineAudioContextConstructor\n) => {\n    return (nativeContext) => {\n        let backupOfflineAudioContext = backupOfflineAudioContextStore.get(nativeContext);\n\n        if (backupOfflineAudioContext !== undefined) {\n            return backupOfflineAudioContext;\n        }\n\n        if (nativeOfflineAudioContextConstructor === null) {\n            throw new Error('Missing the native OfflineAudioContext constructor.');\n        }\n\n        // Bug #141: Safari does not support creating an OfflineAudioContext with less than 44100 Hz.\n        backupOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n\n        backupOfflineAudioContextStore.set(nativeContext, backupOfflineAudioContext);\n\n        return backupOfflineAudioContext;\n    };\n};\n", "import { TGetUnrenderedAudioWorkletNodesFactory } from '../types';\n\nexport const createGetUnrenderedAudioWorkletNodes: TGetUnrenderedAudioWorkletNodesFactory = (unrenderedAudioWorkletNodeStore) => {\n    return (nativeContext) => {\n        const unrenderedAudioWorkletNodes = unrenderedAudioWorkletNodeStore.get(nativeContext);\n\n        if (unrenderedAudioWorkletNodes === undefined) {\n            throw new Error('The context has no set of AudioWorkletNodes.');\n        }\n\n        return unrenderedAudioWorkletNodes;\n    };\n};\n", "import { TInvalidAccessErrorFactory } from '../types';\n\nexport const createInvalidAccessError: TInvalidAccessErrorFactory = () => new DOMException('', 'InvalidAccessError');\n", "import { createInvalidAccessError } from '../factories/invalid-access-error';\nimport { TNativeIIRFilterNode } from '../types';\n\nexport const wrapIIRFilterNodeGetFrequencyResponseMethod = (nativeIIRFilterNode: TNativeIIRFilterNode): void => {\n    nativeIIRFilterNode.getFrequencyResponse = ((getFrequencyResponse) => {\n        return (frequencyHz: Float32Array, magResponse: Float32Array, phaseResponse: Float32Array) => {\n            if (frequencyHz.length !== magResponse.length || magResponse.length !== phaseResponse.length) {\n                throw createInvalidAccessError();\n            }\n\n            return getFrequencyResponse.call(nativeIIRFilterNode, frequencyHz, magResponse, phaseResponse);\n        };\n    })(nativeIIRFilterNode.getFrequencyResponse);\n};\n", "import { wrapIIRFilterNodeGetFrequencyResponseMethod } from '../helpers/wrap-iir-filter-node-get-frequency-response-method';\nimport { IIIRFilterNode, IIIRFilterOptions, IMinimalAudioContext } from '../interfaces';\nimport { TAudioNodeRenderer, TContext, TIIRFilterNodeConstructorFactory, TNativeIIRFilterNode } from '../types';\n\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers'\n} as const;\n\nexport const createIIRFilterNodeConstructor: TIIRFilterNodeConstructorFactory = (\n    audioNodeConstructor,\n    createNativeIIRFilterNode,\n    createIIRFilterNodeRenderer,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    setAudioNodeTailTime\n) => {\n    return class IIRFilterNode<T extends TContext> extends audioNodeConstructor<T> implements IIIRFilterNode<T> {\n        private _nativeIIRFilterNode: TNativeIIRFilterNode;\n\n        constructor(\n            context: T,\n            options: { feedback: IIIRFilterOptions['feedback']; feedforward: IIIRFilterOptions['feedforward'] } & Partial<IIIRFilterOptions>\n        ) {\n            const nativeContext = getNativeContext(context);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeIIRFilterNode = createNativeIIRFilterNode(\n                nativeContext,\n                isOffline ? null : (<IMinimalAudioContext>(<any>context)).baseLatency,\n                mergedOptions\n            );\n            const iirFilterNodeRenderer = <TAudioNodeRenderer<T, this>>(\n                (isOffline ? createIIRFilterNodeRenderer(mergedOptions.feedback, mergedOptions.feedforward) : null)\n            );\n\n            super(context, false, nativeIIRFilterNode, iirFilterNodeRenderer);\n\n            // Bug #23 & #24: FirefoxDeveloper does not throw an InvalidAccessError.\n            // @todo Write a test which allows other browsers to remain unpatched.\n            wrapIIRFilterNodeGetFrequencyResponseMethod(nativeIIRFilterNode);\n\n            this._nativeIIRFilterNode = nativeIIRFilterNode;\n\n            // @todo Determine a meaningful tail-time instead of just using one second.\n            setAudioNodeTailTime(this, 1);\n        }\n\n        public getFrequencyResponse(frequencyHz: Float32Array, magResponse: Float32Array, phaseResponse: Float32Array): void {\n            return this._nativeIIRFilterNode.getFrequencyResponse(frequencyHz, magResponse, phaseResponse);\n        }\n    };\n};\n", "// This implementation as shamelessly inspired by source code of\n// tslint:disable-next-line:max-line-length\n// {@link https://chromium.googlesource.com/chromium/src.git/+/master/third_party/WebKit/Source/platform/audio/IIRFilter.cpp|Chromium's IIRFilter}.\nexport const filterBuffer = (\n    feedback: Float64Array,\n    feedbackLength: number,\n    feedforward: Float64Array,\n    feedforwardLength: number,\n    minLength: number,\n    xBuffer: Float32Array,\n    yBuffer: Float32Array,\n    bufferIndex: number,\n    bufferLength: number,\n    input: Float32Array,\n    output: Float32Array\n) => {\n    const inputLength = input.length;\n\n    let i = bufferIndex;\n\n    for (let j = 0; j < inputLength; j += 1) {\n        let y = feedforward[0] * input[j];\n\n        for (let k = 1; k < minLength; k += 1) {\n            const x = (i - k) & (bufferLength - 1); // tslint:disable-line:no-bitwise\n\n            y += feedforward[k] * xBuffer[x];\n            y -= feedback[k] * yBuffer[x];\n        }\n\n        for (let k = minLength; k < feedforwardLength; k += 1) {\n            y += feedforward[k] * xBuffer[(i - k) & (bufferLength - 1)]; // tslint:disable-line:no-bitwise\n        }\n\n        for (let k = minLength; k < feedbackLength; k += 1) {\n            y -= feedback[k] * yBuffer[(i - k) & (bufferLength - 1)]; // tslint:disable-line:no-bitwise\n        }\n\n        xBuffer[i] = input[j];\n        yBuffer[i] = y;\n\n        i = (i + 1) & (bufferLength - 1); // tslint:disable-line:no-bitwise\n\n        output[j] = y;\n    }\n\n    return i;\n};\n", "import { filterBuffer } from '../helpers/filter-buffer';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { IIIRFilterNode, IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport {\n    TIIRFilterNodeRendererFactoryFactory,\n    TNativeAudioBuffer,\n    TNativeAudioBufferSourceNode,\n    TNativeIIRFilterNode,\n    TNativeOfflineAudioContext\n} from '../types';\n\nconst filterFullBuffer = (\n    renderedBuffer: TNativeAudioBuffer,\n    nativeOfflineAudioContext: TNativeOfflineAudioContext,\n    feedback: Iterable<number>,\n    feedforward: Iterable<number>\n) => {\n    const convertedFeedback = feedback instanceof Float64Array ? feedback : new Float64Array(feedback);\n    const convertedFeedforward = feedforward instanceof Float64Array ? feedforward : new Float64Array(feedforward);\n    const feedbackLength = convertedFeedback.length;\n    const feedforwardLength = convertedFeedforward.length;\n    const minLength = Math.min(feedbackLength, feedforwardLength);\n\n    if (convertedFeedback[0] !== 1) {\n        for (let i = 0; i < feedbackLength; i += 1) {\n            convertedFeedforward[i] /= convertedFeedback[0];\n        }\n\n        for (let i = 1; i < feedforwardLength; i += 1) {\n            convertedFeedback[i] /= convertedFeedback[0];\n        }\n    }\n\n    const bufferLength = 32;\n    const xBuffer = new Float32Array(bufferLength);\n    const yBuffer = new Float32Array(bufferLength);\n\n    const filteredBuffer = nativeOfflineAudioContext.createBuffer(\n        renderedBuffer.numberOfChannels,\n        renderedBuffer.length,\n        renderedBuffer.sampleRate\n    );\n\n    const numberOfChannels = renderedBuffer.numberOfChannels;\n\n    for (let i = 0; i < numberOfChannels; i += 1) {\n        const input = renderedBuffer.getChannelData(i);\n        const output = filteredBuffer.getChannelData(i);\n\n        xBuffer.fill(0);\n        yBuffer.fill(0);\n\n        filterBuffer(\n            convertedFeedback,\n            feedbackLength,\n            convertedFeedforward,\n            feedforwardLength,\n            minLength,\n            xBuffer,\n            yBuffer,\n            0,\n            bufferLength,\n            input,\n            output\n        );\n    }\n\n    return filteredBuffer;\n};\n\nexport const createIIRFilterNodeRendererFactory: TIIRFilterNodeRendererFactoryFactory = (\n    createNativeAudioBufferSourceNode,\n    getNativeAudioNode,\n    nativeOfflineAudioContextConstructor,\n    renderInputsOfAudioNode,\n    renderNativeOfflineAudioContext\n) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>(feedback: Iterable<number>, feedforward: Iterable<number>) => {\n        const renderedNativeAudioNodes = new WeakMap<TNativeOfflineAudioContext, TNativeAudioBufferSourceNode | TNativeIIRFilterNode>();\n\n        let filteredBufferPromise: null | Promise<null | TNativeAudioBuffer> = null;\n\n        const createAudioNode = async (proxy: IIIRFilterNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext) => {\n            let nativeAudioBufferSourceNode: null | TNativeAudioBufferSourceNode = null;\n            let nativeIIRFilterNode = getNativeAudioNode<T, TNativeIIRFilterNode>(proxy);\n\n            // If the initially used nativeIIRFilterNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeIIRFilterNodeIsOwnedByContext = isOwnedByContext(nativeIIRFilterNode, nativeOfflineAudioContext);\n\n            // Bug #9: Safari does not support IIRFilterNodes.\n            if (nativeOfflineAudioContext.createIIRFilter === undefined) {\n                nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext, {\n                    buffer: null,\n                    channelCount: 2,\n                    channelCountMode: 'max',\n                    channelInterpretation: 'speakers',\n                    loop: false,\n                    loopEnd: 0,\n                    loopStart: 0,\n                    playbackRate: 1\n                });\n            } else if (!nativeIIRFilterNodeIsOwnedByContext) {\n                // @todo TypeScript defines the parameters of createIIRFilter() as arrays of numbers.\n                nativeIIRFilterNode = nativeOfflineAudioContext.createIIRFilter(<number[]>feedforward, <number[]>feedback);\n            }\n\n            renderedNativeAudioNodes.set(\n                nativeOfflineAudioContext,\n                nativeAudioBufferSourceNode === null ? nativeIIRFilterNode : nativeAudioBufferSourceNode\n            );\n\n            if (nativeAudioBufferSourceNode !== null) {\n                if (filteredBufferPromise === null) {\n                    if (nativeOfflineAudioContextConstructor === null) {\n                        throw new Error('Missing the native OfflineAudioContext constructor.');\n                    }\n\n                    const partialOfflineAudioContext = new nativeOfflineAudioContextConstructor(\n                        // Bug #47: The AudioDestinationNode in Safari gets not initialized correctly.\n                        proxy.context.destination.channelCount,\n                        // Bug #17: Safari does not yet expose the length.\n                        proxy.context.length,\n                        nativeOfflineAudioContext.sampleRate\n                    );\n\n                    filteredBufferPromise = (async () => {\n                        await renderInputsOfAudioNode(proxy, partialOfflineAudioContext, partialOfflineAudioContext.destination);\n\n                        const renderedBuffer = await renderNativeOfflineAudioContext(partialOfflineAudioContext);\n\n                        return filterFullBuffer(renderedBuffer, nativeOfflineAudioContext, feedback, feedforward);\n                    })();\n                }\n\n                const filteredBuffer = await filteredBufferPromise;\n\n                nativeAudioBufferSourceNode.buffer = filteredBuffer;\n                nativeAudioBufferSourceNode.start(0);\n\n                return nativeAudioBufferSourceNode;\n            }\n\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeIIRFilterNode);\n\n            return nativeIIRFilterNode;\n        };\n\n        return {\n            render(\n                proxy: IIIRFilterNode<T>,\n                nativeOfflineAudioContext: TNativeOfflineAudioContext\n            ): Promise<TNativeAudioBufferSourceNode | TNativeIIRFilterNode> {\n                const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n\n                if (renderedNativeAudioNode !== undefined) {\n                    return Promise.resolve(renderedNativeAudioNode);\n                }\n\n                return createAudioNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n", "import { isAudioNodeOutputConnection } from '../guards/audio-node-output-connection';\nimport { TIncrementCycleCounterFactoryFactory } from '../types';\n\nexport const createIncrementCycleCounterFactory: TIncrementCycleCounterFactoryFactory = (\n    cycleCounters,\n    disconnectNativeAudioNodeFromNativeAudioNode,\n    getAudioNodeConnections,\n    getNativeAudioNode,\n    getNativeAudioParam,\n    isActiveAudioNode\n) => {\n    return (isOffline) => {\n        return (audioNode, count) => {\n            const cycleCounter = cycleCounters.get(audioNode);\n\n            if (cycleCounter === undefined) {\n                if (!isOffline && isActiveAudioNode(audioNode)) {\n                    const nativeSourceAudioNode = getNativeAudioNode(audioNode);\n                    const { outputs } = getAudioNodeConnections(audioNode);\n\n                    for (const output of outputs) {\n                        if (isAudioNodeOutputConnection(output)) {\n                            const nativeDestinationAudioNode = getNativeAudioNode(output[0]);\n\n                            disconnectNativeAudioNodeFromNativeAudioNode(\n                                nativeSourceAudioNode,\n                                nativeDestinationAudioNode,\n                                output[1],\n                                output[2]\n                            );\n                        } else {\n                            const nativeDestinationAudioParam = getNativeAudioParam(output[0]);\n\n                            nativeSourceAudioNode.disconnect(nativeDestinationAudioParam, output[1]);\n                        }\n                    }\n                }\n\n                cycleCounters.set(audioNode, count);\n            } else {\n                cycleCounters.set(audioNode, cycleCounter + count);\n            }\n        };\n    };\n};\n", "import { IAudioContext, IMinimalAudioContext } from '../interfaces';\nimport { TIsAnyAudioContextFactory, TNativeAudioContext } from '../types';\n\nexport const createIsAnyAudioContext: TIsAnyAudioContextFactory = (contextStore, isNativeAudioContext) => {\n    return (anything): anything is IAudioContext | IMinimalAudioContext | TNativeAudioContext => {\n        const nativeContext = contextStore.get(<any>anything);\n\n        return isNativeAudioContext(nativeContext) || isNativeAudioContext(anything);\n    };\n};\n", "import { IAudioNode } from '../interfaces';\nimport { TIsAnyAudioNodeFactory, TNativeAudioNode } from '../types';\n\nexport const createIsAnyAudioNode: TIsAnyAudioNodeFactory = (audioNodeStore, isNativeAudioNode) => {\n    return (anything): anything is IAudioNode<any> | TNativeAudioNode => audioNodeStore.has(<any>anything) || isNativeAudioNode(anything);\n};\n", "import { IAudioParam } from '../interfaces';\nimport { TIsAnyAudioParamFactory, TNativeAudioParam } from '../types';\n\nexport const createIsAnyAudioParam: TIsAnyAudioParamFactory = (audioParamStore, isNativeAudioParam) => {\n    return (anything): anything is IAudioParam | TNativeAudioParam => audioParamStore.has(<any>anything) || isNativeAudioParam(anything);\n};\n", "import { IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport { TIsAnyOfflineAudioContextFactory, TNativeOfflineAudioContext } from '../types';\n\nexport const createIsAnyOfflineAudioContext: TIsAnyOfflineAudioContextFactory = (contextStore, isNativeOfflineAudioContext) => {\n    return (anything): anything is IMinimalOfflineAudioContext | IOfflineAudioContext | TNativeOfflineAudioContext => {\n        const nativeContext = contextStore.get(<any>anything);\n\n        return isNativeOfflineAudioContext(nativeContext) || isNativeOfflineAudioContext(anything);\n    };\n};\n", "import { TIsNativeAudioContextFactory, TNativeAudioContext } from '../types';\n\nexport const createIsNativeAudioContext: TIsNativeAudioContextFactory = (nativeAudioContextConstructor) => {\n    return (anything): anything is TNativeAudioContext => {\n        return nativeAudioContextConstructor !== null && anything instanceof nativeAudioContextConstructor;\n    };\n};\n", "import { TIsNativeAudioNodeFactory, TNativeAudioNode } from '../types';\n\nexport const createIsNativeAudioNode: TIsNativeAudioNodeFactory = (window) => {\n    return (anything): anything is TNativeAudioNode => {\n        return window !== null && typeof window.AudioNode === 'function' && anything instanceof window.AudioNode;\n    };\n};\n", "import { TIsNativeAudioParamFactory, TNativeAudioParam } from '../types';\n\nexport const createIsNativeAudioParam: TIsNativeAudioParamFactory = (window) => {\n    return (anything): anything is TNativeAudioParam => {\n        return window !== null && typeof window.AudioParam === 'function' && anything instanceof window.AudioParam;\n    };\n};\n", "import { TIsNativeContextFactory, TNativeAudioContext } from '../types';\n\nexport const createIsNativeContext: TIsNativeContextFactory = (isNativeAudioContext, isNativeOfflineAudioContext) => {\n    return (anything): anything is TNativeAudioContext => {\n        return isNativeAudioContext(anything) || isNativeOfflineAudioContext(anything);\n    };\n};\n", "import { TIsNativeOfflineAudioContextFactory, TNativeOfflineAudioContext } from '../types';\n\nexport const createIsNativeOfflineAudioContext: TIsNativeOfflineAudioContextFactory = (nativeOfflineAudioContextConstructor) => {\n    return (anything): anything is TNativeOfflineAudioContext => {\n        return nativeOfflineAudioContextConstructor !== null && anything instanceof nativeOfflineAudioContextConstructor;\n    };\n};\n", "import { TIsSecureContextFactory } from '../types';\n\nexport const createIsSecureContext: TIsSecureContextFactory = (window) => window !== null && window.isSecureContext;\n", "import { TIsSupportedPromiseFactory } from '../types';\n\nexport const createIsSupportedPromise: TIsSupportedPromiseFactory = async (\n    cacheTestResult,\n    testAudioBufferCopyChannelMethodsSubarraySupport,\n    testAudioContextCloseMethodSupport,\n    testAudioContextDecodeAudioDataMethodTypeErrorSupport,\n    testAudioContextOptionsSupport,\n    testAudioNodeConnectMethodSupport,\n    testAudioWorkletProcessorNoOutputsSupport,\n    testChannelMergerNodeChannelCountSupport,\n    testConstantSourceNodeAccurateSchedulingSupport,\n    testConvolverNodeBufferReassignabilitySupport,\n    testConvolverNodeChannelCountSupport,\n    testDomExceptionContrucorSupport,\n    testIsSecureContextSupport,\n    testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport,\n    testStereoPannerNodeDefaultValueSupport,\n    testTransferablesSupport\n) => {\n    if (\n        cacheTestResult(testAudioBufferCopyChannelMethodsSubarraySupport, testAudioBufferCopyChannelMethodsSubarraySupport) &&\n        cacheTestResult(testAudioContextCloseMethodSupport, testAudioContextCloseMethodSupport) &&\n        cacheTestResult(testAudioContextOptionsSupport, testAudioContextOptionsSupport) &&\n        cacheTestResult(testAudioNodeConnectMethodSupport, testAudioNodeConnectMethodSupport) &&\n        cacheTestResult(testChannelMergerNodeChannelCountSupport, testChannelMergerNodeChannelCountSupport) &&\n        cacheTestResult(testConstantSourceNodeAccurateSchedulingSupport, testConstantSourceNodeAccurateSchedulingSupport) &&\n        cacheTestResult(testConvolverNodeBufferReassignabilitySupport, testConvolverNodeBufferReassignabilitySupport) &&\n        cacheTestResult(testConvolverNodeChannelCountSupport, testConvolverNodeChannelCountSupport) &&\n        cacheTestResult(testDomExceptionContrucorSupport, testDomExceptionContrucorSupport) &&\n        cacheTestResult(testIsSecureContextSupport, testIsSecureContextSupport) &&\n        cacheTestResult(\n            testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport,\n            testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport\n        )\n    ) {\n        const results = await Promise.all([\n            cacheTestResult(testAudioContextDecodeAudioDataMethodTypeErrorSupport, testAudioContextDecodeAudioDataMethodTypeErrorSupport),\n            cacheTestResult(testAudioWorkletProcessorNoOutputsSupport, testAudioWorkletProcessorNoOutputsSupport),\n            cacheTestResult(testStereoPannerNodeDefaultValueSupport, testStereoPannerNodeDefaultValueSupport),\n            cacheTestResult(testTransferablesSupport, testTransferablesSupport)\n        ]);\n\n        return results.every((result) => result);\n    }\n\n    return false;\n};\n", "import { IAudioContext, IMediaElementAudioSourceNode, IMediaElementAudioSourceOptions, IMinimalAudioContext } from '../interfaces';\nimport { TAudioNodeRenderer, TMediaElementAudioSourceNodeConstructorFactory, TNativeMediaElementAudioSourceNode } from '../types';\n\nexport const createMediaElementAudioSourceNodeConstructor: TMediaElementAudioSourceNodeConstructorFactory = (\n    audioNodeConstructor,\n    createNativeMediaElementAudioSourceNode,\n    getNativeContext,\n    isNativeOfflineAudioContext\n) => {\n    return class MediaElementAudioSourceNode<T extends IAudioContext | IMinimalAudioContext> extends audioNodeConstructor<T>\n        implements IMediaElementAudioSourceNode<T> {\n        private _nativeMediaElementAudioSourceNode: TNativeMediaElementAudioSourceNode;\n\n        constructor(context: T, options: IMediaElementAudioSourceOptions) {\n            const nativeContext = getNativeContext(context);\n            const nativeMediaElementAudioSourceNode = createNativeMediaElementAudioSourceNode(nativeContext, options);\n\n            // Bug #171: Safari allows to create a MediaElementAudioSourceNode with an OfflineAudioContext.\n            if (isNativeOfflineAudioContext(nativeContext)) {\n                throw TypeError();\n            }\n\n            super(context, true, nativeMediaElementAudioSourceNode, <TAudioNodeRenderer<T>>null);\n\n            this._nativeMediaElementAudioSourceNode = nativeMediaElementAudioSourceNode;\n        }\n\n        get mediaElement(): HTMLMediaElement {\n            return this._nativeMediaElementAudioSourceNode.mediaElement;\n        }\n    };\n};\n", "import { IAudioContext, IAudioNodeOptions, IMediaStreamAudioDestinationNode, IMinimalAudioContext } from '../interfaces';\nimport { TAudioNodeRenderer, TMediaStreamAudioDestinationNodeConstructorFactory, TNativeMediaStreamAudioDestinationNode } from '../types';\n\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'explicit',\n    channelInterpretation: 'speakers'\n} as const;\n\nexport const createMediaStreamAudioDestinationNodeConstructor: TMediaStreamAudioDestinationNodeConstructorFactory = (\n    audioNodeConstructor,\n    createNativeMediaStreamAudioDestinationNode,\n    getNativeContext,\n    isNativeOfflineAudioContext\n) => {\n    return class MediaStreamAudioDestinationNode<T extends IAudioContext | IMinimalAudioContext> extends audioNodeConstructor<T>\n        implements IMediaStreamAudioDestinationNode<T> {\n        private _nativeMediaStreamAudioDestinationNode: TNativeMediaStreamAudioDestinationNode;\n\n        constructor(context: T, options?: Partial<IAudioNodeOptions>) {\n            const nativeContext = getNativeContext(context);\n\n            // Bug #173: Safari allows to create a MediaStreamAudioDestinationNode with an OfflineAudioContext.\n            if (isNativeOfflineAudioContext(nativeContext)) {\n                throw new TypeError();\n            }\n\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeMediaStreamAudioDestinationNode = createNativeMediaStreamAudioDestinationNode(nativeContext, mergedOptions);\n\n            super(context, false, nativeMediaStreamAudioDestinationNode, <TAudioNodeRenderer<T>>null);\n\n            this._nativeMediaStreamAudioDestinationNode = nativeMediaStreamAudioDestinationNode;\n        }\n\n        get stream(): MediaStream {\n            return this._nativeMediaStreamAudioDestinationNode.stream;\n        }\n    };\n};\n", "import { IAudioContext, IMediaStreamAudioSourceNode, IMediaStreamAudioSourceOptions, IMinimalAudioContext } from '../interfaces';\nimport { TAudioNodeRenderer, TMediaStreamAudioSourceNodeConstructorFactory, TNativeMediaStreamAudioSourceNode } from '../types';\n\nexport const createMediaStreamAudioSourceNodeConstructor: TMediaStreamAudioSourceNodeConstructorFactory = (\n    audioNodeConstructor,\n    createNativeMediaStreamAudioSourceNode,\n    getNativeContext,\n    isNativeOfflineAudioContext\n) => {\n    return class MediaStreamAudioSourceNode<T extends IAudioContext | IMinimalAudioContext> extends audioNodeConstructor<T>\n        implements IMediaStreamAudioSourceNode<T> {\n        private _nativeMediaStreamAudioSourceNode: TNativeMediaStreamAudioSourceNode;\n\n        constructor(context: T, options: IMediaStreamAudioSourceOptions) {\n            const nativeContext = getNativeContext(context);\n            const nativeMediaStreamAudioSourceNode = createNativeMediaStreamAudioSourceNode(nativeContext, options);\n\n            // Bug #172: Safari allows to create a MediaStreamAudioSourceNode with an OfflineAudioContext.\n            if (isNativeOfflineAudioContext(nativeContext)) {\n                throw new TypeError();\n            }\n\n            super(context, true, nativeMediaStreamAudioSourceNode, <TAudioNodeRenderer<T>>null);\n\n            this._nativeMediaStreamAudioSourceNode = nativeMediaStreamAudioSourceNode;\n        }\n\n        get mediaStream(): MediaStream {\n            return this._nativeMediaStreamAudioSourceNode.mediaStream;\n        }\n    };\n};\n", "import { IAudioContext, IMediaStreamTrackAudioSourceNode, IMediaStreamTrackAudioSourceOptions, IMinimalAudioContext } from '../interfaces';\nimport { TAudioNodeRenderer, TMediaStreamTrackAudioSourceNodeConstructorFactory } from '../types';\n\nexport const createMediaStreamTrackAudioSourceNodeConstructor: TMediaStreamTrackAudioSourceNodeConstructorFactory = (\n    audioNodeConstructor,\n    createNativeMediaStreamTrackAudioSourceNode,\n    getNativeContext\n) => {\n    return class MediaStreamTrackAudioSourceNode<T extends IAudioContext | IMinimalAudioContext> extends audioNodeConstructor<T>\n        implements IMediaStreamTrackAudioSourceNode<T> {\n        constructor(context: T, options: IMediaStreamTrackAudioSourceOptions) {\n            const nativeContext = getNativeContext(context);\n            const nativeMediaStreamTrackAudioSourceNode = createNativeMediaStreamTrackAudioSourceNode(nativeContext, options);\n\n            super(context, true, nativeMediaStreamTrackAudioSourceNode, <TAudioNodeRenderer<T>>null);\n        }\n    };\n};\n", "import { deactivateAudioGraph } from '../helpers/deactivate-audio-graph';\nimport { isValidLatencyHint } from '../helpers/is-valid-latency-hint';\nimport { IAudioContextOptions, IMinimalAudioContext } from '../interfaces';\nimport {\n    TAudioContextState,\n    TMinimalAudioContextConstructorFactory,\n    TNativeAudioContext,\n    TNativeGainNode,\n    TNativeOscillatorNode\n} from '../types';\n\nexport const createMinimalAudioContextConstructor: TMinimalAudioContextConstructorFactory = (\n    createInvalidStateError,\n    createNotSupportedError,\n    createUnknownError,\n    minimalBaseAudioContextConstructor,\n    nativeAudioContextConstructor\n) => {\n    return class MinimalAudioContext extends minimalBaseAudioContextConstructor<IMinimalAudioContext> implements IMinimalAudioContext {\n        private _baseLatency: number;\n\n        private _nativeAudioContext: TNativeAudioContext;\n\n        private _nativeGainNode: null | TNativeGainNode;\n\n        private _nativeOscillatorNode: null | TNativeOscillatorNode;\n\n        private _state: null | 'suspended';\n\n        constructor(options: IAudioContextOptions = {}) {\n            if (nativeAudioContextConstructor === null) {\n                throw new Error('Missing the native AudioContext constructor.');\n            }\n\n            let nativeAudioContext: TNativeAudioContext;\n\n            try {\n                nativeAudioContext = new nativeAudioContextConstructor(options);\n            } catch (err) {\n                // Bug #192 Safari does throw a SyntaxError if the sampleRate is not supported.\n                if (err.code === 12 && err.message === 'sampleRate is not in range') {\n                    throw createNotSupportedError();\n                }\n\n                throw err;\n            }\n\n            // Bug #131 Safari returns null when there are four other AudioContexts running already.\n            if (nativeAudioContext === null) {\n                throw createUnknownError();\n            }\n\n            // Bug #51 Only Chrome and Edge throw an error if the given latencyHint is invalid.\n            if (!isValidLatencyHint(options.latencyHint)) {\n                throw new TypeError(\n                    `The provided value '${options.latencyHint}' is not a valid enum value of type AudioContextLatencyCategory.`\n                );\n            }\n\n            // Bug #150 Safari does not support setting the sampleRate.\n            if (options.sampleRate !== undefined && nativeAudioContext.sampleRate !== options.sampleRate) {\n                throw createNotSupportedError();\n            }\n\n            super(nativeAudioContext, 2);\n\n            const { latencyHint } = options;\n            const { sampleRate } = nativeAudioContext;\n\n            // @todo The values for 'balanced', 'interactive' and 'playback' are just copied from Chrome's implementation.\n            this._baseLatency =\n                typeof nativeAudioContext.baseLatency === 'number'\n                    ? nativeAudioContext.baseLatency\n                    : latencyHint === 'balanced'\n                    ? 512 / sampleRate\n                    : latencyHint === 'interactive' || latencyHint === undefined\n                    ? 256 / sampleRate\n                    : latencyHint === 'playback'\n                    ? 1024 / sampleRate\n                    : /*\n                       * @todo The min (256) and max (16384) values are taken from the allowed bufferSize values of a\n                       * ScriptProcessorNode.\n                       */\n                      (Math.max(2, Math.min(128, Math.round((latencyHint * sampleRate) / 128))) * 128) / sampleRate;\n            this._nativeAudioContext = nativeAudioContext;\n\n            // Bug #188: Safari will set the context's state to 'interrupted' in case the user switches tabs.\n            if (nativeAudioContextConstructor.name === 'webkitAudioContext') {\n                this._nativeGainNode = nativeAudioContext.createGain();\n                this._nativeOscillatorNode = nativeAudioContext.createOscillator();\n\n                this._nativeGainNode.gain.value = 1e-37;\n\n                this._nativeOscillatorNode.connect(this._nativeGainNode).connect(nativeAudioContext.destination);\n                this._nativeOscillatorNode.start();\n            } else {\n                this._nativeGainNode = null;\n                this._nativeOscillatorNode = null;\n            }\n\n            this._state = null;\n\n            /*\n             * Bug #34: Chrome and Edge pretend to be running right away, but fire an onstatechange event when the state actually changes\n             * to 'running'.\n             */\n            if (nativeAudioContext.state === 'running') {\n                this._state = 'suspended';\n\n                const revokeState = () => {\n                    if (this._state === 'suspended') {\n                        this._state = null;\n                    }\n\n                    nativeAudioContext.removeEventListener('statechange', revokeState);\n                };\n\n                nativeAudioContext.addEventListener('statechange', revokeState);\n            }\n        }\n\n        get baseLatency(): number {\n            return this._baseLatency;\n        }\n\n        get state(): TAudioContextState {\n            return this._state !== null ? this._state : this._nativeAudioContext.state;\n        }\n\n        public close(): Promise<void> {\n            // Bug #35: Firefox does not throw an error if the AudioContext was closed before.\n            if (this.state === 'closed') {\n                return this._nativeAudioContext.close().then(() => {\n                    throw createInvalidStateError();\n                });\n            }\n\n            // Bug #34: If the state was set to suspended before it should be revoked now.\n            if (this._state === 'suspended') {\n                this._state = null;\n            }\n\n            return this._nativeAudioContext.close().then(() => {\n                if (this._nativeGainNode !== null && this._nativeOscillatorNode !== null) {\n                    this._nativeOscillatorNode.stop();\n\n                    this._nativeGainNode.disconnect();\n                    this._nativeOscillatorNode.disconnect();\n                }\n\n                deactivateAudioGraph(this);\n            });\n        }\n\n        public resume(): Promise<void> {\n            if (this._state === 'suspended') {\n                return new Promise((resolve, reject) => {\n                    const resolvePromise = () => {\n                        this._nativeAudioContext.removeEventListener('statechange', resolvePromise);\n\n                        if (this._nativeAudioContext.state === 'running') {\n                            resolve();\n                        } else {\n                            this.resume().then(resolve, reject);\n                        }\n                    };\n\n                    this._nativeAudioContext.addEventListener('statechange', resolvePromise);\n                });\n            }\n\n            return this._nativeAudioContext.resume().catch((err) => {\n                // Bug #55: Chrome and Edge do throw an InvalidAccessError instead of an InvalidStateError.\n                // Bug #56: Safari invokes the catch handler but without an error.\n                if (err === undefined || err.code === 15) {\n                    throw createInvalidStateError();\n                }\n\n                throw err;\n            });\n        }\n\n        public suspend(): Promise<void> {\n            return this._nativeAudioContext.suspend().catch((err) => {\n                // Bug #56: Safari invokes the catch handler but without an error.\n                if (err === undefined) {\n                    throw createInvalidStateError();\n                }\n\n                throw err;\n            });\n        }\n    };\n};\n", "import { CONTEXT_STORE } from '../globals';\nimport { IAudioDestinationNode, IAudioListener, IMinimalBaseAudioContext, IMinimalBaseAudioContextEventMap } from '../interfaces';\nimport { TAudioContextState, TContext, TEventHandler, TMinimalBaseAudioContextConstructorFactory, TNativeContext } from '../types';\n\nexport const createMinimalBaseAudioContextConstructor: TMinimalBaseAudioContextConstructorFactory = (\n    audioDestinationNodeConstructor,\n    createAudioListener,\n    eventTargetConstructor,\n    isNativeOfflineAudioContext,\n    unrenderedAudioWorkletNodeStore,\n    wrapEventListener\n) => {\n    return class MinimalBaseAudioContext<T extends TContext>\n        extends eventTargetConstructor<IMinimalBaseAudioContextEventMap>\n        implements IMinimalBaseAudioContext<T>\n    {\n        private _destination: IAudioDestinationNode<T>;\n\n        private _listener: IAudioListener;\n\n        private _onstatechange: null | TEventHandler<T>;\n\n        constructor(private _nativeContext: TNativeContext, numberOfChannels: number) {\n            super(_nativeContext);\n\n            CONTEXT_STORE.set(<T>(<unknown>this), _nativeContext);\n\n            if (isNativeOfflineAudioContext(_nativeContext)) {\n                unrenderedAudioWorkletNodeStore.set(_nativeContext, new Set());\n            }\n\n            this._destination = new audioDestinationNodeConstructor(<T>(<unknown>this), numberOfChannels);\n            this._listener = createAudioListener(<T>(<unknown>this), _nativeContext);\n            this._onstatechange = null;\n        }\n\n        get currentTime(): number {\n            return this._nativeContext.currentTime;\n        }\n\n        get destination(): IAudioDestinationNode<T> {\n            return this._destination;\n        }\n\n        get listener(): IAudioListener {\n            return this._listener;\n        }\n\n        get onstatechange(): null | TEventHandler<T> {\n            return this._onstatechange;\n        }\n\n        set onstatechange(value) {\n            const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n\n            this._nativeContext.onstatechange = wrappedListener;\n\n            const nativeOnStateChange = this._nativeContext.onstatechange;\n\n            this._onstatechange = nativeOnStateChange !== null && nativeOnStateChange === wrappedListener ? value : nativeOnStateChange;\n        }\n\n        get sampleRate(): number {\n            return this._nativeContext.sampleRate;\n        }\n\n        get state(): TAudioContextState {\n            return this._nativeContext.state;\n        }\n    };\n};\n", "import { TNativeContext } from '../types';\n\nexport const testPromiseSupport = (nativeContext: TNativeContext): boolean => {\n    // This 12 numbers represent the 48 bytes of an empty WAVE file with a single sample.\n    const uint32Array = new Uint32Array([1179011410, 40, 1163280727, 544501094, 16, 131073, 44100, 176400, 1048580, 1635017060, 4, 0]);\n\n    try {\n        // Bug #1: Safari requires a successCallback.\n        const promise = nativeContext.decodeAudioData(<ArrayBuffer>uint32Array.buffer, () => {\n            // Ignore the success callback.\n        });\n\n        if (promise === undefined) {\n            return false;\n        }\n\n        promise.catch(() => {\n            // Ignore rejected errors.\n        });\n\n        return true;\n    } catch {\n        // Ignore errors.\n    }\n\n    return false;\n};\n", "import { deactivateAudioGraph } from '../helpers/deactivate-audio-graph';\nimport { testPromiseSupport } from '../helpers/test-promise-support';\nimport { IAudioBuffer, IMinimalOfflineAudioContext, IOfflineAudioContextOptions } from '../interfaces';\nimport { TAudioContextState, TMinimalOfflineAudioContextConstructorFactory, TNativeOfflineAudioContext } from '../types';\n\nconst DEFAULT_OPTIONS = {\n    numberOfChannels: 1\n} as const;\n\nexport const createMinimalOfflineAudioContextConstructor: TMinimalOfflineAudioContextConstructorFactory = (\n    cacheTestResult,\n    createInvalidStateError,\n    createNativeOfflineAudioContext,\n    minimalBaseAudioContextConstructor,\n    startRendering\n) => {\n    return class MinimalOfflineAudioContext extends minimalBaseAudioContextConstructor<IMinimalOfflineAudioContext>\n        implements IMinimalOfflineAudioContext {\n        private _length: number;\n\n        private _nativeOfflineAudioContext: TNativeOfflineAudioContext;\n\n        private _state: null | TAudioContextState;\n\n        constructor(options: IOfflineAudioContextOptions) {\n            const { length, numberOfChannels, sampleRate } = { ...DEFAULT_OPTIONS, ...options };\n\n            const nativeOfflineAudioContext = createNativeOfflineAudioContext(numberOfChannels, length, sampleRate);\n\n            // #21 Safari does not support promises and therefore would fire the statechange event before the promise can be resolved.\n            if (!cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeOfflineAudioContext))) {\n                nativeOfflineAudioContext.addEventListener(\n                    'statechange',\n                    (() => {\n                        let i = 0;\n\n                        const delayStateChangeEvent = (event: Event) => {\n                            if (this._state === 'running') {\n                                if (i > 0) {\n                                    nativeOfflineAudioContext.removeEventListener('statechange', delayStateChangeEvent);\n                                    event.stopImmediatePropagation();\n\n                                    this._waitForThePromiseToSettle(event);\n                                } else {\n                                    i += 1;\n                                }\n                            }\n                        };\n\n                        return delayStateChangeEvent;\n                    })()\n                );\n            }\n\n            super(nativeOfflineAudioContext, numberOfChannels);\n\n            this._length = length;\n            this._nativeOfflineAudioContext = nativeOfflineAudioContext;\n            this._state = null;\n        }\n\n        get length(): number {\n            // Bug #17: Safari does not yet expose the length.\n            if (this._nativeOfflineAudioContext.length === undefined) {\n                return this._length;\n            }\n\n            return this._nativeOfflineAudioContext.length;\n        }\n\n        get state(): TAudioContextState {\n            return this._state === null ? this._nativeOfflineAudioContext.state : this._state;\n        }\n\n        public startRendering(): Promise<IAudioBuffer> {\n            /*\n             * Bug #9 & #59: It is theoretically possible that startRendering() will first render a partialOfflineAudioContext. Therefore\n             * the state of the nativeOfflineAudioContext might no transition to running immediately.\n             */\n            if (this._state === 'running') {\n                return Promise.reject(createInvalidStateError());\n            }\n\n            this._state = 'running';\n\n            return startRendering(this.destination, this._nativeOfflineAudioContext).finally(() => {\n                this._state = null;\n\n                deactivateAudioGraph(this);\n            });\n        }\n\n        private _waitForThePromiseToSettle(event: Event): void {\n            if (this._state === null) {\n                this._nativeOfflineAudioContext.dispatchEvent(event);\n            } else {\n                setTimeout(() => this._waitForThePromiseToSettle(event));\n            }\n        }\n    };\n};\n", "import { TMonitorConnectionsFactory, TNativeAudioNode, TNativeAudioParam } from '../types';\n\nexport const createMonitorConnections: TMonitorConnectionsFactory = (insertElementInSet, isNativeAudioNode) => {\n    return (nativeAudioNode, whenConnected, whenDisconnected) => {\n        const connections = new Set<[TNativeAudioNode, number, number] | [TNativeAudioParam, number]>();\n\n        nativeAudioNode.connect = <TNativeAudioNode['connect']>((connect) => {\n            // tslint:disable-next-line:invalid-void no-inferrable-types\n            return (destination: TNativeAudioNode | TNativeAudioParam, output = 0, input: number = 0): void | TNativeAudioNode => {\n                const wasDisconnected = connections.size === 0;\n\n                if (isNativeAudioNode(destination)) {\n                    // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n                    (<(destination: TNativeAudioNode, output?: number, input?: number) => TNativeAudioNode>connect).call(\n                        nativeAudioNode,\n                        destination,\n                        output,\n                        input\n                    );\n\n                    insertElementInSet(\n                        connections,\n                        [destination, output, input],\n                        (connection) => connection[0] === destination && connection[1] === output && connection[2] === input,\n                        true\n                    );\n\n                    if (wasDisconnected) {\n                        whenConnected();\n                    }\n\n                    return destination;\n                }\n\n                connect.call(nativeAudioNode, destination, output);\n\n                insertElementInSet(\n                    connections,\n                    [destination, output],\n                    (connection) => connection[0] === destination && connection[1] === output,\n                    true\n                );\n\n                if (wasDisconnected) {\n                    whenConnected();\n                }\n\n                return;\n            };\n        })(nativeAudioNode.connect);\n\n        nativeAudioNode.disconnect = ((disconnect) => {\n            return (destinationOrOutput?: number | TNativeAudioNode | TNativeAudioParam, output?: number, input?: number): void => {\n                const wasConnected = connections.size > 0;\n\n                if (destinationOrOutput === undefined) {\n                    disconnect.apply(nativeAudioNode);\n\n                    connections.clear();\n                } else if (typeof destinationOrOutput === 'number') {\n                    // @todo TypeScript cannot infer the overloaded signature with 1 argument yet.\n                    (<(output: number) => void>disconnect).call(nativeAudioNode, destinationOrOutput);\n\n                    for (const connection of connections) {\n                        if (connection[1] === destinationOrOutput) {\n                            connections.delete(connection);\n                        }\n                    }\n                } else {\n                    if (isNativeAudioNode(destinationOrOutput)) {\n                        // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n                        (<(destination: TNativeAudioNode, output?: number, input?: number) => void>disconnect).call(\n                            nativeAudioNode,\n                            destinationOrOutput,\n                            output,\n                            input\n                        );\n                    } else {\n                        // @todo TypeScript cannot infer the overloaded signature with 2 arguments yet.\n                        (<(destination: TNativeAudioParam, output?: number) => void>disconnect).call(\n                            nativeAudioNode,\n                            destinationOrOutput,\n                            output\n                        );\n                    }\n\n                    for (const connection of connections) {\n                        if (\n                            connection[0] === destinationOrOutput &&\n                            (output === undefined || connection[1] === output) &&\n                            (input === undefined || connection[2] === input)\n                        ) {\n                            connections.delete(connection);\n                        }\n                    }\n                }\n\n                const isDisconnected = connections.size === 0;\n\n                if (wasConnected && isDisconnected) {\n                    whenDisconnected();\n                }\n            };\n        })(nativeAudioNode.disconnect);\n\n        return nativeAudioNode;\n    };\n};\n", "export const assignNativeAudioNodeOption = <T extends keyof any, U extends any>(\n    nativeAudioNode: Record<T, U>,\n    options: Record<T, U>,\n    option: T\n) => {\n    const value = options[option];\n\n    if (value !== undefined && value !== nativeAudioNode[option]) {\n        nativeAudioNode[option] = value;\n    }\n};\n", "import { IAudioNodeOptions } from '../interfaces';\nimport { TNativeAudioNode } from '../types';\nimport { assignNativeAudioNodeOption } from './assign-native-audio-node-option';\n\nexport const assignNativeAudioNodeOptions = (nativeAudioNode: TNativeAudioNode, options: IAudioNodeOptions): void => {\n    assignNativeAudioNodeOption(nativeAudioNode, options, 'channelCount');\n    assignNativeAudioNodeOption(nativeAudioNode, options, 'channelCountMode');\n    assignNativeAudioNodeOption(nativeAudioNode, options, 'channelInterpretation');\n};\n", "import { TNativeAnalyserNode } from '../types';\n\nexport const testAnalyserNodeGetFloatTimeDomainDataMethodSupport = (nativeAnalyserNode: TNativeAnalyserNode): boolean => {\n    return typeof nativeAnalyserNode.getFloatTimeDomainData === 'function';\n};\n", "import { TNativeAnalyserNode } from '../types';\n\nexport const wrapAnalyserNodeGetFloatTimeDomainDataMethod = (nativeAnalyserNode: TNativeAnalyserNode): void => {\n    nativeAnalyserNode.getFloatTimeDomainData = (array: Float32Array) => {\n        const byteTimeDomainData = new Uint8Array(array.length);\n\n        nativeAnalyserNode.getByteTimeDomainData(byteTimeDomainData);\n\n        const length = Math.max(byteTimeDomainData.length, nativeAnalyserNode.fftSize);\n\n        for (let i = 0; i < length; i += 1) {\n            array[i] = (byteTimeDomainData[i] - 128) * 0.0078125;\n        }\n\n        return array;\n    };\n};\n", "import { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { testAnalyserNodeGetFloatTimeDomainDataMethodSupport } from '../helpers/test-analyser-node-get-float-time-domain-data-method-support';\nimport { wrapAnalyserNodeGetFloatTimeDomainDataMethod } from '../helpers/wrap-analyser-node-get-float-time-domain-data-method';\nimport { TNativeAnalyserNodeFactoryFactory } from '../types';\n\nexport const createNativeAnalyserNodeFactory: TNativeAnalyserNodeFactoryFactory = (cacheTestResult, createIndexSizeError) => {\n    return (nativeContext, options) => {\n        const nativeAnalyserNode = nativeContext.createAnalyser();\n\n        // Bug #37: Firefox does not create an AnalyserNode with the default properties.\n        assignNativeAudioNodeOptions(nativeAnalyserNode, options);\n\n        // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n        if (!(options.maxDecibels > options.minDecibels)) {\n            throw createIndexSizeError();\n        }\n\n        assignNativeAudioNodeOption(nativeAnalyserNode, options, 'fftSize');\n        assignNativeAudioNodeOption(nativeAnalyserNode, options, 'maxDecibels');\n        assignNativeAudioNodeOption(nativeAnalyserNode, options, 'minDecibels');\n        assignNativeAudioNodeOption(nativeAnalyserNode, options, 'smoothingTimeConstant');\n\n        // Bug #36: Safari does not support getFloatTimeDomainData() yet.\n        if (\n            !cacheTestResult(testAnalyserNodeGetFloatTimeDomainDataMethodSupport, () =>\n                testAnalyserNodeGetFloatTimeDomainDataMethodSupport(nativeAnalyserNode)\n            )\n        ) {\n            wrapAnalyserNodeGetFloatTimeDomainDataMethod(nativeAnalyserNode);\n        }\n\n        return nativeAnalyserNode;\n    };\n};\n", "import { TNativeAudioBufferConstructorFactory } from '../types';\n\nexport const createNativeAudioBufferConstructor: TNativeAudioBufferConstructorFactory = (window) => {\n    if (window === null) {\n        return null;\n    }\n\n    if (window.hasOwnProperty('AudioBuffer')) {\n        return window.AudioBuffer;\n    }\n\n    return null;\n};\n", "export const assignNativeAudioNodeAudioParamValue = <T extends { [key: string]: any }, U extends { [key: string]: any }>(\n    nativeAudioNode: T,\n    options: U,\n    audioParam: keyof T & keyof U\n) => {\n    const value = options[audioParam];\n\n    if (value !== undefined && value !== nativeAudioNode[audioParam].value) {\n        nativeAudioNode[audioParam].value = value;\n    }\n};\n", "import { createInvalidStateError } from '../factories/invalid-state-error';\nimport { TNativeAudioBufferSourceNode } from '../types';\n\nexport const wrapAudioBufferSourceNodeStartMethodConsecutiveCalls = (nativeAudioBufferSourceNode: TNativeAudioBufferSourceNode): void => {\n    nativeAudioBufferSourceNode.start = ((start) => {\n        let isScheduled = false;\n\n        return (when = 0, offset = 0, duration?: number) => {\n            if (isScheduled) {\n                throw createInvalidStateError();\n            }\n\n            start.call(nativeAudioBufferSourceNode, when, offset, duration);\n\n            isScheduled = true;\n        };\n    })(nativeAudioBufferSourceNode.start);\n};\n", "import { TNativeAudioBufferSourceNode, TNativeConstantSourceNode, TNativeOscillatorNode } from '../types';\n\nexport const wrapAudioScheduledSourceNodeStartMethodNegativeParameters = (\n    nativeAudioScheduledSourceNode: TNativeAudioBufferSourceNode | TNativeConstantSourceNode | TNativeOscillatorNode\n): void => {\n    nativeAudioScheduledSourceNode.start = ((start) => {\n        return (when = 0, offset = 0, duration?: number) => {\n            if ((typeof duration === 'number' && duration < 0) || offset < 0 || when < 0) {\n                throw new RangeError(\"The parameters can't be negative.\");\n            }\n\n            // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n            (<(when: number, offset: number, duration?: number) => void>start).call(nativeAudioScheduledSourceNode, when, offset, duration);\n        };\n    })(nativeAudioScheduledSourceNode.start);\n};\n", "import { TNativeAudioBufferSourceNode, TNativeConstantSourceNode, TNativeOscillatorNode } from '../types';\n\nexport const wrapAudioScheduledSourceNodeStopMethodNegativeParameters = (\n    nativeAudioScheduledSourceNode: TNativeAudioBufferSourceNode | TNativeConstantSourceNode | TNativeOscillatorNode\n): void => {\n    nativeAudioScheduledSourceNode.stop = ((stop) => {\n        return (when = 0) => {\n            if (when < 0) {\n                throw new RangeError(\"The parameter can't be negative.\");\n            }\n\n            stop.call(nativeAudioScheduledSourceNode, when);\n        };\n    })(nativeAudioScheduledSourceNode.stop);\n};\n", "import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { wrapAudioBufferSourceNodeStartMethodConsecutiveCalls } from '../helpers/wrap-audio-buffer-source-node-start-method-consecutive-calls';\nimport { wrapAudioScheduledSourceNodeStartMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters';\nimport { wrapAudioScheduledSourceNodeStopMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters';\nimport { TNativeAudioBufferSourceNodeFactoryFactory } from '../types';\n\nexport const createNativeAudioBufferSourceNodeFactory: TNativeAudioBufferSourceNodeFactoryFactory = (\n    addSilentConnection,\n    cacheTestResult,\n    testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport,\n    testAudioBufferSourceNodeStartMethodOffsetClampingSupport,\n    testAudioBufferSourceNodeStopMethodNullifiedBufferSupport,\n    testAudioScheduledSourceNodeStartMethodNegativeParametersSupport,\n    testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport,\n    testAudioScheduledSourceNodeStopMethodNegativeParametersSupport,\n    wrapAudioBufferSourceNodeStartMethodOffsetClampling,\n    wrapAudioBufferSourceNodeStopMethodNullifiedBuffer,\n    wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls\n) => {\n    return (nativeContext, options) => {\n        const nativeAudioBufferSourceNode = nativeContext.createBufferSource();\n\n        assignNativeAudioNodeOptions(nativeAudioBufferSourceNode, options);\n\n        assignNativeAudioNodeAudioParamValue(nativeAudioBufferSourceNode, options, 'playbackRate');\n\n        assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'buffer');\n\n        // Bug #149: Safari does not yet support the detune AudioParam.\n\n        assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'loop');\n        assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'loopEnd');\n        assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'loopStart');\n\n        // Bug #69: Safari does allow calls to start() of an already scheduled AudioBufferSourceNode.\n        if (\n            !cacheTestResult(testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport, () =>\n                testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport(nativeContext)\n            )\n        ) {\n            wrapAudioBufferSourceNodeStartMethodConsecutiveCalls(nativeAudioBufferSourceNode);\n        }\n\n        // Bug #154 & #155: Safari does not handle offsets which are equal to or greater than the duration of the buffer.\n        if (\n            !cacheTestResult(testAudioBufferSourceNodeStartMethodOffsetClampingSupport, () =>\n                testAudioBufferSourceNodeStartMethodOffsetClampingSupport(nativeContext)\n            )\n        ) {\n            wrapAudioBufferSourceNodeStartMethodOffsetClampling(nativeAudioBufferSourceNode);\n        }\n\n        // Bug #162: Safari does throw an error when stop() is called on an AudioBufferSourceNode which has no buffer assigned to it.\n        if (\n            !cacheTestResult(testAudioBufferSourceNodeStopMethodNullifiedBufferSupport, () =>\n                testAudioBufferSourceNodeStopMethodNullifiedBufferSupport(nativeContext)\n            )\n        ) {\n            wrapAudioBufferSourceNodeStopMethodNullifiedBuffer(nativeAudioBufferSourceNode, nativeContext);\n        }\n\n        // Bug #44: Safari does not throw a RangeError yet.\n        if (\n            !cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, () =>\n                testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext)\n            )\n        ) {\n            wrapAudioScheduledSourceNodeStartMethodNegativeParameters(nativeAudioBufferSourceNode);\n        }\n\n        // Bug #19: Safari does not ignore calls to stop() of an already stopped AudioBufferSourceNode.\n        if (\n            !cacheTestResult(testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, () =>\n                testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport(nativeContext)\n            )\n        ) {\n            wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(nativeAudioBufferSourceNode, nativeContext);\n        }\n\n        // Bug #44: Only Firefox does not throw a RangeError yet.\n        if (\n            !cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, () =>\n                testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext)\n            )\n        ) {\n            wrapAudioScheduledSourceNodeStopMethodNegativeParameters(nativeAudioBufferSourceNode);\n        }\n\n        // Bug #175: Safari will not fire an ended event if the AudioBufferSourceNode is unconnected.\n        addSilentConnection(nativeContext, nativeAudioBufferSourceNode);\n\n        return nativeAudioBufferSourceNode;\n    };\n};\n", "import { TNativeAudioContextConstructorFactory } from '../types';\n\nexport const createNativeAudioContextConstructor: TNativeAudioContextConstructorFactory = (window) => {\n    if (window === null) {\n        return null;\n    }\n\n    if (window.hasOwnProperty('AudioContext')) {\n        return window.AudioContext;\n    }\n\n    return window.hasOwnProperty('webkitAudioContext') ? (<any>window).webkitAudioContext : null;\n};\n", "import { TNativeAudioDestinationNode, TNativeAudioDestinationNodeFactoryFactory, TNativeGainNode } from '../types';\n\nexport const createNativeAudioDestinationNodeFactory: TNativeAudioDestinationNodeFactoryFactory = (\n    createNativeGainNode,\n    overwriteAccessors\n) => {\n    return (nativeContext, channelCount, isNodeOfNativeOfflineAudioContext) => {\n        const nativeAudioDestinationNode = nativeContext.destination;\n\n        // Bug #132: Safari does not have the correct channelCount.\n        if (nativeAudioDestinationNode.channelCount !== channelCount) {\n            try {\n                nativeAudioDestinationNode.channelCount = channelCount;\n            } catch {\n                // Bug #169: Safari throws an error on each attempt to change the channelCount.\n            }\n        }\n\n        // Bug #83: Safari does not have the correct channelCountMode.\n        if (isNodeOfNativeOfflineAudioContext && nativeAudioDestinationNode.channelCountMode !== 'explicit') {\n            nativeAudioDestinationNode.channelCountMode = 'explicit';\n        }\n\n        // Bug #47: The AudioDestinationNode in Safari does not initialize the maxChannelCount property correctly.\n        if (nativeAudioDestinationNode.maxChannelCount === 0) {\n            Object.defineProperty(nativeAudioDestinationNode, 'maxChannelCount', {\n                value: channelCount\n            });\n        }\n\n        // Bug #168: No browser does yet have an AudioDestinationNode with an output.\n        const gainNode = createNativeGainNode(nativeContext, {\n            channelCount,\n            channelCountMode: nativeAudioDestinationNode.channelCountMode,\n            channelInterpretation: nativeAudioDestinationNode.channelInterpretation,\n            gain: 1\n        });\n\n        overwriteAccessors(\n            gainNode,\n            'channelCount',\n            (get) => () => get.call(gainNode),\n            (set) => (value) => {\n                set.call(gainNode, value);\n\n                try {\n                    nativeAudioDestinationNode.channelCount = value;\n                } catch (err) {\n                    // Bug #169: Safari throws an error on each attempt to change the channelCount.\n                    if (value > nativeAudioDestinationNode.maxChannelCount) {\n                        throw err;\n                    }\n                }\n            }\n        );\n\n        overwriteAccessors(\n            gainNode,\n            'channelCountMode',\n            (get) => () => get.call(gainNode),\n            (set) => (value) => {\n                set.call(gainNode, value);\n                nativeAudioDestinationNode.channelCountMode = value;\n            }\n        );\n\n        overwriteAccessors(\n            gainNode,\n            'channelInterpretation',\n            (get) => () => get.call(gainNode),\n            (set) => (value) => {\n                set.call(gainNode, value);\n                nativeAudioDestinationNode.channelInterpretation = value;\n            }\n        );\n\n        Object.defineProperty(gainNode, 'maxChannelCount', {\n            get: () => nativeAudioDestinationNode.maxChannelCount\n        });\n\n        // @todo This should be disconnected when the context is closed.\n        gainNode.connect(nativeAudioDestinationNode);\n\n        return <{ maxChannelCount: TNativeAudioDestinationNode['maxChannelCount'] } & TNativeGainNode>gainNode;\n    };\n};\n", "import { TNativeAudioWorkletNodeConstructorFactory } from '../types';\n\nexport const createNativeAudioWorkletNodeConstructor: TNativeAudioWorkletNodeConstructorFactory = (window) => {\n    if (window === null) {\n        return null;\n    }\n\n    return window.hasOwnProperty('AudioWorkletNode') ? window.AudioWorkletNode : null;\n};\n", "import { IAudioWorkletNodeOptions } from '../interfaces';\n\nexport const testClonabilityOfAudioWorkletNodeOptions = (audioWorkletNodeOptions: IAudioWorkletNodeOptions): void => {\n    const { port1 } = new MessageChannel();\n\n    try {\n        // This will throw an error if the audioWorkletNodeOptions are not clonable.\n        port1.postMessage(audioWorkletNodeOptions);\n    } finally {\n        port1.close();\n    }\n};\n", "import { testClonabilityOfAudioWorkletNodeOptions } from '../helpers/test-clonability-of-audio-worklet-node-options';\nimport { TNativeAudioWorkletNode, TNativeAudioWorkletNodeFactoryFactory, TNativeAudioWorkletNodeOptions } from '../types';\n\nexport const createNativeAudioWorkletNodeFactory: TNativeAudioWorkletNodeFactoryFactory = (\n    createInvalidStateError,\n    createNativeAudioWorkletNodeFaker,\n    createNativeGainNode,\n    createNotSupportedError,\n    monitorConnections\n) => {\n    return (nativeContext, baseLatency, nativeAudioWorkletNodeConstructor, name, processorConstructor, options) => {\n        if (nativeAudioWorkletNodeConstructor !== null) {\n            try {\n                const nativeAudioWorkletNode = new nativeAudioWorkletNodeConstructor(\n                    nativeContext,\n                    name,\n                    <TNativeAudioWorkletNodeOptions>options\n                );\n                const patchedEventListeners: Map<\n                    EventListenerOrEventListenerObject,\n                    NonNullable<TNativeAudioWorkletNode['onprocessorerror']>\n                > = new Map();\n\n                let onprocessorerror: TNativeAudioWorkletNode['onprocessorerror'] = null;\n\n                Object.defineProperties(nativeAudioWorkletNode, {\n                    /*\n                     * Bug #61: Overwriting the property accessors for channelCount and channelCountMode is necessary as long as some\n                     * browsers have no native implementation to achieve a consistent behavior.\n                     */\n                    channelCount: {\n                        get: () => options.channelCount,\n                        set: () => {\n                            throw createInvalidStateError();\n                        }\n                    },\n                    channelCountMode: {\n                        get: () => 'explicit',\n                        set: () => {\n                            throw createInvalidStateError();\n                        }\n                    },\n                    // Bug #156: Chrome and Edge do not yet fire an ErrorEvent.\n                    onprocessorerror: {\n                        get: () => onprocessorerror,\n                        set: (value) => {\n                            if (typeof onprocessorerror === 'function') {\n                                nativeAudioWorkletNode.removeEventListener('processorerror', onprocessorerror);\n                            }\n\n                            onprocessorerror = typeof value === 'function' ? value : null;\n\n                            if (typeof onprocessorerror === 'function') {\n                                nativeAudioWorkletNode.addEventListener('processorerror', onprocessorerror);\n                            }\n                        }\n                    }\n                });\n\n                nativeAudioWorkletNode.addEventListener = ((addEventListener) => {\n                    return (...args: [string, EventListenerOrEventListenerObject, (boolean | AddEventListenerOptions)?]): void => {\n                        if (args[0] === 'processorerror') {\n                            const unpatchedEventListener =\n                                typeof args[1] === 'function'\n                                    ? args[1]\n                                    : typeof args[1] === 'object' && args[1] !== null && typeof args[1].handleEvent === 'function'\n                                    ? args[1].handleEvent\n                                    : null;\n\n                            if (unpatchedEventListener !== null) {\n                                const patchedEventListener = patchedEventListeners.get(args[1]);\n\n                                if (patchedEventListener !== undefined) {\n                                    args[1] = patchedEventListener;\n                                } else {\n                                    args[1] = (event: Event) => {\n                                        // Bug #178: Chrome and Edge do fire an event of type error.\n                                        if (event.type === 'error') {\n                                            Object.defineProperties(event, {\n                                                type: { value: 'processorerror' }\n                                            });\n\n                                            unpatchedEventListener(event);\n                                        } else {\n                                            unpatchedEventListener(new ErrorEvent(args[0], { ...event }));\n                                        }\n                                    };\n\n                                    patchedEventListeners.set(unpatchedEventListener, args[1]);\n                                }\n                            }\n                        }\n\n                        // Bug #178: Chrome and Edge do fire an event of type error.\n                        addEventListener.call(nativeAudioWorkletNode, 'error', args[1], args[2]);\n\n                        return addEventListener.call(nativeAudioWorkletNode, ...args);\n                    };\n                })(nativeAudioWorkletNode.addEventListener);\n\n                nativeAudioWorkletNode.removeEventListener = ((removeEventListener) => {\n                    return (...args: any[]): void => {\n                        if (args[0] === 'processorerror') {\n                            const patchedEventListener = patchedEventListeners.get(args[1]);\n\n                            if (patchedEventListener !== undefined) {\n                                patchedEventListeners.delete(args[1]);\n\n                                args[1] = patchedEventListener;\n                            }\n                        }\n\n                        // Bug #178: Chrome and Edge do fire an event of type error.\n                        removeEventListener.call(nativeAudioWorkletNode, 'error', args[1], args[2]);\n\n                        return removeEventListener.call(nativeAudioWorkletNode, args[0], args[1], args[2]);\n                    };\n                })(nativeAudioWorkletNode.removeEventListener);\n\n                /*\n                 * Bug #86: Chrome and Edge do not invoke the process() function if the corresponding AudioWorkletNode is unconnected but\n                 * has an output.\n                 */\n                if (options.numberOfOutputs !== 0) {\n                    const nativeGainNode = createNativeGainNode(nativeContext, {\n                        channelCount: 1,\n                        channelCountMode: 'explicit',\n                        channelInterpretation: 'discrete',\n                        gain: 0\n                    });\n\n                    nativeAudioWorkletNode.connect(nativeGainNode).connect(nativeContext.destination);\n\n                    const whenConnected = () => nativeGainNode.disconnect();\n                    const whenDisconnected = () => nativeGainNode.connect(nativeContext.destination);\n\n                    // @todo Disconnect the connection when the process() function of the AudioWorkletNode returns false.\n                    return monitorConnections(nativeAudioWorkletNode, whenConnected, whenDisconnected);\n                }\n\n                return nativeAudioWorkletNode;\n            } catch (err) {\n                // Bug #60: Chrome & Edge throw an InvalidStateError instead of a NotSupportedError.\n                if (err.code === 11) {\n                    throw createNotSupportedError();\n                }\n\n                throw err;\n            }\n        }\n\n        // Bug #61: Only Chrome & Edge have an implementation of the AudioWorkletNode yet.\n        if (processorConstructor === undefined) {\n            throw createNotSupportedError();\n        }\n\n        testClonabilityOfAudioWorkletNodeOptions(options);\n\n        return createNativeAudioWorkletNodeFaker(nativeContext, baseLatency, processorConstructor, options);\n    };\n};\n", "export const computeBufferSize = (baseLatency: null | number, sampleRate: number) => {\n    if (baseLatency === null) {\n        return 512;\n    }\n\n    return Math.max(512, Math.min(16384, Math.pow(2, Math.round(Math.log2(baseLatency * sampleRate)))));\n};\n", "import { IAudioWorkletNodeOptions } from '../interfaces';\n\nexport const cloneAudioWorkletNodeOptions = (audioWorkletNodeOptions: IAudioWorkletNodeOptions): Promise<IAudioWorkletNodeOptions> => {\n    return new Promise((resolve, reject) => {\n        const { port1, port2 } = new MessageChannel();\n\n        port1.onmessage = ({ data }) => {\n            port1.close();\n            port2.close();\n\n            resolve(data);\n        };\n        port1.onmessageerror = ({ data }) => {\n            port1.close();\n            port2.close();\n\n            reject(data);\n        };\n\n        // This will throw an error if the audioWorkletNodeOptions are not clonable.\n        port2.postMessage(audioWorkletNodeOptions);\n    });\n};\n", "import { IAudioWorkletNodeOptions, IAudioWorkletProcessor, IAudioWorkletProcessorConstructor } from '../interfaces';\nimport { cloneAudioWorkletNodeOptions } from './clone-audio-worklet-node-options';\n\nexport const createAudioWorkletProcessorPromise = async (\n    processorConstructor: IAudioWorkletProcessorConstructor,\n    audioWorkletNodeOptions: IAudioWorkletNodeOptions\n): Promise<IAudioWorkletProcessor> => {\n    const clonedAudioWorkletNodeOptions = await cloneAudioWorkletNodeOptions(audioWorkletNodeOptions);\n\n    return new processorConstructor(clonedAudioWorkletNodeOptions);\n};\n", "import { NODE_TO_PROCESSOR_MAPS } from '../globals';\nimport { IAudioWorkletNodeOptions, IAudioWorkletProcessor, IAudioWorkletProcessorConstructor } from '../interfaces';\nimport { TNativeAudioWorkletNode, TNativeContext } from '../types';\nimport { createAudioWorkletProcessorPromise } from './create-audio-worklet-processor-promise';\n\nexport const createAudioWorkletProcessor = (\n    nativeContext: TNativeContext,\n    nativeAudioWorkletNode: TNativeAudioWorkletNode,\n    processorConstructor: IAudioWorkletProcessorConstructor,\n    audioWorkletNodeOptions: IAudioWorkletNodeOptions\n): Promise<IAudioWorkletProcessor> => {\n    let nodeToProcessorMap = NODE_TO_PROCESSOR_MAPS.get(nativeContext);\n\n    if (nodeToProcessorMap === undefined) {\n        nodeToProcessorMap = new WeakMap();\n\n        NODE_TO_PROCESSOR_MAPS.set(nativeContext, nodeToProcessorMap);\n    }\n\n    const audioWorkletProcessorPromise = createAudioWorkletProcessorPromise(processorConstructor, audioWorkletNodeOptions);\n\n    nodeToProcessorMap.set(nativeAudioWorkletNode, audioWorkletProcessorPromise);\n\n    return audioWorkletProcessorPromise;\n};\n", "import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { computeBufferSize } from '../helpers/compute-buffer-size';\nimport { copyFromChannel } from '../helpers/copy-from-channel';\nimport { copyToChannel } from '../helpers/copy-to-channel';\nimport { createAudioWorkletProcessor } from '../helpers/create-audio-worklet-processor';\nimport { createNestedArrays } from '../helpers/create-nested-arrays';\nimport { IAudioWorkletProcessor } from '../interfaces';\nimport { ReadOnlyMap } from '../read-only-map';\nimport {\n    TNativeAudioNode,\n    TNativeAudioParam,\n    TNativeAudioWorkletNode,\n    TNativeAudioWorkletNodeFakerFactoryFactory,\n    TNativeChannelMergerNode,\n    TNativeChannelSplitterNode,\n    TNativeConstantSourceNode,\n    TNativeGainNode\n} from '../types';\n\nexport const createNativeAudioWorkletNodeFakerFactory: TNativeAudioWorkletNodeFakerFactoryFactory = (\n    connectMultipleOutputs,\n    createIndexSizeError,\n    createInvalidStateError,\n    createNativeChannelMergerNode,\n    createNativeChannelSplitterNode,\n    createNativeConstantSourceNode,\n    createNativeGainNode,\n    createNativeScriptProcessorNode,\n    createNotSupportedError,\n    disconnectMultipleOutputs,\n    exposeCurrentFrameAndCurrentTime,\n    getActiveAudioWorkletNodeInputs,\n    monitorConnections\n) => {\n    return (nativeContext, baseLatency, processorConstructor, options) => {\n        if (options.numberOfInputs === 0 && options.numberOfOutputs === 0) {\n            throw createNotSupportedError();\n        }\n\n        const outputChannelCount = Array.isArray(options.outputChannelCount)\n            ? options.outputChannelCount\n            : Array.from(options.outputChannelCount);\n\n        // @todo Check if any of the channelCount values is greater than the implementation's maximum number of channels.\n        if (outputChannelCount.some((channelCount) => channelCount < 1)) {\n            throw createNotSupportedError();\n        }\n\n        if (outputChannelCount.length !== options.numberOfOutputs) {\n            throw createIndexSizeError();\n        }\n\n        // Bug #61: This is not part of the standard but required for the faker to work.\n        if (options.channelCountMode !== 'explicit') {\n            throw createNotSupportedError();\n        }\n\n        const numberOfInputChannels = options.channelCount * options.numberOfInputs;\n        const numberOfOutputChannels = outputChannelCount.reduce((sum, value) => sum + value, 0);\n        const numberOfParameters =\n            processorConstructor.parameterDescriptors === undefined ? 0 : processorConstructor.parameterDescriptors.length;\n\n        // Bug #61: This is not part of the standard but required for the faker to work.\n        if (numberOfInputChannels + numberOfParameters > 6 || numberOfOutputChannels > 6) {\n            throw createNotSupportedError();\n        }\n\n        const messageChannel = new MessageChannel();\n        const gainNodes: TNativeGainNode[] = [];\n        const inputChannelSplitterNodes: TNativeChannelSplitterNode[] = [];\n\n        for (let i = 0; i < options.numberOfInputs; i += 1) {\n            gainNodes.push(\n                createNativeGainNode(nativeContext, {\n                    channelCount: options.channelCount,\n                    channelCountMode: options.channelCountMode,\n                    channelInterpretation: options.channelInterpretation,\n                    gain: 1\n                })\n            );\n            inputChannelSplitterNodes.push(\n                createNativeChannelSplitterNode(nativeContext, {\n                    channelCount: options.channelCount,\n                    channelCountMode: 'explicit',\n                    channelInterpretation: 'discrete',\n                    numberOfOutputs: options.channelCount\n                })\n            );\n        }\n\n        const constantSourceNodes: TNativeConstantSourceNode[] = [];\n\n        if (processorConstructor.parameterDescriptors !== undefined) {\n            for (const { defaultValue, maxValue, minValue, name } of processorConstructor.parameterDescriptors) {\n                const constantSourceNode = createNativeConstantSourceNode(nativeContext, {\n                    channelCount: 1,\n                    channelCountMode: 'explicit',\n                    channelInterpretation: 'discrete',\n                    offset:\n                        options.parameterData[name] !== undefined\n                            ? options.parameterData[name]\n                            : defaultValue === undefined\n                            ? 0\n                            : defaultValue\n                });\n\n                Object.defineProperties(constantSourceNode.offset, {\n                    defaultValue: {\n                        get: () => (defaultValue === undefined ? 0 : defaultValue)\n                    },\n                    maxValue: {\n                        get: () => (maxValue === undefined ? MOST_POSITIVE_SINGLE_FLOAT : maxValue)\n                    },\n                    minValue: {\n                        get: () => (minValue === undefined ? MOST_NEGATIVE_SINGLE_FLOAT : minValue)\n                    }\n                });\n\n                constantSourceNodes.push(constantSourceNode);\n            }\n        }\n\n        const inputChannelMergerNode = createNativeChannelMergerNode(nativeContext, {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'speakers',\n            numberOfInputs: Math.max(1, numberOfInputChannels + numberOfParameters)\n        });\n        const bufferSize = computeBufferSize(baseLatency, nativeContext.sampleRate);\n        const scriptProcessorNode = createNativeScriptProcessorNode(\n            nativeContext,\n            bufferSize,\n            numberOfInputChannels + numberOfParameters,\n            // Bug #87: Only Firefox will fire an AudioProcessingEvent if there is no connected output.\n            Math.max(1, numberOfOutputChannels)\n        );\n        const outputChannelSplitterNode = createNativeChannelSplitterNode(nativeContext, {\n            channelCount: Math.max(1, numberOfOutputChannels),\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete',\n            numberOfOutputs: Math.max(1, numberOfOutputChannels)\n        });\n        const outputChannelMergerNodes: TNativeChannelMergerNode[] = [];\n\n        for (let i = 0; i < options.numberOfOutputs; i += 1) {\n            outputChannelMergerNodes.push(\n                createNativeChannelMergerNode(nativeContext, {\n                    channelCount: 1,\n                    channelCountMode: 'explicit',\n                    channelInterpretation: 'speakers',\n                    numberOfInputs: outputChannelCount[i]\n                })\n            );\n        }\n\n        for (let i = 0; i < options.numberOfInputs; i += 1) {\n            gainNodes[i].connect(inputChannelSplitterNodes[i]);\n\n            for (let j = 0; j < options.channelCount; j += 1) {\n                inputChannelSplitterNodes[i].connect(inputChannelMergerNode, j, i * options.channelCount + j);\n            }\n        }\n\n        const parameterMap = new ReadOnlyMap(\n            processorConstructor.parameterDescriptors === undefined\n                ? []\n                : processorConstructor.parameterDescriptors.map(({ name }, index) => {\n                      const constantSourceNode = constantSourceNodes[index];\n\n                      constantSourceNode.connect(inputChannelMergerNode, 0, numberOfInputChannels + index);\n                      constantSourceNode.start(0);\n\n                      return <[string, TNativeAudioParam]>[name, constantSourceNode.offset];\n                  })\n        );\n\n        inputChannelMergerNode.connect(scriptProcessorNode);\n\n        let channelInterpretation = options.channelInterpretation;\n        let onprocessorerror: TNativeAudioWorkletNode['onprocessorerror'] = null;\n\n        // Bug #87: Expose at least one output to make this node connectable.\n        const outputAudioNodes = options.numberOfOutputs === 0 ? [scriptProcessorNode] : outputChannelMergerNodes;\n        const nativeAudioWorkletNodeFaker = {\n            get bufferSize(): number {\n                return bufferSize;\n            },\n            get channelCount(): number {\n                return options.channelCount;\n            },\n            set channelCount(_) {\n                // Bug #61: This is not part of the standard but required for the faker to work.\n                throw createInvalidStateError();\n            },\n            get channelCountMode(): TNativeAudioWorkletNode['channelCountMode'] {\n                return options.channelCountMode;\n            },\n            set channelCountMode(_) {\n                // Bug #61: This is not part of the standard but required for the faker to work.\n                throw createInvalidStateError();\n            },\n            get channelInterpretation(): TNativeAudioWorkletNode['channelInterpretation'] {\n                return channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                for (const gainNode of gainNodes) {\n                    gainNode.channelInterpretation = value;\n                }\n\n                channelInterpretation = value;\n            },\n            get context(): TNativeAudioWorkletNode['context'] {\n                return scriptProcessorNode.context;\n            },\n            get inputs(): TNativeAudioNode[] {\n                return gainNodes;\n            },\n            get numberOfInputs(): number {\n                return options.numberOfInputs;\n            },\n            get numberOfOutputs(): number {\n                return options.numberOfOutputs;\n            },\n            get onprocessorerror(): TNativeAudioWorkletNode['onprocessorerror'] {\n                return onprocessorerror;\n            },\n            set onprocessorerror(value) {\n                if (typeof onprocessorerror === 'function') {\n                    nativeAudioWorkletNodeFaker.removeEventListener('processorerror', onprocessorerror);\n                }\n\n                onprocessorerror = typeof value === 'function' ? value : null;\n\n                if (typeof onprocessorerror === 'function') {\n                    nativeAudioWorkletNodeFaker.addEventListener('processorerror', onprocessorerror);\n                }\n            },\n            get parameters(): TNativeAudioWorkletNode['parameters'] {\n                return parameterMap;\n            },\n            get port(): TNativeAudioWorkletNode['port'] {\n                return messageChannel.port2;\n            },\n            addEventListener(...args: any[]): void {\n                return scriptProcessorNode.addEventListener(args[0], args[1], args[2]);\n            },\n            connect: <TNativeAudioNode['connect']>connectMultipleOutputs.bind(null, outputAudioNodes),\n            disconnect: <TNativeAudioNode['disconnect']>disconnectMultipleOutputs.bind(null, outputAudioNodes),\n            dispatchEvent(...args: any[]): boolean {\n                return scriptProcessorNode.dispatchEvent(args[0]);\n            },\n            removeEventListener(...args: any[]): void {\n                return scriptProcessorNode.removeEventListener(args[0], args[1], args[2]);\n            }\n        };\n\n        const patchedEventListeners: Map<EventListenerOrEventListenerObject, NonNullable<MessagePort['onmessage']>> = new Map();\n\n        messageChannel.port1.addEventListener = ((addEventListener) => {\n            return (...args: [string, EventListenerOrEventListenerObject, (boolean | AddEventListenerOptions)?]): void => {\n                if (args[0] === 'message') {\n                    const unpatchedEventListener =\n                        typeof args[1] === 'function'\n                            ? args[1]\n                            : typeof args[1] === 'object' && args[1] !== null && typeof args[1].handleEvent === 'function'\n                            ? args[1].handleEvent\n                            : null;\n\n                    if (unpatchedEventListener !== null) {\n                        const patchedEventListener = patchedEventListeners.get(args[1]);\n\n                        if (patchedEventListener !== undefined) {\n                            args[1] = <EventListenerOrEventListenerObject>patchedEventListener;\n                        } else {\n                            args[1] = (event: Event) => {\n                                exposeCurrentFrameAndCurrentTime(nativeContext.currentTime, nativeContext.sampleRate, () =>\n                                    unpatchedEventListener(event)\n                                );\n                            };\n\n                            patchedEventListeners.set(unpatchedEventListener, args[1]);\n                        }\n                    }\n                }\n\n                return addEventListener.call(messageChannel.port1, args[0], args[1], args[2]);\n            };\n        })(messageChannel.port1.addEventListener);\n\n        messageChannel.port1.removeEventListener = ((removeEventListener) => {\n            return (...args: any[]): void => {\n                if (args[0] === 'message') {\n                    const patchedEventListener = patchedEventListeners.get(args[1]);\n\n                    if (patchedEventListener !== undefined) {\n                        patchedEventListeners.delete(args[1]);\n\n                        args[1] = patchedEventListener;\n                    }\n                }\n\n                return removeEventListener.call(messageChannel.port1, args[0], args[1], args[2]);\n            };\n        })(messageChannel.port1.removeEventListener);\n\n        let onmessage: MessagePort['onmessage'] = null;\n\n        Object.defineProperty(messageChannel.port1, 'onmessage', {\n            get: () => onmessage,\n            set: (value) => {\n                if (typeof onmessage === 'function') {\n                    messageChannel.port1.removeEventListener('message', onmessage);\n                }\n\n                onmessage = typeof value === 'function' ? value : null;\n\n                if (typeof onmessage === 'function') {\n                    messageChannel.port1.addEventListener('message', onmessage);\n                    messageChannel.port1.start();\n                }\n            }\n        });\n\n        processorConstructor.prototype.port = messageChannel.port1;\n\n        let audioWorkletProcessor: null | IAudioWorkletProcessor = null;\n\n        const audioWorkletProcessorPromise = createAudioWorkletProcessor(\n            nativeContext,\n            nativeAudioWorkletNodeFaker,\n            processorConstructor,\n            options\n        );\n\n        audioWorkletProcessorPromise.then((dWrkltPrcssr) => (audioWorkletProcessor = dWrkltPrcssr));\n\n        const inputs = createNestedArrays(options.numberOfInputs, options.channelCount);\n        const outputs = createNestedArrays(options.numberOfOutputs, outputChannelCount);\n        const parameters: { [name: string]: Float32Array } =\n            processorConstructor.parameterDescriptors === undefined\n                ? []\n                : processorConstructor.parameterDescriptors.reduce(\n                      (prmtrs, { name }) => ({ ...prmtrs, [name]: new Float32Array(128) }),\n                      {}\n                  );\n\n        let isActive = true;\n\n        const disconnectOutputsGraph = () => {\n            if (options.numberOfOutputs > 0) {\n                scriptProcessorNode.disconnect(outputChannelSplitterNode);\n            }\n\n            for (let i = 0, outputChannelSplitterNodeOutput = 0; i < options.numberOfOutputs; i += 1) {\n                const outputChannelMergerNode = outputChannelMergerNodes[i];\n\n                for (let j = 0; j < outputChannelCount[i]; j += 1) {\n                    outputChannelSplitterNode.disconnect(outputChannelMergerNode, outputChannelSplitterNodeOutput + j, j);\n                }\n\n                outputChannelSplitterNodeOutput += outputChannelCount[i];\n            }\n        };\n\n        const activeInputIndexes = new Map<number, number>();\n\n        // tslint:disable-next-line:deprecation\n        scriptProcessorNode.onaudioprocess = ({ inputBuffer, outputBuffer }: AudioProcessingEvent) => {\n            if (audioWorkletProcessor !== null) {\n                const activeInputs = getActiveAudioWorkletNodeInputs(nativeAudioWorkletNodeFaker);\n\n                for (let i = 0; i < bufferSize; i += 128) {\n                    for (let j = 0; j < options.numberOfInputs; j += 1) {\n                        for (let k = 0; k < options.channelCount; k += 1) {\n                            copyFromChannel(inputBuffer, inputs[j], k, k, i);\n                        }\n                    }\n\n                    if (processorConstructor.parameterDescriptors !== undefined) {\n                        processorConstructor.parameterDescriptors.forEach(({ name }, index) => {\n                            copyFromChannel(inputBuffer, parameters, name, numberOfInputChannels + index, i);\n                        });\n                    }\n\n                    for (let j = 0; j < options.numberOfInputs; j += 1) {\n                        for (let k = 0; k < outputChannelCount[j]; k += 1) {\n                            // The byteLength will be 0 when the ArrayBuffer was transferred.\n                            if (outputs[j][k].byteLength === 0) {\n                                outputs[j][k] = new Float32Array(128);\n                            }\n                        }\n                    }\n\n                    try {\n                        const potentiallyEmptyInputs = inputs.map((input, index) => {\n                            const activeInput = activeInputs[index];\n\n                            if (activeInput.size > 0) {\n                                activeInputIndexes.set(index, bufferSize / 128);\n\n                                return input;\n                            }\n\n                            const count = activeInputIndexes.get(index);\n\n                            if (count === undefined) {\n                                return [];\n                            }\n\n                            if (input.every((channelData) => channelData.every((sample) => sample === 0))) {\n                                if (count === 1) {\n                                    activeInputIndexes.delete(index);\n                                } else {\n                                    activeInputIndexes.set(index, count - 1);\n                                }\n                            }\n\n                            return input;\n                        });\n\n                        const activeSourceFlag = exposeCurrentFrameAndCurrentTime(\n                            nativeContext.currentTime + i / nativeContext.sampleRate,\n                            nativeContext.sampleRate,\n                            () => (<IAudioWorkletProcessor>audioWorkletProcessor).process(potentiallyEmptyInputs, outputs, parameters)\n                        );\n\n                        isActive = activeSourceFlag;\n\n                        for (let j = 0, outputChannelSplitterNodeOutput = 0; j < options.numberOfOutputs; j += 1) {\n                            for (let k = 0; k < outputChannelCount[j]; k += 1) {\n                                copyToChannel(outputBuffer, outputs[j], k, outputChannelSplitterNodeOutput + k, i);\n                            }\n\n                            outputChannelSplitterNodeOutput += outputChannelCount[j];\n                        }\n                    } catch (error) {\n                        isActive = false;\n\n                        nativeAudioWorkletNodeFaker.dispatchEvent(\n                            new ErrorEvent('processorerror', {\n                                colno: error.colno,\n                                filename: error.filename,\n                                lineno: error.lineno,\n                                message: error.message\n                            })\n                        );\n                    }\n\n                    if (!isActive) {\n                        for (let j = 0; j < options.numberOfInputs; j += 1) {\n                            gainNodes[j].disconnect(inputChannelSplitterNodes[j]);\n\n                            for (let k = 0; k < options.channelCount; k += 1) {\n                                inputChannelSplitterNodes[i].disconnect(inputChannelMergerNode, k, j * options.channelCount + k);\n                            }\n                        }\n\n                        if (processorConstructor.parameterDescriptors !== undefined) {\n                            const length = processorConstructor.parameterDescriptors.length;\n\n                            for (let j = 0; j < length; j += 1) {\n                                const constantSourceNode = constantSourceNodes[j];\n\n                                constantSourceNode.disconnect(inputChannelMergerNode, 0, numberOfInputChannels + j);\n                                constantSourceNode.stop();\n                            }\n                        }\n\n                        inputChannelMergerNode.disconnect(scriptProcessorNode);\n\n                        scriptProcessorNode.onaudioprocess = null; // tslint:disable-line:deprecation\n\n                        if (isConnected) {\n                            disconnectOutputsGraph();\n                        } else {\n                            disconnectFakeGraph();\n                        }\n\n                        break;\n                    }\n                }\n            }\n        };\n\n        let isConnected = false;\n\n        // Bug #87: Only Firefox will fire an AudioProcessingEvent if there is no connected output.\n        const nativeGainNode = createNativeGainNode(nativeContext, {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete',\n            gain: 0\n        });\n\n        const connectFakeGraph = () => scriptProcessorNode.connect(nativeGainNode).connect(nativeContext.destination);\n        const disconnectFakeGraph = () => {\n            scriptProcessorNode.disconnect(nativeGainNode);\n            nativeGainNode.disconnect();\n        };\n        const whenConnected = () => {\n            if (isActive) {\n                disconnectFakeGraph();\n\n                if (options.numberOfOutputs > 0) {\n                    scriptProcessorNode.connect(outputChannelSplitterNode);\n                }\n\n                for (let i = 0, outputChannelSplitterNodeOutput = 0; i < options.numberOfOutputs; i += 1) {\n                    const outputChannelMergerNode = outputChannelMergerNodes[i];\n\n                    for (let j = 0; j < outputChannelCount[i]; j += 1) {\n                        outputChannelSplitterNode.connect(outputChannelMergerNode, outputChannelSplitterNodeOutput + j, j);\n                    }\n\n                    outputChannelSplitterNodeOutput += outputChannelCount[i];\n                }\n            }\n\n            isConnected = true;\n        };\n        const whenDisconnected = () => {\n            if (isActive) {\n                connectFakeGraph();\n                disconnectOutputsGraph();\n            }\n\n            isConnected = false;\n        };\n\n        connectFakeGraph();\n\n        return monitorConnections(nativeAudioWorkletNodeFaker, whenConnected, whenDisconnected);\n    };\n};\n", "import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { TNativeBiquadFilterNodeFactory } from '../types';\n\nexport const createNativeBiquadFilterNode: TNativeBiquadFilterNodeFactory = (nativeContext, options) => {\n    const nativeBiquadFilterNode = nativeContext.createBiquadFilter();\n\n    assignNativeAudioNodeOptions(nativeBiquadFilterNode, options);\n\n    assignNativeAudioNodeAudioParamValue(nativeBiquadFilterNode, options, 'Q');\n    assignNativeAudioNodeAudioParamValue(nativeBiquadFilterNode, options, 'detune');\n    assignNativeAudioNodeAudioParamValue(nativeBiquadFilterNode, options, 'frequency');\n    assignNativeAudioNodeAudioParamValue(nativeBiquadFilterNode, options, 'gain');\n\n    assignNativeAudioNodeOption(nativeBiquadFilterNode, options, 'type');\n\n    return nativeBiquadFilterNode;\n};\n", "import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { TNativeChannelMergerNodeFactoryFactory } from '../types';\n\nexport const createNativeChannelMergerNodeFactory: TNativeChannelMergerNodeFactoryFactory = (\n    nativeAudioContextConstructor,\n    wrapChannelMergerNode\n) => {\n    return (nativeContext, options) => {\n        const nativeChannelMergerNode = nativeContext.createChannelMerger(options.numberOfInputs);\n\n        /*\n         * Bug #20: Safari requires a connection of any kind to treat the input signal correctly.\n         * @todo Unfortunately there is no way to test for this behavior in a synchronous fashion which is why testing for the existence of\n         * the webkitAudioContext is used as a workaround here.\n         */\n        if (nativeAudioContextConstructor !== null && nativeAudioContextConstructor.name === 'webkitAudioContext') {\n            wrapChannelMergerNode(nativeContext, nativeChannelMergerNode);\n        }\n\n        assignNativeAudioNodeOptions(nativeChannelMergerNode, options);\n\n        return nativeChannelMergerNode;\n    };\n};\n", "import { createInvalidStateError } from '../factories/invalid-state-error';\nimport { TNativeChannelSplitterNode } from '../types';\n\nexport const wrapChannelSplitterNode = (channelSplitterNode: TNativeChannelSplitterNode): void => {\n    const channelCount = channelSplitterNode.numberOfOutputs;\n\n    // Bug #97: Safari does not throw an error when attempting to change the channelCount to something other than its initial value.\n    Object.defineProperty(channelSplitterNode, 'channelCount', {\n        get: () => channelCount,\n        set: (value) => {\n            if (value !== channelCount) {\n                throw createInvalidStateError();\n            }\n        }\n    });\n\n    // Bug #30: Safari does not throw an error when attempting to change the channelCountMode to something other than explicit.\n    Object.defineProperty(channelSplitterNode, 'channelCountMode', {\n        get: () => 'explicit',\n        set: (value) => {\n            if (value !== 'explicit') {\n                throw createInvalidStateError();\n            }\n        }\n    });\n\n    // Bug #32: Safari does not throw an error when attempting to change the channelInterpretation to something other than discrete.\n    Object.defineProperty(channelSplitterNode, 'channelInterpretation', {\n        get: () => 'discrete',\n        set: (value) => {\n            if (value !== 'discrete') {\n                throw createInvalidStateError();\n            }\n        }\n    });\n};\n", "import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { wrapChannelSplitterNode } from '../helpers/wrap-channel-splitter-node';\nimport { TNativeChannelSplitterNodeFactory } from '../types';\n\nexport const createNativeChannelSplitterNode: TNativeChannelSplitterNodeFactory = (nativeContext, options) => {\n    const nativeChannelSplitterNode = nativeContext.createChannelSplitter(options.numberOfOutputs);\n\n    // Bug #96: Safari does not have the correct channelCount.\n    // Bug #29: Safari does not have the correct channelCountMode.\n    // Bug #31: Safari does not have the correct channelInterpretation.\n    assignNativeAudioNodeOptions(nativeChannelSplitterNode, options);\n\n    // Bug #29, #30, #31, #32, #96 & #97: Only Chrome, Edge & Firefox partially support the spec yet.\n    wrapChannelSplitterNode(nativeChannelSplitterNode);\n\n    return nativeChannelSplitterNode;\n};\n", "import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { wrapAudioScheduledSourceNodeStartMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters';\nimport { wrapAudioScheduledSourceNodeStopMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters';\nimport { TNativeConstantSourceNodeFactoryFactory } from '../types';\n\nexport const createNativeConstantSourceNodeFactory: TNativeConstantSourceNodeFactoryFactory = (\n    addSilentConnection,\n    cacheTestResult,\n    createNativeConstantSourceNodeFaker,\n    testAudioScheduledSourceNodeStartMethodNegativeParametersSupport,\n    testAudioScheduledSourceNodeStopMethodNegativeParametersSupport\n) => {\n    return (nativeContext, options) => {\n        // Bug #62: Safari does not support ConstantSourceNodes.\n        if (nativeContext.createConstantSource === undefined) {\n            return createNativeConstantSourceNodeFaker(nativeContext, options);\n        }\n\n        const nativeConstantSourceNode = nativeContext.createConstantSource();\n\n        assignNativeAudioNodeOptions(nativeConstantSourceNode, options);\n\n        assignNativeAudioNodeAudioParamValue(nativeConstantSourceNode, options, 'offset');\n\n        // Bug #44: Safari does not throw a RangeError yet.\n        if (\n            !cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, () =>\n                testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext)\n            )\n        ) {\n            wrapAudioScheduledSourceNodeStartMethodNegativeParameters(nativeConstantSourceNode);\n        }\n\n        // Bug #44: Only Firefox does not throw a RangeError yet.\n        if (\n            !cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, () =>\n                testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext)\n            )\n        ) {\n            wrapAudioScheduledSourceNodeStopMethodNegativeParameters(nativeConstantSourceNode);\n        }\n\n        // Bug #175: Safari will not fire an ended event if the ConstantSourceNode is unconnected.\n        addSilentConnection(nativeContext, nativeConstantSourceNode);\n\n        return nativeConstantSourceNode;\n    };\n};\n", "import { TNativeAudioNode } from '../types';\n\nexport const interceptConnections = <T extends object>(\n    original: T,\n    interceptor: TNativeAudioNode\n): T & { connect: TNativeAudioNode['connect']; disconnect: TNativeAudioNode['disconnect'] } => {\n    (<T & { connect: TNativeAudioNode['connect'] }>original).connect = interceptor.connect.bind(interceptor);\n\n    (<T & { disconnect: TNativeAudioNode['disconnect'] }>original).disconnect = interceptor.disconnect.bind(interceptor);\n\n    return <T & { connect: TNativeAudioNode['connect']; disconnect: TNativeAudioNode['disconnect'] }>original;\n};\n", "import { interceptConnections } from '../helpers/intercept-connections';\nimport {\n    TNativeAudioBufferSourceNode,\n    TNativeAudioNode,\n    TNativeConstantSourceNode,\n    TNativeConstantSourceNodeFakerFactoryFactory\n} from '../types';\n\nexport const createNativeConstantSourceNodeFakerFactory: TNativeConstantSourceNodeFakerFactoryFactory = (\n    addSilentConnection,\n    createNativeAudioBufferSourceNode,\n    createNativeGainNode,\n    monitorConnections\n) => {\n    return (nativeContext, { offset, ...audioNodeOptions }) => {\n        const audioBuffer = nativeContext.createBuffer(1, 2, 44100);\n        const audioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext, {\n            buffer: null,\n            channelCount: 2,\n            channelCountMode: 'max',\n            channelInterpretation: 'speakers',\n            loop: false,\n            loopEnd: 0,\n            loopStart: 0,\n            playbackRate: 1\n        });\n        const gainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: offset });\n\n        // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n        const channelData = audioBuffer.getChannelData(0);\n\n        // Bug #95: Safari does not play or loop one sample buffers.\n        channelData[0] = 1;\n        channelData[1] = 1;\n\n        audioBufferSourceNode.buffer = audioBuffer;\n        audioBufferSourceNode.loop = true;\n\n        const nativeConstantSourceNodeFaker = {\n            get bufferSize(): undefined {\n                return undefined;\n            },\n            get channelCount(): number {\n                return gainNode.channelCount;\n            },\n            set channelCount(value) {\n                gainNode.channelCount = value;\n            },\n            get channelCountMode(): TNativeConstantSourceNode['channelCountMode'] {\n                return gainNode.channelCountMode;\n            },\n            set channelCountMode(value) {\n                gainNode.channelCountMode = value;\n            },\n            get channelInterpretation(): TNativeConstantSourceNode['channelInterpretation'] {\n                return gainNode.channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                gainNode.channelInterpretation = value;\n            },\n            get context(): TNativeConstantSourceNode['context'] {\n                return gainNode.context;\n            },\n            get inputs(): TNativeAudioNode[] {\n                return [];\n            },\n            get numberOfInputs(): number {\n                return audioBufferSourceNode.numberOfInputs;\n            },\n            get numberOfOutputs(): number {\n                return gainNode.numberOfOutputs;\n            },\n            get offset(): TNativeConstantSourceNode['offset'] {\n                return gainNode.gain;\n            },\n            get onended(): TNativeConstantSourceNode['onended'] {\n                return audioBufferSourceNode.onended;\n            },\n            set onended(value) {\n                audioBufferSourceNode.onended = <TNativeAudioBufferSourceNode['onended']>value;\n            },\n            addEventListener(...args: any[]): void {\n                return audioBufferSourceNode.addEventListener(args[0], args[1], args[2]);\n            },\n            dispatchEvent(...args: any[]): boolean {\n                return audioBufferSourceNode.dispatchEvent(args[0]);\n            },\n            removeEventListener(...args: any[]): void {\n                return audioBufferSourceNode.removeEventListener(args[0], args[1], args[2]);\n            },\n            start(when = 0): void {\n                audioBufferSourceNode.start.call(audioBufferSourceNode, when);\n            },\n            stop(when = 0): void {\n                audioBufferSourceNode.stop.call(audioBufferSourceNode, when);\n            }\n        };\n\n        const whenConnected = () => audioBufferSourceNode.connect(gainNode);\n        const whenDisconnected = () => audioBufferSourceNode.disconnect(gainNode);\n\n        // Bug #175: Safari will not fire an ended event if the AudioBufferSourceNode is unconnected.\n        addSilentConnection(nativeContext, audioBufferSourceNode);\n\n        return monitorConnections(interceptConnections(nativeConstantSourceNodeFaker, gainNode), whenConnected, whenDisconnected);\n    };\n};\n", "import { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { TNativeConvolverNodeFactoryFactory } from '../types';\n\nexport const createNativeConvolverNodeFactory: TNativeConvolverNodeFactoryFactory = (createNotSupportedError, overwriteAccessors) => {\n    return (nativeContext, options) => {\n        const nativeConvolverNode = nativeContext.createConvolver();\n\n        assignNativeAudioNodeOptions(nativeConvolverNode, options);\n\n        // The normalize property needs to be set before setting the buffer.\n        if (options.disableNormalization === nativeConvolverNode.normalize) {\n            nativeConvolverNode.normalize = !options.disableNormalization;\n        }\n\n        assignNativeAudioNodeOption(nativeConvolverNode, options, 'buffer');\n\n        // Bug #113: Safari does allow to set the channelCount to a value larger than 2.\n        if (options.channelCount > 2) {\n            throw createNotSupportedError();\n        }\n\n        overwriteAccessors(\n            nativeConvolverNode,\n            'channelCount',\n            (get) => () => get.call(nativeConvolverNode),\n            (set) => (value) => {\n                if (value > 2) {\n                    throw createNotSupportedError();\n                }\n\n                return set.call(nativeConvolverNode, value);\n            }\n        );\n\n        // Bug #114: Safari allows to set the channelCountMode to 'max'.\n        if (options.channelCountMode === 'max') {\n            throw createNotSupportedError();\n        }\n\n        overwriteAccessors(\n            nativeConvolverNode,\n            'channelCountMode',\n            (get) => () => get.call(nativeConvolverNode),\n            (set) => (value) => {\n                if (value === 'max') {\n                    throw createNotSupportedError();\n                }\n\n                return set.call(nativeConvolverNode, value);\n            }\n        );\n\n        return nativeConvolverNode;\n    };\n};\n", "import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { TNativeDelayNodeFactory } from '../types';\n\nexport const createNativeDelayNode: TNativeDelayNodeFactory = (nativeContext, options) => {\n    const nativeDelayNode = nativeContext.createDelay(options.maxDelayTime);\n\n    assignNativeAudioNodeOptions(nativeDelayNode, options);\n\n    assignNativeAudioNodeAudioParamValue(nativeDelayNode, options, 'delayTime');\n\n    return nativeDelayNode;\n};\n", "import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { TNativeDynamicsCompressorNodeFactoryFactory } from '../types';\n\nexport const createNativeDynamicsCompressorNodeFactory: TNativeDynamicsCompressorNodeFactoryFactory = (createNotSupportedError) => {\n    return (nativeContext, options) => {\n        const nativeDynamicsCompressorNode = nativeContext.createDynamicsCompressor();\n\n        assignNativeAudioNodeOptions(nativeDynamicsCompressorNode, options);\n\n        // Bug #108: Safari allows a channelCount of three and above.\n        if (options.channelCount > 2) {\n            throw createNotSupportedError();\n        }\n\n        // Bug #109: Only Chrome and Firefox disallow a channelCountMode of 'max'.\n        if (options.channelCountMode === 'max') {\n            throw createNotSupportedError();\n        }\n\n        assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, 'attack');\n        assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, 'knee');\n        assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, 'ratio');\n        assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, 'release');\n        assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, 'threshold');\n\n        return nativeDynamicsCompressorNode;\n    };\n};\n", "import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { TNativeGainNodeFactory } from '../types';\n\nexport const createNativeGainNode: TNativeGainNodeFactory = (nativeContext, options) => {\n    const nativeGainNode = nativeContext.createGain();\n\n    assignNativeAudioNodeOptions(nativeGainNode, options);\n\n    assignNativeAudioNodeAudioParamValue(nativeGainNode, options, 'gain');\n\n    return nativeGainNode;\n};\n", "import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { TNativeIIRFilterNodeFactoryFactory } from '../types';\n\nexport const createNativeIIRFilterNodeFactory: TNativeIIRFilterNodeFactoryFactory = (createNativeIIRFilterNodeFaker) => {\n    return (nativeContext, baseLatency, options) => {\n        // Bug #9: Safari does not support IIRFilterNodes.\n        if (nativeContext.createIIRFilter === undefined) {\n            return createNativeIIRFilterNodeFaker(nativeContext, baseLatency, options);\n        }\n\n        // @todo TypeScript defines the parameters of createIIRFilter() as arrays of numbers.\n        const nativeIIRFilterNode = nativeContext.createIIRFilter(<number[]>options.feedforward, <number[]>options.feedback);\n\n        assignNativeAudioNodeOptions(nativeIIRFilterNode, options);\n\n        return nativeIIRFilterNode;\n    };\n};\n", "import { computeBufferSize } from '../helpers/compute-buffer-size';\nimport { filterBuffer } from '../helpers/filter-buffer';\nimport { interceptConnections } from '../helpers/intercept-connections';\nimport { TNativeAudioNode, TNativeIIRFilterNode, TNativeIIRFilterNodeFakerFactoryFactory } from '../types';\n\nfunction divide(a: [number, number], b: [number, number]): [number, number] {\n    const denominator = b[0] * b[0] + b[1] * b[1];\n\n    return [(a[0] * b[0] + a[1] * b[1]) / denominator, (a[1] * b[0] - a[0] * b[1]) / denominator];\n}\n\nfunction multiply(a: [number, number], b: [number, number]): [number, number] {\n    return [a[0] * b[0] - a[1] * b[1], a[0] * b[1] + a[1] * b[0]];\n}\n\nfunction evaluatePolynomial(coefficient: Float64Array, z: [number, number]): [number, number] {\n    let result: [number, number] = [0, 0];\n\n    for (let i = coefficient.length - 1; i >= 0; i -= 1) {\n        result = multiply(result, z);\n\n        result[0] += coefficient[i];\n    }\n\n    return result;\n}\n\nexport const createNativeIIRFilterNodeFakerFactory: TNativeIIRFilterNodeFakerFactoryFactory = (\n    createInvalidAccessError,\n    createInvalidStateError,\n    createNativeScriptProcessorNode,\n    createNotSupportedError\n) => {\n    return (nativeContext, baseLatency, { channelCount, channelCountMode, channelInterpretation, feedback, feedforward }) => {\n        const bufferSize = computeBufferSize(baseLatency, nativeContext.sampleRate);\n        const convertedFeedback = feedback instanceof Float64Array ? feedback : new Float64Array(feedback);\n        const convertedFeedforward = feedforward instanceof Float64Array ? feedforward : new Float64Array(feedforward);\n        const feedbackLength = convertedFeedback.length;\n        const feedforwardLength = convertedFeedforward.length;\n        const minLength = Math.min(feedbackLength, feedforwardLength);\n\n        if (feedbackLength === 0 || feedbackLength > 20) {\n            throw createNotSupportedError();\n        }\n\n        if (convertedFeedback[0] === 0) {\n            throw createInvalidStateError();\n        }\n\n        if (feedforwardLength === 0 || feedforwardLength > 20) {\n            throw createNotSupportedError();\n        }\n\n        if (convertedFeedforward[0] === 0) {\n            throw createInvalidStateError();\n        }\n\n        if (convertedFeedback[0] !== 1) {\n            for (let i = 0; i < feedforwardLength; i += 1) {\n                convertedFeedforward[i] /= convertedFeedback[0];\n            }\n\n            for (let i = 1; i < feedbackLength; i += 1) {\n                convertedFeedback[i] /= convertedFeedback[0];\n            }\n        }\n\n        const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, bufferSize, channelCount, channelCount);\n\n        scriptProcessorNode.channelCount = channelCount;\n        scriptProcessorNode.channelCountMode = channelCountMode;\n        scriptProcessorNode.channelInterpretation = channelInterpretation;\n\n        const bufferLength = 32;\n        const bufferIndexes: number[] = [];\n        const xBuffers: Float32Array[] = [];\n        const yBuffers: Float32Array[] = [];\n\n        for (let i = 0; i < channelCount; i += 1) {\n            bufferIndexes.push(0);\n\n            const xBuffer = new Float32Array(bufferLength);\n            const yBuffer = new Float32Array(bufferLength);\n\n            xBuffer.fill(0);\n            yBuffer.fill(0);\n\n            xBuffers.push(xBuffer);\n            yBuffers.push(yBuffer);\n        }\n\n        // tslint:disable-next-line:deprecation\n        scriptProcessorNode.onaudioprocess = (event: AudioProcessingEvent) => {\n            const inputBuffer = event.inputBuffer;\n            const outputBuffer = event.outputBuffer;\n\n            const numberOfChannels = inputBuffer.numberOfChannels;\n\n            for (let i = 0; i < numberOfChannels; i += 1) {\n                const input = inputBuffer.getChannelData(i);\n                const output = outputBuffer.getChannelData(i);\n\n                bufferIndexes[i] = filterBuffer(\n                    convertedFeedback,\n                    feedbackLength,\n                    convertedFeedforward,\n                    feedforwardLength,\n                    minLength,\n                    xBuffers[i],\n                    yBuffers[i],\n                    bufferIndexes[i],\n                    bufferLength,\n                    input,\n                    output\n                );\n            }\n        };\n\n        const nyquist = nativeContext.sampleRate / 2;\n\n        const nativeIIRFilterNodeFaker = {\n            get bufferSize(): number {\n                return bufferSize;\n            },\n            get channelCount(): number {\n                return scriptProcessorNode.channelCount;\n            },\n            set channelCount(value) {\n                scriptProcessorNode.channelCount = value;\n            },\n            get channelCountMode(): TNativeIIRFilterNode['channelCountMode'] {\n                return scriptProcessorNode.channelCountMode;\n            },\n            set channelCountMode(value) {\n                scriptProcessorNode.channelCountMode = value;\n            },\n            get channelInterpretation(): TNativeIIRFilterNode['channelInterpretation'] {\n                return scriptProcessorNode.channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                scriptProcessorNode.channelInterpretation = value;\n            },\n            get context(): TNativeIIRFilterNode['context'] {\n                return scriptProcessorNode.context;\n            },\n            get inputs(): TNativeAudioNode[] {\n                return [scriptProcessorNode];\n            },\n            get numberOfInputs(): number {\n                return scriptProcessorNode.numberOfInputs;\n            },\n            get numberOfOutputs(): number {\n                return scriptProcessorNode.numberOfOutputs;\n            },\n            addEventListener(...args: any[]): void {\n                // @todo Dissallow adding an audioprocess listener.\n                return scriptProcessorNode.addEventListener(args[0], args[1], args[2]);\n            },\n            dispatchEvent(...args: any[]): boolean {\n                return scriptProcessorNode.dispatchEvent(args[0]);\n            },\n            getFrequencyResponse(frequencyHz: Float32Array, magResponse: Float32Array, phaseResponse: Float32Array): void {\n                if (frequencyHz.length !== magResponse.length || magResponse.length !== phaseResponse.length) {\n                    throw createInvalidAccessError();\n                }\n\n                const length = frequencyHz.length;\n\n                for (let i = 0; i < length; i += 1) {\n                    const omega = -Math.PI * (frequencyHz[i] / nyquist);\n                    const z: [number, number] = [Math.cos(omega), Math.sin(omega)];\n                    const numerator = evaluatePolynomial(convertedFeedforward, z);\n                    const denominator = evaluatePolynomial(convertedFeedback, z);\n                    const response = divide(numerator, denominator);\n\n                    magResponse[i] = Math.sqrt(response[0] * response[0] + response[1] * response[1]);\n                    phaseResponse[i] = Math.atan2(response[1], response[0]);\n                }\n            },\n            removeEventListener(...args: any[]): void {\n                return scriptProcessorNode.removeEventListener(args[0], args[1], args[2]);\n            }\n        };\n\n        return interceptConnections(nativeIIRFilterNodeFaker, scriptProcessorNode);\n    };\n};\n", "import { TNativeMediaElementAudioSourceNodeFactory } from '../types';\n\nexport const createNativeMediaElementAudioSourceNode: TNativeMediaElementAudioSourceNodeFactory = (nativeAudioContext, options) => {\n    return nativeAudioContext.createMediaElementSource(options.mediaElement);\n};\n", "import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { TNativeMediaStreamAudioDestinationNodeFactory } from '../types';\n\nexport const createNativeMediaStreamAudioDestinationNode: TNativeMediaStreamAudioDestinationNodeFactory = (nativeAudioContext, options) => {\n    const nativeMediaStreamAudioDestinationNode = nativeAudioContext.createMediaStreamDestination();\n\n    assignNativeAudioNodeOptions(nativeMediaStreamAudioDestinationNode, options);\n\n    // Bug #174: Safari does expose a wrong numberOfOutputs.\n    if (nativeMediaStreamAudioDestinationNode.numberOfOutputs === 1) {\n        Object.defineProperty(nativeMediaStreamAudioDestinationNode, 'numberOfOutputs', { get: () => 0 });\n    }\n\n    return nativeMediaStreamAudioDestinationNode;\n};\n", "import { TNativeMediaStreamAudioSourceNodeFactory } from '../types';\n\nexport const createNativeMediaStreamAudioSourceNode: TNativeMediaStreamAudioSourceNodeFactory = (nativeAudioContext, { mediaStream }) => {\n    const audioStreamTracks = mediaStream.getAudioTracks();\n    /*\n     * Bug #151: Safari does not use the audio track as input anymore if it gets removed from the mediaStream after construction.\n     * Bug #159: Safari picks the first audio track if the MediaStream has more than one audio track.\n     */\n    audioStreamTracks.sort((a, b) => (a.id < b.id ? -1 : a.id > b.id ? 1 : 0));\n\n    const filteredAudioStreamTracks = audioStreamTracks.slice(0, 1);\n\n    const nativeMediaStreamAudioSourceNode = nativeAudioContext.createMediaStreamSource(new MediaStream(filteredAudioStreamTracks));\n\n    /*\n     * Bug #151 & #159: The given mediaStream gets reconstructed before it gets passed to the native node which is why the accessor needs\n     * to be overwritten as it would otherwise expose the reconstructed version.\n     */\n    Object.defineProperty(nativeMediaStreamAudioSourceNode, 'mediaStream', { value: mediaStream });\n\n    return nativeMediaStreamAudioSourceNode;\n};\n", "import { TNativeMediaStreamTrackAudioSourceNodeFactoryFactory } from '../types';\n\nexport const createNativeMediaStreamTrackAudioSourceNodeFactory: TNativeMediaStreamTrackAudioSourceNodeFactoryFactory = (\n    createInvalidStateError,\n    isNativeOfflineAudioContext\n) => {\n    return (nativeAudioContext, { mediaStreamTrack }) => {\n        // Bug #121: Only Firefox does yet support the MediaStreamTrackAudioSourceNode.\n        if (typeof nativeAudioContext.createMediaStreamTrackSource === 'function') {\n            return nativeAudioContext.createMediaStreamTrackSource(mediaStreamTrack);\n        }\n\n        const mediaStream = new MediaStream([mediaStreamTrack]);\n        const nativeMediaStreamAudioSourceNode = nativeAudioContext.createMediaStreamSource(mediaStream);\n\n        // Bug #120: Firefox does not throw an error if the mediaStream has no audio track.\n        if (mediaStreamTrack.kind !== 'audio') {\n            throw createInvalidStateError();\n        }\n\n        // Bug #172: Safari allows to create a MediaStreamAudioSourceNode with an OfflineAudioContext.\n        if (isNativeOfflineAudioContext(nativeAudioContext)) {\n            throw new TypeError();\n        }\n\n        return nativeMediaStreamAudioSourceNode;\n    };\n};\n", "import { TNativeOfflineAudioContextConstructorFactory } from '../types';\n\nexport const createNativeOfflineAudioContextConstructor: TNativeOfflineAudioContextConstructorFactory = (window) => {\n    if (window === null) {\n        return null;\n    }\n\n    if (window.hasOwnProperty('OfflineAudioContext')) {\n        return window.OfflineAudioContext;\n    }\n\n    return window.hasOwnProperty('webkitOfflineAudioContext') ? (<any>window).webkitOfflineAudioContext : null;\n};\n", "import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { wrapAudioScheduledSourceNodeStartMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters';\nimport { wrapAudioScheduledSourceNodeStopMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters';\nimport { TNativeOscillatorNodeFactoryFactory } from '../types';\n\nexport const createNativeOscillatorNodeFactory: TNativeOscillatorNodeFactoryFactory = (\n    addSilentConnection,\n    cacheTestResult,\n    testAudioScheduledSourceNodeStartMethodNegativeParametersSupport,\n    testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport,\n    testAudioScheduledSourceNodeStopMethodNegativeParametersSupport,\n    wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls\n) => {\n    return (nativeContext, options) => {\n        const nativeOscillatorNode = nativeContext.createOscillator();\n\n        assignNativeAudioNodeOptions(nativeOscillatorNode, options);\n\n        assignNativeAudioNodeAudioParamValue(nativeOscillatorNode, options, 'detune');\n        assignNativeAudioNodeAudioParamValue(nativeOscillatorNode, options, 'frequency');\n\n        if (options.periodicWave !== undefined) {\n            nativeOscillatorNode.setPeriodicWave(options.periodicWave);\n        } else {\n            assignNativeAudioNodeOption(nativeOscillatorNode, options, 'type');\n        }\n\n        // Bug #44: Only Chrome & Edge throw a RangeError yet.\n        if (\n            !cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, () =>\n                testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext)\n            )\n        ) {\n            wrapAudioScheduledSourceNodeStartMethodNegativeParameters(nativeOscillatorNode);\n        }\n\n        // Bug #19: Safari does not ignore calls to stop() of an already stopped AudioBufferSourceNode.\n        if (\n            !cacheTestResult(testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, () =>\n                testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport(nativeContext)\n            )\n        ) {\n            wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(nativeOscillatorNode, nativeContext);\n        }\n\n        // Bug #44: Only Firefox does not throw a RangeError yet.\n        if (\n            !cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, () =>\n                testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext)\n            )\n        ) {\n            wrapAudioScheduledSourceNodeStopMethodNegativeParameters(nativeOscillatorNode);\n        }\n\n        // Bug #175: Safari will not fire an ended event if the OscillatorNode is unconnected.\n        addSilentConnection(nativeContext, nativeOscillatorNode);\n\n        return nativeOscillatorNode;\n    };\n};\n", "import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { TNativePannerNodeFactoryFactory } from '../types';\n\nexport const createNativePannerNodeFactory: TNativePannerNodeFactoryFactory = (createNativePannerNodeFaker) => {\n    return (nativeContext, options) => {\n        const nativePannerNode = nativeContext.createPanner();\n\n        // Bug #124: Safari does not support modifying the orientation and the position with AudioParams.\n        if (nativePannerNode.orientationX === undefined) {\n            return createNativePannerNodeFaker(nativeContext, options);\n        }\n\n        assignNativeAudioNodeOptions(nativePannerNode, options);\n\n        assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'orientationX');\n        assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'orientationY');\n        assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'orientationZ');\n        assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'positionX');\n        assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'positionY');\n        assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'positionZ');\n\n        assignNativeAudioNodeOption(nativePannerNode, options, 'coneInnerAngle');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'coneOuterAngle');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'coneOuterGain');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'distanceModel');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'maxDistance');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'panningModel');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'refDistance');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'rolloffFactor');\n\n        return nativePannerNode;\n    };\n};\n", "import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { interceptConnections } from '../helpers/intercept-connections';\nimport { TNativeAudioNode, TNativePannerNode, TNativePannerNodeFakerFactoryFactory } from '../types';\n\nexport const createNativePannerNodeFakerFactory: TNativePannerNodeFakerFactoryFactory = (\n    connectNativeAudioNodeToNativeAudioNode,\n    createInvalidStateError,\n    createNativeChannelMergerNode,\n    createNativeGainNode,\n    createNativeScriptProcessorNode,\n    createNativeWaveShaperNode,\n    createNotSupportedError,\n    disconnectNativeAudioNodeFromNativeAudioNode,\n    getFirstSample,\n    monitorConnections\n) => {\n    return (\n        nativeContext,\n        {\n            coneInnerAngle,\n            coneOuterAngle,\n            coneOuterGain,\n            distanceModel,\n            maxDistance,\n            orientationX,\n            orientationY,\n            orientationZ,\n            panningModel,\n            positionX,\n            positionY,\n            positionZ,\n            refDistance,\n            rolloffFactor,\n            ...audioNodeOptions\n        }\n    ) => {\n        const pannerNode = nativeContext.createPanner();\n\n        // Bug #125: Safari does not throw an error yet.\n        if (audioNodeOptions.channelCount > 2) {\n            throw createNotSupportedError();\n        }\n\n        // Bug #126: Safari does not throw an error yet.\n        if (audioNodeOptions.channelCountMode === 'max') {\n            throw createNotSupportedError();\n        }\n\n        assignNativeAudioNodeOptions(pannerNode, audioNodeOptions);\n\n        const SINGLE_CHANNEL_OPTIONS = {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete'\n        } as const;\n\n        const channelMergerNode = createNativeChannelMergerNode(nativeContext, {\n            ...SINGLE_CHANNEL_OPTIONS,\n            channelInterpretation: 'speakers',\n            numberOfInputs: 6\n        });\n        const inputGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: 1 });\n        const orientationXGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 1 });\n        const orientationYGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        const orientationZGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        const positionXGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        const positionYGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        const positionZGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, 256, 6, 1);\n        const waveShaperNode = createNativeWaveShaperNode(nativeContext, {\n            ...SINGLE_CHANNEL_OPTIONS,\n            curve: new Float32Array([1, 1]),\n            oversample: 'none'\n        });\n\n        let lastOrientation: [number, number, number] = [orientationX, orientationY, orientationZ];\n        let lastPosition: [number, number, number] = [positionX, positionY, positionZ];\n\n        const buffer = new Float32Array(1);\n\n        // tslint:disable-next-line:deprecation\n        scriptProcessorNode.onaudioprocess = ({ inputBuffer }) => {\n            const orientation: [number, number, number] = [\n                getFirstSample(inputBuffer, buffer, 0),\n                getFirstSample(inputBuffer, buffer, 1),\n                getFirstSample(inputBuffer, buffer, 2)\n            ];\n\n            if (orientation.some((value, index) => value !== lastOrientation[index])) {\n                pannerNode.setOrientation(...orientation); // tslint:disable-line:deprecation\n\n                lastOrientation = orientation;\n            }\n\n            const positon: [number, number, number] = [\n                getFirstSample(inputBuffer, buffer, 3),\n                getFirstSample(inputBuffer, buffer, 4),\n                getFirstSample(inputBuffer, buffer, 5)\n            ];\n\n            if (positon.some((value, index) => value !== lastPosition[index])) {\n                pannerNode.setPosition(...positon); // tslint:disable-line:deprecation\n\n                lastPosition = positon;\n            }\n        };\n\n        Object.defineProperty(orientationYGainNode.gain, 'defaultValue', { get: () => 0 });\n        Object.defineProperty(orientationZGainNode.gain, 'defaultValue', { get: () => 0 });\n        Object.defineProperty(positionXGainNode.gain, 'defaultValue', { get: () => 0 });\n        Object.defineProperty(positionYGainNode.gain, 'defaultValue', { get: () => 0 });\n        Object.defineProperty(positionZGainNode.gain, 'defaultValue', { get: () => 0 });\n\n        const nativePannerNodeFaker = {\n            get bufferSize(): undefined {\n                return undefined;\n            },\n            get channelCount(): number {\n                return pannerNode.channelCount;\n            },\n            set channelCount(value) {\n                // Bug #125: Safari does not throw an error yet.\n                if (value > 2) {\n                    throw createNotSupportedError();\n                }\n\n                inputGainNode.channelCount = value;\n                pannerNode.channelCount = value;\n            },\n            get channelCountMode(): TNativePannerNode['channelCountMode'] {\n                return pannerNode.channelCountMode;\n            },\n            set channelCountMode(value) {\n                // Bug #126: Safari does not throw an error yet.\n                if (value === 'max') {\n                    throw createNotSupportedError();\n                }\n\n                inputGainNode.channelCountMode = value;\n                pannerNode.channelCountMode = value;\n            },\n            get channelInterpretation(): TNativePannerNode['channelInterpretation'] {\n                return pannerNode.channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                inputGainNode.channelInterpretation = value;\n                pannerNode.channelInterpretation = value;\n            },\n            get coneInnerAngle(): TNativePannerNode['coneInnerAngle'] {\n                return pannerNode.coneInnerAngle;\n            },\n            set coneInnerAngle(value) {\n                pannerNode.coneInnerAngle = value;\n            },\n            get coneOuterAngle(): TNativePannerNode['coneOuterAngle'] {\n                return pannerNode.coneOuterAngle;\n            },\n            set coneOuterAngle(value) {\n                pannerNode.coneOuterAngle = value;\n            },\n            get coneOuterGain(): TNativePannerNode['coneOuterGain'] {\n                return pannerNode.coneOuterGain;\n            },\n            set coneOuterGain(value) {\n                // Bug #127: Safari does not throw an InvalidStateError yet.\n                if (value < 0 || value > 1) {\n                    throw createInvalidStateError();\n                }\n\n                pannerNode.coneOuterGain = value;\n            },\n            get context(): TNativePannerNode['context'] {\n                return pannerNode.context;\n            },\n            get distanceModel(): TNativePannerNode['distanceModel'] {\n                return pannerNode.distanceModel;\n            },\n            set distanceModel(value) {\n                pannerNode.distanceModel = value;\n            },\n            get inputs(): TNativeAudioNode[] {\n                return [inputGainNode];\n            },\n            get maxDistance(): TNativePannerNode['maxDistance'] {\n                return pannerNode.maxDistance;\n            },\n            set maxDistance(value) {\n                // Bug #128: Safari does not throw an error yet.\n                if (value < 0) {\n                    throw new RangeError();\n                }\n\n                pannerNode.maxDistance = value;\n            },\n            get numberOfInputs(): number {\n                return pannerNode.numberOfInputs;\n            },\n            get numberOfOutputs(): number {\n                return pannerNode.numberOfOutputs;\n            },\n            get orientationX(): TNativePannerNode['orientationX'] {\n                return orientationXGainNode.gain;\n            },\n            get orientationY(): TNativePannerNode['orientationY'] {\n                return orientationYGainNode.gain;\n            },\n            get orientationZ(): TNativePannerNode['orientationZ'] {\n                return orientationZGainNode.gain;\n            },\n            get panningModel(): TNativePannerNode['panningModel'] {\n                return pannerNode.panningModel;\n            },\n            set panningModel(value) {\n                pannerNode.panningModel = value;\n            },\n            get positionX(): TNativePannerNode['positionX'] {\n                return positionXGainNode.gain;\n            },\n            get positionY(): TNativePannerNode['positionY'] {\n                return positionYGainNode.gain;\n            },\n            get positionZ(): TNativePannerNode['positionZ'] {\n                return positionZGainNode.gain;\n            },\n            get refDistance(): TNativePannerNode['refDistance'] {\n                return pannerNode.refDistance;\n            },\n            set refDistance(value) {\n                // Bug #129: Safari does not throw an error yet.\n                if (value < 0) {\n                    throw new RangeError();\n                }\n\n                pannerNode.refDistance = value;\n            },\n            get rolloffFactor(): TNativePannerNode['rolloffFactor'] {\n                return pannerNode.rolloffFactor;\n            },\n            set rolloffFactor(value) {\n                // Bug #130: Safari does not throw an error yet.\n                if (value < 0) {\n                    throw new RangeError();\n                }\n\n                pannerNode.rolloffFactor = value;\n            },\n            addEventListener(...args: any[]): void {\n                return inputGainNode.addEventListener(args[0], args[1], args[2]);\n            },\n            dispatchEvent(...args: any[]): boolean {\n                return inputGainNode.dispatchEvent(args[0]);\n            },\n            removeEventListener(...args: any[]): void {\n                return inputGainNode.removeEventListener(args[0], args[1], args[2]);\n            }\n        };\n\n        if (coneInnerAngle !== nativePannerNodeFaker.coneInnerAngle) {\n            nativePannerNodeFaker.coneInnerAngle = coneInnerAngle;\n        }\n\n        if (coneOuterAngle !== nativePannerNodeFaker.coneOuterAngle) {\n            nativePannerNodeFaker.coneOuterAngle = coneOuterAngle;\n        }\n\n        if (coneOuterGain !== nativePannerNodeFaker.coneOuterGain) {\n            nativePannerNodeFaker.coneOuterGain = coneOuterGain;\n        }\n\n        if (distanceModel !== nativePannerNodeFaker.distanceModel) {\n            nativePannerNodeFaker.distanceModel = distanceModel;\n        }\n\n        if (maxDistance !== nativePannerNodeFaker.maxDistance) {\n            nativePannerNodeFaker.maxDistance = maxDistance;\n        }\n\n        if (orientationX !== nativePannerNodeFaker.orientationX.value) {\n            nativePannerNodeFaker.orientationX.value = orientationX;\n        }\n\n        if (orientationY !== nativePannerNodeFaker.orientationY.value) {\n            nativePannerNodeFaker.orientationY.value = orientationY;\n        }\n\n        if (orientationZ !== nativePannerNodeFaker.orientationZ.value) {\n            nativePannerNodeFaker.orientationZ.value = orientationZ;\n        }\n\n        if (panningModel !== nativePannerNodeFaker.panningModel) {\n            nativePannerNodeFaker.panningModel = panningModel;\n        }\n\n        if (positionX !== nativePannerNodeFaker.positionX.value) {\n            nativePannerNodeFaker.positionX.value = positionX;\n        }\n\n        if (positionY !== nativePannerNodeFaker.positionY.value) {\n            nativePannerNodeFaker.positionY.value = positionY;\n        }\n\n        if (positionZ !== nativePannerNodeFaker.positionZ.value) {\n            nativePannerNodeFaker.positionZ.value = positionZ;\n        }\n\n        if (refDistance !== nativePannerNodeFaker.refDistance) {\n            nativePannerNodeFaker.refDistance = refDistance;\n        }\n\n        if (rolloffFactor !== nativePannerNodeFaker.rolloffFactor) {\n            nativePannerNodeFaker.rolloffFactor = rolloffFactor;\n        }\n\n        if (lastOrientation[0] !== 1 || lastOrientation[1] !== 0 || lastOrientation[2] !== 0) {\n            pannerNode.setOrientation(...lastOrientation); // tslint:disable-line:deprecation\n        }\n\n        if (lastPosition[0] !== 0 || lastPosition[1] !== 0 || lastPosition[2] !== 0) {\n            pannerNode.setPosition(...lastPosition); // tslint:disable-line:deprecation\n        }\n\n        const whenConnected = () => {\n            inputGainNode.connect(pannerNode);\n\n            // Bug #119: Safari does not fully support the WaveShaperNode.\n            connectNativeAudioNodeToNativeAudioNode(inputGainNode, waveShaperNode, 0, 0);\n\n            waveShaperNode.connect(orientationXGainNode).connect(channelMergerNode, 0, 0);\n            waveShaperNode.connect(orientationYGainNode).connect(channelMergerNode, 0, 1);\n            waveShaperNode.connect(orientationZGainNode).connect(channelMergerNode, 0, 2);\n            waveShaperNode.connect(positionXGainNode).connect(channelMergerNode, 0, 3);\n            waveShaperNode.connect(positionYGainNode).connect(channelMergerNode, 0, 4);\n            waveShaperNode.connect(positionZGainNode).connect(channelMergerNode, 0, 5);\n\n            channelMergerNode.connect(scriptProcessorNode).connect(nativeContext.destination);\n        };\n        const whenDisconnected = () => {\n            inputGainNode.disconnect(pannerNode);\n\n            // Bug #119: Safari does not fully support the WaveShaperNode.\n            disconnectNativeAudioNodeFromNativeAudioNode(inputGainNode, waveShaperNode, 0, 0);\n\n            waveShaperNode.disconnect(orientationXGainNode);\n            orientationXGainNode.disconnect(channelMergerNode);\n            waveShaperNode.disconnect(orientationYGainNode);\n            orientationYGainNode.disconnect(channelMergerNode);\n            waveShaperNode.disconnect(orientationZGainNode);\n            orientationZGainNode.disconnect(channelMergerNode);\n            waveShaperNode.disconnect(positionXGainNode);\n            positionXGainNode.disconnect(channelMergerNode);\n            waveShaperNode.disconnect(positionYGainNode);\n            positionYGainNode.disconnect(channelMergerNode);\n            waveShaperNode.disconnect(positionZGainNode);\n            positionZGainNode.disconnect(channelMergerNode);\n\n            channelMergerNode.disconnect(scriptProcessorNode);\n            scriptProcessorNode.disconnect(nativeContext.destination);\n        };\n\n        return monitorConnections(interceptConnections(nativePannerNodeFaker, pannerNode), whenConnected, whenDisconnected);\n    };\n};\n", "import { TNativePeriodicWaveFactoryFactory } from '../types';\n\nexport const createNativePeriodicWaveFactory: TNativePeriodicWaveFactoryFactory = (createIndexSizeError) => {\n    return (nativeContext, { disableNormalization, imag, real }) => {\n        // Bug #180: Safari does not allow to use ordinary arrays.\n        const convertedImag = imag instanceof Float32Array ? imag : new Float32Array(imag);\n        const convertedReal = real instanceof Float32Array ? real : new Float32Array(real);\n\n        const nativePeriodicWave = nativeContext.createPeriodicWave(convertedReal, convertedImag, { disableNormalization });\n\n        // Bug #181: Safari does not throw an IndexSizeError so far if the given arrays have less than two values.\n        if (Array.from(imag).length < 2) {\n            throw createIndexSizeError();\n        }\n\n        return nativePeriodicWave;\n    };\n};\n", "import { TNativeScriptProcessorNodeFactory } from '../types';\n\nexport const createNativeScriptProcessorNode: TNativeScriptProcessorNodeFactory = (\n    nativeContext,\n    bufferSize,\n    numberOfInputChannels,\n    numberOfOutputChannels\n) => {\n    return nativeContext.createScriptProcessor(bufferSize, numberOfInputChannels, numberOfOutputChannels); // tslint:disable-line deprecation\n};\n", "import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { TNativeStereoPannerNodeFactoryFactory } from '../types';\n\nexport const createNativeStereoPannerNodeFactory: TNativeStereoPannerNodeFactoryFactory = (\n    createNativeStereoPannerNodeFaker,\n    createNotSupportedError\n) => {\n    return (nativeContext, options) => {\n        const channelCountMode = options.channelCountMode;\n\n        /*\n         * Bug #105: The channelCountMode of 'clamped-max' should be supported. However it is not possible to write a polyfill for Safari\n         * which supports it and therefore it can't be supported at all.\n         */\n        if (channelCountMode === 'clamped-max') {\n            throw createNotSupportedError();\n        }\n\n        // Bug #105: Safari does not support the StereoPannerNode.\n        if (nativeContext.createStereoPanner === undefined) {\n            return createNativeStereoPannerNodeFaker(nativeContext, options);\n        }\n\n        const nativeStereoPannerNode = nativeContext.createStereoPanner();\n\n        assignNativeAudioNodeOptions(nativeStereoPannerNode, options);\n\n        assignNativeAudioNodeAudioParamValue(nativeStereoPannerNode, options, 'pan');\n\n        /*\n         * Bug #105: The channelCountMode of 'clamped-max' should be supported. However it is not possible to write a polyfill for Safari\n         * which supports it and therefore it can't be supported at all.\n         */\n        Object.defineProperty(nativeStereoPannerNode, 'channelCountMode', {\n            get: () => channelCountMode,\n            set: (value) => {\n                if (value !== channelCountMode) {\n                    throw createNotSupportedError();\n                }\n            }\n        });\n\n        return nativeStereoPannerNode;\n    };\n};\n", "import { interceptConnections } from '../helpers/intercept-connections';\nimport { INativeWaveShaperNodeFaker } from '../interfaces';\nimport {\n    TNativeAudioNode,\n    TNativeChannelMergerNode,\n    TNativeContext,\n    TNativeGainNode,\n    TNativeStereoPannerNode,\n    TNativeStereoPannerNodeFakerFactoryFactory\n} from '../types';\n\nexport const createNativeStereoPannerNodeFakerFactory: TNativeStereoPannerNodeFakerFactoryFactory = (\n    createNativeChannelMergerNode,\n    createNativeChannelSplitterNode,\n    createNativeGainNode,\n    createNativeWaveShaperNode,\n    createNotSupportedError,\n    monitorConnections\n) => {\n    // The curve has a size of 14bit plus 1 value to have an exact representation for zero. This value has been determined experimentally.\n    const CURVE_SIZE = 16385;\n    const DC_CURVE = new Float32Array([1, 1]);\n    const HALF_PI = Math.PI / 2;\n    const SINGLE_CHANNEL_OPTIONS = { channelCount: 1, channelCountMode: 'explicit', channelInterpretation: 'discrete' } as const;\n    const SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS = { ...SINGLE_CHANNEL_OPTIONS, oversample: 'none' } as const;\n\n    const buildInternalGraphForMono = (\n        nativeContext: TNativeContext,\n        inputGainNode: TNativeGainNode,\n        panGainNode: TNativeGainNode,\n        channelMergerNode: TNativeChannelMergerNode\n    ) => {\n        const leftWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        const rightWaveShaperCurve = new Float32Array(CURVE_SIZE);\n\n        for (let i = 0; i < CURVE_SIZE; i += 1) {\n            const x = (i / (CURVE_SIZE - 1)) * HALF_PI;\n\n            leftWaveShaperCurve[i] = Math.cos(x);\n            rightWaveShaperCurve[i] = Math.sin(x);\n        }\n\n        const leftGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const leftWaveShaperNode = <INativeWaveShaperNodeFaker>(\n            createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: leftWaveShaperCurve })\n        );\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const panWaveShaperNode = <INativeWaveShaperNodeFaker>(\n            createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: DC_CURVE })\n        );\n        const rightGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const rightWaveShaperNode = <INativeWaveShaperNodeFaker>(\n            createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: rightWaveShaperCurve })\n        );\n\n        return {\n            connectGraph(): void {\n                inputGainNode.connect(leftGainNode);\n                inputGainNode.connect(panWaveShaperNode.inputs === undefined ? panWaveShaperNode : panWaveShaperNode.inputs[0]);\n                inputGainNode.connect(rightGainNode);\n\n                panWaveShaperNode.connect(panGainNode);\n\n                panGainNode.connect(leftWaveShaperNode.inputs === undefined ? leftWaveShaperNode : leftWaveShaperNode.inputs[0]);\n                panGainNode.connect(rightWaveShaperNode.inputs === undefined ? rightWaveShaperNode : rightWaveShaperNode.inputs[0]);\n\n                leftWaveShaperNode.connect(leftGainNode.gain);\n                rightWaveShaperNode.connect(rightGainNode.gain);\n\n                leftGainNode.connect(channelMergerNode, 0, 0);\n                rightGainNode.connect(channelMergerNode, 0, 1);\n            },\n            disconnectGraph(): void {\n                inputGainNode.disconnect(leftGainNode);\n                inputGainNode.disconnect(panWaveShaperNode.inputs === undefined ? panWaveShaperNode : panWaveShaperNode.inputs[0]);\n                inputGainNode.disconnect(rightGainNode);\n\n                panWaveShaperNode.disconnect(panGainNode);\n\n                panGainNode.disconnect(leftWaveShaperNode.inputs === undefined ? leftWaveShaperNode : leftWaveShaperNode.inputs[0]);\n                panGainNode.disconnect(rightWaveShaperNode.inputs === undefined ? rightWaveShaperNode : rightWaveShaperNode.inputs[0]);\n\n                leftWaveShaperNode.disconnect(leftGainNode.gain);\n                rightWaveShaperNode.disconnect(rightGainNode.gain);\n\n                leftGainNode.disconnect(channelMergerNode, 0, 0);\n                rightGainNode.disconnect(channelMergerNode, 0, 1);\n            }\n        };\n    };\n\n    const buildInternalGraphForStereo = (\n        nativeContext: TNativeContext,\n        inputGainNode: TNativeGainNode,\n        panGainNode: TNativeGainNode,\n        channelMergerNode: TNativeChannelMergerNode\n    ) => {\n        const leftInputForLeftOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        const leftInputForRightOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        const rightInputForLeftOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        const rightInputForRightOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n\n        const centerIndex = Math.floor(CURVE_SIZE / 2);\n\n        for (let i = 0; i < CURVE_SIZE; i += 1) {\n            if (i > centerIndex) {\n                const x = ((i - centerIndex) / (CURVE_SIZE - 1 - centerIndex)) * HALF_PI;\n\n                leftInputForLeftOutputWaveShaperCurve[i] = Math.cos(x);\n                leftInputForRightOutputWaveShaperCurve[i] = Math.sin(x);\n                rightInputForLeftOutputWaveShaperCurve[i] = 0;\n                rightInputForRightOutputWaveShaperCurve[i] = 1;\n            } else {\n                const x = (i / (CURVE_SIZE - 1 - centerIndex)) * HALF_PI;\n\n                leftInputForLeftOutputWaveShaperCurve[i] = 1;\n                leftInputForRightOutputWaveShaperCurve[i] = 0;\n                rightInputForLeftOutputWaveShaperCurve[i] = Math.cos(x);\n                rightInputForRightOutputWaveShaperCurve[i] = Math.sin(x);\n            }\n        }\n\n        const channelSplitterNode = createNativeChannelSplitterNode(nativeContext, {\n            channelCount: 2,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete',\n            numberOfOutputs: 2\n        });\n        const leftInputForLeftOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const leftInputForLeftOutputWaveShaperNode = <INativeWaveShaperNodeFaker>createNativeWaveShaperNode(nativeContext, {\n            ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,\n            curve: leftInputForLeftOutputWaveShaperCurve\n        });\n        const leftInputForRightOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const leftInputForRightOutputWaveShaperNode = <INativeWaveShaperNodeFaker>createNativeWaveShaperNode(nativeContext, {\n            ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,\n            curve: leftInputForRightOutputWaveShaperCurve\n        });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const panWaveShaperNode = <INativeWaveShaperNodeFaker>(\n            createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: DC_CURVE })\n        );\n        const rightInputForLeftOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const rightInputForLeftOutputWaveShaperNode = <INativeWaveShaperNodeFaker>createNativeWaveShaperNode(nativeContext, {\n            ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,\n            curve: rightInputForLeftOutputWaveShaperCurve\n        });\n        const rightInputForRightOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const rightInputForRightOutputWaveShaperNode = <INativeWaveShaperNodeFaker>createNativeWaveShaperNode(nativeContext, {\n            ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,\n            curve: rightInputForRightOutputWaveShaperCurve\n        });\n\n        return {\n            connectGraph(): void {\n                inputGainNode.connect(channelSplitterNode);\n                inputGainNode.connect(panWaveShaperNode.inputs === undefined ? panWaveShaperNode : panWaveShaperNode.inputs[0]);\n\n                channelSplitterNode.connect(leftInputForLeftOutputGainNode, 0);\n                channelSplitterNode.connect(leftInputForRightOutputGainNode, 0);\n                channelSplitterNode.connect(rightInputForLeftOutputGainNode, 1);\n                channelSplitterNode.connect(rightInputForRightOutputGainNode, 1);\n\n                panWaveShaperNode.connect(panGainNode);\n\n                panGainNode.connect(\n                    leftInputForLeftOutputWaveShaperNode.inputs === undefined\n                        ? leftInputForLeftOutputWaveShaperNode\n                        : leftInputForLeftOutputWaveShaperNode.inputs[0]\n                );\n                panGainNode.connect(\n                    leftInputForRightOutputWaveShaperNode.inputs === undefined\n                        ? leftInputForRightOutputWaveShaperNode\n                        : leftInputForRightOutputWaveShaperNode.inputs[0]\n                );\n                panGainNode.connect(\n                    rightInputForLeftOutputWaveShaperNode.inputs === undefined\n                        ? rightInputForLeftOutputWaveShaperNode\n                        : rightInputForLeftOutputWaveShaperNode.inputs[0]\n                );\n                panGainNode.connect(\n                    rightInputForRightOutputWaveShaperNode.inputs === undefined\n                        ? rightInputForRightOutputWaveShaperNode\n                        : rightInputForRightOutputWaveShaperNode.inputs[0]\n                );\n\n                leftInputForLeftOutputWaveShaperNode.connect(leftInputForLeftOutputGainNode.gain);\n                leftInputForRightOutputWaveShaperNode.connect(leftInputForRightOutputGainNode.gain);\n                rightInputForLeftOutputWaveShaperNode.connect(rightInputForLeftOutputGainNode.gain);\n                rightInputForRightOutputWaveShaperNode.connect(rightInputForRightOutputGainNode.gain);\n\n                leftInputForLeftOutputGainNode.connect(channelMergerNode, 0, 0);\n                rightInputForLeftOutputGainNode.connect(channelMergerNode, 0, 0);\n\n                leftInputForRightOutputGainNode.connect(channelMergerNode, 0, 1);\n                rightInputForRightOutputGainNode.connect(channelMergerNode, 0, 1);\n            },\n            disconnectGraph(): void {\n                inputGainNode.disconnect(channelSplitterNode);\n                inputGainNode.disconnect(panWaveShaperNode.inputs === undefined ? panWaveShaperNode : panWaveShaperNode.inputs[0]);\n\n                channelSplitterNode.disconnect(leftInputForLeftOutputGainNode, 0);\n                channelSplitterNode.disconnect(leftInputForRightOutputGainNode, 0);\n                channelSplitterNode.disconnect(rightInputForLeftOutputGainNode, 1);\n                channelSplitterNode.disconnect(rightInputForRightOutputGainNode, 1);\n\n                panWaveShaperNode.disconnect(panGainNode);\n\n                panGainNode.disconnect(\n                    leftInputForLeftOutputWaveShaperNode.inputs === undefined\n                        ? leftInputForLeftOutputWaveShaperNode\n                        : leftInputForLeftOutputWaveShaperNode.inputs[0]\n                );\n                panGainNode.disconnect(\n                    leftInputForRightOutputWaveShaperNode.inputs === undefined\n                        ? leftInputForRightOutputWaveShaperNode\n                        : leftInputForRightOutputWaveShaperNode.inputs[0]\n                );\n                panGainNode.disconnect(\n                    rightInputForLeftOutputWaveShaperNode.inputs === undefined\n                        ? rightInputForLeftOutputWaveShaperNode\n                        : rightInputForLeftOutputWaveShaperNode.inputs[0]\n                );\n                panGainNode.disconnect(\n                    rightInputForRightOutputWaveShaperNode.inputs === undefined\n                        ? rightInputForRightOutputWaveShaperNode\n                        : rightInputForRightOutputWaveShaperNode.inputs[0]\n                );\n\n                leftInputForLeftOutputWaveShaperNode.disconnect(leftInputForLeftOutputGainNode.gain);\n                leftInputForRightOutputWaveShaperNode.disconnect(leftInputForRightOutputGainNode.gain);\n                rightInputForLeftOutputWaveShaperNode.disconnect(rightInputForLeftOutputGainNode.gain);\n                rightInputForRightOutputWaveShaperNode.disconnect(rightInputForRightOutputGainNode.gain);\n\n                leftInputForLeftOutputGainNode.disconnect(channelMergerNode, 0, 0);\n                rightInputForLeftOutputGainNode.disconnect(channelMergerNode, 0, 0);\n\n                leftInputForRightOutputGainNode.disconnect(channelMergerNode, 0, 1);\n                rightInputForRightOutputGainNode.disconnect(channelMergerNode, 0, 1);\n            }\n        };\n    };\n\n    const buildInternalGraph = (\n        nativeContext: TNativeContext,\n        channelCount: number,\n        inputGainNode: TNativeGainNode,\n        panGainNode: TNativeGainNode,\n        channelMergerNode: TNativeChannelMergerNode\n    ) => {\n        if (channelCount === 1) {\n            return buildInternalGraphForMono(nativeContext, inputGainNode, panGainNode, channelMergerNode);\n        }\n\n        if (channelCount === 2) {\n            return buildInternalGraphForStereo(nativeContext, inputGainNode, panGainNode, channelMergerNode);\n        }\n\n        throw createNotSupportedError();\n    };\n\n    return (nativeContext, { channelCount, channelCountMode, pan, ...audioNodeOptions }) => {\n        if (channelCountMode === 'max') {\n            throw createNotSupportedError();\n        }\n\n        const channelMergerNode = createNativeChannelMergerNode(nativeContext, {\n            ...audioNodeOptions,\n            channelCount: 1,\n            channelCountMode,\n            numberOfInputs: 2\n        });\n        const inputGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, channelCount, channelCountMode, gain: 1 });\n        const panGainNode = createNativeGainNode(nativeContext, {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete',\n            gain: pan\n        });\n\n        let { connectGraph, disconnectGraph } = buildInternalGraph(\n            nativeContext,\n            channelCount,\n            inputGainNode,\n            panGainNode,\n            channelMergerNode\n        );\n\n        Object.defineProperty(panGainNode.gain, 'defaultValue', { get: () => 0 });\n        Object.defineProperty(panGainNode.gain, 'maxValue', { get: () => 1 });\n        Object.defineProperty(panGainNode.gain, 'minValue', { get: () => -1 });\n\n        const nativeStereoPannerNodeFakerFactory = {\n            get bufferSize(): undefined {\n                return undefined;\n            },\n            get channelCount(): number {\n                return inputGainNode.channelCount;\n            },\n            set channelCount(value) {\n                if (inputGainNode.channelCount !== value) {\n                    if (isConnected) {\n                        disconnectGraph();\n                    }\n\n                    ({ connectGraph, disconnectGraph } = buildInternalGraph(\n                        nativeContext,\n                        value,\n                        inputGainNode,\n                        panGainNode,\n                        channelMergerNode\n                    ));\n\n                    if (isConnected) {\n                        connectGraph();\n                    }\n                }\n\n                inputGainNode.channelCount = value;\n            },\n            get channelCountMode(): TNativeStereoPannerNode['channelCountMode'] {\n                return inputGainNode.channelCountMode;\n            },\n            set channelCountMode(value) {\n                if (value === 'clamped-max' || value === 'max') {\n                    throw createNotSupportedError();\n                }\n\n                inputGainNode.channelCountMode = value;\n            },\n            get channelInterpretation(): TNativeStereoPannerNode['channelInterpretation'] {\n                return inputGainNode.channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                inputGainNode.channelInterpretation = value;\n            },\n            get context(): TNativeStereoPannerNode['context'] {\n                return inputGainNode.context;\n            },\n            get inputs(): TNativeAudioNode[] {\n                return [inputGainNode];\n            },\n            get numberOfInputs(): number {\n                return inputGainNode.numberOfInputs;\n            },\n            get numberOfOutputs(): number {\n                return inputGainNode.numberOfOutputs;\n            },\n            get pan(): TNativeStereoPannerNode['pan'] {\n                return panGainNode.gain;\n            },\n            addEventListener(...args: any[]): void {\n                return inputGainNode.addEventListener(args[0], args[1], args[2]);\n            },\n            dispatchEvent(...args: any[]): boolean {\n                return inputGainNode.dispatchEvent(args[0]);\n            },\n            removeEventListener(...args: any[]): void {\n                return inputGainNode.removeEventListener(args[0], args[1], args[2]);\n            }\n        };\n\n        let isConnected = false;\n\n        const whenConnected = () => {\n            connectGraph();\n\n            isConnected = true;\n        };\n        const whenDisconnected = () => {\n            disconnectGraph();\n\n            isConnected = false;\n        };\n\n        return monitorConnections(\n            interceptConnections(nativeStereoPannerNodeFakerFactory, channelMergerNode),\n            whenConnected,\n            whenDisconnected\n        );\n    };\n};\n", "import { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { TNativeWaveShaperNodeFactoryFactory } from '../types';\n\nexport const createNativeWaveShaperNodeFactory: TNativeWaveShaperNodeFactoryFactory = (\n    createConnectedNativeAudioBufferSourceNode,\n    createInvalidStateError,\n    createNativeWaveShaperNodeFaker,\n    isDCCurve,\n    monitorConnections,\n    nativeAudioContextConstructor,\n    overwriteAccessors\n) => {\n    return (nativeContext, options) => {\n        const nativeWaveShaperNode = nativeContext.createWaveShaper();\n\n        /*\n         * Bug #119: Safari does not correctly map the values.\n         * @todo Unfortunately there is no way to test for this behavior in a synchronous fashion which is why testing for the existence of\n         * the webkitAudioContext is used as a workaround here. Testing for the automationRate property is necessary because this workaround\n         * isn't necessary anymore since v14.0.2 of Safari.\n         */\n        if (\n            nativeAudioContextConstructor !== null &&\n            nativeAudioContextConstructor.name === 'webkitAudioContext' &&\n            nativeContext.createGain().gain.automationRate === undefined\n        ) {\n            return createNativeWaveShaperNodeFaker(nativeContext, options);\n        }\n\n        assignNativeAudioNodeOptions(nativeWaveShaperNode, options);\n\n        const curve = options.curve === null || options.curve instanceof Float32Array ? options.curve : new Float32Array(options.curve);\n\n        // Bug #104: Chrome and Edge will throw an InvalidAccessError when the curve has less than two samples.\n        if (curve !== null && curve.length < 2) {\n            throw createInvalidStateError();\n        }\n\n        // Only values of type Float32Array can be assigned to the curve property.\n        assignNativeAudioNodeOption(nativeWaveShaperNode, { curve }, 'curve');\n        assignNativeAudioNodeOption(nativeWaveShaperNode, options, 'oversample');\n\n        let disconnectNativeAudioBufferSourceNode: null | (() => void) = null;\n        let isConnected = false;\n\n        overwriteAccessors(\n            nativeWaveShaperNode,\n            'curve',\n            (get) => () => get.call(nativeWaveShaperNode),\n            (set) => (value) => {\n                set.call(nativeWaveShaperNode, value);\n\n                if (isConnected) {\n                    if (isDCCurve(value) && disconnectNativeAudioBufferSourceNode === null) {\n                        disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(\n                            nativeContext,\n                            nativeWaveShaperNode\n                        );\n                    } else if (!isDCCurve(value) && disconnectNativeAudioBufferSourceNode !== null) {\n                        disconnectNativeAudioBufferSourceNode();\n                        disconnectNativeAudioBufferSourceNode = null;\n                    }\n                }\n\n                return value;\n            }\n        );\n\n        const whenConnected = () => {\n            isConnected = true;\n\n            if (isDCCurve(nativeWaveShaperNode.curve)) {\n                disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, nativeWaveShaperNode);\n            }\n        };\n        const whenDisconnected = () => {\n            isConnected = false;\n\n            if (disconnectNativeAudioBufferSourceNode !== null) {\n                disconnectNativeAudioBufferSourceNode();\n                disconnectNativeAudioBufferSourceNode = null;\n            }\n        };\n\n        return monitorConnections(nativeWaveShaperNode, whenConnected, whenDisconnected);\n    };\n};\n", "import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { interceptConnections } from '../helpers/intercept-connections';\nimport { TNativeAudioNode, TNativeWaveShaperNode, TNativeWaveShaperNodeFakerFactoryFactory } from '../types';\n\nexport const createNativeWaveShaperNodeFakerFactory: TNativeWaveShaperNodeFakerFactoryFactory = (\n    createConnectedNativeAudioBufferSourceNode,\n    createInvalidStateError,\n    createNativeGainNode,\n    isDCCurve,\n    monitorConnections\n) => {\n    return (nativeContext, { curve, oversample, ...audioNodeOptions }) => {\n        const negativeWaveShaperNode = nativeContext.createWaveShaper();\n        const positiveWaveShaperNode = nativeContext.createWaveShaper();\n\n        assignNativeAudioNodeOptions(negativeWaveShaperNode, audioNodeOptions);\n        assignNativeAudioNodeOptions(positiveWaveShaperNode, audioNodeOptions);\n\n        const inputGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: 1 });\n        const invertGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: -1 });\n        const outputGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: 1 });\n        const revertGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: -1 });\n\n        let disconnectNativeAudioBufferSourceNode: null | (() => void) = null;\n        let isConnected = false;\n        let unmodifiedCurve: null | TNativeWaveShaperNode['curve'] = null;\n\n        const nativeWaveShaperNodeFaker = {\n            get bufferSize(): undefined {\n                return undefined;\n            },\n            get channelCount(): number {\n                return negativeWaveShaperNode.channelCount;\n            },\n            set channelCount(value) {\n                inputGainNode.channelCount = value;\n                invertGainNode.channelCount = value;\n                negativeWaveShaperNode.channelCount = value;\n                outputGainNode.channelCount = value;\n                positiveWaveShaperNode.channelCount = value;\n                revertGainNode.channelCount = value;\n            },\n            get channelCountMode(): TNativeWaveShaperNode['channelCountMode'] {\n                return negativeWaveShaperNode.channelCountMode;\n            },\n            set channelCountMode(value) {\n                inputGainNode.channelCountMode = value;\n                invertGainNode.channelCountMode = value;\n                negativeWaveShaperNode.channelCountMode = value;\n                outputGainNode.channelCountMode = value;\n                positiveWaveShaperNode.channelCountMode = value;\n                revertGainNode.channelCountMode = value;\n            },\n            get channelInterpretation(): TNativeWaveShaperNode['channelInterpretation'] {\n                return negativeWaveShaperNode.channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                inputGainNode.channelInterpretation = value;\n                invertGainNode.channelInterpretation = value;\n                negativeWaveShaperNode.channelInterpretation = value;\n                outputGainNode.channelInterpretation = value;\n                positiveWaveShaperNode.channelInterpretation = value;\n                revertGainNode.channelInterpretation = value;\n            },\n            get context(): TNativeWaveShaperNode['context'] {\n                return negativeWaveShaperNode.context;\n            },\n            get curve(): TNativeWaveShaperNode['curve'] {\n                return unmodifiedCurve;\n            },\n            set curve(value) {\n                // Bug #102: Safari does not throw an InvalidStateError when the curve has less than two samples.\n                if (value !== null && value.length < 2) {\n                    throw createInvalidStateError();\n                }\n\n                if (value === null) {\n                    negativeWaveShaperNode.curve = value;\n                    positiveWaveShaperNode.curve = value;\n                } else {\n                    const curveLength = value.length;\n\n                    const negativeCurve = new Float32Array(curveLength + 2 - (curveLength % 2));\n                    const positiveCurve = new Float32Array(curveLength + 2 - (curveLength % 2));\n\n                    negativeCurve[0] = value[0];\n                    positiveCurve[0] = -value[curveLength - 1];\n\n                    const length = Math.ceil((curveLength + 1) / 2);\n                    const centerIndex = (curveLength + 1) / 2 - 1;\n\n                    for (let i = 1; i < length; i += 1) {\n                        const theoreticIndex = (i / length) * centerIndex;\n\n                        const lowerIndex = Math.floor(theoreticIndex);\n                        const upperIndex = Math.ceil(theoreticIndex);\n\n                        negativeCurve[i] =\n                            lowerIndex === upperIndex\n                                ? value[lowerIndex]\n                                : (1 - (theoreticIndex - lowerIndex)) * value[lowerIndex] +\n                                  (1 - (upperIndex - theoreticIndex)) * value[upperIndex];\n                        positiveCurve[i] =\n                            lowerIndex === upperIndex\n                                ? -value[curveLength - 1 - lowerIndex]\n                                : -((1 - (theoreticIndex - lowerIndex)) * value[curveLength - 1 - lowerIndex]) -\n                                  (1 - (upperIndex - theoreticIndex)) * value[curveLength - 1 - upperIndex];\n                    }\n\n                    negativeCurve[length] = curveLength % 2 === 1 ? value[length - 1] : (value[length - 2] + value[length - 1]) / 2;\n\n                    negativeWaveShaperNode.curve = negativeCurve;\n                    positiveWaveShaperNode.curve = positiveCurve;\n                }\n\n                unmodifiedCurve = value;\n\n                if (isConnected) {\n                    if (isDCCurve(unmodifiedCurve) && disconnectNativeAudioBufferSourceNode === null) {\n                        disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, inputGainNode);\n                    } else if (disconnectNativeAudioBufferSourceNode !== null) {\n                        disconnectNativeAudioBufferSourceNode();\n                        disconnectNativeAudioBufferSourceNode = null;\n                    }\n                }\n            },\n            get inputs(): TNativeAudioNode[] {\n                return [inputGainNode];\n            },\n            get numberOfInputs(): number {\n                return negativeWaveShaperNode.numberOfInputs;\n            },\n            get numberOfOutputs(): number {\n                return negativeWaveShaperNode.numberOfOutputs;\n            },\n            get oversample(): TNativeWaveShaperNode['oversample'] {\n                return negativeWaveShaperNode.oversample;\n            },\n            set oversample(value) {\n                negativeWaveShaperNode.oversample = value;\n                positiveWaveShaperNode.oversample = value;\n            },\n            addEventListener(...args: any[]): void {\n                return inputGainNode.addEventListener(args[0], args[1], args[2]);\n            },\n            dispatchEvent(...args: any[]): boolean {\n                return inputGainNode.dispatchEvent(args[0]);\n            },\n            removeEventListener(...args: any[]): void {\n                return inputGainNode.removeEventListener(args[0], args[1], args[2]);\n            }\n        };\n\n        if (curve !== null) {\n            // Only values of type Float32Array can be assigned to the curve property.\n            nativeWaveShaperNodeFaker.curve = curve instanceof Float32Array ? curve : new Float32Array(curve);\n        }\n\n        if (oversample !== nativeWaveShaperNodeFaker.oversample) {\n            nativeWaveShaperNodeFaker.oversample = oversample;\n        }\n\n        const whenConnected = () => {\n            inputGainNode.connect(negativeWaveShaperNode).connect(outputGainNode);\n\n            inputGainNode.connect(invertGainNode).connect(positiveWaveShaperNode).connect(revertGainNode).connect(outputGainNode);\n\n            isConnected = true;\n\n            if (isDCCurve(unmodifiedCurve)) {\n                disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, inputGainNode);\n            }\n        };\n        const whenDisconnected = () => {\n            inputGainNode.disconnect(negativeWaveShaperNode);\n            negativeWaveShaperNode.disconnect(outputGainNode);\n\n            inputGainNode.disconnect(invertGainNode);\n            invertGainNode.disconnect(positiveWaveShaperNode);\n            positiveWaveShaperNode.disconnect(revertGainNode);\n            revertGainNode.disconnect(outputGainNode);\n\n            isConnected = false;\n\n            if (disconnectNativeAudioBufferSourceNode !== null) {\n                disconnectNativeAudioBufferSourceNode();\n                disconnectNativeAudioBufferSourceNode = null;\n            }\n        };\n\n        return monitorConnections(interceptConnections(nativeWaveShaperNodeFaker, outputGainNode), whenConnected, whenDisconnected);\n    };\n};\n", "import { TNotSupportedErrorFactory } from '../types';\n\nexport const createNotSupportedError: TNotSupportedErrorFactory = () => new DOMException('', 'NotSupportedError');\n", "import { deactivateAudioGraph } from '../helpers/deactivate-audio-graph';\nimport { testPromiseSupport } from '../helpers/test-promise-support';\nimport { IAudioBuffer, IOfflineAudioContext, IOfflineAudioContextOptions } from '../interfaces';\nimport { TAudioContextState, TNativeOfflineAudioContext, TOfflineAudioContextConstructorFactory } from '../types';\n\nconst DEFAULT_OPTIONS = {\n    numberOfChannels: 1\n} as const;\n\nexport const createOfflineAudioContextConstructor: TOfflineAudioContextConstructorFactory = (\n    baseAudioContextConstructor,\n    cacheTestResult,\n    createInvalidStateError,\n    createNativeOfflineAudioContext,\n    startRendering\n) => {\n    return class OfflineAudioContext extends baseAudioContextConstructor<IOfflineAudioContext> implements IOfflineAudioContext {\n        private _length: number;\n\n        private _nativeOfflineAudioContext: TNativeOfflineAudioContext;\n\n        private _state: null | TAudioContextState;\n\n        constructor(options: IOfflineAudioContextOptions);\n        constructor(numberOfChannels: number, length: number, sampleRate: number);\n        constructor(a: number | IOfflineAudioContextOptions, b?: number, c?: number) {\n            let options: IOfflineAudioContextOptions;\n\n            if (typeof a === 'number' && b !== undefined && c !== undefined) {\n                options = { length: b, numberOfChannels: a, sampleRate: c };\n            } else if (typeof a === 'object') {\n                options = a;\n            } else {\n                throw new Error('The given parameters are not valid.');\n            }\n\n            const { length, numberOfChannels, sampleRate } = { ...DEFAULT_OPTIONS, ...options };\n\n            const nativeOfflineAudioContext = createNativeOfflineAudioContext(numberOfChannels, length, sampleRate);\n\n            // #21 Safari does not support promises and therefore would fire the statechange event before the promise can be resolved.\n            if (!cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeOfflineAudioContext))) {\n                nativeOfflineAudioContext.addEventListener(\n                    'statechange',\n                    (() => {\n                        let i = 0;\n\n                        const delayStateChangeEvent = (event: Event) => {\n                            if (this._state === 'running') {\n                                if (i > 0) {\n                                    nativeOfflineAudioContext.removeEventListener('statechange', delayStateChangeEvent);\n                                    event.stopImmediatePropagation();\n\n                                    this._waitForThePromiseToSettle(event);\n                                } else {\n                                    i += 1;\n                                }\n                            }\n                        };\n\n                        return delayStateChangeEvent;\n                    })()\n                );\n            }\n\n            super(nativeOfflineAudioContext, numberOfChannels);\n\n            this._length = length;\n            this._nativeOfflineAudioContext = nativeOfflineAudioContext;\n            this._state = null;\n        }\n\n        get length(): number {\n            // Bug #17: Safari does not yet expose the length.\n            if (this._nativeOfflineAudioContext.length === undefined) {\n                return this._length;\n            }\n\n            return this._nativeOfflineAudioContext.length;\n        }\n\n        get state(): TAudioContextState {\n            return this._state === null ? this._nativeOfflineAudioContext.state : this._state;\n        }\n\n        public startRendering(): Promise<IAudioBuffer> {\n            /*\n             * Bug #9 & #59: It is theoretically possible that startRendering() will first render a partialOfflineAudioContext. Therefore\n             * the state of the nativeOfflineAudioContext might no transition to running immediately.\n             */\n            if (this._state === 'running') {\n                return Promise.reject(createInvalidStateError());\n            }\n\n            this._state = 'running';\n\n            return startRendering(this.destination, this._nativeOfflineAudioContext).finally(() => {\n                this._state = null;\n\n                deactivateAudioGraph(this);\n            });\n        }\n\n        private _waitForThePromiseToSettle(event: Event): void {\n            if (this._state === null) {\n                this._nativeOfflineAudioContext.dispatchEvent(event);\n            } else {\n                setTimeout(() => this._waitForThePromiseToSettle(event));\n            }\n        }\n    };\n};\n", "import { isActiveAudioNode } from '../helpers/is-active-audio-node';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassive } from '../helpers/set-internal-state-to-passive';\nimport {\n    IAudioParam,\n    IAudioScheduledSourceNodeEventMap,\n    IMinimalOfflineAudioContext,\n    IOscillatorNode,\n    IOscillatorNodeRenderer,\n    IOscillatorOptions\n} from '../interfaces';\nimport {\n    TContext,\n    TEventHandler,\n    TNativeOscillatorNode,\n    TOscillatorNodeConstructorFactory,\n    TOscillatorNodeRenderer,\n    TOscillatorType\n} from '../types';\n\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max', // This attribute has no effect for nodes with no inputs.\n    channelInterpretation: 'speakers', // This attribute has no effect for nodes with no inputs.\n    detune: 0,\n    frequency: 440,\n    periodicWave: undefined,\n    type: 'sine'\n} as const;\n\nexport const createOscillatorNodeConstructor: TOscillatorNodeConstructorFactory = (\n    audioNodeConstructor,\n    createAudioParam,\n    createNativeOscillatorNode,\n    createOscillatorNodeRenderer,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    wrapEventListener\n) => {\n    return class OscillatorNode<T extends TContext>\n        extends audioNodeConstructor<T, IAudioScheduledSourceNodeEventMap>\n        implements IOscillatorNode<T>\n    {\n        private _detune: IAudioParam;\n\n        private _frequency: IAudioParam;\n\n        private _nativeOscillatorNode: TNativeOscillatorNode;\n\n        private _onended: null | TEventHandler<this>;\n\n        private _oscillatorNodeRenderer: TOscillatorNodeRenderer<T>;\n\n        constructor(context: T, options?: Partial<IOscillatorOptions>) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeOscillatorNode = createNativeOscillatorNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const oscillatorNodeRenderer = <TOscillatorNodeRenderer<T>>(isOffline ? createOscillatorNodeRenderer() : null);\n            const nyquist = context.sampleRate / 2;\n\n            super(context, false, nativeOscillatorNode, oscillatorNodeRenderer);\n\n            // Bug #81: Firefox & Safari do not export the correct values for maxValue and minValue.\n            this._detune = createAudioParam(this, isOffline, nativeOscillatorNode.detune, 153600, -153600);\n            // Bug #76: Safari does not export the correct values for maxValue and minValue.\n            this._frequency = createAudioParam(this, isOffline, nativeOscillatorNode.frequency, nyquist, -nyquist);\n            this._nativeOscillatorNode = nativeOscillatorNode;\n            this._onended = null;\n            this._oscillatorNodeRenderer = oscillatorNodeRenderer;\n\n            if (this._oscillatorNodeRenderer !== null && mergedOptions.periodicWave !== undefined) {\n                (<IOscillatorNodeRenderer<IMinimalOfflineAudioContext>>this._oscillatorNodeRenderer).periodicWave =\n                    mergedOptions.periodicWave;\n            }\n        }\n\n        get detune(): IAudioParam {\n            return this._detune;\n        }\n\n        get frequency(): IAudioParam {\n            return this._frequency;\n        }\n\n        get onended(): null | TEventHandler<this> {\n            return this._onended;\n        }\n\n        set onended(value) {\n            const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n\n            this._nativeOscillatorNode.onended = wrappedListener;\n\n            const nativeOnEnded = this._nativeOscillatorNode.onended;\n\n            this._onended = nativeOnEnded !== null && nativeOnEnded === wrappedListener ? value : nativeOnEnded;\n        }\n\n        get type(): TOscillatorType {\n            return this._nativeOscillatorNode.type;\n        }\n\n        set type(value) {\n            this._nativeOscillatorNode.type = value;\n\n            if (this._oscillatorNodeRenderer !== null) {\n                this._oscillatorNodeRenderer.periodicWave = null;\n            }\n        }\n\n        public setPeriodicWave(periodicWave: PeriodicWave): void {\n            this._nativeOscillatorNode.setPeriodicWave(periodicWave);\n\n            if (this._oscillatorNodeRenderer !== null) {\n                this._oscillatorNodeRenderer.periodicWave = periodicWave;\n            }\n        }\n\n        public start(when = 0): void {\n            this._nativeOscillatorNode.start(when);\n\n            if (this._oscillatorNodeRenderer !== null) {\n                this._oscillatorNodeRenderer.start = when;\n            }\n\n            if (this.context.state !== 'closed') {\n                setInternalStateToActive(this);\n\n                const resetInternalStateToPassive = () => {\n                    this._nativeOscillatorNode.removeEventListener('ended', resetInternalStateToPassive);\n\n                    if (isActiveAudioNode(this)) {\n                        setInternalStateToPassive(this);\n                    }\n                };\n\n                this._nativeOscillatorNode.addEventListener('ended', resetInternalStateToPassive);\n            }\n        }\n\n        public stop(when = 0): void {\n            this._nativeOscillatorNode.stop(when);\n\n            if (this._oscillatorNodeRenderer !== null) {\n                this._oscillatorNodeRenderer.stop = when;\n            }\n        }\n    };\n};\n", "import { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { IMinimalOfflineAudioContext, IOfflineAudioContext, IOscillatorNode, IPeriodicWave } from '../interfaces';\nimport { TNativeOfflineAudioContext, TNativeOscillatorNode, TOscillatorNodeRendererFactoryFactory } from '../types';\n\nexport const createOscillatorNodeRendererFactory: TOscillatorNodeRendererFactoryFactory = (\n    connectAudioParam,\n    createNativeOscillatorNode,\n    getNativeAudioNode,\n    renderAutomation,\n    renderInputsOfAudioNode\n) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>() => {\n        const renderedNativeOscillatorNodes = new WeakMap<TNativeOfflineAudioContext, TNativeOscillatorNode>();\n\n        let periodicWave: null | IPeriodicWave = null;\n        let start: null | number = null;\n        let stop: null | number = null;\n\n        const createOscillatorNode = async (proxy: IOscillatorNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext) => {\n            let nativeOscillatorNode = getNativeAudioNode<T, TNativeOscillatorNode>(proxy);\n\n            // If the initially used nativeOscillatorNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeOscillatorNodeIsOwnedByContext = isOwnedByContext(nativeOscillatorNode, nativeOfflineAudioContext);\n\n            if (!nativeOscillatorNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeOscillatorNode.channelCount,\n                    channelCountMode: nativeOscillatorNode.channelCountMode,\n                    channelInterpretation: nativeOscillatorNode.channelInterpretation,\n                    detune: nativeOscillatorNode.detune.value,\n                    frequency: nativeOscillatorNode.frequency.value,\n                    periodicWave: periodicWave === null ? undefined : periodicWave,\n                    type: nativeOscillatorNode.type\n                };\n\n                nativeOscillatorNode = createNativeOscillatorNode(nativeOfflineAudioContext, options);\n\n                if (start !== null) {\n                    nativeOscillatorNode.start(start);\n                }\n\n                if (stop !== null) {\n                    nativeOscillatorNode.stop(stop);\n                }\n            }\n\n            renderedNativeOscillatorNodes.set(nativeOfflineAudioContext, nativeOscillatorNode);\n\n            if (!nativeOscillatorNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune);\n                await renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency);\n            } else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency);\n            }\n\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeOscillatorNode);\n\n            return nativeOscillatorNode;\n        };\n\n        return {\n            set periodicWave(value: null | IPeriodicWave) {\n                periodicWave = value;\n            },\n            set start(value: number) {\n                start = value;\n            },\n            set stop(value: number) {\n                stop = value;\n            },\n            render(proxy: IOscillatorNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext): Promise<TNativeOscillatorNode> {\n                const renderedNativeOscillatorNode = renderedNativeOscillatorNodes.get(nativeOfflineAudioContext);\n\n                if (renderedNativeOscillatorNode !== undefined) {\n                    return Promise.resolve(renderedNativeOscillatorNode);\n                }\n\n                return createOscillatorNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n", "import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { IAudioParam, IPannerNode, IPannerOptions } from '../interfaces';\nimport {\n    TAudioNodeRenderer,\n    TContext,\n    TDistanceModelType,\n    TNativePannerNode,\n    TPannerNodeConstructorFactory,\n    TPanningModelType\n} from '../types';\n\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'clamped-max',\n    channelInterpretation: 'speakers',\n    coneInnerAngle: 360,\n    coneOuterAngle: 360,\n    coneOuterGain: 0,\n    distanceModel: 'inverse',\n    maxDistance: 10000,\n    orientationX: 1,\n    orientationY: 0,\n    orientationZ: 0,\n    panningModel: 'equalpower',\n    positionX: 0,\n    positionY: 0,\n    positionZ: 0,\n    refDistance: 1,\n    rolloffFactor: 1\n} as const;\n\nexport const createPannerNodeConstructor: TPannerNodeConstructorFactory = (\n    audioNodeConstructor,\n    createAudioParam,\n    createNativePannerNode,\n    createPannerNodeRenderer,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    setAudioNodeTailTime\n) => {\n    return class PannerNode<T extends TContext> extends audioNodeConstructor<T> implements IPannerNode<T> {\n        private _nativePannerNode: TNativePannerNode;\n\n        private _orientationX: IAudioParam;\n\n        private _orientationY: IAudioParam;\n\n        private _orientationZ: IAudioParam;\n\n        private _positionX: IAudioParam;\n\n        private _positionY: IAudioParam;\n\n        private _positionZ: IAudioParam;\n\n        constructor(context: T, options?: Partial<IPannerOptions>) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativePannerNode = createNativePannerNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const pannerNodeRenderer = <TAudioNodeRenderer<T, this>>(isOffline ? createPannerNodeRenderer() : null);\n\n            super(context, false, nativePannerNode, pannerNodeRenderer);\n\n            this._nativePannerNode = nativePannerNode;\n            // Bug #74: Safari does not export the correct values for maxValue and minValue.\n            this._orientationX = createAudioParam(\n                this,\n                isOffline,\n                nativePannerNode.orientationX,\n                MOST_POSITIVE_SINGLE_FLOAT,\n                MOST_NEGATIVE_SINGLE_FLOAT\n            );\n            this._orientationY = createAudioParam(\n                this,\n                isOffline,\n                nativePannerNode.orientationY,\n                MOST_POSITIVE_SINGLE_FLOAT,\n                MOST_NEGATIVE_SINGLE_FLOAT\n            );\n            this._orientationZ = createAudioParam(\n                this,\n                isOffline,\n                nativePannerNode.orientationZ,\n                MOST_POSITIVE_SINGLE_FLOAT,\n                MOST_NEGATIVE_SINGLE_FLOAT\n            );\n            this._positionX = createAudioParam(\n                this,\n                isOffline,\n                nativePannerNode.positionX,\n                MOST_POSITIVE_SINGLE_FLOAT,\n                MOST_NEGATIVE_SINGLE_FLOAT\n            );\n            this._positionY = createAudioParam(\n                this,\n                isOffline,\n                nativePannerNode.positionY,\n                MOST_POSITIVE_SINGLE_FLOAT,\n                MOST_NEGATIVE_SINGLE_FLOAT\n            );\n            this._positionZ = createAudioParam(\n                this,\n                isOffline,\n                nativePannerNode.positionZ,\n                MOST_POSITIVE_SINGLE_FLOAT,\n                MOST_NEGATIVE_SINGLE_FLOAT\n            );\n\n            // @todo Determine a meaningful tail-time instead of just using one second.\n            setAudioNodeTailTime(this, 1);\n        }\n\n        get coneInnerAngle(): number {\n            return this._nativePannerNode.coneInnerAngle;\n        }\n\n        set coneInnerAngle(value) {\n            this._nativePannerNode.coneInnerAngle = value;\n        }\n\n        get coneOuterAngle(): number {\n            return this._nativePannerNode.coneOuterAngle;\n        }\n\n        set coneOuterAngle(value) {\n            this._nativePannerNode.coneOuterAngle = value;\n        }\n\n        get coneOuterGain(): number {\n            return this._nativePannerNode.coneOuterGain;\n        }\n\n        set coneOuterGain(value) {\n            this._nativePannerNode.coneOuterGain = value;\n        }\n\n        get distanceModel(): TDistanceModelType {\n            return this._nativePannerNode.distanceModel;\n        }\n\n        set distanceModel(value) {\n            this._nativePannerNode.distanceModel = value;\n        }\n\n        get maxDistance(): number {\n            return this._nativePannerNode.maxDistance;\n        }\n\n        set maxDistance(value) {\n            this._nativePannerNode.maxDistance = value;\n        }\n\n        get orientationX(): IAudioParam {\n            return this._orientationX;\n        }\n\n        get orientationY(): IAudioParam {\n            return this._orientationY;\n        }\n\n        get orientationZ(): IAudioParam {\n            return this._orientationZ;\n        }\n\n        get panningModel(): TPanningModelType {\n            return this._nativePannerNode.panningModel;\n        }\n\n        set panningModel(value) {\n            this._nativePannerNode.panningModel = value;\n        }\n\n        get positionX(): IAudioParam {\n            return this._positionX;\n        }\n\n        get positionY(): IAudioParam {\n            return this._positionY;\n        }\n\n        get positionZ(): IAudioParam {\n            return this._positionZ;\n        }\n\n        get refDistance(): number {\n            return this._nativePannerNode.refDistance;\n        }\n\n        set refDistance(value) {\n            this._nativePannerNode.refDistance = value;\n        }\n\n        get rolloffFactor(): number {\n            return this._nativePannerNode.rolloffFactor;\n        }\n\n        set rolloffFactor(value) {\n            this._nativePannerNode.rolloffFactor = value;\n        }\n    };\n};\n", "import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { IMinimalOfflineAudioContext, INativePannerNodeFaker, IOfflineAudioContext, IPannerNode } from '../interfaces';\nimport {\n    TNativeAudioBuffer,\n    TNativeGainNode,\n    TNativeOfflineAudioContext,\n    TNativePannerNode,\n    TPannerNodeRendererFactoryFactory\n} from '../types';\n\nexport const createPannerNodeRendererFactory: TPannerNodeRendererFactoryFactory = (\n    connectAudioParam,\n    createNativeChannelMergerNode,\n    createNativeConstantSourceNode,\n    createNativeGainNode,\n    createNativePannerNode,\n    getNativeAudioNode,\n    nativeOfflineAudioContextConstructor,\n    renderAutomation,\n    renderInputsOfAudioNode,\n    renderNativeOfflineAudioContext\n) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>() => {\n        const renderedNativeAudioNodes = new WeakMap<TNativeOfflineAudioContext, TNativeGainNode | TNativePannerNode>();\n\n        let renderedBufferPromise: null | Promise<TNativeAudioBuffer> = null;\n\n        const createAudioNode = async (proxy: IPannerNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext) => {\n            let nativeGainNode: null | TNativeGainNode = null;\n            let nativePannerNode = getNativeAudioNode<T, TNativePannerNode>(proxy);\n\n            const commonAudioNodeOptions = {\n                channelCount: nativePannerNode.channelCount,\n                channelCountMode: nativePannerNode.channelCountMode,\n                channelInterpretation: nativePannerNode.channelInterpretation\n            };\n            const commonNativePannerNodeOptions = {\n                ...commonAudioNodeOptions,\n                coneInnerAngle: nativePannerNode.coneInnerAngle,\n                coneOuterAngle: nativePannerNode.coneOuterAngle,\n                coneOuterGain: nativePannerNode.coneOuterGain,\n                distanceModel: nativePannerNode.distanceModel,\n                maxDistance: nativePannerNode.maxDistance,\n                panningModel: nativePannerNode.panningModel,\n                refDistance: nativePannerNode.refDistance,\n                rolloffFactor: nativePannerNode.rolloffFactor\n            };\n\n            // If the initially used nativePannerNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativePannerNodeIsOwnedByContext = isOwnedByContext(nativePannerNode, nativeOfflineAudioContext);\n\n            // Bug #124: Safari does not support modifying the orientation and the position with AudioParams.\n            if ('bufferSize' in nativePannerNode) {\n                nativeGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions, gain: 1 });\n            } else if (!nativePannerNodeIsOwnedByContext) {\n                const options = {\n                    ...commonNativePannerNodeOptions,\n                    orientationX: nativePannerNode.orientationX.value,\n                    orientationY: nativePannerNode.orientationY.value,\n                    orientationZ: nativePannerNode.orientationZ.value,\n                    positionX: nativePannerNode.positionX.value,\n                    positionY: nativePannerNode.positionY.value,\n                    positionZ: nativePannerNode.positionZ.value\n                };\n\n                nativePannerNode = createNativePannerNode(nativeOfflineAudioContext, options);\n            }\n\n            renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeGainNode === null ? nativePannerNode : nativeGainNode);\n\n            if (nativeGainNode !== null) {\n                if (renderedBufferPromise === null) {\n                    if (nativeOfflineAudioContextConstructor === null) {\n                        throw new Error('Missing the native OfflineAudioContext constructor.');\n                    }\n\n                    const partialOfflineAudioContext = new nativeOfflineAudioContextConstructor(\n                        6,\n                        // Bug #17: Safari does not yet expose the length.\n                        proxy.context.length,\n                        nativeOfflineAudioContext.sampleRate\n                    );\n                    const nativeChannelMergerNode = createNativeChannelMergerNode(partialOfflineAudioContext, {\n                        channelCount: 1,\n                        channelCountMode: 'explicit',\n                        channelInterpretation: 'speakers',\n                        numberOfInputs: 6\n                    });\n                    nativeChannelMergerNode.connect(partialOfflineAudioContext.destination);\n\n                    renderedBufferPromise = (async () => {\n                        const nativeConstantSourceNodes = await Promise.all(\n                            [\n                                proxy.orientationX,\n                                proxy.orientationY,\n                                proxy.orientationZ,\n                                proxy.positionX,\n                                proxy.positionY,\n                                proxy.positionZ\n                            ].map(async (audioParam, index) => {\n                                const nativeConstantSourceNode = createNativeConstantSourceNode(partialOfflineAudioContext, {\n                                    channelCount: 1,\n                                    channelCountMode: 'explicit',\n                                    channelInterpretation: 'discrete',\n                                    offset: index === 0 ? 1 : 0\n                                });\n\n                                await renderAutomation(partialOfflineAudioContext, audioParam, nativeConstantSourceNode.offset);\n\n                                return nativeConstantSourceNode;\n                            })\n                        );\n\n                        for (let i = 0; i < 6; i += 1) {\n                            nativeConstantSourceNodes[i].connect(nativeChannelMergerNode, 0, i);\n                            nativeConstantSourceNodes[i].start(0);\n                        }\n\n                        return renderNativeOfflineAudioContext(partialOfflineAudioContext);\n                    })();\n                }\n\n                const renderedBuffer = await renderedBufferPromise;\n                const inputGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions, gain: 1 });\n\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, inputGainNode);\n\n                const channelDatas: Float32Array[] = [];\n\n                for (let i = 0; i < renderedBuffer.numberOfChannels; i += 1) {\n                    channelDatas.push(renderedBuffer.getChannelData(i));\n                }\n\n                let lastOrientation = [channelDatas[0][0], channelDatas[1][0], channelDatas[2][0]];\n                let lastPosition = [channelDatas[3][0], channelDatas[4][0], channelDatas[5][0]];\n                let gateGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions, gain: 1 });\n                let partialPannerNode = createNativePannerNode(nativeOfflineAudioContext, {\n                    ...commonNativePannerNodeOptions,\n                    orientationX: lastOrientation[0],\n                    orientationY: lastOrientation[1],\n                    orientationZ: lastOrientation[2],\n                    positionX: lastPosition[0],\n                    positionY: lastPosition[1],\n                    positionZ: lastPosition[2]\n                });\n\n                inputGainNode.connect(gateGainNode).connect((<INativePannerNodeFaker>partialPannerNode).inputs[0]);\n                partialPannerNode.connect(nativeGainNode);\n\n                for (let i = 128; i < renderedBuffer.length; i += 128) {\n                    const orientation: [number, number, number] = [channelDatas[0][i], channelDatas[1][i], channelDatas[2][i]];\n                    const positon: [number, number, number] = [channelDatas[3][i], channelDatas[4][i], channelDatas[5][i]];\n\n                    if (\n                        orientation.some((value, index) => value !== lastOrientation[index]) ||\n                        positon.some((value, index) => value !== lastPosition[index])\n                    ) {\n                        lastOrientation = orientation;\n                        lastPosition = positon;\n\n                        const currentTime = i / nativeOfflineAudioContext.sampleRate;\n\n                        gateGainNode.gain.setValueAtTime(0, currentTime);\n\n                        gateGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions, gain: 0 });\n                        partialPannerNode = createNativePannerNode(nativeOfflineAudioContext, {\n                            ...commonNativePannerNodeOptions,\n                            orientationX: lastOrientation[0],\n                            orientationY: lastOrientation[1],\n                            orientationZ: lastOrientation[2],\n                            positionX: lastPosition[0],\n                            positionY: lastPosition[1],\n                            positionZ: lastPosition[2]\n                        });\n\n                        gateGainNode.gain.setValueAtTime(1, currentTime);\n\n                        inputGainNode.connect(gateGainNode).connect((<INativePannerNodeFaker>partialPannerNode).inputs[0]);\n                        partialPannerNode.connect(nativeGainNode);\n                    }\n                }\n\n                return nativeGainNode;\n            }\n\n            if (!nativePannerNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX);\n                await renderAutomation(nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY);\n                await renderAutomation(nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ);\n                await renderAutomation(nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX);\n                await renderAutomation(nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY);\n                await renderAutomation(nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ);\n            } else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ);\n            }\n\n            if (isNativeAudioNodeFaker(nativePannerNode)) {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode.inputs[0]);\n            } else {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode);\n            }\n\n            return nativePannerNode;\n        };\n\n        return {\n            render(\n                proxy: IPannerNode<T>,\n                nativeOfflineAudioContext: TNativeOfflineAudioContext\n            ): Promise<TNativeGainNode | TNativePannerNode> {\n                const renderedNativeGainNodeOrNativePannerNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n\n                if (renderedNativeGainNodeOrNativePannerNode !== undefined) {\n                    return Promise.resolve(renderedNativeGainNodeOrNativePannerNode);\n                }\n\n                return createAudioNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n", "import { IPeriodicWave, IPeriodicWaveOptions } from '../interfaces';\nimport { TContext, TPeriodicWaveConstructorFactory } from '../types';\n\nconst DEFAULT_OPTIONS = {\n    disableNormalization: false\n} as const;\n\nexport const createPeriodicWaveConstructor: TPeriodicWaveConstructorFactory = (\n    createNativePeriodicWave,\n    getNativeContext,\n    periodicWaveStore,\n    sanitizePeriodicWaveOptions\n) => {\n    return class PeriodicWave<T extends TContext> implements IPeriodicWave {\n        constructor(context: T, options?: Partial<IPeriodicWaveOptions>) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = sanitizePeriodicWaveOptions({ ...DEFAULT_OPTIONS, ...options });\n            const periodicWave = createNativePeriodicWave(nativeContext, mergedOptions);\n\n            periodicWaveStore.add(periodicWave);\n\n            // This does violate all good pratices but it is used here to simplify the handling of periodic waves.\n            return periodicWave;\n        }\n\n        public static [Symbol.hasInstance](instance: unknown): boolean {\n            return (\n                (instance !== null && typeof instance === 'object' && Object.getPrototypeOf(instance) === PeriodicWave.prototype) ||\n                periodicWaveStore.has(<any>instance)\n            );\n        }\n    };\n};\n", "import { TRenderAutomationFactory } from '../types';\n\nexport const createRenderAutomation: TRenderAutomationFactory = (getAudioParamRenderer, renderInputsOfAudioParam) => {\n    return (nativeOfflineAudioContext, audioParam, nativeAudioParam) => {\n        const audioParamRenderer = getAudioParamRenderer(audioParam);\n\n        audioParamRenderer.replay(nativeAudioParam);\n\n        return renderInputsOfAudioParam(audioParam, nativeOfflineAudioContext, nativeAudioParam);\n    };\n};\n", "import { IAudioDestinationNode } from '../interfaces';\nimport { TRenderInputsOfAudioNodeFactory } from '../types';\n\nexport const createRenderInputsOfAudioNode: TRenderInputsOfAudioNodeFactory = (\n    getAudioNodeConnections,\n    getAudioNodeRenderer,\n    isPartOfACycle\n) => {\n    return async (audioNode, nativeOfflineAudioContext, nativeAudioNode) => {\n        const audioNodeConnections = getAudioNodeConnections(audioNode);\n\n        await Promise.all(\n            audioNodeConnections.activeInputs\n                .map((connections, input) =>\n                    Array.from(connections).map(async ([source, output]) => {\n                        const audioNodeRenderer = getAudioNodeRenderer(source);\n                        const renderedNativeAudioNode = await audioNodeRenderer.render(source, nativeOfflineAudioContext);\n                        const destination = <IAudioDestinationNode<typeof audioNode.context>>audioNode.context.destination;\n\n                        if (!isPartOfACycle(source) && (audioNode !== destination || !isPartOfACycle(audioNode))) {\n                            renderedNativeAudioNode.connect(nativeAudioNode, output, input);\n                        }\n                    })\n                )\n                .reduce((allRenderingPromises, renderingPromises) => [...allRenderingPromises, ...renderingPromises], [])\n        );\n    };\n};\n", "import { IAudioParam, IMinimalOfflineAudioContext, IOfflineAudioContext } from '../interfaces';\nimport { TNativeAudioParam, TNativeOfflineAudioContext, TRenderInputsOfAudioParamFactory } from '../types';\n\nexport const createRenderInputsOfAudioParam: TRenderInputsOfAudioParamFactory = (\n    getAudioNodeRenderer,\n    getAudioParamConnections,\n    isPartOfACycle\n) => {\n    return async <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>(\n        audioParam: IAudioParam,\n        nativeOfflineAudioContext: TNativeOfflineAudioContext,\n        nativeAudioParam: TNativeAudioParam\n    ): Promise<void> => {\n        const audioParamConnections = getAudioParamConnections<T>(audioParam);\n\n        await Promise.all(\n            Array.from(audioParamConnections.activeInputs).map(async ([source, output]) => {\n                const audioNodeRenderer = getAudioNodeRenderer(source);\n                const renderedNativeAudioNode = await audioNodeRenderer.render(source, nativeOfflineAudioContext);\n\n                if (!isPartOfACycle(source)) {\n                    renderedNativeAudioNode.connect(nativeAudioParam, output);\n                }\n            })\n        );\n    };\n};\n", "import { testPromiseSupport } from '../helpers/test-promise-support';\nimport { IOfflineAudioCompletionEvent } from '../interfaces';\nimport { TNativeAudioBuffer, TRenderNativeOfflineAudioContextFactory } from '../types';\n\nexport const createRenderNativeOfflineAudioContext: TRenderNativeOfflineAudioContextFactory = (\n    cacheTestResult,\n    createNativeGainNode,\n    createNativeScriptProcessorNode,\n    testOfflineAudioContextCurrentTimeSupport\n) => {\n    return (nativeOfflineAudioContext) => {\n        // Bug #21: Safari does not support promises yet.\n        if (cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeOfflineAudioContext))) {\n            // Bug #158: Chrome and Edge do not advance currentTime if it is not accessed while rendering the audio.\n            return Promise.resolve(\n                cacheTestResult(testOfflineAudioContextCurrentTimeSupport, testOfflineAudioContextCurrentTimeSupport)\n            ).then((isOfflineAudioContextCurrentTimeSupported) => {\n                if (!isOfflineAudioContextCurrentTimeSupported) {\n                    const scriptProcessorNode = createNativeScriptProcessorNode(nativeOfflineAudioContext, 512, 0, 1);\n\n                    nativeOfflineAudioContext.oncomplete = () => {\n                        scriptProcessorNode.onaudioprocess = null; // tslint:disable-line:deprecation\n                        scriptProcessorNode.disconnect();\n                    };\n                    scriptProcessorNode.onaudioprocess = () => nativeOfflineAudioContext.currentTime; // tslint:disable-line:deprecation\n\n                    scriptProcessorNode.connect(nativeOfflineAudioContext.destination);\n                }\n\n                return nativeOfflineAudioContext.startRendering();\n            });\n        }\n\n        return new Promise<TNativeAudioBuffer>((resolve) => {\n            // Bug #48: Safari does not render an OfflineAudioContext without any connected node.\n            const gainNode = createNativeGainNode(nativeOfflineAudioContext, {\n                channelCount: 1,\n                channelCountMode: 'explicit',\n                channelInterpretation: 'discrete',\n                gain: 0\n            });\n\n            nativeOfflineAudioContext.oncomplete = (event: IOfflineAudioCompletionEvent) => {\n                gainNode.disconnect();\n\n                resolve(event.renderedBuffer);\n            };\n\n            gainNode.connect(nativeOfflineAudioContext.destination);\n\n            nativeOfflineAudioContext.startRendering();\n        });\n    };\n};\n", "import { TSetActiveAudioWorkletNodeInputsFactory } from '../types';\n\nexport const createSetActiveAudioWorkletNodeInputs: TSetActiveAudioWorkletNodeInputsFactory = (activeAudioWorkletNodeInputsStore) => {\n    return (nativeAudioWorkletNode, activeInputs) => {\n        activeAudioWorkletNodeInputsStore.set(nativeAudioWorkletNode, activeInputs);\n    };\n};\n", "import { TSetAudioNodeTailTimeFactory } from '../types';\n\nexport const createSetAudioNodeTailTime: TSetAudioNodeTailTimeFactory = (audioNodeTailTimeStore) => {\n    return (audioNode, tailTime) => audioNodeTailTimeStore.set(audioNode, tailTime);\n};\n", "import { wrapAudioBufferGetChannelDataMethod } from '../helpers/wrap-audio-buffer-get-channel-data-method';\nimport { TStartRenderingFactory } from '../types';\n\nexport const createStartRendering: TStartRenderingFactory = (\n    audioBufferStore,\n    cacheTestResult,\n    getAudioNodeRenderer,\n    getUnrenderedAudioWorkletNodes,\n    renderNativeOfflineAudioContext,\n    testAudioBufferCopyChannelMethodsOutOfBoundsSupport,\n    wrapAudioBufferCopyChannelMethods,\n    wrapAudioBufferCopyChannelMethodsOutOfBounds\n) => {\n    return (destination, nativeOfflineAudioContext) =>\n        getAudioNodeRenderer(destination)\n            .render(destination, nativeOfflineAudioContext)\n            /*\n             * Bug #86 & #87: Invoking the renderer of an AudioWorkletNode might be necessary if it has no direct or indirect connection to the\n             * destination.\n             */\n            .then(() =>\n                Promise.all(\n                    Array.from(getUnrenderedAudioWorkletNodes(nativeOfflineAudioContext)).map((audioWorkletNode) =>\n                        getAudioNodeRenderer(audioWorkletNode).render(audioWorkletNode, nativeOfflineAudioContext)\n                    )\n                )\n            )\n            .then(() => renderNativeOfflineAudioContext(nativeOfflineAudioContext))\n            .then((audioBuffer) => {\n                // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n                // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n                if (typeof audioBuffer.copyFromChannel !== 'function') {\n                    wrapAudioBufferCopyChannelMethods(audioBuffer);\n                    wrapAudioBufferGetChannelDataMethod(audioBuffer);\n                    // Bug #157: Firefox does not allow the bufferOffset to be out-of-bounds.\n                } else if (\n                    !cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () =>\n                        testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer)\n                    )\n                ) {\n                    wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n                }\n\n                audioBufferStore.add(audioBuffer);\n\n                return audioBuffer;\n            });\n};\n", "import { IAudioParam, IStereoPannerNode, IStereoPannerOptions } from '../interfaces';\nimport { TAudioNodeRenderer, TContext, TStereoPannerNodeConstructorFactory } from '../types';\n\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    /*\n     * Bug #105: The channelCountMode should be 'clamped-max' according to the spec but is set to 'explicit' to achieve consistent\n     * behavior.\n     */\n    channelCountMode: 'explicit',\n    channelInterpretation: 'speakers',\n    pan: 0\n} as const;\n\nexport const createStereoPannerNodeConstructor: TStereoPannerNodeConstructorFactory = (\n    audioNodeConstructor,\n    createAudioParam,\n    createNativeStereoPannerNode,\n    createStereoPannerNodeRenderer,\n    getNativeContext,\n    isNativeOfflineAudioContext\n) => {\n    return class StereoPannerNode<T extends TContext> extends audioNodeConstructor<T> implements IStereoPannerNode<T> {\n        private _pan: IAudioParam;\n\n        constructor(context: T, options?: Partial<IStereoPannerOptions>) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeStereoPannerNode = createNativeStereoPannerNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const stereoPannerNodeRenderer = <TAudioNodeRenderer<T, this>>(isOffline ? createStereoPannerNodeRenderer() : null);\n\n            super(context, false, nativeStereoPannerNode, stereoPannerNodeRenderer);\n\n            this._pan = createAudioParam(this, isOffline, nativeStereoPannerNode.pan);\n        }\n\n        get pan(): IAudioParam {\n            return this._pan;\n        }\n    };\n};\n", "import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { IMinimalOfflineAudioContext, IOfflineAudioContext, IStereoPannerNode } from '../interfaces';\nimport { TNativeOfflineAudioContext, TNativeStereoPannerNode, TStereoPannerNodeRendererFactoryFactory } from '../types';\n\nexport const createStereoPannerNodeRendererFactory: TStereoPannerNodeRendererFactoryFactory = (\n    connectAudioParam,\n    createNativeStereoPannerNode,\n    getNativeAudioNode,\n    renderAutomation,\n    renderInputsOfAudioNode\n) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>() => {\n        const renderedNativeStereoPannerNodes = new WeakMap<TNativeOfflineAudioContext, TNativeStereoPannerNode>();\n\n        const createStereoPannerNode = async (proxy: IStereoPannerNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext) => {\n            let nativeStereoPannerNode = getNativeAudioNode<T, TNativeStereoPannerNode>(proxy);\n\n            /*\n             * If the initially used nativeStereoPannerNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeStereoPannerNodeIsOwnedByContext = isOwnedByContext(nativeStereoPannerNode, nativeOfflineAudioContext);\n\n            if (!nativeStereoPannerNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeStereoPannerNode.channelCount,\n                    channelCountMode: nativeStereoPannerNode.channelCountMode,\n                    channelInterpretation: nativeStereoPannerNode.channelInterpretation,\n                    pan: nativeStereoPannerNode.pan.value\n                };\n\n                nativeStereoPannerNode = createNativeStereoPannerNode(nativeOfflineAudioContext, options);\n            }\n\n            renderedNativeStereoPannerNodes.set(nativeOfflineAudioContext, nativeStereoPannerNode);\n\n            if (!nativeStereoPannerNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan);\n            } else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan);\n            }\n\n            if (isNativeAudioNodeFaker(nativeStereoPannerNode)) {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode.inputs[0]);\n            } else {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode);\n            }\n\n            return nativeStereoPannerNode;\n        };\n\n        return {\n            render(proxy: IStereoPannerNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext): Promise<TNativeStereoPannerNode> {\n                const renderedNativeStereoPannerNode = renderedNativeStereoPannerNodes.get(nativeOfflineAudioContext);\n\n                if (renderedNativeStereoPannerNode !== undefined) {\n                    return Promise.resolve(renderedNativeStereoPannerNode);\n                }\n\n                return createStereoPannerNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n", "import { TTestAudioBufferConstructorSupportFactory } from '../types';\n\n// Bug #33: Safari exposes an AudioBuffer but it can't be used as a constructor.\nexport const createTestAudioBufferConstructorSupport: TTestAudioBufferConstructorSupportFactory = (nativeAudioBufferConstructor) => {\n    return () => {\n        if (nativeAudioBufferConstructor === null) {\n            return false;\n        }\n\n        try {\n            new nativeAudioBufferConstructor({ length: 1, sampleRate: 44100 }); // tslint:disable-line:no-unused-expression\n        } catch {\n            return false;\n        }\n\n        return true;\n    };\n};\n", "import { TTestAudioBufferCopyChannelMethodsSubarraySupportFactory } from '../types';\n\n/*\n * Firefox up to version 67 didn't fully support the copyFromChannel() and copyToChannel() methods. Therefore testing one of those methods\n * is enough to know if the other one is supported as well.\n */\nexport const createTestAudioBufferCopyChannelMethodsSubarraySupport: TTestAudioBufferCopyChannelMethodsSubarraySupportFactory = (\n    nativeOfflineAudioContextConstructor\n) => {\n    return () => {\n        if (nativeOfflineAudioContextConstructor === null) {\n            return false;\n        }\n\n        const nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n        const nativeAudioBuffer = nativeOfflineAudioContext.createBuffer(1, 1, 44100);\n\n        // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n        if (nativeAudioBuffer.copyToChannel === undefined) {\n            return true;\n        }\n\n        const source = new Float32Array(2);\n\n        try {\n            nativeAudioBuffer.copyFromChannel(source, 0, 0);\n        } catch {\n            return false;\n        }\n\n        return true;\n    };\n};\n", "import { TTestAudioContextCloseMethodSupportFactory } from '../types';\n\nexport const createTestAudioContextCloseMethodSupport: TTestAudioContextCloseMethodSupportFactory = (nativeAudioContextConstructor) => {\n    return () => {\n        if (nativeAudioContextConstructor === null) {\n            return false;\n        }\n\n        // Try to check the prototype before constructing the AudioContext.\n        if (nativeAudioContextConstructor.prototype !== undefined && nativeAudioContextConstructor.prototype.close !== undefined) {\n            return true;\n        }\n\n        const audioContext = new nativeAudioContextConstructor();\n\n        const isAudioContextClosable = audioContext.close !== undefined;\n\n        try {\n            audioContext.close();\n        } catch {\n            // Ignore errors.\n        }\n\n        return isAudioContextClosable;\n    };\n};\n", "import { TTestAudioContextDecodeAudioDataMethodTypeErrorSupportFactory } from '../types';\n\n/**\n * Edge up to version 14, Firefox up to version 52, Safari up to version 9 and maybe other browsers\n * did not refuse to decode invalid parameters with a TypeError.\n */\nexport const createTestAudioContextDecodeAudioDataMethodTypeErrorSupport: TTestAudioContextDecodeAudioDataMethodTypeErrorSupportFactory = (\n    nativeOfflineAudioContextConstructor\n) => {\n    return () => {\n        if (nativeOfflineAudioContextConstructor === null) {\n            return Promise.resolve(false);\n        }\n\n        const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n\n        // Bug #21: Safari does not support promises yet.\n        return new Promise((resolve) => {\n            let isPending = true;\n\n            const resolvePromise = (err: Error) => {\n                if (isPending) {\n                    isPending = false;\n\n                    offlineAudioContext.startRendering();\n\n                    resolve(err instanceof TypeError);\n                }\n            };\n\n            let promise;\n\n            // Bug #26: Safari throws a synchronous error.\n            try {\n                promise = offlineAudioContext\n                    // Bug #1: Safari requires a successCallback.\n                    .decodeAudioData(\n                        <any>null,\n                        () => {\n                            // Ignore the success callback.\n                        },\n                        resolvePromise\n                    );\n            } catch (err) {\n                resolvePromise(err);\n            }\n\n            // Bug #21: Safari does not support promises yet.\n            if (promise !== undefined) {\n                // Bug #6: Chrome, Edge and Firefox do not call the errorCallback.\n                promise.catch(resolvePromise);\n            }\n        });\n    };\n};\n", "import { TTestAudioContextOptionsSupportFactory } from '../types';\n\nexport const createTestAudioContextOptionsSupport: TTestAudioContextOptionsSupportFactory = (nativeAudioContextConstructor) => {\n    return () => {\n        if (nativeAudioContextConstructor === null) {\n            return false;\n        }\n\n        let audioContext;\n\n        try {\n            audioContext = new nativeAudioContextConstructor({ latencyHint: 'balanced' });\n        } catch {\n            return false;\n        }\n\n        audioContext.close();\n\n        return true;\n    };\n};\n", "import { TTestAudioNodeConnectMethodSupportFactory } from '../types';\n\n// Safari up to version 12.0 (but not v12.1) didn't return the destination in case it was an AudioNode.\nexport const createTestAudioNodeConnectMethodSupport: TTestAudioNodeConnectMethodSupportFactory = (\n    nativeOfflineAudioContextConstructor\n) => {\n    return () => {\n        if (nativeOfflineAudioContextConstructor === null) {\n            return false;\n        }\n\n        const nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n        const nativeGainNode = nativeOfflineAudioContext.createGain();\n        const isSupported = nativeGainNode.connect(nativeGainNode) === nativeGainNode;\n\n        nativeGainNode.disconnect(nativeGainNode);\n\n        return isSupported;\n    };\n};\n", "import { TTestAudioWorkletProcessorNoOutputsSupportFactory } from '../types';\n\n/**\n * Chrome version 66 and 67 did not call the process() function of an AudioWorkletProcessor if it had no outputs. AudioWorklet support was\n * enabled by default in version 66.\n */\nexport const createTestAudioWorkletProcessorNoOutputsSupport: TTestAudioWorkletProcessorNoOutputsSupportFactory = (\n    nativeAudioWorkletNodeConstructor,\n    nativeOfflineAudioContextConstructor\n) => {\n    return async () => {\n        // Bug #61: If there is no native AudioWorkletNode it gets faked and therefore it is no problem if the it doesn't exist.\n        if (nativeAudioWorkletNodeConstructor === null) {\n            return true;\n        }\n\n        if (nativeOfflineAudioContextConstructor === null) {\n            return false;\n        }\n\n        const blob = new Blob(\n            [\n                'let c,p;class A extends AudioWorkletProcessor{constructor(){super();this.port.onmessage=(e)=>{p=e.data;p.onmessage=()=>{p.postMessage(c);p.close()};this.port.postMessage(0)}}process(){c=1}}registerProcessor(\"a\",A)'\n            ],\n            {\n                type: 'application/javascript; charset=utf-8'\n            }\n        );\n        const messageChannel = new MessageChannel();\n        // Bug #141: Safari does not support creating an OfflineAudioContext with less than 44100 Hz.\n        const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 128, 44100);\n        const url = URL.createObjectURL(blob);\n\n        let isCallingProcess = false;\n\n        try {\n            await offlineAudioContext.audioWorklet.addModule(url);\n\n            const audioWorkletNode = new nativeAudioWorkletNodeConstructor(offlineAudioContext, 'a', { numberOfOutputs: 0 });\n            const oscillator = offlineAudioContext.createOscillator();\n\n            await new Promise<void>((resolve) => {\n                audioWorkletNode.port.onmessage = () => resolve();\n                audioWorkletNode.port.postMessage(messageChannel.port2, [messageChannel.port2]);\n            });\n\n            audioWorkletNode.port.onmessage = () => (isCallingProcess = true);\n\n            oscillator.connect(audioWorkletNode);\n            oscillator.start(0);\n\n            await offlineAudioContext.startRendering();\n\n            isCallingProcess = await new Promise((resolve) => {\n                messageChannel.port1.onmessage = ({ data }) => resolve(data === 1);\n                messageChannel.port1.postMessage(0);\n            });\n        } catch {\n            // Ignore errors.\n        } finally {\n            messageChannel.port1.close();\n            URL.revokeObjectURL(url);\n        }\n\n        return isCallingProcess;\n    };\n};\n", "import { TTestAudioWorkletProcessorPostMessageSupportFactory } from '../types';\n\n// Bug #179: Firefox does not allow to transfer any buffer which has been passed to the process() method as an argument.\nexport const createTestAudioWorkletProcessorPostMessageSupport: TTestAudioWorkletProcessorPostMessageSupportFactory = (\n    nativeAudioWorkletNodeConstructor,\n    nativeOfflineAudioContextConstructor\n) => {\n    return async () => {\n        // Bug #61: If there is no native AudioWorkletNode it gets faked and therefore it is no problem if the it doesn't exist.\n        if (nativeAudioWorkletNodeConstructor === null) {\n            return true;\n        }\n\n        if (nativeOfflineAudioContextConstructor === null) {\n            return false;\n        }\n\n        const blob = new Blob(\n            ['class A extends AudioWorkletProcessor{process(i){this.port.postMessage(i,[i[0][0].buffer])}}registerProcessor(\"a\",A)'],\n            {\n                type: 'application/javascript; charset=utf-8'\n            }\n        );\n        // Bug #141: Safari does not support creating an OfflineAudioContext with less than 44100 Hz.\n        const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 128, 44100);\n        const url = URL.createObjectURL(blob);\n\n        let isEmittingMessageEvents = false;\n        let isEmittingProcessorErrorEvents = false;\n\n        try {\n            await offlineAudioContext.audioWorklet.addModule(url);\n\n            const audioWorkletNode = new nativeAudioWorkletNodeConstructor(offlineAudioContext, 'a', { numberOfOutputs: 0 });\n            const oscillator = offlineAudioContext.createOscillator();\n\n            audioWorkletNode.port.onmessage = () => (isEmittingMessageEvents = true);\n            audioWorkletNode.onprocessorerror = () => (isEmittingProcessorErrorEvents = true);\n\n            oscillator.connect(audioWorkletNode);\n            oscillator.start(0);\n\n            await offlineAudioContext.startRendering();\n\n            // Bug #197: Safari does not deliver the messages before the promise returned by startRendering() resolves.\n            await new Promise((resolve) => setTimeout(resolve));\n        } catch {\n            // Ignore errors.\n        } finally {\n            URL.revokeObjectURL(url);\n        }\n\n        return isEmittingMessageEvents && !isEmittingProcessorErrorEvents;\n    };\n};\n", "import { TTestChannelMergerNodeChannelCountSupportFactory } from '../types';\n\n/**\n * Firefox up to version 69 did not throw an error when setting a different channelCount or channelCountMode.\n */\nexport const createTestChannelMergerNodeChannelCountSupport: TTestChannelMergerNodeChannelCountSupportFactory = (\n    nativeOfflineAudioContextConstructor\n) => {\n    return () => {\n        if (nativeOfflineAudioContextConstructor === null) {\n            return false;\n        }\n\n        const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n        const nativeChannelMergerNode = offlineAudioContext.createChannelMerger();\n\n        /**\n         * Bug #15: Safari does not return the default properties. It still needs to be patched. This test is supposed to test the support\n         * in other browsers.\n         */\n        if (nativeChannelMergerNode.channelCountMode === 'max') {\n            return true;\n        }\n\n        try {\n            nativeChannelMergerNode.channelCount = 2;\n        } catch {\n            return true;\n        }\n\n        return false;\n    };\n};\n", "import { TTestConstantSourceNodeAccurateSchedulingSupportFactory } from '../types';\n\nexport const createTestConstantSourceNodeAccurateSchedulingSupport: TTestConstantSourceNodeAccurateSchedulingSupportFactory = (\n    nativeOfflineAudioContextConstructor\n) => {\n    return () => {\n        if (nativeOfflineAudioContextConstructor === null) {\n            return false;\n        }\n\n        const nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n\n        // Bug #62: Safari does not support ConstantSourceNodes.\n        if (nativeOfflineAudioContext.createConstantSource === undefined) {\n            return true;\n        }\n\n        const nativeConstantSourceNode = nativeOfflineAudioContext.createConstantSource();\n\n        /*\n         * @todo This is using bug #75 to detect bug #70. That works because both bugs were unique to\n         * the implementation of Firefox right now, but it could probably be done in a better way.\n         */\n        return nativeConstantSourceNode.offset.maxValue !== Number.POSITIVE_INFINITY;\n    };\n};\n", "import { TTestConvolverNodeBufferReassignabilitySupportFactory } from '../types';\n\n// Opera up to version 57 did not allow to reassign the buffer of a ConvolverNode.\nexport const createTestConvolverNodeBufferReassignabilitySupport: TTestConvolverNodeBufferReassignabilitySupportFactory = (\n    nativeOfflineAudioContextConstructor\n) => {\n    return () => {\n        if (nativeOfflineAudioContextConstructor === null) {\n            return false;\n        }\n\n        const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n        const nativeConvolverNode = offlineAudioContext.createConvolver();\n\n        nativeConvolverNode.buffer = offlineAudioContext.createBuffer(1, 1, offlineAudioContext.sampleRate);\n\n        try {\n            nativeConvolverNode.buffer = offlineAudioContext.createBuffer(1, 1, offlineAudioContext.sampleRate);\n        } catch {\n            return false;\n        }\n\n        return true;\n    };\n};\n", "import { TTestConvolverNodeChannelCountSupportFactory } from '../types';\n\n// Chrome up to version v80, Edge up to version v80 and Opera up to version v67 did not allow to set the channelCount property of a ConvolverNode to 1. They also did not allow to set the channelCountMode to 'explicit'.\nexport const createTestConvolverNodeChannelCountSupport: TTestConvolverNodeChannelCountSupportFactory = (\n    nativeOfflineAudioContextConstructor\n) => {\n    return () => {\n        if (nativeOfflineAudioContextConstructor === null) {\n            return false;\n        }\n\n        const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n        const nativeConvolverNode = offlineAudioContext.createConvolver();\n\n        try {\n            nativeConvolverNode.channelCount = 1;\n        } catch {\n            return false;\n        }\n\n        return true;\n    };\n};\n", "import { TTestIsSecureContextSupportFactory } from '../types';\n\nexport const createTestIsSecureContextSupport: TTestIsSecureContextSupportFactory = (window) => {\n    return () => window !== null && window.hasOwnProperty('isSecureContext');\n};\n", "import { TTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupportFactory } from '../types';\n\n// Firefox up to version 68 did not throw an error when creating a MediaStreamAudioSourceNode with a mediaStream that had no audio track.\nexport const createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport: TTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupportFactory =\n    (nativeAudioContextConstructor) => {\n        return () => {\n            if (nativeAudioContextConstructor === null) {\n                return false;\n            }\n\n            const audioContext = new nativeAudioContextConstructor();\n\n            try {\n                audioContext.createMediaStreamSource(new MediaStream());\n\n                return false;\n            } catch (err) {\n                return true;\n            } finally {\n                audioContext.close();\n            }\n        };\n    };\n", "import { TTestOfflineAudioContextCurrentTimeSupportFactory } from '../types';\n\nexport const createTestOfflineAudioContextCurrentTimeSupport: TTestOfflineAudioContextCurrentTimeSupportFactory = (\n    createNativeGainNode,\n    nativeOfflineAudioContextConstructor\n) => {\n    return () => {\n        if (nativeOfflineAudioContextConstructor === null) {\n            return Promise.resolve(false);\n        }\n\n        const nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n\n        // Bug #48: Safari does not render an OfflineAudioContext without any connected node.\n        const gainNode = createNativeGainNode(nativeOfflineAudioContext, {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete',\n            gain: 0\n        });\n\n        // Bug #21: Safari does not support promises yet.\n        return new Promise((resolve) => {\n            nativeOfflineAudioContext.oncomplete = () => {\n                gainNode.disconnect();\n\n                resolve(nativeOfflineAudioContext.currentTime !== 0);\n            };\n            nativeOfflineAudioContext.startRendering();\n        });\n    };\n};\n", "import { TTestStereoPannerNodeDefaultValueSupportFactory } from '../types';\n\n/**\n * Firefox up to version 62 did not kick off the processing of the StereoPannerNode if the value of pan was zero.\n */\nexport const createTestStereoPannerNodeDefaultValueSupport: TTestStereoPannerNodeDefaultValueSupportFactory = (\n    nativeOfflineAudioContextConstructor\n) => {\n    return () => {\n        if (nativeOfflineAudioContextConstructor === null) {\n            return Promise.resolve(false);\n        }\n\n        const nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n\n        /*\n         * Bug #105: Safari does not support the StereoPannerNode. Therefore the returned value should normally be false but the faker does\n         * support the tested behaviour.\n         */\n        if (nativeOfflineAudioContext.createStereoPanner === undefined) {\n            return Promise.resolve(true);\n        }\n\n        // Bug #62: Safari does not support ConstantSourceNodes.\n        if (nativeOfflineAudioContext.createConstantSource === undefined) {\n            return Promise.resolve(true);\n        }\n\n        const constantSourceNode = nativeOfflineAudioContext.createConstantSource();\n        const stereoPanner = nativeOfflineAudioContext.createStereoPanner();\n\n        constantSourceNode.channelCount = 1;\n        constantSourceNode.offset.value = 1;\n\n        stereoPanner.channelCount = 1;\n\n        constantSourceNode.start();\n\n        constantSourceNode.connect(stereoPanner).connect(nativeOfflineAudioContext.destination);\n\n        return nativeOfflineAudioContext.startRendering().then((buffer) => buffer.getChannelData(0)[0] !== 1);\n    };\n};\n", "import { TUnknownErrorFactory } from '../types';\n\nexport const createUnknownError: TUnknownErrorFactory = () => new DOMException('', 'UnknownError');\n", "import { IWaveShaperNode, IWaveShaperOptions } from '../interfaces';\nimport { TAudioNodeRenderer, TContext, TNativeWaveShaperNode, TOverSampleType, TWaveShaperNodeConstructorFactory } from '../types';\n\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    curve: null,\n    oversample: 'none'\n} as const;\n\nexport const createWaveShaperNodeConstructor: TWaveShaperNodeConstructorFactory = (\n    audioNodeConstructor,\n    createInvalidStateError,\n    createNativeWaveShaperNode,\n    createWaveShaperNodeRenderer,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    setAudioNodeTailTime\n) => {\n    return class WaveShaperNode<T extends TContext> extends audioNodeConstructor<T> implements IWaveShaperNode<T> {\n        private _isCurveNullified: boolean;\n\n        private _nativeWaveShaperNode: TNativeWaveShaperNode;\n\n        constructor(context: T, options?: Partial<IWaveShaperOptions>) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeWaveShaperNode = createNativeWaveShaperNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const waveShaperNodeRenderer = <TAudioNodeRenderer<T, this>>(isOffline ? createWaveShaperNodeRenderer() : null);\n\n            // @todo Add a mechanism to only switch a WaveShaperNode to active while it is connected.\n            super(context, true, nativeWaveShaperNode, waveShaperNodeRenderer);\n\n            this._isCurveNullified = false;\n            this._nativeWaveShaperNode = nativeWaveShaperNode;\n\n            // @todo Determine a meaningful tail-time instead of just using one second.\n            setAudioNodeTailTime(this, 1);\n        }\n\n        get curve(): null | Float32Array {\n            if (this._isCurveNullified) {\n                return null;\n            }\n\n            return this._nativeWaveShaperNode.curve;\n        }\n\n        set curve(value) {\n            // Bug #103: Safari does not allow to set the curve to null.\n            if (value === null) {\n                this._isCurveNullified = true;\n                this._nativeWaveShaperNode.curve = new Float32Array([0, 0]);\n            } else {\n                // Bug #102: Safari does not throw an InvalidStateError when the curve has less than two samples.\n                // Bug #104: Chrome and Edge will throw an InvalidAccessError when the curve has less than two samples.\n                if (value.length < 2) {\n                    throw createInvalidStateError();\n                }\n\n                this._isCurveNullified = false;\n                this._nativeWaveShaperNode.curve = value;\n            }\n        }\n\n        get oversample(): TOverSampleType {\n            return this._nativeWaveShaperNode.oversample;\n        }\n\n        set oversample(value) {\n            this._nativeWaveShaperNode.oversample = value;\n        }\n    };\n};\n", "import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nimport { IMinimalOfflineAudioContext, IOfflineAudioContext, IWaveShaperNode } from '../interfaces';\nimport { TNativeOfflineAudioContext, TNativeWaveShaperNode, TWaveShaperNodeRendererFactoryFactory } from '../types';\n\nexport const createWaveShaperNodeRendererFactory: TWaveShaperNodeRendererFactoryFactory = (\n    createNativeWaveShaperNode,\n    getNativeAudioNode,\n    renderInputsOfAudioNode\n) => {\n    return <T extends IMinimalOfflineAudioContext | IOfflineAudioContext>() => {\n        const renderedNativeWaveShaperNodes = new WeakMap<TNativeOfflineAudioContext, TNativeWaveShaperNode>();\n\n        const createWaveShaperNode = async (proxy: IWaveShaperNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext) => {\n            let nativeWaveShaperNode = getNativeAudioNode<T, TNativeWaveShaperNode>(proxy);\n\n            // If the initially used nativeWaveShaperNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeWaveShaperNodeIsOwnedByContext = isOwnedByContext(nativeWaveShaperNode, nativeOfflineAudioContext);\n\n            if (!nativeWaveShaperNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeWaveShaperNode.channelCount,\n                    channelCountMode: nativeWaveShaperNode.channelCountMode,\n                    channelInterpretation: nativeWaveShaperNode.channelInterpretation,\n                    curve: nativeWaveShaperNode.curve,\n                    oversample: nativeWaveShaperNode.oversample\n                };\n\n                nativeWaveShaperNode = createNativeWaveShaperNode(nativeOfflineAudioContext, options);\n            }\n\n            renderedNativeWaveShaperNodes.set(nativeOfflineAudioContext, nativeWaveShaperNode);\n\n            if (isNativeAudioNodeFaker(nativeWaveShaperNode)) {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeWaveShaperNode.inputs[0]);\n            } else {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeWaveShaperNode);\n            }\n\n            return nativeWaveShaperNode;\n        };\n\n        return {\n            render(proxy: IWaveShaperNode<T>, nativeOfflineAudioContext: TNativeOfflineAudioContext): Promise<TNativeWaveShaperNode> {\n                const renderedNativeWaveShaperNode = renderedNativeWaveShaperNodes.get(nativeOfflineAudioContext);\n\n                if (renderedNativeWaveShaperNode !== undefined) {\n                    return Promise.resolve(renderedNativeWaveShaperNode);\n                }\n\n                return createWaveShaperNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n", "import { TWindow, TWindowFactory } from '../types';\n\nexport const createWindow: TWindowFactory = () => (typeof window === 'undefined' ? null : <TWindow>window);\n", "import { TNativeAudioBuffer, TWrapAudioBufferCopyChannelMethodsFactory } from '../types';\n\nexport const createWrapAudioBufferCopyChannelMethods: TWrapAudioBufferCopyChannelMethodsFactory = (\n    convertNumberToUnsignedLong,\n    createIndexSizeError\n) => {\n    return (audioBuffer: TNativeAudioBuffer): void => {\n        audioBuffer.copyFromChannel = (destination, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {\n            const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n            const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n\n            if (channelNumber >= audioBuffer.numberOfChannels) {\n                throw createIndexSizeError();\n            }\n\n            const audioBufferLength = audioBuffer.length;\n            const channelData = audioBuffer.getChannelData(channelNumber);\n            const destinationLength = destination.length;\n\n            for (let i = bufferOffset < 0 ? -bufferOffset : 0; i + bufferOffset < audioBufferLength && i < destinationLength; i += 1) {\n                destination[i] = channelData[i + bufferOffset];\n            }\n        };\n\n        audioBuffer.copyToChannel = (source, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {\n            const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n            const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n\n            if (channelNumber >= audioBuffer.numberOfChannels) {\n                throw createIndexSizeError();\n            }\n\n            const audioBufferLength = audioBuffer.length;\n            const channelData = audioBuffer.getChannelData(channelNumber);\n            const sourceLength = source.length;\n\n            for (let i = bufferOffset < 0 ? -bufferOffset : 0; i + bufferOffset < audioBufferLength && i < sourceLength; i += 1) {\n                channelData[i + bufferOffset] = source[i];\n            }\n        };\n    };\n};\n", "import { TNativeAudioBuffer, TWrapAudioBufferCopyChannelMethodsOutOfBoundsFactory } from '../types';\n\nexport const createWrapAudioBufferCopyChannelMethodsOutOfBounds: TWrapAudioBufferCopyChannelMethodsOutOfBoundsFactory = (\n    convertNumberToUnsignedLong\n) => {\n    return (audioBuffer: TNativeAudioBuffer): void => {\n        audioBuffer.copyFromChannel = ((copyFromChannel) => {\n            return (destination: Float32Array, channelNumberAsNumber: number, bufferOffsetAsNumber = 0) => {\n                const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n                const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n\n                if (bufferOffset < audioBuffer.length) {\n                    return copyFromChannel.call(audioBuffer, destination, channelNumber, bufferOffset);\n                }\n            };\n        })(audioBuffer.copyFromChannel);\n\n        audioBuffer.copyToChannel = ((copyToChannel) => {\n            return (source: Float32Array, channelNumberAsNumber: number, bufferOffsetAsNumber = 0) => {\n                const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n                const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n\n                if (bufferOffset < audioBuffer.length) {\n                    return copyToChannel.call(audioBuffer, source, channelNumber, bufferOffset);\n                }\n            };\n        })(audioBuffer.copyToChannel);\n    };\n};\n", "import { TWrapAudioBufferSourceNodeStopMethodNullifiedBufferFactory } from '../types';\n\nexport const createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer: TWrapAudioBufferSourceNodeStopMethodNullifiedBufferFactory = (\n    overwriteAccessors\n) => {\n    return (nativeAudioBufferSourceNode, nativeContext) => {\n        const nullifiedBuffer = nativeContext.createBuffer(1, 1, 44100);\n\n        if (nativeAudioBufferSourceNode.buffer === null) {\n            nativeAudioBufferSourceNode.buffer = nullifiedBuffer;\n        }\n\n        overwriteAccessors(\n            nativeAudioBufferSourceNode,\n            'buffer',\n            (get) => () => {\n                const value = get.call(nativeAudioBufferSourceNode);\n\n                return value === nullifiedBuffer ? null : value;\n            },\n            (set) => (value) => {\n                return set.call(nativeAudioBufferSourceNode, value === null ? nullifiedBuffer : value);\n            }\n        );\n    };\n};\n", "import { TWrapChannelMergerNodeFactory } from '../types';\n\nexport const createWrapChannelMergerNode: TWrapChannelMergerNodeFactory = (createInvalidStateError, monitorConnections) => {\n    return (nativeContext, channelMergerNode) => {\n        // Bug #15: Safari does not return the default properties.\n        channelMergerNode.channelCount = 1;\n        channelMergerNode.channelCountMode = 'explicit';\n\n        // Bug #16: Safari does not throw an error when setting a different channelCount or channelCountMode.\n        Object.defineProperty(channelMergerNode, 'channelCount', {\n            get: () => 1,\n            set: () => {\n                throw createInvalidStateError();\n            }\n        });\n\n        Object.defineProperty(channelMergerNode, 'channelCountMode', {\n            get: () => 'explicit',\n            set: () => {\n                throw createInvalidStateError();\n            }\n        });\n\n        // Bug #20: Safari requires a connection of any kind to treat the input signal correctly.\n        const audioBufferSourceNode = nativeContext.createBufferSource();\n\n        const whenConnected = () => {\n            const length = channelMergerNode.numberOfInputs;\n\n            for (let i = 0; i < length; i += 1) {\n                audioBufferSourceNode.connect(channelMergerNode, 0, i);\n            }\n        };\n        const whenDisconnected = () => audioBufferSourceNode.disconnect(channelMergerNode);\n\n        monitorConnections(channelMergerNode, whenConnected, whenDisconnected);\n    };\n};\n", "import { TGetFirstSampleFunction } from '../types';\n\nexport const getFirstSample: TGetFirstSampleFunction = (audioBuffer, buffer, channelNumber) => {\n    // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n    if (audioBuffer.copyFromChannel === undefined) {\n        return audioBuffer.getChannelData(channelNumber)[0];\n    }\n\n    audioBuffer.copyFromChannel(buffer, channelNumber);\n\n    return buffer[0];\n};\n", "import { TIsDCCurveFunction } from '../types';\n\nexport const isDCCurve: TIsDCCurveFunction = (curve) => {\n    if (curve === null) {\n        return false;\n    }\n\n    const length = curve.length;\n\n    if (length % 2 !== 0) {\n        return curve[Math.floor(length / 2)] !== 0;\n    }\n\n    return curve[length / 2 - 1] + curve[length / 2] !== 0;\n};\n", "import { TOverwriteAccessorsFunction } from '../types';\n\nexport const overwriteAccessors: TOverwriteAccessorsFunction = (object, property, createGetter, createSetter) => {\n    let prototype = object;\n\n    while (!prototype.hasOwnProperty(property)) {\n        prototype = Object.getPrototypeOf(prototype);\n    }\n\n    const { get, set } = <Required<PropertyDescriptor>>Object.getOwnPropertyDescriptor(prototype, property);\n\n    Object.defineProperty(object, property, { get: createGetter(get), set: createSetter(set) });\n};\n", "import { TSanitizeAudioWorkletNodeOptionsFunction } from '../types';\n\nexport const sanitizeAudioWorkletNodeOptions: TSanitizeAudioWorkletNodeOptionsFunction = (options) => {\n    return {\n        ...options,\n        outputChannelCount:\n            options.outputChannelCount !== undefined\n                ? options.outputChannelCount\n                : options.numberOfInputs === 1 && options.numberOfOutputs === 1\n                ? /*\n                   * Bug #61: This should be the computedNumberOfChannels, but unfortunately that is almost impossible to fake. That's why\n                   * the channelCountMode is required to be 'explicit' as long as there is not a native implementation in every browser. That\n                   * makes sure the computedNumberOfChannels is equivilant to the channelCount which makes it much easier to compute.\n                   */\n                  [options.channelCount]\n                : Array.from({ length: options.numberOfOutputs }, () => 1)\n    };\n};\n", "import { TSanitizeChannelSplitterOptionsFunction } from '../types';\n\nexport const sanitizeChannelSplitterOptions: TSanitizeChannelSplitterOptionsFunction = (options) => {\n    return { ...options, channelCount: options.numberOfOutputs };\n};\n", "import { TSanitizePeriodicWaveOptionsFunction } from '../types';\n\nexport const sanitizePeriodicWaveOptions: TSanitizePeriodicWaveOptionsFunction = (options) => {\n    const { imag, real } = options;\n\n    if (imag === undefined) {\n        if (real === undefined) {\n            return { ...options, imag: [0, 0], real: [0, 0] };\n        }\n\n        return { ...options, imag: Array.from(real, () => 0), real };\n    }\n\n    if (real === undefined) {\n        return { ...options, imag, real: Array.from(imag, () => 0) };\n    }\n\n    return { ...options, imag, real };\n};\n", "import { TSetValueAtTimeUntilPossibleFunction } from '../types';\n\nexport const setValueAtTimeUntilPossible: TSetValueAtTimeUntilPossibleFunction = (audioParam, value, startTime) => {\n    try {\n        audioParam.setValueAtTime(value, startTime);\n    } catch (err) {\n        if (err.code !== 9) {\n            throw err;\n        }\n\n        setValueAtTimeUntilPossible(audioParam, value, startTime + 1e-7);\n    }\n};\n", "import { TNativeContext } from '../types';\n\nexport const testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport = (nativeContext: TNativeContext) => {\n    const nativeAudioBufferSourceNode = nativeContext.createBufferSource();\n\n    nativeAudioBufferSourceNode.start();\n\n    try {\n        nativeAudioBufferSourceNode.start();\n    } catch {\n        return true;\n    }\n\n    return false;\n};\n", "import { TNativeContext } from '../types';\n\nexport const testAudioBufferSourceNodeStartMethodOffsetClampingSupport = (nativeContext: TNativeContext) => {\n    const nativeAudioBufferSourceNode = nativeContext.createBufferSource();\n    const nativeAudioBuffer = nativeContext.createBuffer(1, 1, 44100);\n\n    nativeAudioBufferSourceNode.buffer = nativeAudioBuffer;\n\n    try {\n        nativeAudioBufferSourceNode.start(0, 1);\n    } catch {\n        return false;\n    }\n\n    return true;\n};\n", "import { TNativeContext } from '../types';\n\nexport const testAudioBufferSourceNodeStopMethodNullifiedBufferSupport = (nativeContext: TNativeContext) => {\n    const nativeAudioBufferSourceNode = nativeContext.createBufferSource();\n\n    nativeAudioBufferSourceNode.start();\n\n    try {\n        nativeAudioBufferSourceNode.stop();\n    } catch {\n        return false;\n    }\n\n    return true;\n};\n", "import { TNativeContext } from '../types';\n\nexport const testAudioScheduledSourceNodeStartMethodNegativeParametersSupport = (nativeContext: TNativeContext) => {\n    const nativeAudioBufferSourceNode = nativeContext.createOscillator();\n\n    try {\n        nativeAudioBufferSourceNode.start(-1);\n    } catch (err) {\n        return err instanceof RangeError;\n    }\n\n    return false;\n};\n", "import { TNativeContext } from '../types';\n\nexport const testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport = (nativeContext: TNativeContext) => {\n    const nativeAudioBuffer = nativeContext.createBuffer(1, 1, 44100);\n    const nativeAudioBufferSourceNode = nativeContext.createBufferSource();\n\n    nativeAudioBufferSourceNode.buffer = nativeAudioBuffer;\n    nativeAudioBufferSourceNode.start();\n    nativeAudioBufferSourceNode.stop();\n\n    try {\n        nativeAudioBufferSourceNode.stop();\n\n        return true;\n    } catch {\n        return false;\n    }\n};\n", "import { TNativeContext } from '../types';\n\nexport const testAudioScheduledSourceNodeStopMethodNegativeParametersSupport = (nativeContext: TNativeContext) => {\n    const nativeAudioBufferSourceNode = nativeContext.createOscillator();\n\n    try {\n        nativeAudioBufferSourceNode.stop(-1);\n    } catch (err) {\n        return err instanceof RangeError;\n    }\n\n    return false;\n};\n", "import { TTestAudioWorkletNodeOptionsClonabilityFunction } from '../types';\n\nexport const testAudioWorkletNodeOptionsClonability: TTestAudioWorkletNodeOptionsClonabilityFunction = (audioWorkletNodeOptions) => {\n    const { port1, port2 } = new MessageChannel();\n\n    try {\n        // This will throw an error if the audioWorkletNodeOptions are not clonable.\n        port1.postMessage(audioWorkletNodeOptions);\n    } finally {\n        port1.close();\n        port2.close();\n    }\n};\n", "/*\n * Bug #122: Edge up to version v18 did not allow to construct a DOMException'. It also had a couple more bugs but since this is easy to\n * test it's used here as a placeholder.\n *\n * Bug #27: Edge up to version v18 did reject an invalid arrayBuffer passed to decodeAudioData() with a DOMException.\n *\n * Bug #50: Edge up to version v18 did not allow to create AudioNodes on a closed context.\n *\n * Bug #57: Edge up to version v18 did not throw an error when assigning the type of an OscillatorNode to 'custom'.\n *\n * Bug #63: Edge up to version v18 did not expose the mediaElement property of a MediaElementAudioSourceNode.\n *\n * Bug #64: Edge up to version v18 did not support the MediaStreamAudioDestinationNode.\n *\n * Bug #71: Edge up to version v18 did not allow to set the buffer of an AudioBufferSourceNode to null.\n *\n * Bug #93: Edge up to version v18 did set the sampleRate of an AudioContext to zero when it was closed.\n *\n * Bug #101: Edge up to version v18 refused to execute decodeAudioData() on a closed context.\n *\n * Bug #106: Edge up to version v18 did not expose the maxValue and minValue properties of the pan AudioParam of a StereoPannerNode.\n *\n * Bug #110: Edge up to version v18 did not expose the maxValue and minValue properties of the attack, knee, ratio, release and threshold AudioParams of a DynamicsCompressorNode.\n *\n * Bug #123: Edge up to version v18 did not support HRTF as the panningModel for a PannerNode.\n *\n * Bug #145: Edge up to version v18 did throw an IndexSizeError when an OfflineAudioContext was created with a sampleRate of zero.\n *\n * Bug #161: Edge up to version v18 did not expose the maxValue and minValue properties of the delayTime AudioParam of a DelayNode.\n */\nexport const testDomExceptionConstructorSupport = () => {\n    try {\n        new DOMException(); // tslint:disable-line:no-unused-expression\n    } catch {\n        return false;\n    }\n\n    return true;\n};\n", "// Safari at version 11 did not support transferables.\nexport const testTransferablesSupport = () =>\n    new Promise<boolean>((resolve) => {\n        const arrayBuffer = new ArrayBuffer(0);\n        const { port1, port2 } = new MessageChannel();\n\n        port1.onmessage = ({ data }) => resolve(data !== null);\n        port2.postMessage(arrayBuffer, [arrayBuffer]);\n    });\n", "import { TNativeAudioBufferSourceNode } from '../types';\n\nexport const wrapAudioBufferSourceNodeStartMethodOffsetClamping = (nativeAudioBufferSourceNode: TNativeAudioBufferSourceNode): void => {\n    nativeAudioBufferSourceNode.start = ((start) => {\n        return (when = 0, offset = 0, duration?: number) => {\n            const buffer = nativeAudioBufferSourceNode.buffer;\n            // Bug #154: Safari does not clamp the offset if it is equal to or greater than the duration of the buffer.\n            const clampedOffset = buffer === null ? offset : Math.min(buffer.duration, offset);\n\n            // Bug #155: Safari does not handle the offset correctly if it would cause the buffer to be not be played at all.\n            if (buffer !== null && clampedOffset > buffer.duration - 0.5 / nativeAudioBufferSourceNode.context.sampleRate) {\n                start.call(nativeAudioBufferSourceNode, when, 0, 0);\n            } else {\n                start.call(nativeAudioBufferSourceNode, when, clampedOffset, duration);\n            }\n        };\n    })(nativeAudioBufferSourceNode.start);\n};\n", "import { TNativeAudioNode, TWrapAudioScheduledSourceNodeStopMethodConsecutiveCallsFunction } from '../types';\nimport { interceptConnections } from './intercept-connections';\n\nexport const wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls: TWrapAudioScheduledSourceNodeStopMethodConsecutiveCallsFunction = (\n    nativeAudioScheduledSourceNode,\n    nativeContext\n) => {\n    const nativeGainNode = nativeContext.createGain();\n\n    nativeAudioScheduledSourceNode.connect(nativeGainNode);\n\n    const disconnectGainNode = ((disconnect) => {\n        return () => {\n            // @todo TypeScript cannot infer the overloaded signature with 1 argument yet.\n            (<(destinaton: TNativeAudioNode) => void>disconnect).call(nativeAudioScheduledSourceNode, nativeGainNode);\n            nativeAudioScheduledSourceNode.removeEventListener('ended', disconnectGainNode);\n        };\n    })(nativeAudioScheduledSourceNode.disconnect);\n\n    nativeAudioScheduledSourceNode.addEventListener('ended', disconnectGainNode);\n\n    interceptConnections(nativeAudioScheduledSourceNode, nativeGainNode);\n\n    nativeAudioScheduledSourceNode.stop = ((stop) => {\n        let isStopped = false;\n\n        return (when = 0) => {\n            if (isStopped) {\n                try {\n                    stop.call(nativeAudioScheduledSourceNode, when);\n                } catch {\n                    nativeGainNode.gain.setValueAtTime(0, when);\n                }\n            } else {\n                stop.call(nativeAudioScheduledSourceNode, when);\n\n                isStopped = true;\n            }\n        };\n    })(nativeAudioScheduledSourceNode.stop);\n};\n", "import { TWrapEventListenerFunction } from '../types';\n\nexport const wrapEventListener: TWrapEventListenerFunction = (target, eventListener) => {\n    return (event) => {\n        const descriptor = { value: target };\n\n        Object.defineProperties(event, {\n            currentTarget: descriptor,\n            target: descriptor\n        });\n\n        if (typeof eventListener === 'function') {\n            return eventListener.call(target, event);\n        }\n\n        return eventListener.handleEvent.call(target, event);\n    };\n};\n", "import {\n    createCancelAndHoldAutomationEvent,\n    createCancelScheduledValuesAutomationEvent,\n    createExponentialRampToValueAutomationEvent,\n    createLinearRampToValueAutomationEvent,\n    createSetTargetAutomationEvent,\n    createSetValueAutomationEvent,\n    createSetValueCurveAutomationEvent\n} from 'automation-events';\nimport { createAbortError } from './factories/abort-error';\nimport { createAddActiveInputConnectionToAudioNode } from './factories/add-active-input-connection-to-audio-node';\nimport { createAddAudioNodeConnections } from './factories/add-audio-node-connections';\nimport { createAddAudioParamConnections } from './factories/add-audio-param-connections';\nimport { createAddAudioWorkletModule } from './factories/add-audio-worklet-module';\nimport { createAddConnectionToAudioNode } from './factories/add-connection-to-audio-node';\nimport { createAddPassiveInputConnectionToAudioNode } from './factories/add-passive-input-connection-to-audio-node';\nimport { createAddSilentConnection } from './factories/add-silent-connection';\nimport { createAddUnrenderedAudioWorkletNode } from './factories/add-unrendered-audio-worklet-node';\nimport { createAnalyserNodeConstructor } from './factories/analyser-node-constructor';\nimport { createAnalyserNodeRendererFactory } from './factories/analyser-node-renderer-factory';\nimport { createAudioBufferConstructor } from './factories/audio-buffer-constructor';\nimport { createAudioBufferSourceNodeConstructor } from './factories/audio-buffer-source-node-constructor';\nimport { createAudioBufferSourceNodeRendererFactory } from './factories/audio-buffer-source-node-renderer-factory';\nimport { createAudioContextConstructor } from './factories/audio-context-constructor';\nimport { createAudioDestinationNodeConstructor } from './factories/audio-destination-node-constructor';\nimport { createAudioDestinationNodeRenderer } from './factories/audio-destination-node-renderer-factory';\nimport { createAudioListenerFactory } from './factories/audio-listener-factory';\nimport { createAudioNodeConstructor } from './factories/audio-node-constructor';\nimport { createAudioParamFactory } from './factories/audio-param-factory';\nimport { createAudioParamRenderer } from './factories/audio-param-renderer';\nimport { createAudioWorkletNodeConstructor } from './factories/audio-worklet-node-constructor';\nimport { createAudioWorkletNodeRendererFactory } from './factories/audio-worklet-node-renderer-factory';\nimport { createBaseAudioContextConstructor } from './factories/base-audio-context-constructor';\nimport { createBiquadFilterNodeConstructor } from './factories/biquad-filter-node-constructor';\nimport { createBiquadFilterNodeRendererFactory } from './factories/biquad-filter-node-renderer-factory';\nimport { createCacheTestResult } from './factories/cache-test-result';\nimport { createChannelMergerNodeConstructor } from './factories/channel-merger-node-constructor';\nimport { createChannelMergerNodeRendererFactory } from './factories/channel-merger-node-renderer-factory';\nimport { createChannelSplitterNodeConstructor } from './factories/channel-splitter-node-constructor';\nimport { createChannelSplitterNodeRendererFactory } from './factories/channel-splitter-node-renderer-factory';\nimport { createConnectAudioParam } from './factories/connect-audio-param';\nimport { createConnectMultipleOutputs } from './factories/connect-multiple-outputs';\nimport { createConnectedNativeAudioBufferSourceNodeFactory } from './factories/connected-native-audio-buffer-source-node-factory';\nimport { createConstantSourceNodeConstructor } from './factories/constant-source-node-constructor';\nimport { createConstantSourceNodeRendererFactory } from './factories/constant-source-node-renderer-factory';\nimport { createConvertNumberToUnsignedLong } from './factories/convert-number-to-unsigned-long';\nimport { createConvolverNodeConstructor } from './factories/convolver-node-constructor';\nimport { createConvolverNodeRendererFactory } from './factories/convolver-node-renderer-factory';\nimport { createCreateNativeOfflineAudioContext } from './factories/create-native-offline-audio-context';\nimport { createDataCloneError } from './factories/data-clone-error';\nimport { createDecodeAudioData } from './factories/decode-audio-data';\nimport { createDecrementCycleCounter } from './factories/decrement-cycle-counter';\nimport { createDelayNodeConstructor } from './factories/delay-node-constructor';\nimport { createDelayNodeRendererFactory } from './factories/delay-node-renderer-factory';\nimport { createDeleteActiveInputConnectionToAudioNode } from './factories/delete-active-input-connection-to-audio-node';\nimport { createDeleteUnrenderedAudioWorkletNode } from './factories/delete-unrendered-audio-worklet-node';\nimport { createDetectCycles } from './factories/detect-cycles';\nimport { createDisconnectMultipleOutputs } from './factories/disconnect-multiple-outputs';\nimport { createDynamicsCompressorNodeConstructor } from './factories/dynamics-compressor-node-constructor';\nimport { createDynamicsCompressorNodeRendererFactory } from './factories/dynamics-compressor-node-renderer-factory';\nimport { createEncodingError } from './factories/encoding-error';\nimport { createEvaluateSource } from './factories/evaluate-source';\nimport { createEventTargetConstructor } from './factories/event-target-constructor';\nimport { createExposeCurrentFrameAndCurrentTime } from './factories/expose-current-frame-and-current-time';\nimport { createFetchSource } from './factories/fetch-source';\nimport { createGainNodeConstructor } from './factories/gain-node-constructor';\nimport { createGainNodeRendererFactory } from './factories/gain-node-renderer-factory';\nimport { createGetActiveAudioWorkletNodeInputs } from './factories/get-active-audio-worklet-node-inputs';\nimport { createGetAudioNodeRenderer } from './factories/get-audio-node-renderer';\nimport { createGetAudioNodeTailTime } from './factories/get-audio-node-tail-time';\nimport { createGetAudioParamRenderer } from './factories/get-audio-param-renderer';\nimport { createGetBackupOfflineAudioContext } from './factories/get-backup-offline-audio-context';\nimport { createGetNativeContext } from './factories/get-native-context';\nimport { createGetOrCreateBackupOfflineAudioContext } from './factories/get-or-create-backup-offline-audio-context';\nimport { createGetUnrenderedAudioWorkletNodes } from './factories/get-unrendered-audio-worklet-nodes';\nimport { createIIRFilterNodeConstructor } from './factories/iir-filter-node-constructor';\nimport { createIIRFilterNodeRendererFactory } from './factories/iir-filter-node-renderer-factory';\nimport { createIncrementCycleCounterFactory } from './factories/increment-cycle-counter-factory';\nimport { createIndexSizeError } from './factories/index-size-error';\nimport { createInvalidAccessError } from './factories/invalid-access-error';\nimport { createInvalidStateError } from './factories/invalid-state-error';\nimport { createIsAnyAudioContext } from './factories/is-any-audio-context';\nimport { createIsAnyAudioNode } from './factories/is-any-audio-node';\nimport { createIsAnyAudioParam } from './factories/is-any-audio-param';\nimport { createIsAnyOfflineAudioContext } from './factories/is-any-offline-audio-context';\nimport { createIsNativeAudioContext } from './factories/is-native-audio-context';\nimport { createIsNativeAudioNode } from './factories/is-native-audio-node';\nimport { createIsNativeAudioParam } from './factories/is-native-audio-param';\nimport { createIsNativeContext } from './factories/is-native-context';\nimport { createIsNativeOfflineAudioContext } from './factories/is-native-offline-audio-context';\nimport { createIsSecureContext } from './factories/is-secure-context';\nimport { createIsSupportedPromise } from './factories/is-supported-promise';\nimport { createMediaElementAudioSourceNodeConstructor } from './factories/media-element-audio-source-node-constructor';\nimport { createMediaStreamAudioDestinationNodeConstructor } from './factories/media-stream-audio-destination-node-constructor';\nimport { createMediaStreamAudioSourceNodeConstructor } from './factories/media-stream-audio-source-node-constructor';\nimport { createMediaStreamTrackAudioSourceNodeConstructor } from './factories/media-stream-track-audio-source-node-constructor';\nimport { createMinimalAudioContextConstructor } from './factories/minimal-audio-context-constructor';\nimport { createMinimalBaseAudioContextConstructor } from './factories/minimal-base-audio-context-constructor';\nimport { createMinimalOfflineAudioContextConstructor } from './factories/minimal-offline-audio-context-constructor';\nimport { createMonitorConnections } from './factories/monitor-connections';\nimport { createNativeAnalyserNodeFactory } from './factories/native-analyser-node-factory';\nimport { createNativeAudioBufferConstructor } from './factories/native-audio-buffer-constructor';\nimport { createNativeAudioBufferSourceNodeFactory } from './factories/native-audio-buffer-source-node-factory';\nimport { createNativeAudioContextConstructor } from './factories/native-audio-context-constructor';\nimport { createNativeAudioDestinationNodeFactory } from './factories/native-audio-destination-node';\nimport { createNativeAudioWorkletNodeConstructor } from './factories/native-audio-worklet-node-constructor';\nimport { createNativeAudioWorkletNodeFactory } from './factories/native-audio-worklet-node-factory';\nimport { createNativeAudioWorkletNodeFakerFactory } from './factories/native-audio-worklet-node-faker-factory';\nimport { createNativeBiquadFilterNode } from './factories/native-biquad-filter-node';\nimport { createNativeChannelMergerNodeFactory } from './factories/native-channel-merger-node-factory';\nimport { createNativeChannelSplitterNode } from './factories/native-channel-splitter-node';\nimport { createNativeConstantSourceNodeFactory } from './factories/native-constant-source-node-factory';\nimport { createNativeConstantSourceNodeFakerFactory } from './factories/native-constant-source-node-faker-factory';\nimport { createNativeConvolverNodeFactory } from './factories/native-convolver-node-factory';\nimport { createNativeDelayNode } from './factories/native-delay-node';\nimport { createNativeDynamicsCompressorNodeFactory } from './factories/native-dynamics-compressor-node-factory';\nimport { createNativeGainNode } from './factories/native-gain-node';\nimport { createNativeIIRFilterNodeFactory } from './factories/native-iir-filter-node-factory';\nimport { createNativeIIRFilterNodeFakerFactory } from './factories/native-iir-filter-node-faker-factory';\nimport { createNativeMediaElementAudioSourceNode } from './factories/native-media-element-audio-source-node';\nimport { createNativeMediaStreamAudioDestinationNode } from './factories/native-media-stream-audio-destination-node';\nimport { createNativeMediaStreamAudioSourceNode } from './factories/native-media-stream-audio-source-node';\nimport { createNativeMediaStreamTrackAudioSourceNodeFactory } from './factories/native-media-stream-track-audio-source-node-factory';\nimport { createNativeOfflineAudioContextConstructor } from './factories/native-offline-audio-context-constructor';\nimport { createNativeOscillatorNodeFactory } from './factories/native-oscillator-node-factory';\nimport { createNativePannerNodeFactory } from './factories/native-panner-node-factory';\nimport { createNativePannerNodeFakerFactory } from './factories/native-panner-node-faker-factory';\nimport { createNativePeriodicWaveFactory } from './factories/native-periodic-wave-factory';\nimport { createNativeScriptProcessorNode } from './factories/native-script-processor-node';\nimport { createNativeStereoPannerNodeFactory } from './factories/native-stereo-panner-node-factory';\nimport { createNativeStereoPannerNodeFakerFactory } from './factories/native-stereo-panner-node-faker-factory';\nimport { createNativeWaveShaperNodeFactory } from './factories/native-wave-shaper-node-factory';\nimport { createNativeWaveShaperNodeFakerFactory } from './factories/native-wave-shaper-node-faker-factory';\nimport { createNotSupportedError } from './factories/not-supported-error';\nimport { createOfflineAudioContextConstructor } from './factories/offline-audio-context-constructor';\nimport { createOscillatorNodeConstructor } from './factories/oscillator-node-constructor';\nimport { createOscillatorNodeRendererFactory } from './factories/oscillator-node-renderer-factory';\nimport { createPannerNodeConstructor } from './factories/panner-node-constructor';\nimport { createPannerNodeRendererFactory } from './factories/panner-node-renderer-factory';\nimport { createPeriodicWaveConstructor } from './factories/periodic-wave-constructor';\nimport { createRenderAutomation } from './factories/render-automation';\nimport { createRenderInputsOfAudioNode } from './factories/render-inputs-of-audio-node';\nimport { createRenderInputsOfAudioParam } from './factories/render-inputs-of-audio-param';\nimport { createRenderNativeOfflineAudioContext } from './factories/render-native-offline-audio-context';\nimport { createSetActiveAudioWorkletNodeInputs } from './factories/set-active-audio-worklet-node-inputs';\nimport { createSetAudioNodeTailTime } from './factories/set-audio-node-tail-time';\nimport { createStartRendering } from './factories/start-rendering';\nimport { createStereoPannerNodeConstructor } from './factories/stereo-panner-node-constructor';\nimport { createStereoPannerNodeRendererFactory } from './factories/stereo-panner-node-renderer-factory';\nimport { createTestAudioBufferConstructorSupport } from './factories/test-audio-buffer-constructor-support';\nimport { createTestAudioBufferCopyChannelMethodsSubarraySupport } from './factories/test-audio-buffer-copy-channel-methods-subarray-support';\nimport { createTestAudioContextCloseMethodSupport } from './factories/test-audio-context-close-method-support';\nimport { createTestAudioContextDecodeAudioDataMethodTypeErrorSupport } from './factories/test-audio-context-decode-audio-data-method-type-error-support';\nimport { createTestAudioContextOptionsSupport } from './factories/test-audio-context-options-support';\nimport { createTestAudioNodeConnectMethodSupport } from './factories/test-audio-node-connect-method-support';\nimport { createTestAudioWorkletProcessorNoOutputsSupport } from './factories/test-audio-worklet-processor-no-outputs-support';\nimport { createTestAudioWorkletProcessorPostMessageSupport } from './factories/test-audio-worklet-processor-post-message-support';\nimport { createTestChannelMergerNodeChannelCountSupport } from './factories/test-channel-merger-node-channel-count-support';\nimport { createTestConstantSourceNodeAccurateSchedulingSupport } from './factories/test-constant-source-node-accurate-scheduling-support';\nimport { createTestConvolverNodeBufferReassignabilitySupport } from './factories/test-convolver-node-buffer-reassignability-support';\nimport { createTestConvolverNodeChannelCountSupport } from './factories/test-convolver-node-channel-count-support';\nimport { createTestIsSecureContextSupport } from './factories/test-is-secure-context-support';\nimport { createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport } from './factories/test-media-stream-audio-source-node-media-stream-without-audio-track-support';\nimport { createTestOfflineAudioContextCurrentTimeSupport } from './factories/test-offline-audio-context-current-time-support';\nimport { createTestStereoPannerNodeDefaultValueSupport } from './factories/test-stereo-panner-node-default-value-support';\nimport { createUnknownError } from './factories/unknown-error';\nimport { createWaveShaperNodeConstructor } from './factories/wave-shaper-node-constructor';\nimport { createWaveShaperNodeRendererFactory } from './factories/wave-shaper-node-renderer-factory';\nimport { createWindow } from './factories/window';\nimport { createWrapAudioBufferCopyChannelMethods } from './factories/wrap-audio-buffer-copy-channel-methods';\nimport { createWrapAudioBufferCopyChannelMethodsOutOfBounds } from './factories/wrap-audio-buffer-copy-channel-methods-out-of-bounds';\nimport { createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer } from './factories/wrap-audio-buffer-source-node-stop-method-nullified-buffer';\nimport { createWrapChannelMergerNode } from './factories/wrap-channel-merger-node';\nimport {\n    AUDIO_NODE_CONNECTIONS_STORE,\n    AUDIO_NODE_STORE,\n    AUDIO_PARAM_CONNECTIONS_STORE,\n    AUDIO_PARAM_STORE,\n    CONTEXT_STORE,\n    CYCLE_COUNTERS\n} from './globals';\nimport { connectNativeAudioNodeToNativeAudioNode } from './helpers/connect-native-audio-node-to-native-audio-node';\nimport { disconnectNativeAudioNodeFromNativeAudioNode } from './helpers/disconnect-native-audio-node-from-native-audio-node';\nimport { getAudioNodeConnections } from './helpers/get-audio-node-connections';\nimport { getAudioParamConnections } from './helpers/get-audio-param-connections';\nimport { getEventListenersOfAudioNode } from './helpers/get-event-listeners-of-audio-node';\nimport { getFirstSample } from './helpers/get-first-sample';\nimport { getNativeAudioNode } from './helpers/get-native-audio-node';\nimport { getNativeAudioParam } from './helpers/get-native-audio-param';\nimport { getValueForKey } from './helpers/get-value-for-key';\nimport { insertElementInSet } from './helpers/insert-element-in-set';\nimport { isActiveAudioNode } from './helpers/is-active-audio-node';\nimport { isDCCurve } from './helpers/is-dc-curve';\nimport { isPartOfACycle } from './helpers/is-part-of-a-cycle';\nimport { isPassiveAudioNode } from './helpers/is-passive-audio-node';\nimport { overwriteAccessors } from './helpers/overwrite-accessors';\nimport { pickElementFromSet } from './helpers/pick-element-from-set';\nimport { sanitizeAudioWorkletNodeOptions } from './helpers/sanitize-audio-worklet-node-options';\nimport { sanitizeChannelSplitterOptions } from './helpers/sanitize-channel-splitter-options';\nimport { sanitizePeriodicWaveOptions } from './helpers/sanitize-periodic-wave-options';\nimport { setValueAtTimeUntilPossible } from './helpers/set-value-at-time-until-possible';\nimport { testAudioBufferCopyChannelMethodsOutOfBoundsSupport } from './helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support';\nimport { testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport } from './helpers/test-audio-buffer-source-node-start-method-consecutive-calls-support';\nimport { testAudioBufferSourceNodeStartMethodOffsetClampingSupport } from './helpers/test-audio-buffer-source-node-start-method-offset-clamping-support';\nimport { testAudioBufferSourceNodeStopMethodNullifiedBufferSupport } from './helpers/test-audio-buffer-source-node-stop-method-nullified-buffer-support';\nimport { testAudioScheduledSourceNodeStartMethodNegativeParametersSupport } from './helpers/test-audio-scheduled-source-node-start-method-negative-parameters-support';\nimport { testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport } from './helpers/test-audio-scheduled-source-node-stop-method-consecutive-calls-support';\nimport { testAudioScheduledSourceNodeStopMethodNegativeParametersSupport } from './helpers/test-audio-scheduled-source-node-stop-method-negative-parameters-support';\nimport { testAudioWorkletNodeOptionsClonability } from './helpers/test-audio-worklet-node-options-clonability';\nimport { testDomExceptionConstructorSupport } from './helpers/test-dom-exception-constructor-support';\nimport { testPromiseSupport } from './helpers/test-promise-support';\nimport { testTransferablesSupport } from './helpers/test-transferables-support';\nimport { wrapAudioBufferSourceNodeStartMethodOffsetClamping } from './helpers/wrap-audio-buffer-source-node-start-method-offset-clamping';\nimport { wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls } from './helpers/wrap-audio-scheduled-source-node-stop-method-consecutive-calls';\nimport { wrapEventListener } from './helpers/wrap-event-listener';\nimport {\n    IAnalyserNode,\n    IAudioBuffer,\n    IAudioBufferSourceNode,\n    IAudioContext,\n    IAudioNode,\n    IAudioWorkletNode,\n    IBiquadFilterNode,\n    IConstantSourceNode,\n    IConvolverNode,\n    IDelayNode,\n    IDynamicsCompressorNode,\n    IGainNode,\n    IIIRFilterNode,\n    IMediaElementAudioSourceNode,\n    IMediaStreamAudioDestinationNode,\n    IMediaStreamAudioSourceNode,\n    IMediaStreamTrackAudioSourceNode,\n    IMinimalAudioContext,\n    IMinimalOfflineAudioContext,\n    IOfflineAudioContext,\n    IOfflineAudioContextConstructor,\n    IOscillatorNode,\n    IPannerNode,\n    IPeriodicWave,\n    IStereoPannerNode,\n    IWaveShaperNode\n} from './interfaces';\nimport {\n    TActiveAudioWorkletNodeInputsStore,\n    TAddAudioWorkletModuleFunction,\n    TAnalyserNodeConstructor,\n    TAudioBufferConstructor,\n    TAudioBufferSourceNodeConstructor,\n    TAudioBufferStore,\n    TAudioContextConstructor,\n    TAudioParamAudioNodeStore,\n    TAudioWorkletNodeConstructor,\n    TBackupOfflineAudioContextStore,\n    TBiquadFilterNodeConstructor,\n    TChannelMergerNodeConstructor,\n    TChannelSplitterNodeConstructor,\n    TConstantSourceNodeConstructor,\n    TContext,\n    TConvolverNodeConstructor,\n    TDecodeAudioDataFunction,\n    TDelayNodeConstructor,\n    TDynamicsCompressorNodeConstructor,\n    TGainNodeConstructor,\n    TIIRFilterNodeConstructor,\n    TMediaElementAudioSourceNodeConstructor,\n    TMediaStreamAudioDestinationNodeConstructor,\n    TMediaStreamAudioSourceNodeConstructor,\n    TMediaStreamTrackAudioSourceNodeConstructor,\n    TMinimalAudioContextConstructor,\n    TMinimalOfflineAudioContextConstructor,\n    TOscillatorNodeConstructor,\n    TPannerNodeConstructor,\n    TPeriodicWaveConstructor,\n    TStereoPannerNodeConstructor,\n    TUnrenderedAudioWorkletNodeStore,\n    TWaveShaperNodeConstructor\n} from './types';\n\n/*\n * @todo Explicitly referencing the barrel file seems to be necessary when enabling the\n * isolatedModules compiler option.\n */\nexport * from './interfaces/index';\nexport * from './types/index';\n\nconst addActiveInputConnectionToAudioNode = createAddActiveInputConnectionToAudioNode(insertElementInSet);\nconst addPassiveInputConnectionToAudioNode = createAddPassiveInputConnectionToAudioNode(insertElementInSet);\nconst deleteActiveInputConnectionToAudioNode = createDeleteActiveInputConnectionToAudioNode(pickElementFromSet);\nconst audioNodeTailTimeStore = new WeakMap();\nconst getAudioNodeTailTime = createGetAudioNodeTailTime(audioNodeTailTimeStore);\nconst cacheTestResult = createCacheTestResult(new Map(), new WeakMap());\nconst window = createWindow();\nconst createNativeAnalyserNode = createNativeAnalyserNodeFactory(cacheTestResult, createIndexSizeError);\nconst getAudioNodeRenderer = createGetAudioNodeRenderer(getAudioNodeConnections);\nconst renderInputsOfAudioNode = createRenderInputsOfAudioNode(getAudioNodeConnections, getAudioNodeRenderer, isPartOfACycle);\nconst createAnalyserNodeRenderer = createAnalyserNodeRendererFactory(createNativeAnalyserNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst getNativeContext = createGetNativeContext(CONTEXT_STORE);\nconst nativeOfflineAudioContextConstructor = createNativeOfflineAudioContextConstructor(window);\nconst isNativeOfflineAudioContext = createIsNativeOfflineAudioContext(nativeOfflineAudioContextConstructor);\nconst audioParamAudioNodeStore: TAudioParamAudioNodeStore = new WeakMap();\nconst eventTargetConstructor = createEventTargetConstructor(wrapEventListener);\nconst nativeAudioContextConstructor = createNativeAudioContextConstructor(window);\nconst isNativeAudioContext = createIsNativeAudioContext(nativeAudioContextConstructor);\nconst isNativeAudioNode = createIsNativeAudioNode(window);\nconst isNativeAudioParam = createIsNativeAudioParam(window);\nconst nativeAudioWorkletNodeConstructor = createNativeAudioWorkletNodeConstructor(window);\nconst audioNodeConstructor = createAudioNodeConstructor(\n    createAddAudioNodeConnections(AUDIO_NODE_CONNECTIONS_STORE),\n    createAddConnectionToAudioNode(\n        addActiveInputConnectionToAudioNode,\n        addPassiveInputConnectionToAudioNode,\n        connectNativeAudioNodeToNativeAudioNode,\n        deleteActiveInputConnectionToAudioNode,\n        disconnectNativeAudioNodeFromNativeAudioNode,\n        getAudioNodeConnections,\n        getAudioNodeTailTime,\n        getEventListenersOfAudioNode,\n        getNativeAudioNode,\n        insertElementInSet,\n        isActiveAudioNode,\n        isPartOfACycle,\n        isPassiveAudioNode\n    ),\n    cacheTestResult,\n    createIncrementCycleCounterFactory(\n        CYCLE_COUNTERS,\n        disconnectNativeAudioNodeFromNativeAudioNode,\n        getAudioNodeConnections,\n        getNativeAudioNode,\n        getNativeAudioParam,\n        isActiveAudioNode\n    ),\n    createIndexSizeError,\n    createInvalidAccessError,\n    createNotSupportedError,\n    createDecrementCycleCounter(\n        connectNativeAudioNodeToNativeAudioNode,\n        CYCLE_COUNTERS,\n        getAudioNodeConnections,\n        getNativeAudioNode,\n        getNativeAudioParam,\n        getNativeContext,\n        isActiveAudioNode,\n        isNativeOfflineAudioContext\n    ),\n    createDetectCycles(audioParamAudioNodeStore, getAudioNodeConnections, getValueForKey),\n    eventTargetConstructor,\n    getNativeContext,\n    isNativeAudioContext,\n    isNativeAudioNode,\n    isNativeAudioParam,\n    isNativeOfflineAudioContext,\n    nativeAudioWorkletNodeConstructor\n);\nconst analyserNodeConstructor: TAnalyserNodeConstructor = createAnalyserNodeConstructor(\n    audioNodeConstructor,\n    createAnalyserNodeRenderer,\n    createIndexSizeError,\n    createNativeAnalyserNode,\n    getNativeContext,\n    isNativeOfflineAudioContext\n);\n\ntype analyserNodeConstructor<T extends TContext> = IAnalyserNode<T>;\n\nexport { analyserNodeConstructor as AnalyserNode };\n\nconst audioBufferStore: TAudioBufferStore = new WeakSet();\nconst nativeAudioBufferConstructor = createNativeAudioBufferConstructor(window);\nconst convertNumberToUnsignedLong = createConvertNumberToUnsignedLong(new Uint32Array(1));\nconst wrapAudioBufferCopyChannelMethods = createWrapAudioBufferCopyChannelMethods(convertNumberToUnsignedLong, createIndexSizeError);\nconst wrapAudioBufferCopyChannelMethodsOutOfBounds = createWrapAudioBufferCopyChannelMethodsOutOfBounds(convertNumberToUnsignedLong);\nconst audioBufferConstructor: TAudioBufferConstructor = createAudioBufferConstructor(\n    audioBufferStore,\n    cacheTestResult,\n    createNotSupportedError,\n    nativeAudioBufferConstructor,\n    nativeOfflineAudioContextConstructor,\n    createTestAudioBufferConstructorSupport(nativeAudioBufferConstructor),\n    wrapAudioBufferCopyChannelMethods,\n    wrapAudioBufferCopyChannelMethodsOutOfBounds\n);\n\ntype audioBufferConstructor = IAudioBuffer;\n\nexport { audioBufferConstructor as AudioBuffer };\n\nconst addSilentConnection = createAddSilentConnection(createNativeGainNode);\nconst renderInputsOfAudioParam = createRenderInputsOfAudioParam(getAudioNodeRenderer, getAudioParamConnections, isPartOfACycle);\nconst connectAudioParam = createConnectAudioParam(renderInputsOfAudioParam);\nconst createNativeAudioBufferSourceNode = createNativeAudioBufferSourceNodeFactory(\n    addSilentConnection,\n    cacheTestResult,\n    testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport,\n    testAudioBufferSourceNodeStartMethodOffsetClampingSupport,\n    testAudioBufferSourceNodeStopMethodNullifiedBufferSupport,\n    testAudioScheduledSourceNodeStartMethodNegativeParametersSupport,\n    testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport,\n    testAudioScheduledSourceNodeStopMethodNegativeParametersSupport,\n    wrapAudioBufferSourceNodeStartMethodOffsetClamping,\n    createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer(overwriteAccessors),\n    wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls\n);\nconst renderAutomation = createRenderAutomation(createGetAudioParamRenderer(getAudioParamConnections), renderInputsOfAudioParam);\nconst createAudioBufferSourceNodeRenderer = createAudioBufferSourceNodeRendererFactory(\n    connectAudioParam,\n    createNativeAudioBufferSourceNode,\n    getNativeAudioNode,\n    renderAutomation,\n    renderInputsOfAudioNode\n);\nconst createAudioParam = createAudioParamFactory(\n    createAddAudioParamConnections(AUDIO_PARAM_CONNECTIONS_STORE),\n    audioParamAudioNodeStore,\n    AUDIO_PARAM_STORE,\n    createAudioParamRenderer,\n    createCancelAndHoldAutomationEvent,\n    createCancelScheduledValuesAutomationEvent,\n    createExponentialRampToValueAutomationEvent,\n    createLinearRampToValueAutomationEvent,\n    createSetTargetAutomationEvent,\n    createSetValueAutomationEvent,\n    createSetValueCurveAutomationEvent,\n    nativeAudioContextConstructor,\n    setValueAtTimeUntilPossible\n);\nconst audioBufferSourceNodeConstructor: TAudioBufferSourceNodeConstructor = createAudioBufferSourceNodeConstructor(\n    audioNodeConstructor,\n    createAudioBufferSourceNodeRenderer,\n    createAudioParam,\n    createInvalidStateError,\n    createNativeAudioBufferSourceNode,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    wrapEventListener\n);\n\ntype audioBufferSourceNodeConstructor<T extends TContext> = IAudioBufferSourceNode<T>;\n\nexport { audioBufferSourceNodeConstructor as AudioBufferSourceNode };\n\nconst audioDestinationNodeConstructor = createAudioDestinationNodeConstructor(\n    audioNodeConstructor,\n    createAudioDestinationNodeRenderer,\n    createIndexSizeError,\n    createInvalidStateError,\n    createNativeAudioDestinationNodeFactory(createNativeGainNode, overwriteAccessors),\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    renderInputsOfAudioNode\n);\nconst createBiquadFilterNodeRenderer = createBiquadFilterNodeRendererFactory(\n    connectAudioParam,\n    createNativeBiquadFilterNode,\n    getNativeAudioNode,\n    renderAutomation,\n    renderInputsOfAudioNode\n);\nconst setAudioNodeTailTime = createSetAudioNodeTailTime(audioNodeTailTimeStore);\nconst biquadFilterNodeConstructor: TBiquadFilterNodeConstructor = createBiquadFilterNodeConstructor(\n    audioNodeConstructor,\n    createAudioParam,\n    createBiquadFilterNodeRenderer,\n    createInvalidAccessError,\n    createNativeBiquadFilterNode,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    setAudioNodeTailTime\n);\nconst monitorConnections = createMonitorConnections(insertElementInSet, isNativeAudioNode);\nconst wrapChannelMergerNode = createWrapChannelMergerNode(createInvalidStateError, monitorConnections);\nconst createNativeChannelMergerNode = createNativeChannelMergerNodeFactory(nativeAudioContextConstructor, wrapChannelMergerNode);\nconst createChannelMergerNodeRenderer = createChannelMergerNodeRendererFactory(\n    createNativeChannelMergerNode,\n    getNativeAudioNode,\n    renderInputsOfAudioNode\n);\nconst channelMergerNodeConstructor: TChannelMergerNodeConstructor = createChannelMergerNodeConstructor(\n    audioNodeConstructor,\n    createChannelMergerNodeRenderer,\n    createNativeChannelMergerNode,\n    getNativeContext,\n    isNativeOfflineAudioContext\n);\nconst createChannelSplitterNodeRenderer = createChannelSplitterNodeRendererFactory(\n    createNativeChannelSplitterNode,\n    getNativeAudioNode,\n    renderInputsOfAudioNode\n);\nconst channelSplitterNodeConstructor: TChannelSplitterNodeConstructor = createChannelSplitterNodeConstructor(\n    audioNodeConstructor,\n    createChannelSplitterNodeRenderer,\n    createNativeChannelSplitterNode,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    sanitizeChannelSplitterOptions\n);\nconst createNativeConstantSourceNodeFaker = createNativeConstantSourceNodeFakerFactory(\n    addSilentConnection,\n    createNativeAudioBufferSourceNode,\n    createNativeGainNode,\n    monitorConnections\n);\nconst createNativeConstantSourceNode = createNativeConstantSourceNodeFactory(\n    addSilentConnection,\n    cacheTestResult,\n    createNativeConstantSourceNodeFaker,\n    testAudioScheduledSourceNodeStartMethodNegativeParametersSupport,\n    testAudioScheduledSourceNodeStopMethodNegativeParametersSupport\n);\nconst createConstantSourceNodeRenderer = createConstantSourceNodeRendererFactory(\n    connectAudioParam,\n    createNativeConstantSourceNode,\n    getNativeAudioNode,\n    renderAutomation,\n    renderInputsOfAudioNode\n);\nconst constantSourceNodeConstructor: TConstantSourceNodeConstructor = createConstantSourceNodeConstructor(\n    audioNodeConstructor,\n    createAudioParam,\n    createConstantSourceNodeRenderer,\n    createNativeConstantSourceNode,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    wrapEventListener\n);\nconst createNativeConvolverNode = createNativeConvolverNodeFactory(createNotSupportedError, overwriteAccessors);\nconst createConvolverNodeRenderer = createConvolverNodeRendererFactory(\n    createNativeConvolverNode,\n    getNativeAudioNode,\n    renderInputsOfAudioNode\n);\nconst convolverNodeConstructor: TConvolverNodeConstructor = createConvolverNodeConstructor(\n    audioNodeConstructor,\n    createConvolverNodeRenderer,\n    createNativeConvolverNode,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    setAudioNodeTailTime\n);\nconst createDelayNodeRenderer = createDelayNodeRendererFactory(\n    connectAudioParam,\n    createNativeDelayNode,\n    getNativeAudioNode,\n    renderAutomation,\n    renderInputsOfAudioNode\n);\nconst delayNodeConstructor: TDelayNodeConstructor = createDelayNodeConstructor(\n    audioNodeConstructor,\n    createAudioParam,\n    createDelayNodeRenderer,\n    createNativeDelayNode,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    setAudioNodeTailTime\n);\nconst createNativeDynamicsCompressorNode = createNativeDynamicsCompressorNodeFactory(createNotSupportedError);\nconst createDynamicsCompressorNodeRenderer = createDynamicsCompressorNodeRendererFactory(\n    connectAudioParam,\n    createNativeDynamicsCompressorNode,\n    getNativeAudioNode,\n    renderAutomation,\n    renderInputsOfAudioNode\n);\nconst dynamicsCompressorNodeConstructor: TDynamicsCompressorNodeConstructor = createDynamicsCompressorNodeConstructor(\n    audioNodeConstructor,\n    createAudioParam,\n    createDynamicsCompressorNodeRenderer,\n    createNativeDynamicsCompressorNode,\n    createNotSupportedError,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    setAudioNodeTailTime\n);\nconst createGainNodeRenderer = createGainNodeRendererFactory(\n    connectAudioParam,\n    createNativeGainNode,\n    getNativeAudioNode,\n    renderAutomation,\n    renderInputsOfAudioNode\n);\nconst gainNodeConstructor: TGainNodeConstructor = createGainNodeConstructor(\n    audioNodeConstructor,\n    createAudioParam,\n    createGainNodeRenderer,\n    createNativeGainNode,\n    getNativeContext,\n    isNativeOfflineAudioContext\n);\nconst createNativeIIRFilterNodeFaker = createNativeIIRFilterNodeFakerFactory(\n    createInvalidAccessError,\n    createInvalidStateError,\n    createNativeScriptProcessorNode,\n    createNotSupportedError\n);\nconst renderNativeOfflineAudioContext = createRenderNativeOfflineAudioContext(\n    cacheTestResult,\n    createNativeGainNode,\n    createNativeScriptProcessorNode,\n    createTestOfflineAudioContextCurrentTimeSupport(createNativeGainNode, nativeOfflineAudioContextConstructor)\n);\nconst createIIRFilterNodeRenderer = createIIRFilterNodeRendererFactory(\n    createNativeAudioBufferSourceNode,\n    getNativeAudioNode,\n    nativeOfflineAudioContextConstructor,\n    renderInputsOfAudioNode,\n    renderNativeOfflineAudioContext\n);\nconst createNativeIIRFilterNode = createNativeIIRFilterNodeFactory(createNativeIIRFilterNodeFaker);\nconst iIRFilterNodeConstructor: TIIRFilterNodeConstructor = createIIRFilterNodeConstructor(\n    audioNodeConstructor,\n    createNativeIIRFilterNode,\n    createIIRFilterNodeRenderer,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    setAudioNodeTailTime\n);\nconst createAudioListener = createAudioListenerFactory(\n    createAudioParam,\n    createNativeChannelMergerNode,\n    createNativeConstantSourceNode,\n    createNativeScriptProcessorNode,\n    createNotSupportedError,\n    getFirstSample,\n    isNativeOfflineAudioContext,\n    overwriteAccessors\n);\nconst unrenderedAudioWorkletNodeStore: TUnrenderedAudioWorkletNodeStore = new WeakMap();\nconst minimalBaseAudioContextConstructor = createMinimalBaseAudioContextConstructor(\n    audioDestinationNodeConstructor,\n    createAudioListener,\n    eventTargetConstructor,\n    isNativeOfflineAudioContext,\n    unrenderedAudioWorkletNodeStore,\n    wrapEventListener\n);\nconst createNativeOscillatorNode = createNativeOscillatorNodeFactory(\n    addSilentConnection,\n    cacheTestResult,\n    testAudioScheduledSourceNodeStartMethodNegativeParametersSupport,\n    testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport,\n    testAudioScheduledSourceNodeStopMethodNegativeParametersSupport,\n    wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls\n);\nconst createOscillatorNodeRenderer = createOscillatorNodeRendererFactory(\n    connectAudioParam,\n    createNativeOscillatorNode,\n    getNativeAudioNode,\n    renderAutomation,\n    renderInputsOfAudioNode\n);\nconst oscillatorNodeConstructor: TOscillatorNodeConstructor = createOscillatorNodeConstructor(\n    audioNodeConstructor,\n    createAudioParam,\n    createNativeOscillatorNode,\n    createOscillatorNodeRenderer,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    wrapEventListener\n);\nconst createConnectedNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNodeFactory(createNativeAudioBufferSourceNode);\nconst createNativeWaveShaperNodeFaker = createNativeWaveShaperNodeFakerFactory(\n    createConnectedNativeAudioBufferSourceNode,\n    createInvalidStateError,\n    createNativeGainNode,\n    isDCCurve,\n    monitorConnections\n);\nconst createNativeWaveShaperNode = createNativeWaveShaperNodeFactory(\n    createConnectedNativeAudioBufferSourceNode,\n    createInvalidStateError,\n    createNativeWaveShaperNodeFaker,\n    isDCCurve,\n    monitorConnections,\n    nativeAudioContextConstructor,\n    overwriteAccessors\n);\nconst createNativePannerNodeFaker = createNativePannerNodeFakerFactory(\n    connectNativeAudioNodeToNativeAudioNode,\n    createInvalidStateError,\n    createNativeChannelMergerNode,\n    createNativeGainNode,\n    createNativeScriptProcessorNode,\n    createNativeWaveShaperNode,\n    createNotSupportedError,\n    disconnectNativeAudioNodeFromNativeAudioNode,\n    getFirstSample,\n    monitorConnections\n);\nconst createNativePannerNode = createNativePannerNodeFactory(createNativePannerNodeFaker);\nconst createPannerNodeRenderer = createPannerNodeRendererFactory(\n    connectAudioParam,\n    createNativeChannelMergerNode,\n    createNativeConstantSourceNode,\n    createNativeGainNode,\n    createNativePannerNode,\n    getNativeAudioNode,\n    nativeOfflineAudioContextConstructor,\n    renderAutomation,\n    renderInputsOfAudioNode,\n    renderNativeOfflineAudioContext\n);\nconst pannerNodeConstructor: TPannerNodeConstructor = createPannerNodeConstructor(\n    audioNodeConstructor,\n    createAudioParam,\n    createNativePannerNode,\n    createPannerNodeRenderer,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    setAudioNodeTailTime\n);\nconst createNativePeriodicWave = createNativePeriodicWaveFactory(createIndexSizeError);\nconst periodicWaveConstructor: TPeriodicWaveConstructor = createPeriodicWaveConstructor(\n    createNativePeriodicWave,\n    getNativeContext,\n    new WeakSet(),\n    sanitizePeriodicWaveOptions\n);\nconst nativeStereoPannerNodeFakerFactory = createNativeStereoPannerNodeFakerFactory(\n    createNativeChannelMergerNode,\n    createNativeChannelSplitterNode,\n    createNativeGainNode,\n    createNativeWaveShaperNode,\n    createNotSupportedError,\n    monitorConnections\n);\nconst createNativeStereoPannerNode = createNativeStereoPannerNodeFactory(nativeStereoPannerNodeFakerFactory, createNotSupportedError);\nconst createStereoPannerNodeRenderer = createStereoPannerNodeRendererFactory(\n    connectAudioParam,\n    createNativeStereoPannerNode,\n    getNativeAudioNode,\n    renderAutomation,\n    renderInputsOfAudioNode\n);\nconst stereoPannerNodeConstructor: TStereoPannerNodeConstructor = createStereoPannerNodeConstructor(\n    audioNodeConstructor,\n    createAudioParam,\n    createNativeStereoPannerNode,\n    createStereoPannerNodeRenderer,\n    getNativeContext,\n    isNativeOfflineAudioContext\n);\nconst createWaveShaperNodeRenderer = createWaveShaperNodeRendererFactory(\n    createNativeWaveShaperNode,\n    getNativeAudioNode,\n    renderInputsOfAudioNode\n);\nconst waveShaperNodeConstructor: TWaveShaperNodeConstructor = createWaveShaperNodeConstructor(\n    audioNodeConstructor,\n    createInvalidStateError,\n    createNativeWaveShaperNode,\n    createWaveShaperNodeRenderer,\n    getNativeContext,\n    isNativeOfflineAudioContext,\n    setAudioNodeTailTime\n);\nconst isSecureContext = createIsSecureContext(window);\nconst exposeCurrentFrameAndCurrentTime = createExposeCurrentFrameAndCurrentTime(window);\nconst backupOfflineAudioContextStore: TBackupOfflineAudioContextStore = new WeakMap();\nconst getOrCreateBackupOfflineAudioContext = createGetOrCreateBackupOfflineAudioContext(\n    backupOfflineAudioContextStore,\n    nativeOfflineAudioContextConstructor\n);\n\n// The addAudioWorkletModule() function is only available in a SecureContext.\nexport const addAudioWorkletModule: undefined | TAddAudioWorkletModuleFunction = isSecureContext\n    ? createAddAudioWorkletModule(\n          cacheTestResult,\n          createNotSupportedError,\n          createEvaluateSource(window),\n          exposeCurrentFrameAndCurrentTime,\n          createFetchSource(createAbortError),\n          getNativeContext,\n          getOrCreateBackupOfflineAudioContext,\n          isNativeOfflineAudioContext,\n          nativeAudioWorkletNodeConstructor,\n          new WeakMap(),\n          new WeakMap(),\n          createTestAudioWorkletProcessorPostMessageSupport(nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor),\n          // @todo window is guaranteed to be defined because isSecureContext checks that as well.\n          <NonNullable<typeof window>>window\n      )\n    : undefined;\n\nconst isNativeContext = createIsNativeContext(isNativeAudioContext, isNativeOfflineAudioContext);\n\nexport const decodeAudioData: TDecodeAudioDataFunction = createDecodeAudioData(\n    audioBufferStore,\n    cacheTestResult,\n    createDataCloneError,\n    createEncodingError,\n    new WeakSet(),\n    getNativeContext,\n    isNativeContext,\n    testAudioBufferCopyChannelMethodsOutOfBoundsSupport,\n    testPromiseSupport,\n    wrapAudioBufferCopyChannelMethods,\n    wrapAudioBufferCopyChannelMethodsOutOfBounds\n);\n\nconst baseAudioContextConstructor = createBaseAudioContextConstructor(\n    addAudioWorkletModule,\n    analyserNodeConstructor,\n    audioBufferConstructor,\n    audioBufferSourceNodeConstructor,\n    biquadFilterNodeConstructor,\n    channelMergerNodeConstructor,\n    channelSplitterNodeConstructor,\n    constantSourceNodeConstructor,\n    convolverNodeConstructor,\n    decodeAudioData,\n    delayNodeConstructor,\n    dynamicsCompressorNodeConstructor,\n    gainNodeConstructor,\n    iIRFilterNodeConstructor,\n    minimalBaseAudioContextConstructor,\n    oscillatorNodeConstructor,\n    pannerNodeConstructor,\n    periodicWaveConstructor,\n    stereoPannerNodeConstructor,\n    waveShaperNodeConstructor\n);\nconst mediaElementAudioSourceNodeConstructor: TMediaElementAudioSourceNodeConstructor = createMediaElementAudioSourceNodeConstructor(\n    audioNodeConstructor,\n    createNativeMediaElementAudioSourceNode,\n    getNativeContext,\n    isNativeOfflineAudioContext\n);\nconst mediaStreamAudioDestinationNodeConstructor: TMediaStreamAudioDestinationNodeConstructor =\n    createMediaStreamAudioDestinationNodeConstructor(\n        audioNodeConstructor,\n        createNativeMediaStreamAudioDestinationNode,\n        getNativeContext,\n        isNativeOfflineAudioContext\n    );\nconst mediaStreamAudioSourceNodeConstructor: TMediaStreamAudioSourceNodeConstructor = createMediaStreamAudioSourceNodeConstructor(\n    audioNodeConstructor,\n    createNativeMediaStreamAudioSourceNode,\n    getNativeContext,\n    isNativeOfflineAudioContext\n);\nconst createNativeMediaStreamTrackAudioSourceNode = createNativeMediaStreamTrackAudioSourceNodeFactory(\n    createInvalidStateError,\n    isNativeOfflineAudioContext\n);\nconst mediaStreamTrackAudioSourceNodeConstructor: TMediaStreamTrackAudioSourceNodeConstructor =\n    createMediaStreamTrackAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaStreamTrackAudioSourceNode, getNativeContext);\nconst audioContextConstructor: TAudioContextConstructor = createAudioContextConstructor(\n    baseAudioContextConstructor,\n    createInvalidStateError,\n    createNotSupportedError,\n    createUnknownError,\n    mediaElementAudioSourceNodeConstructor,\n    mediaStreamAudioDestinationNodeConstructor,\n    mediaStreamAudioSourceNodeConstructor,\n    mediaStreamTrackAudioSourceNodeConstructor,\n    nativeAudioContextConstructor\n);\n\ntype audioContextConstructor = IAudioContext;\n\nexport { audioContextConstructor as AudioContext };\n\nconst getUnrenderedAudioWorkletNodes = createGetUnrenderedAudioWorkletNodes(unrenderedAudioWorkletNodeStore);\nconst addUnrenderedAudioWorkletNode = createAddUnrenderedAudioWorkletNode(getUnrenderedAudioWorkletNodes);\nconst connectMultipleOutputs = createConnectMultipleOutputs(createIndexSizeError);\nconst deleteUnrenderedAudioWorkletNode = createDeleteUnrenderedAudioWorkletNode(getUnrenderedAudioWorkletNodes);\nconst disconnectMultipleOutputs = createDisconnectMultipleOutputs(createIndexSizeError);\nconst activeAudioWorkletNodeInputsStore: TActiveAudioWorkletNodeInputsStore = new WeakMap();\nconst getActiveAudioWorkletNodeInputs = createGetActiveAudioWorkletNodeInputs(activeAudioWorkletNodeInputsStore, getValueForKey);\nconst createNativeAudioWorkletNodeFaker = createNativeAudioWorkletNodeFakerFactory(\n    connectMultipleOutputs,\n    createIndexSizeError,\n    createInvalidStateError,\n    createNativeChannelMergerNode,\n    createNativeChannelSplitterNode,\n    createNativeConstantSourceNode,\n    createNativeGainNode,\n    createNativeScriptProcessorNode,\n    createNotSupportedError,\n    disconnectMultipleOutputs,\n    exposeCurrentFrameAndCurrentTime,\n    getActiveAudioWorkletNodeInputs,\n    monitorConnections\n);\nconst createNativeAudioWorkletNode = createNativeAudioWorkletNodeFactory(\n    createInvalidStateError,\n    createNativeAudioWorkletNodeFaker,\n    createNativeGainNode,\n    createNotSupportedError,\n    monitorConnections\n);\nconst createAudioWorkletNodeRenderer = createAudioWorkletNodeRendererFactory(\n    connectAudioParam,\n    connectMultipleOutputs,\n    createNativeAudioBufferSourceNode,\n    createNativeChannelMergerNode,\n    createNativeChannelSplitterNode,\n    createNativeConstantSourceNode,\n    createNativeGainNode,\n    deleteUnrenderedAudioWorkletNode,\n    disconnectMultipleOutputs,\n    exposeCurrentFrameAndCurrentTime,\n    getNativeAudioNode,\n    nativeAudioWorkletNodeConstructor,\n    nativeOfflineAudioContextConstructor,\n    renderAutomation,\n    renderInputsOfAudioNode,\n    renderNativeOfflineAudioContext\n);\nconst getBackupOfflineAudioContext = createGetBackupOfflineAudioContext(backupOfflineAudioContextStore);\nconst setActiveAudioWorkletNodeInputs = createSetActiveAudioWorkletNodeInputs(activeAudioWorkletNodeInputsStore);\n\n// The AudioWorkletNode constructor is only available in a SecureContext.\nconst audioWorkletNodeConstructor: undefined | TAudioWorkletNodeConstructor = isSecureContext\n    ? createAudioWorkletNodeConstructor(\n          addUnrenderedAudioWorkletNode,\n          audioNodeConstructor,\n          createAudioParam,\n          createAudioWorkletNodeRenderer,\n          createNativeAudioWorkletNode,\n          getAudioNodeConnections,\n          getBackupOfflineAudioContext,\n          getNativeContext,\n          isNativeOfflineAudioContext,\n          nativeAudioWorkletNodeConstructor,\n          sanitizeAudioWorkletNodeOptions,\n          setActiveAudioWorkletNodeInputs,\n          testAudioWorkletNodeOptionsClonability,\n          wrapEventListener\n      )\n    : undefined;\n\ntype audioWorkletNodeConstructor<T extends TContext> = undefined | IAudioWorkletNode<T>;\n\nexport { audioWorkletNodeConstructor as AudioWorkletNode };\n\ntype biquadFilterNodeConstructor<T extends TContext> = IBiquadFilterNode<T>;\n\nexport { biquadFilterNodeConstructor as BiquadFilterNode };\n\ntype channelMergerNodeConstructor<T extends TContext> = IAudioNode<T>;\n\nexport { channelMergerNodeConstructor as ChannelMergerNode };\n\ntype channelSplitterNodeConstructor<T extends TContext> = IAudioNode<T>;\n\nexport { channelSplitterNodeConstructor as ChannelSplitterNode };\n\ntype constantSourceNodeConstructor<T extends TContext> = IConstantSourceNode<T>;\n\nexport { convolverNodeConstructor as ConvolverNode };\n\ntype convolverNodeConstructor<T extends TContext> = IConvolverNode<T>;\n\nexport { constantSourceNodeConstructor as ConstantSourceNode };\n\ntype delayNodeConstructor<T extends TContext> = IDelayNode<T>;\n\nexport { delayNodeConstructor as DelayNode };\n\ntype dynamicsCompressorNodeConstructor<T extends TContext> = IDynamicsCompressorNode<T>;\n\nexport { dynamicsCompressorNodeConstructor as DynamicsCompressorNode };\n\ntype gainNodeConstructor<T extends TContext> = IGainNode<T>;\n\nexport { gainNodeConstructor as GainNode };\n\ntype iIRFilterNodeConstructor<T extends TContext> = IIIRFilterNode<T>;\n\nexport { iIRFilterNodeConstructor as IIRFilterNode };\n\ntype mediaElementAudioSourceNodeConstructor<T extends IAudioContext | IMinimalAudioContext> = IMediaElementAudioSourceNode<T>;\n\nexport { mediaElementAudioSourceNodeConstructor as MediaElementAudioSourceNode };\n\ntype mediaStreamAudioDestinationNodeConstructor<T extends IAudioContext | IMinimalAudioContext> = IMediaStreamAudioDestinationNode<T>;\n\nexport { mediaStreamAudioDestinationNodeConstructor as MediaStreamAudioDestinationNode };\n\ntype mediaStreamAudioSourceNodeConstructor<T extends IAudioContext | IMinimalAudioContext> = IMediaStreamAudioSourceNode<T>;\n\nexport { mediaStreamAudioSourceNodeConstructor as MediaStreamAudioSourceNode };\n\ntype mediaStreamTrackAudioSourceNodeConstructor<T extends IAudioContext | IMinimalAudioContext> = IMediaStreamTrackAudioSourceNode<T>;\n\nexport { mediaStreamTrackAudioSourceNodeConstructor as MediaStreamTrackAudioSourceNode };\n\nconst minimalAudioContextConstructor: TMinimalAudioContextConstructor = createMinimalAudioContextConstructor(\n    createInvalidStateError,\n    createNotSupportedError,\n    createUnknownError,\n    minimalBaseAudioContextConstructor,\n    nativeAudioContextConstructor\n);\n\ntype minimalAudioContextConstructor = IMinimalAudioContext;\n\nexport { minimalAudioContextConstructor as MinimalAudioContext };\n\nconst createNativeOfflineAudioContext = createCreateNativeOfflineAudioContext(\n    createNotSupportedError,\n    nativeOfflineAudioContextConstructor\n);\nconst startRendering = createStartRendering(\n    audioBufferStore,\n    cacheTestResult,\n    getAudioNodeRenderer,\n    getUnrenderedAudioWorkletNodes,\n    renderNativeOfflineAudioContext,\n    testAudioBufferCopyChannelMethodsOutOfBoundsSupport,\n    wrapAudioBufferCopyChannelMethods,\n    wrapAudioBufferCopyChannelMethodsOutOfBounds\n);\nconst minimalOfflineAudioContextConstructor: TMinimalOfflineAudioContextConstructor = createMinimalOfflineAudioContextConstructor(\n    cacheTestResult,\n    createInvalidStateError,\n    createNativeOfflineAudioContext,\n    minimalBaseAudioContextConstructor,\n    startRendering\n);\n\ntype minimalOfflineAudioContextConstructor = IMinimalOfflineAudioContext;\n\nexport { minimalOfflineAudioContextConstructor as MinimalOfflineAudioContext };\n\nconst offlineAudioContextConstructor: IOfflineAudioContextConstructor = createOfflineAudioContextConstructor(\n    baseAudioContextConstructor,\n    cacheTestResult,\n    createInvalidStateError,\n    createNativeOfflineAudioContext,\n    startRendering\n);\n\ntype offlineAudioContextConstructor = IOfflineAudioContext;\n\nexport { offlineAudioContextConstructor as OfflineAudioContext };\n\ntype oscillatorNodeConstructor<T extends TContext> = IOscillatorNode<T>;\n\nexport { oscillatorNodeConstructor as OscillatorNode };\n\ntype pannerNodeConstructor<T extends TContext> = IPannerNode<T>;\n\nexport { pannerNodeConstructor as PannerNode };\n\ntype periodicWaveConstructor = IPeriodicWave;\n\nexport { periodicWaveConstructor as PeriodicWave };\n\ntype stereoPannerNodeConstructor<T extends TContext> = IStereoPannerNode<T>;\n\nexport { stereoPannerNodeConstructor as StereoPannerNode };\n\ntype waveShaperNodeConstructor<T extends TContext> = IWaveShaperNode<T>;\n\nexport { waveShaperNodeConstructor as WaveShaperNode };\n\nexport const isAnyAudioContext = createIsAnyAudioContext(CONTEXT_STORE, isNativeAudioContext);\n\nexport const isAnyAudioNode = createIsAnyAudioNode(AUDIO_NODE_STORE, isNativeAudioNode);\n\nexport const isAnyAudioParam = createIsAnyAudioParam(AUDIO_PARAM_STORE, isNativeAudioParam);\n\nexport const isAnyOfflineAudioContext = createIsAnyOfflineAudioContext(CONTEXT_STORE, isNativeOfflineAudioContext);\n\nexport const isSupported = () =>\n    createIsSupportedPromise(\n        cacheTestResult,\n        createTestAudioBufferCopyChannelMethodsSubarraySupport(nativeOfflineAudioContextConstructor),\n        createTestAudioContextCloseMethodSupport(nativeAudioContextConstructor),\n        createTestAudioContextDecodeAudioDataMethodTypeErrorSupport(nativeOfflineAudioContextConstructor),\n        createTestAudioContextOptionsSupport(nativeAudioContextConstructor),\n        createTestAudioNodeConnectMethodSupport(nativeOfflineAudioContextConstructor),\n        createTestAudioWorkletProcessorNoOutputsSupport(nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor),\n        createTestChannelMergerNodeChannelCountSupport(nativeOfflineAudioContextConstructor),\n        createTestConstantSourceNodeAccurateSchedulingSupport(nativeOfflineAudioContextConstructor),\n        createTestConvolverNodeBufferReassignabilitySupport(nativeOfflineAudioContextConstructor),\n        createTestConvolverNodeChannelCountSupport(nativeOfflineAudioContextConstructor),\n        testDomExceptionConstructorSupport,\n        createTestIsSecureContextSupport(window),\n        createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport(nativeAudioContextConstructor),\n        createTestStereoPannerNodeDefaultValueSupport(nativeOfflineAudioContextConstructor),\n        testTransferablesSupport\n    );\n", "import {\n\tisAnyAudioContext, isAnyAudioNode,\n\tisAnyAudioParam, isAnyOfflineAudioContext,\n} from \"standardized-audio-context\";\n\n/**\n * Test if the given value is an instanceof AudioParam\n */\nexport function isAudioParam(arg: any): arg is AudioParam {\n\treturn isAnyAudioParam(arg);\n}\n\n/**\n * Test if the given value is an instanceof AudioNode\n */\nexport function isAudioNode(arg: any): arg is AudioNode {\n\treturn isAnyAudioNode(arg);\n}\n\n/**\n * Test if the arg is instanceof an OfflineAudioContext\n */\nexport function isOfflineAudioContext(arg: any): arg is OfflineAudioContext {\n\treturn isAnyOfflineAudioContext(arg);\n}\n\n/**\n * Test if the arg is an instanceof AudioContext\n */\nexport function isAudioContext(arg: any): arg is AudioContext {\n\treturn isAnyAudioContext(arg);\n}\n\n/**\n * Test if the arg is instanceof an AudioBuffer\n */\nexport function isAudioBuffer(arg: any): arg is AudioBuffer {\n\treturn arg instanceof AudioBuffer;\n}\n", "import { Note } from \"../type/Units\";\n\n/**\n * Test if the arg is undefined\n */\nexport function isUndef(arg: any): arg is undefined {\n\treturn typeof arg === \"undefined\";\n}\n\n/**\n * Test if the arg is not undefined\n */\nexport function isDefined<T>(arg: T | undefined): arg is T {\n\treturn !isUndef(arg);\n}\n\n/**\n * Test if the arg is a function\n */\nexport function isFunction(arg: any): arg is (a: any) => any {\n\treturn typeof arg === \"function\";\n}\n\n/**\n * Test if the argument is a number.\n */\nexport function isNumber(arg: any): arg is number {\n\treturn (typeof arg === \"number\");\n}\n\n/**\n * Test if the given argument is an object literal (i.e. `{}`);\n */\nexport function isObject(arg: any): arg is object {\n\treturn (Object.prototype.toString.call(arg) === \"[object Object]\" && arg.constructor === Object);\n}\n\n/**\n * Test if the argument is a boolean.\n */\nexport function isBoolean(arg: any): arg is boolean {\n\treturn (typeof arg === \"boolean\");\n}\n\n/**\n * Test if the argument is an Array\n */\nexport function isArray(arg: any): arg is any[] {\n\treturn (Array.isArray(arg));\n}\n\n/**\n * Test if the argument is a string.\n */\nexport function isString(arg: any): arg is string {\n\treturn (typeof arg === \"string\");\n}\n\n/**\n * Test if the argument is in the form of a note in scientific pitch notation.\n * e.g. \"C4\"\n */\nexport function isNote(arg: any): arg is Note {\n\treturn isString(arg) && /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i.test(arg);\n}\n", "import { isAudioBuffer, isAudioNode, isAudioParam } from \"./AdvancedTypeCheck\";\nimport { isDefined, isObject, isUndef } from \"./TypeCheck\";\n\ntype BaseToneOptions = import(\"../Tone\").BaseToneOptions;\n\n/**\n * Some objects should not be merged\n */\nfunction noCopy(key: string, arg: any): boolean {\n\treturn key === \"value\" || isAudioParam(arg) || isAudioNode(arg) || isAudioBuffer(arg);\n}\n\n/**\n * Recursively merge an object\n * @param target the object to merge into\n * @param sources the source objects to merge\n */\nexport function deepMerge<T>(target: T): T;\nexport function deepMerge<T, U>(target: T, source1: U): T & U;\nexport function deepMerge<T, U, V>(target: T, source1: U, source2: V): T & U & V;\nexport function deepMerge<T, U, V, W>(target: T, source1: U, source2: V, source3: W): T & U & V & W;\nexport function deepMerge(target: any, ...sources: any[]): any {\n\tif (!sources.length) {\n\t\treturn target; \n\t}\n\tconst source = sources.shift();\n\n\tif (isObject(target) && isObject(source)) {\n\t\tfor (const key in source) {\n\t\t\tif (noCopy(key, source[key])) {\n\t\t\t\ttarget[key] = source[key];\n\t\t\t} else if (isObject(source[key])) {\n\t\t\t\tif (!target[key]) {\n\t\t\t\t\tObject.assign(target, { [key]: {} }); \n\t\t\t\t}\n\t\t\t\tdeepMerge(target[key], source[key] as any);\n\t\t\t} else {\n\t\t\t\tObject.assign(target, { [key]: source[key] as any });\n\t\t\t}\n\t\t}\n\t}\n\t// @ts-ignore\n\treturn deepMerge(target, ...sources);\n}\n\n/**\n * Returns true if the two arrays have the same value for each of the elements\n */\nexport function deepEquals<T>(arrayA: T[], arrayB: T[]): boolean {\n\treturn arrayA.length === arrayB.length && arrayA.every((element, index) => arrayB[index] === element);\n}\n\n/**\n * Convert an args array into an object.\n */\nexport function optionsFromArguments<T extends object>(\n\tdefaults: T,\n\targsArray: IArguments,\n\tkeys: Array<keyof T> = [],\n\tobjKey?: keyof T,\n): T {\n\tconst opts: Partial<T> = {};\n\tconst args = Array.from(argsArray);\n\t// if the first argument is an object and has an object key\n\tif (isObject(args[0]) && objKey && !Reflect.has(args[0], objKey)) {\n\t\t// if it's not part of the defaults\n\t\tconst partOfDefaults = Object.keys(args[0]).some(key => Reflect.has(defaults, key));\n\t\tif (!partOfDefaults) {\n\t\t\t// merge that key\n\t\t\tdeepMerge(opts, { [objKey]: args[0] });\n\t\t\t// remove the obj key from the keys\n\t\t\tkeys.splice(keys.indexOf(objKey), 1);\n\t\t\t// shift the first argument off\n\t\t\targs.shift();\n\t\t}\n\t}\n\tif (args.length === 1 && isObject(args[0])) {\n\t\tdeepMerge(opts, args[0]);\n\t} else {\n\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\tif (isDefined(args[i])) {\n\t\t\t\topts[keys[i]] = args[i];\n\t\t\t}\n\t\t}\n\t}\n\treturn deepMerge(defaults, opts);\n}\n\n/**\n * Return this instances default values by calling Constructor.getDefaults()\n */\nexport function getDefaultsFromInstance<T>(instance: T): BaseToneOptions {\n\ttype ToneClass = {\n\t\tconstructor: ToneClass;\n\t\tgetDefaults: () => BaseToneOptions;\n\t} & T;\n\n\treturn (instance as ToneClass).constructor.getDefaults();\n}\n\n/**\n * Returns the fallback if the given object is undefined.\n * Take an array of arguments and return a formatted options object.\n */\nexport function defaultArg<T>(given: T, fallback: T): T {\n\tif (isUndef(given)) {\n\t\treturn fallback;\n\t} else {\n\t\treturn given;\n\t}\n}\n\n/**\n * Remove all of the properties belonging to omit from obj.\n */\nexport function omitFromObject<T extends object, O extends string[]>(obj: T, omit: O): Omit<T, keyof O> {\n\tomit.forEach(prop => {\n\t\tif (Reflect.has(obj, prop)) {\n\t\t\tdelete obj[prop];\n\t\t}\n\t});\n\treturn obj;\n}\n", "export const version: string = \"14.7.77\";\n", "/**\n * Assert that the statement is true, otherwise invoke the error.\n * @param statement\n * @param error The message which is passed into an Error\n */\nexport function assert(statement: boolean, error: string): void {\n\tif (!statement) {\n\t\tthrow new Error(error);\n\t}\n}\n\n/**\n * Make sure that the given value is within the range\n */\nexport function assertRange(value: number, gte: number, lte = Infinity): void {\n\tif (!(gte <= value && value <= lte)) {\n\t\tthrow new RangeError(`Value must be within [${gte}, ${lte}], got: ${value}`);\n\t}\n}\n\n/**\n * Make sure that the given value is within the range\n */\nexport function assertContextRunning(context: import(\"../context/BaseContext\").BaseContext): void {\n\t// add a warning if the context is not started\n\tif (!context.isOffline && context.state !== \"running\") {\n\t\twarn(\"The AudioContext is \\\"suspended\\\". Invoke Tone.start() from a user action to start the audio.\");\n\t}\n}\n\n/**\n * A basic logging interface\n */\ninterface Logger {\n\tlog: (args?: any[]) => void;\n\twarn: (args?: any[]) => void;\n}\n\n/**\n * The default logger is the console\n */\nlet defaultLogger: Logger = console;\n\n/**\n * Set the logging interface\n */\nexport function setLogger(logger: Logger): void {\n\tdefaultLogger = logger;\n}\n\n/**\n * Log anything\n */\nexport function log(...args: any[]): void {\n\tdefaultLogger.log(...args);\n}\n\n/**\n * Warn anything\n */\nexport function warn(...args: any[]): void {\n\tdefaultLogger.warn(...args);\n}\n", "import {\n\tAudioContext as stdAudioContext,\n\tAudioWorkletNode as stdAudioWorkletNode,\n\tOfflineAudioContext as stdOfflineAudioContext\n} from \"standardized-audio-context\";\nimport { assert } from \"../util/Debug\";\nimport { isDefined } from \"../util/TypeCheck\";\n\n/**\n * Create a new AudioContext\n */\nexport function createAudioContext(options?: AudioContextOptions): AudioContext {\n\treturn new stdAudioContext(options) as unknown as AudioContext;\n}\n\n/**\n * Create a new OfflineAudioContext\n */\nexport function createOfflineAudioContext(channels: number, length: number, sampleRate: number): OfflineAudioContext {\n\treturn new stdOfflineAudioContext(channels, length, sampleRate) as unknown as OfflineAudioContext;\n}\n\n/**\n * Either the online or offline audio context\n */\nexport type AnyAudioContext = AudioContext | OfflineAudioContext;\n\n/**\n * Interface for things that Tone.js adds to the window\n */\ninterface ToneWindow extends Window {\n\tTONE_SILENCE_LOGGING?: boolean;\n\tTONE_DEBUG_CLASS?: string;\n}\n\n/**\n * A reference to the window object\n * @hidden\n */\nexport const theWindow: ToneWindow | null = typeof self === \"object\" ? self : null;\n\n/**\n * If the browser has a window object which has an AudioContext\n * @hidden\n */\nexport const hasAudioContext = theWindow &&\n\t(theWindow.hasOwnProperty(\"AudioContext\") || theWindow.hasOwnProperty(\"webkitAudioContext\"));\n\nexport function createAudioWorkletNode(context: AnyAudioContext, name: string, options?: Partial<AudioWorkletNodeOptions>): AudioWorkletNode {\n\tassert(isDefined(stdAudioWorkletNode), \"This node only works in a secure context (https or localhost)\");\n\t// @ts-ignore\n\treturn new stdAudioWorkletNode(context, name, options);\n}\n\n/**\n * This promise resolves to a boolean which indicates if the \n * functionality is supported within the currently used browse. \n * Taken from [standardized-audio-context](https://github.com/chrisguttandin/standardized-audio-context#issupported)\n */\nexport { isSupported as supported } from \"standardized-audio-context\";\n", "/**\n * Tone.js\n * @author Yotam Mann\n * @license http://opensource.org/licenses/MIT MIT License\n * @copyright 2014-2019 Yotam Mann\n */\nimport { version } from \"../version\";\nimport { theWindow } from \"./context/AudioContext\";\nimport { log } from \"./util/Debug\";\n\n//-------------------------------------\n// \tTONE\n//-------------------------------------\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface BaseToneOptions { }\n\n/**\n * @class  Tone is the base class of all other classes.\n * @category Core\n * @constructor\n */\nexport abstract class Tone {\n\n\t/**\n\t * The version number semver\n\t */\n\tstatic version: string = version;\n\n\t/**\n\t * The name of the class\n\t */\n\tprotected abstract name: string;\n\n\t/**\n\t * Returns all of the default options belonging to the class.\n\t */\n\tstatic getDefaults(): BaseToneOptions {\n\t\treturn {};\n\t}\n\n\t//-------------------------------------\n\t// \tDEBUGGING\n\t//-------------------------------------\n\n\t/**\n\t * Set this debug flag to log all events that happen in this class.\n\t */\n\tdebug = false;\n\n\t/**\n\t * Prints the outputs to the console log for debugging purposes.\n\t * Prints the contents only if either the object has a property\n\t * called `debug` set to true, or a variable called TONE_DEBUG_CLASS\n\t * is set to the name of the class.\n\t * @example\n\t * const osc = new Tone.Oscillator();\n\t * // prints all logs originating from this oscillator\n\t * osc.debug = true;\n\t * // calls to start/stop will print in the console\n\t * osc.start();\n\t */\n\tprotected log(...args: any[]): void {\n\t\t// if the object is either set to debug = true\n\t\t// or if there is a string on the Tone.global.with the class name\n\t\tif (this.debug || (theWindow && this.toString() === theWindow.TONE_DEBUG_CLASS)) {\n\t\t\tlog(this, ...args);\n\t\t}\n\t}\n\n\t//-------------------------------------\n\t// \tDISPOSING\n\t//-------------------------------------\n\n\t/**\n\t * Indicates if the instance was disposed\n\t */\n\tprivate _wasDisposed = false;\n\n\t/**\n\t * disconnect and dispose.\n\t */\n\tdispose(): this {\n\t\tthis._wasDisposed = true;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Indicates if the instance was disposed. 'Disposing' an\n\t * instance means that all of the Web Audio nodes that were\n\t * created for the instance are disconnected and freed for garbage collection.\n\t */\n\tget disposed(): boolean {\n\t\treturn this._wasDisposed;\n\t}\n\n\t/**\n\t * Convert the class to a string\n\t * @example\n\t * const osc = new Tone.Oscillator();\n\t * console.log(osc.toString());\n\t */\n\ttoString(): string {\n\t\treturn this.name;\n\t}\n}\n", "/**\n * The threshold for correctness for operators. Less than one sample even \n * at very high sampling rates (e.g. `1e-6 < 1 / 192000`).\n */\nconst EPSILON = 1e-6;\n\n/**\n * Test if A is greater than B\n */\nexport function GT(a: number, b: number): boolean {\n\treturn a > b + EPSILON;\n}\n\n/**\n * Test if A is greater than or equal to B\n */\nexport function GTE(a: number, b: number): boolean {\n\treturn GT(a, b) || EQ(a, b);\n}\n\n/**\n * Test if A is less than B\n */\nexport function LT(a: number, b: number): boolean {\n\treturn a + EPSILON < b;\n}\n\n/**\n * Test if A is less than B\n */\nexport function EQ(a: number, b: number): boolean {\n\treturn Math.abs(a - b) < EPSILON;\n}\n\n/**\n * Clamp the value within the given range\n */\nexport function clamp(value: number, min: number, max: number): number {\n\treturn Math.max(Math.min(value, max), min);\n}\n", "import { Tone } from \"../Tone\";\nimport { Seconds } from \"../type/Units\";\nimport { optionsFromArguments } from \"./Defaults\";\nimport { assert } from \"./Debug\";\nimport { EQ, GT, GTE, LT } from \"./Math\";\n\ntype TimelineSearchParam = \"ticks\" | \"time\";\n\n/**\n * The options object for Timeline\n */\ninterface TimelineOptions {\n\tmemory: number;\n\tincreasing: boolean;\n}\n\n/**\n * An event must have a time number\n */\nexport interface TimelineEvent {\n\ttime: number;\n}\n\n/**\n * A Timeline class for scheduling and maintaining state\n * along a timeline. All events must have a \"time\" property.\n * Internally, events are stored in time order for fast\n * retrieval.\n */\nexport class Timeline<GenericEvent extends TimelineEvent> extends Tone {\n\n\treadonly name: string = \"Timeline\";\n\n\t/**\n\t * The memory of the timeline, i.e.\n\t * how many events in the past it will retain\n\t */\n\tmemory: number;\n\n\t/**\n\t * The array of scheduled timeline events\n\t */\n\tprotected _timeline: GenericEvent[] = [];\n\n\t/**\n\t * If the time value must always be greater than or equal to the last \n\t * element on the list. \n\t */\n\tincreasing: boolean;\n\n\t/**\n\t * @param memory The number of previous events that are retained.\n\t */\n\tconstructor(memory?: number);\n\tconstructor(options?: Partial<TimelineOptions>);\n\tconstructor() {\n\t\tsuper();\n\t\tconst options = optionsFromArguments(Timeline.getDefaults(), arguments, [\"memory\"]);\n\n\t\tthis.memory = options.memory;\n\t\tthis.increasing = options.increasing;\n\t}\n\n\tstatic getDefaults(): TimelineOptions {\n\t\treturn {\n\t\t\tmemory: Infinity,\n\t\t\tincreasing: false,\n\t\t};\n\t}\n\n\t/**\n\t * The number of items in the timeline.\n\t */\n\tget length(): number {\n\t\treturn this._timeline.length;\n\t}\n\n\t/**\n\t * Insert an event object onto the timeline. Events must have a \"time\" attribute.\n\t * @param event  The event object to insert into the timeline.\n\t */\n\tadd(event: GenericEvent): this {\n\t\t// the event needs to have a time attribute\n\t\tassert(Reflect.has(event, \"time\"), \"Timeline: events must have a time attribute\");\n\t\tevent.time = event.time.valueOf();\n\t\tif (this.increasing && this.length) {\n\t\t\tconst lastValue = this._timeline[this.length - 1] as GenericEvent;\n\t\t\tassert(GTE(event.time, lastValue.time), \"The time must be greater than or equal to the last scheduled time\");\n\t\t\tthis._timeline.push(event);\n\t\t} else {\n\t\t\tconst index = this._search(event.time);\n\t\t\tthis._timeline.splice(index + 1, 0, event);\n\t\t}\n\t\t// if the length is more than the memory, remove the previous ones\n\t\tif (this.length > this.memory) {\n\t\t\tconst diff = this.length - this.memory;\n\t\t\tthis._timeline.splice(0, diff);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Remove an event from the timeline.\n\t * @param  {Object}  event  The event object to remove from the list.\n\t * @returns {Timeline} this\n\t */\n\tremove(event: GenericEvent): this {\n\t\tconst index = this._timeline.indexOf(event);\n\t\tif (index !== -1) {\n\t\t\tthis._timeline.splice(index, 1);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the nearest event whose time is less than or equal to the given time.\n\t * @param  time  The time to query.\n\t */\n\tget(time: number, param: TimelineSearchParam = \"time\"): GenericEvent | null {\n\t\tconst index = this._search(time, param);\n\t\tif (index !== -1) {\n\t\t\treturn this._timeline[index];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Return the first event in the timeline without removing it\n\t * @returns {Object} The first event object\n\t */\n\tpeek(): GenericEvent | undefined {\n\t\treturn this._timeline[0];\n\t}\n\n\t/**\n\t * Return the first event in the timeline and remove it\n\t */\n\tshift(): GenericEvent | undefined {\n\t\treturn this._timeline.shift();\n\t}\n\n\t/**\n\t * Get the event which is scheduled after the given time.\n\t * @param  time  The time to query.\n\t */\n\tgetAfter(time: number, param: TimelineSearchParam = \"time\"): GenericEvent | null {\n\t\tconst index = this._search(time, param);\n\t\tif (index + 1 < this._timeline.length) {\n\t\t\treturn this._timeline[index + 1];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Get the event before the event at the given time.\n\t * @param  time  The time to query.\n\t */\n\tgetBefore(time: number): GenericEvent | null {\n\t\tconst len = this._timeline.length;\n\t\t// if it's after the last item, return the last item\n\t\tif (len > 0 && this._timeline[len - 1].time < time) {\n\t\t\treturn this._timeline[len - 1];\n\t\t}\n\t\tconst index = this._search(time);\n\t\tif (index - 1 >= 0) {\n\t\t\treturn this._timeline[index - 1];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Cancel events at and after the given time\n\t * @param  after  The time to query.\n\t */\n\tcancel(after: number): this {\n\t\tif (this._timeline.length > 1) {\n\t\t\tlet index = this._search(after);\n\t\t\tif (index >= 0) {\n\t\t\t\tif (EQ(this._timeline[index].time, after)) {\n\t\t\t\t\t// get the first item with that time\n\t\t\t\t\tfor (let i = index; i >= 0; i--) {\n\t\t\t\t\t\tif (EQ(this._timeline[i].time, after)) {\n\t\t\t\t\t\t\tindex = i;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis._timeline = this._timeline.slice(0, index);\n\t\t\t\t} else {\n\t\t\t\t\tthis._timeline = this._timeline.slice(0, index + 1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._timeline = [];\n\t\t\t}\n\t\t} else if (this._timeline.length === 1) {\n\t\t\t// the first item's time\n\t\t\tif (GTE(this._timeline[0].time, after)) {\n\t\t\t\tthis._timeline = [];\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Cancel events before or equal to the given time.\n\t * @param  time  The time to cancel before.\n\t */\n\tcancelBefore(time: number): this {\n\t\tconst index = this._search(time);\n\t\tif (index >= 0) {\n\t\t\tthis._timeline = this._timeline.slice(index + 1);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the previous event if there is one. null otherwise\n\t * @param  event The event to find the previous one of\n\t * @return The event right before the given event\n\t */\n\tpreviousEvent(event: GenericEvent): GenericEvent | null {\n\t\tconst index = this._timeline.indexOf(event);\n\t\tif (index > 0) {\n\t\t\treturn this._timeline[index - 1];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Does a binary search on the timeline array and returns the\n\t * nearest event index whose time is after or equal to the given time.\n\t * If a time is searched before the first index in the timeline, -1 is returned.\n\t * If the time is after the end, the index of the last item is returned.\n\t */\n\tprotected _search(time: number, param: TimelineSearchParam = \"time\"): number {\n\t\tif (this._timeline.length === 0) {\n\t\t\treturn -1;\n\t\t}\n\t\tlet beginning = 0;\n\t\tconst len = this._timeline.length;\n\t\tlet end = len;\n\t\tif (len > 0 && this._timeline[len - 1][param] <= time) {\n\t\t\treturn len - 1;\n\t\t}\n\t\twhile (beginning < end) {\n\t\t\t// calculate the midpoint for roughly equal partition\n\t\t\tlet midPoint = Math.floor(beginning + (end - beginning) / 2);\n\t\t\tconst event = this._timeline[midPoint];\n\t\t\tconst nextEvent = this._timeline[midPoint + 1];\n\t\t\tif (EQ(event[param], time)) {\n\t\t\t\t// choose the last one that has the same time\n\t\t\t\tfor (let i = midPoint; i < this._timeline.length; i++) {\n\t\t\t\t\tconst testEvent = this._timeline[i];\n\t\t\t\t\tif (EQ(testEvent[param], time)) {\n\t\t\t\t\t\tmidPoint = i;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn midPoint;\n\t\t\t} else if (LT(event[param], time) && GT(nextEvent[param], time)) {\n\t\t\t\treturn midPoint;\n\t\t\t} else if (GT(event[param], time)) {\n\t\t\t\t// search lower\n\t\t\t\tend = midPoint;\n\t\t\t} else {\n\t\t\t\t// search upper\n\t\t\t\tbeginning = midPoint + 1;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\n\t/**\n\t * Internal iterator. Applies extra safety checks for\n\t * removing items from the array.\n\t */\n\tprivate _iterate(\n\t\tcallback: (event: GenericEvent) => void,\n\t\tlowerBound = 0, upperBound = this._timeline.length - 1,\n\t): void {\n\t\tthis._timeline.slice(lowerBound, upperBound + 1).forEach(callback);\n\t}\n\n\t/**\n\t * Iterate over everything in the array\n\t * @param  callback The callback to invoke with every item\n\t */\n\tforEach(callback: (event: GenericEvent) => void): this {\n\t\tthis._iterate(callback);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Iterate over everything in the array at or before the given time.\n\t * @param  time The time to check if items are before\n\t * @param  callback The callback to invoke with every item\n\t */\n\tforEachBefore(time: Seconds, callback: (event: GenericEvent) => void): this {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tconst upperBound = this._search(time);\n\t\tif (upperBound !== -1) {\n\t\t\tthis._iterate(callback, 0, upperBound);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Iterate over everything in the array after the given time.\n\t * @param  time The time to check if items are before\n\t * @param  callback The callback to invoke with every item\n\t */\n\tforEachAfter(time: Seconds, callback: (event: GenericEvent) => void): this {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tconst lowerBound = this._search(time);\n\t\tthis._iterate(callback, lowerBound + 1);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Iterate over everything in the array between the startTime and endTime.\n\t * The timerange is inclusive of the startTime, but exclusive of the endTime.\n\t * range = [startTime, endTime).\n\t * @param  startTime The time to check if items are before\n\t * @param  endTime The end of the test interval.\n\t * @param  callback The callback to invoke with every item\n\t */\n\tforEachBetween(startTime: number, endTime: number, callback: (event: GenericEvent) => void): this {\n\t\tlet lowerBound = this._search(startTime);\n\t\tlet upperBound = this._search(endTime);\n\t\tif (lowerBound !== -1 && upperBound !== -1) {\n\t\t\tif (this._timeline[lowerBound].time !== startTime) {\n\t\t\t\tlowerBound += 1;\n\t\t\t}\n\t\t\t// exclusive of the end time\n\t\t\tif (this._timeline[upperBound].time === endTime) {\n\t\t\t\tupperBound -= 1;\n\t\t\t}\n\t\t\tthis._iterate(callback, lowerBound, upperBound);\n\t\t} else if (lowerBound === -1) {\n\t\t\tthis._iterate(callback, 0, upperBound);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Iterate over everything in the array at or after the given time. Similar to\n\t * forEachAfter, but includes the item(s) at the given time.\n\t * @param  time The time to check if items are before\n\t * @param  callback The callback to invoke with every item\n\t */\n\tforEachFrom(time: number, callback: (event: GenericEvent) => void): this {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tlet lowerBound = this._search(time);\n\t\t// work backwards until the event time is less than time\n\t\twhile (lowerBound >= 0 && this._timeline[lowerBound].time >= time) {\n\t\t\tlowerBound--;\n\t\t}\n\t\tthis._iterate(callback, lowerBound + 1);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Iterate over everything in the array at the given time\n\t * @param  time The time to check if items are before\n\t * @param  callback The callback to invoke with every item\n\t */\n\tforEachAtTime(time: number, callback: (event: GenericEvent) => void): this {\n\t\t// iterate over the items in reverse so that removing an item doesn't break things\n\t\tconst upperBound = this._search(time);\n\t\tif (upperBound !== -1 && EQ(this._timeline[upperBound].time, time)) {\n\t\t\tlet lowerBound = upperBound;\n\t\t\tfor (let i = upperBound; i >= 0; i--) {\n\t\t\t\tif (EQ(this._timeline[i].time, time)) {\n\t\t\t\t\tlowerBound = i;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._iterate(event => {\n\t\t\t\tcallback(event);\n\t\t\t}, lowerBound, upperBound);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._timeline = [];\n\t\treturn this;\n\t}\n}\n", "/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol */\n\nvar extendStatics = function(d, b) {\n  extendStatics = Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n  return extendStatics(d, b);\n};\n\nexport function __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nexport var __assign = function() {\n  __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n  }\n  return __assign.apply(this, arguments);\n}\n\nexport function __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n      }\n  return t;\n}\n\nexport function __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nexport function __param(paramIndex, decorator) {\n  return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n  var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _, done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n      var context = {};\n      for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n      for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n      context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n      var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n      if (kind === \"accessor\") {\n          if (result === void 0) continue;\n          if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n          if (_ = accept(result.get)) descriptor.get = _;\n          if (_ = accept(result.set)) descriptor.set = _;\n          if (_ = accept(result.init)) initializers.unshift(_);\n      }\n      else if (_ = accept(result)) {\n          if (kind === \"field\") initializers.unshift(_);\n          else descriptor[key] = _;\n      }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\n\nexport function __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\n\nexport function __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n};\n\nexport function __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\n\nexport function __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nexport function __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n  return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n      function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nexport function __generator(thisArg, body) {\n  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n  return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n  function verb(n) { return function (v) { return step([n, v]); }; }\n  function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n              case 0: case 1: t = op; break;\n              case 4: _.label++; return { value: op[1], done: false };\n              case 5: _.label++; y = op[1]; op = [0]; continue;\n              case 7: op = _.ops.pop(); _.trys.pop(); continue;\n              default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop(); continue;\n          }\n          op = body.call(thisArg, _);\n      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n  }\n}\n\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n  }\n  Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nexport function __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nexport function __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n      next: function () {\n          if (o && i >= o.length) o = void 0;\n          return { value: o && o[i++], done: !o };\n      }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nexport function __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  }\n  catch (error) { e = { error: error }; }\n  finally {\n      try {\n          if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      }\n      finally { if (e) throw e.error; }\n  }\n  return ar;\n}\n\n/** @deprecated */\nexport function __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++)\n      ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nexport function __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++)\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n  return r;\n}\n\nexport function __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n      }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nexport function __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []), i, q = [];\n  return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\n  function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\n  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n  function fulfill(value) { resume(\"next\", value); }\n  function reject(value) { resume(\"throw\", value); }\n  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nexport function __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n}\n\nexport function __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator], i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nexport function __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n  return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n  Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n  o[\"default\"] = v;\n};\n\nexport function __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n}\n\nexport function __importDefault(mod) {\n  return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nexport function __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n\nexport function __addDisposableResource(env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose;\n    if (async) {\n        if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n        dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n        if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n        dispose = value[Symbol.dispose];\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    env.stack.push({ value: value, dispose: dispose, async: async });\n  }\n  else if (async) {\n    env.stack.push({ async: true });\n  }\n  return value;\n}\n\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\nexport function __disposeResources(env) {\n  function fail(e) {\n    env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n    env.hasError = true;\n  }\n  function next() {\n    while (env.stack.length) {\n      var rec = env.stack.pop();\n      try {\n        var result = rec.dispose && rec.dispose.call(rec.value);\n        if (rec.async) return Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\n      }\n      catch (e) {\n          fail(e);\n      }\n    }\n    if (env.hasError) throw env.error;\n  }\n  return next();\n}\n\nexport default {\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n  __addDisposableResource,\n  __disposeResources,\n};\n", "import { Seconds } from \"../type/Units\";\n\nexport type TickerClockSource = \"worker\" | \"timeout\" | \"offline\";\n\n/**\n * A class which provides a reliable callback using either\n * a Web Worker, or if that isn't supported, falls back to setTimeout.\n */\nexport class Ticker {\n\n\t/**\n\t * Either \"worker\" or \"timeout\" or \"offline\"\n\t */\n\tprivate _type: TickerClockSource;\n\n\t/**\n\t * The update interval of the worker\n\t */\n\tprivate _updateInterval: Seconds;\n\n\t/**\n\t * The callback to invoke at regular intervals\n\t */\n\tprivate _callback: () => void;\n\n\t/**\n\t * track the callback interval\n\t */\n\tprivate _timeout!: ReturnType<typeof setTimeout>;\n\n\t/**\n\t * private reference to the worker\n\t */\n\tprivate _worker!: Worker;\n\n\tconstructor(callback: () => void, type: TickerClockSource, updateInterval: Seconds) {\n\n\t\tthis._callback = callback;\n\t\tthis._type = type;\n\t\tthis._updateInterval = updateInterval;\n\n\t\t// create the clock source for the first time\n\t\tthis._createClock();\n\t}\n\n\t/**\n\t * Generate a web worker\n\t */\n\tprivate _createWorker(): void {\n\n\t\tconst blob = new Blob([\n\t\t\t/* javascript */`\n\t\t\t// the initial timeout time\n\t\t\tlet timeoutTime =  ${(this._updateInterval * 1000).toFixed(1)};\n\t\t\t// onmessage callback\n\t\t\tself.onmessage = function(msg){\n\t\t\t\ttimeoutTime = parseInt(msg.data);\n\t\t\t};\n\t\t\t// the tick function which posts a message\n\t\t\t// and schedules a new tick\n\t\t\tfunction tick(){\n\t\t\t\tsetTimeout(tick, timeoutTime);\n\t\t\t\tself.postMessage('tick');\n\t\t\t}\n\t\t\t// call tick initially\n\t\t\ttick();\n\t\t\t`\n\t\t], { type: \"text/javascript\" });\n\t\tconst blobUrl = URL.createObjectURL(blob);\n\t\tconst worker = new Worker(blobUrl);\n\n\t\tworker.onmessage = this._callback.bind(this);\n\n\t\tthis._worker = worker;\n\t}\n\n\t/**\n\t * Create a timeout loop\n\t */\n\tprivate _createTimeout(): void {\n\t\tthis._timeout = setTimeout(() => {\n\t\t\tthis._createTimeout();\n\t\t\tthis._callback();\n\t\t}, this._updateInterval * 1000);\n\t}\n\n\t/**\n\t * Create the clock source.\n\t */\n\tprivate _createClock(): void {\n\t\tif (this._type === \"worker\") {\n\t\t\ttry {\n\t\t\t\tthis._createWorker();\n\t\t\t} catch (e) {\n\t\t\t\t// workers not supported, fallback to timeout\n\t\t\t\tthis._type = \"timeout\";\n\t\t\t\tthis._createClock();\n\t\t\t}\n\t\t} else if (this._type === \"timeout\") {\n\t\t\tthis._createTimeout();\n\t\t}\n\t}\n\n\t/**\n\t * Clean up the current clock source\n\t */\n\tprivate _disposeClock(): void {\n\t\tif (this._timeout) {\n\t\t\tclearTimeout(this._timeout);\n\t\t\tthis._timeout = 0;\n\t\t}\n\t\tif (this._worker) {\n\t\t\tthis._worker.terminate();\n\t\t\tthis._worker.onmessage = null;\n\t\t}\n\t}\n\n\t/**\n\t * The rate in seconds the ticker will update\n\t */\n\tget updateInterval(): Seconds {\n\t\treturn this._updateInterval;\n\t}\n\tset updateInterval(interval: Seconds) {\n\t\tthis._updateInterval = Math.max(interval, 128 / 44100);\n\t\tif (this._type === \"worker\") {\n\t\t\tthis._worker.postMessage(Math.max(interval * 1000, 1));\n\t\t}\n\t}\n\n\t/**\n\t * The type of the ticker, either a worker or a timeout\n\t */\n\tget type(): TickerClockSource {\n\t\treturn this._type;\n\t}\n\tset type(type: TickerClockSource) {\n\t\tthis._disposeClock();\n\t\tthis._type = type;\n\t\tthis._createClock();\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): void {\n\t\tthis._disposeClock();\n\t}\n}\n", "//-------------------------------------\n// INITIALIZING NEW CONTEXT\n//-------------------------------------\n\ntype Context = import(\"./Context\").Context;\n\n/**\n * Array of callbacks to invoke when a new context is created\n */\nconst notifyNewContext: Array<(ctx: Context) => void> = [];\n\n/**\n * Used internally to setup a new Context\n */\nexport function onContextInit(cb: (ctx: Context) => void): void {\n\tnotifyNewContext.push(cb);\n}\n\n/**\n * Invoke any classes which need to also be initialized when a new context is created.\n */\nexport function initializeContext(ctx: Context): void {\n\t// add any additional modules\n\tnotifyNewContext.forEach(cb => cb(ctx));\n}\n\n/**\n * Array of callbacks to invoke when a new context is created\n */\nconst notifyCloseContext: Array<(ctx: Context) => void> = [];\n\n/**\n * Used internally to tear down a Context\n */\nexport function onContextClose(cb: (ctx: Context) => void): void {\n\tnotifyCloseContext.push(cb);\n}\n\nexport function closeContext(ctx: Context): void {\n\t// add any additional modules\n\tnotifyCloseContext.forEach(cb => cb(ctx));\n}\n", "import { Tone } from \"../Tone\";\nimport { isUndef } from \"./TypeCheck\";\n\nexport interface EmitterEventObject {\n\t[event: string]: Array<(...args: any[]) => void>;\n}\n\n/**\n * Emitter gives classes which extend it\n * the ability to listen for and emit events.\n * Inspiration and reference from Jerome Etienne's [MicroEvent](https://github.com/jeromeetienne/microevent.js).\n * MIT (c) 2011 Jerome Etienne.\n * @category Core\n */\nexport class Emitter<EventType extends string = string> extends Tone {\n\n\treadonly name: string = \"Emitter\";\n\n\t/**\n\t * Private container for the events\n\t */\n\tprivate _events?: EmitterEventObject;\n\n\t/**\n\t * Bind a callback to a specific event.\n\t * @param  event     The name of the event to listen for.\n\t * @param  callback  The callback to invoke when the event is emitted\n\t */\n\ton(event: EventType, callback: (...args: any[]) => void): this {\n\t\t// split the event\n\t\tconst events = event.split(/\\W+/);\n\t\tevents.forEach(eventName => {\n\t\t\tif (isUndef(this._events)) {\n\t\t\t\tthis._events = {};\n\t\t\t}\n\t\t\tif (!this._events.hasOwnProperty(eventName)) {\n\t\t\t\tthis._events[eventName] = [];\n\t\t\t}\n\t\t\tthis._events[eventName].push(callback);\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Bind a callback which is only invoked once\n\t * @param  event     The name of the event to listen for.\n\t * @param  callback  The callback to invoke when the event is emitted\n\t */\n\tonce(event: EventType, callback: (...args: any[]) => void): this {\n\t\tconst boundCallback = (...args: any[]) => {\n\t\t\t// invoke the callback\n\t\t\tcallback(...args);\n\t\t\t// remove the event\n\t\t\tthis.off(event, boundCallback);\n\t\t};\n\t\tthis.on(event, boundCallback);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Remove the event listener.\n\t * @param  event     The event to stop listening to.\n\t * @param  callback  The callback which was bound to the event with Emitter.on.\n\t *                   If no callback is given, all callbacks events are removed.\n\t */\n\toff(event: EventType, callback?: (...args: any[]) => void): this {\n\t\tconst events = event.split(/\\W+/);\n\t\tevents.forEach(eventName => {\n\t\t\tif (isUndef(this._events)) {\n\t\t\t\tthis._events = {};\n\t\t\t}\n\t\t\tif (this._events.hasOwnProperty(event)) {\n\t\t\t\tif (isUndef(callback)) {\n\t\t\t\t\tthis._events[event] = [];\n\t\t\t\t} else {\n\t\t\t\t\tconst eventList = this._events[event];\n\t\t\t\t\tfor (let i = eventList.length - 1; i >= 0; i--) {\n\t\t\t\t\t\tif (eventList[i] === callback) {\n\t\t\t\t\t\t\teventList.splice(i, 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Invoke all of the callbacks bound to the event\n\t * with any arguments passed in.\n\t * @param  event  The name of the event.\n\t * @param args The arguments to pass to the functions listening.\n\t */\n\temit(event, ...args: any[]): this {\n\t\tif (this._events) {\n\t\t\tif (this._events.hasOwnProperty(event)) {\n\t\t\t\tconst eventList = this._events[event].slice(0);\n\t\t\t\tfor (let i = 0, len = eventList.length; i < len; i++) {\n\t\t\t\t\teventList[i].apply(this, args);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add Emitter functions (on/off/emit) to the object\n\t */\n\tstatic mixin(constr: any): void {\n\t\t// instance._events = {};\n\t\t[\"on\", \"once\", \"off\", \"emit\"].forEach(name => {\n\t\t\tconst property = Object.getOwnPropertyDescriptor(Emitter.prototype, name) as PropertyDescriptor;\n\t\t\tObject.defineProperty(constr.prototype, name, property);\n\t\t});\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._events = undefined;\n\t\treturn this;\n\t}\n}\n", "import { Seconds } from \"../type/Units\";\nimport { Emitter } from \"../util/Emitter\";\nimport { AnyAudioContext } from \"./AudioContext\";\n\ntype Draw = import(\"../util/Draw\").Draw;\ntype Destination = import(\"./Destination\").Destination;\ntype Transport = import(\"../clock/Transport\").Transport;\ntype Listener = import(\"./Listener\").Listener;\n\n// these are either not used in Tone.js or deprecated and not implemented.\nexport type ExcludedFromBaseAudioContext =\n\t| \"onstatechange\"\n\t| \"addEventListener\"\n\t| \"removeEventListener\"\n\t| \"listener\"\n\t| \"dispatchEvent\"\n\t| \"audioWorklet\"\n\t| \"destination\"\n\t| \"createScriptProcessor\";\n\n// the subset of the BaseAudioContext which Tone.Context implements.\nexport type BaseAudioContextSubset = Omit<\nBaseAudioContext,\nExcludedFromBaseAudioContext\n>;\n\nexport type ContextLatencyHint = AudioContextLatencyCategory;\n\nexport abstract class BaseContext\n\textends Emitter<\"statechange\" | \"tick\">\n\timplements BaseAudioContextSubset {\n\t//---------------------------\n\t// BASE AUDIO CONTEXT METHODS\n\t//---------------------------\n\tabstract createAnalyser(): AnalyserNode;\n\n\tabstract createOscillator(): OscillatorNode;\n\n\tabstract createBufferSource(): AudioBufferSourceNode;\n\n\tabstract createBiquadFilter(): BiquadFilterNode;\n\n\tabstract createBuffer(\n\t\t_numberOfChannels: number,\n\t\t_length: number,\n\t\t_sampleRate: number\n\t): AudioBuffer;\n\n\tabstract createChannelMerger(\n\t\t_numberOfInputs?: number | undefined\n\t): ChannelMergerNode;\n\n\tabstract createChannelSplitter(\n\t\t_numberOfOutputs?: number | undefined\n\t): ChannelSplitterNode;\n\n\tabstract createConstantSource(): ConstantSourceNode;\n\n\tabstract createConvolver(): ConvolverNode;\n\n\tabstract createDelay(_maxDelayTime?: number | undefined): DelayNode;\n\n\tabstract createDynamicsCompressor(): DynamicsCompressorNode;\n\n\tabstract createGain(): GainNode;\n\n\tabstract createIIRFilter(\n\t\t_feedForward: number[] | Float32Array,\n\t\t_feedback: number[] | Float32Array\n\t): IIRFilterNode;\n\n\tabstract createPanner(): PannerNode;\n\n\tabstract createPeriodicWave(\n\t\t_real: number[] | Float32Array,\n\t\t_imag: number[] | Float32Array,\n\t\t_constraints?: PeriodicWaveConstraints | undefined\n\t): PeriodicWave;\n\n\tabstract createStereoPanner(): StereoPannerNode;\n\n\tabstract createWaveShaper(): WaveShaperNode;\n\n\tabstract createMediaStreamSource(\n\t\t_stream: MediaStream\n\t): MediaStreamAudioSourceNode;\n\n\tabstract createMediaElementSource(\n\t\t_element: HTMLMediaElement\n\t): MediaElementAudioSourceNode;\n\n\tabstract createMediaStreamDestination(): MediaStreamAudioDestinationNode;\n\n\tabstract decodeAudioData(_audioData: ArrayBuffer): Promise<AudioBuffer>;\n\n\t//---------------------------\n\t// TONE AUDIO CONTEXT METHODS\n\t//---------------------------\n\n\tabstract createAudioWorkletNode(\n\t\t_name: string,\n\t\t_options?: Partial<AudioWorkletNodeOptions>\n\t): AudioWorkletNode;\n\n\tabstract get rawContext(): AnyAudioContext;\n\n\tabstract async addAudioWorkletModule(\n\t\t_url: string,\n\t\t_name: string\n\t): Promise<void>;\n\n\tabstract lookAhead: number;\n\n\tabstract latencyHint: ContextLatencyHint | Seconds;\n\n\tabstract resume(): Promise<void>;\n\n\tabstract setTimeout(\n\t\t_fn: (...args: any[]) => void,\n\t\t_timeout: Seconds\n\t): number;\n\n\tabstract clearTimeout(_id: number): this;\n\n\tabstract setInterval(\n\t\t_fn: (...args: any[]) => void,\n\t\t_interval: Seconds\n\t): number;\n\n\tabstract clearInterval(_id: number): this;\n\n\tabstract getConstant(_val: number): AudioBufferSourceNode;\n\n\tabstract get currentTime(): Seconds;\n\n\tabstract get state(): AudioContextState;\n\n\tabstract get sampleRate(): number;\n\n\tabstract get listener(): Listener;\n\n\tabstract get transport(): Transport;\n\n\tabstract get draw(): Draw;\n\n\tabstract get destination(): Destination;\n\n\tabstract now(): Seconds;\n\n\tabstract immediate(): Seconds;\n\n\t/*\n\t * This is a placeholder so that JSON.stringify does not throw an error\n\t * This matches what JSON.stringify(audioContext) returns on a native\n\t * audioContext instance.\n\t */\n\ttoJSON(): Record<string, any> {\n\t\treturn {};\n\t}\n\n\treadonly isOffline: boolean = false;\n}\n", "import { Ticker, TickerClockSource } from \"../clock/Ticker\";\nimport { Seconds } from \"../type/Units\";\nimport { isAudioContext } from \"../util/AdvancedTypeCheck\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isDefined, isString } from \"../util/TypeCheck\";\nimport {\n\tAnyAudioContext,\n\tcreateAudioContext,\n\tcreateAudioWorkletNode,\n} from \"./AudioContext\";\nimport { closeContext, initializeContext } from \"./ContextInitialization\";\nimport { BaseContext, ContextLatencyHint } from \"./BaseContext\";\nimport { assert } from \"../util/Debug\";\n\ntype Transport = import(\"../clock/Transport\").Transport;\ntype Destination = import(\"./Destination\").Destination;\ntype Listener = import(\"./Listener\").Listener;\ntype Draw = import(\"../util/Draw\").Draw;\n\nexport interface ContextOptions {\n\tclockSource: TickerClockSource;\n\tlatencyHint: ContextLatencyHint;\n\tlookAhead: Seconds;\n\tupdateInterval: Seconds;\n\tcontext: AnyAudioContext;\n}\n\nexport interface ContextTimeoutEvent {\n\tcallback: (...args: any[]) => void;\n\tid: number;\n\ttime: Seconds;\n}\n\n/**\n * Wrapper around the native AudioContext.\n * @category Core\n */\nexport class Context extends BaseContext {\n\treadonly name: string = \"Context\";\n\n\t/**\n\t * The amount of time into the future events are scheduled. Giving Web Audio\n\t * a short amount of time into the future to schedule events can reduce clicks and\n\t * improve performance. This value can be set to 0 to get the lowest latency.\n\t */\n\tlookAhead: Seconds;\n\n\t/**\n\t * private reference to the BaseAudioContext\n\t */\n\tprotected readonly _context: AnyAudioContext;\n\n\t/**\n\t * A reliable callback method\n\t */\n\tprivate readonly _ticker: Ticker;\n\n\t/**\n\t * The default latency hint\n\t */\n\tprivate _latencyHint!: ContextLatencyHint | Seconds;\n\n\t/**\n\t * An object containing all of the constants AudioBufferSourceNodes\n\t */\n\tprivate _constants = new Map<number, AudioBufferSourceNode>();\n\n\t/**\n\t * All of the setTimeout events.\n\t */\n\tprivate _timeouts: Timeline<ContextTimeoutEvent> = new Timeline();\n\n\t/**\n\t * The timeout id counter\n\t */\n\tprivate _timeoutIds = 0;\n\n\t/**\n\t * A reference the Transport singleton belonging to this context\n\t */\n\tprivate _transport!: Transport;\n\n\t/**\n\t * A reference the Listener singleton belonging to this context\n\t */\n\tprivate _listener!: Listener;\n\n\t/**\n\t * A reference the Destination singleton belonging to this context\n\t */\n\tprivate _destination!: Destination;\n\n\t/**\n\t * A reference the Transport singleton belonging to this context\n\t */\n\tprivate _draw!: Draw;\n\n\t/**\n\t * Private indicator if the context has been initialized\n\t */\n\tprivate _initialized = false;\n\n\t/**\n\t * Indicates if the context is an OfflineAudioContext or an AudioContext\n\t */\n\treadonly isOffline: boolean = false;\n\n\tconstructor(context?: AnyAudioContext);\n\tconstructor(options?: Partial<ContextOptions>);\n\tconstructor() {\n\t\tsuper();\n\t\tconst options = optionsFromArguments(Context.getDefaults(), arguments, [\n\t\t\t\"context\",\n\t\t]);\n\n\t\tif (options.context) {\n\t\t\tthis._context = options.context;\n\t\t} else {\n\t\t\tthis._context = createAudioContext({\n\t\t\t\tlatencyHint: options.latencyHint,\n\t\t\t});\n\t\t}\n\n\t\tthis._ticker = new Ticker(\n\t\t\tthis.emit.bind(this, \"tick\"),\n\t\t\toptions.clockSource,\n\t\t\toptions.updateInterval\n\t\t);\n\t\tthis.on(\"tick\", this._timeoutLoop.bind(this));\n\n\t\t// fwd events from the context\n\t\tthis._context.onstatechange = () => {\n\t\t\tthis.emit(\"statechange\", this.state);\n\t\t};\n\n\t\tthis._setLatencyHint(options.latencyHint);\n\t\tthis.lookAhead = options.lookAhead;\n\t}\n\n\tstatic getDefaults(): ContextOptions {\n\t\treturn {\n\t\t\tclockSource: \"worker\",\n\t\t\tlatencyHint: \"interactive\",\n\t\t\tlookAhead: 0.1,\n\t\t\tupdateInterval: 0.05,\n\t\t} as ContextOptions;\n\t}\n\n\t/**\n\t * Finish setting up the context. **You usually do not need to do this manually.**\n\t */\n\tprivate initialize(): this {\n\t\tif (!this._initialized) {\n\t\t\t// add any additional modules\n\t\t\tinitializeContext(this);\n\t\t\tthis._initialized = true;\n\t\t}\n\t\treturn this;\n\t}\n\n\t//---------------------------\n\t// BASE AUDIO CONTEXT METHODS\n\t//---------------------------\n\n\tcreateAnalyser(): AnalyserNode {\n\t\treturn this._context.createAnalyser();\n\t}\n\tcreateOscillator(): OscillatorNode {\n\t\treturn this._context.createOscillator();\n\t}\n\tcreateBufferSource(): AudioBufferSourceNode {\n\t\treturn this._context.createBufferSource();\n\t}\n\tcreateBiquadFilter(): BiquadFilterNode {\n\t\treturn this._context.createBiquadFilter();\n\t}\n\tcreateBuffer(\n\t\tnumberOfChannels: number,\n\t\tlength: number,\n\t\tsampleRate: number\n\t): AudioBuffer {\n\t\treturn this._context.createBuffer(numberOfChannels, length, sampleRate);\n\t}\n\tcreateChannelMerger(\n\t\tnumberOfInputs?: number | undefined\n\t): ChannelMergerNode {\n\t\treturn this._context.createChannelMerger(numberOfInputs);\n\t}\n\tcreateChannelSplitter(\n\t\tnumberOfOutputs?: number | undefined\n\t): ChannelSplitterNode {\n\t\treturn this._context.createChannelSplitter(numberOfOutputs);\n\t}\n\tcreateConstantSource(): ConstantSourceNode {\n\t\treturn this._context.createConstantSource();\n\t}\n\tcreateConvolver(): ConvolverNode {\n\t\treturn this._context.createConvolver();\n\t}\n\tcreateDelay(maxDelayTime?: number | undefined): DelayNode {\n\t\treturn this._context.createDelay(maxDelayTime);\n\t}\n\tcreateDynamicsCompressor(): DynamicsCompressorNode {\n\t\treturn this._context.createDynamicsCompressor();\n\t}\n\tcreateGain(): GainNode {\n\t\treturn this._context.createGain();\n\t}\n\tcreateIIRFilter(\n\t\tfeedForward: number[] | Float32Array,\n\t\tfeedback: number[] | Float32Array\n\t): IIRFilterNode {\n\t\t// @ts-ignore\n\t\treturn this._context.createIIRFilter(feedForward, feedback);\n\t}\n\tcreatePanner(): PannerNode {\n\t\treturn this._context.createPanner();\n\t}\n\tcreatePeriodicWave(\n\t\treal: number[] | Float32Array,\n\t\timag: number[] | Float32Array,\n\t\tconstraints?: PeriodicWaveConstraints | undefined\n\t): PeriodicWave {\n\t\treturn this._context.createPeriodicWave(real, imag, constraints);\n\t}\n\tcreateStereoPanner(): StereoPannerNode {\n\t\treturn this._context.createStereoPanner();\n\t}\n\tcreateWaveShaper(): WaveShaperNode {\n\t\treturn this._context.createWaveShaper();\n\t}\n\tcreateMediaStreamSource(stream: MediaStream): MediaStreamAudioSourceNode {\n\t\tassert(\n\t\t\tisAudioContext(this._context),\n\t\t\t\"Not available if OfflineAudioContext\"\n\t\t);\n\t\tconst context = this._context as AudioContext;\n\t\treturn context.createMediaStreamSource(stream);\n\t}\n\tcreateMediaElementSource(\n\t\telement: HTMLMediaElement\n\t): MediaElementAudioSourceNode {\n\t\tassert(\n\t\t\tisAudioContext(this._context),\n\t\t\t\"Not available if OfflineAudioContext\"\n\t\t);\n\t\tconst context = this._context as AudioContext;\n\t\treturn context.createMediaElementSource(element);\n\t}\n\tcreateMediaStreamDestination(): MediaStreamAudioDestinationNode {\n\t\tassert(\n\t\t\tisAudioContext(this._context),\n\t\t\t\"Not available if OfflineAudioContext\"\n\t\t);\n\t\tconst context = this._context as AudioContext;\n\t\treturn context.createMediaStreamDestination();\n\t}\n\tdecodeAudioData(audioData: ArrayBuffer): Promise<AudioBuffer> {\n\t\treturn this._context.decodeAudioData(audioData);\n\t}\n\n\t/**\n\t * The current time in seconds of the AudioContext.\n\t */\n\tget currentTime(): Seconds {\n\t\treturn this._context.currentTime;\n\t}\n\t/**\n\t * The current time in seconds of the AudioContext.\n\t */\n\tget state(): AudioContextState {\n\t\treturn this._context.state;\n\t}\n\t/**\n\t * The current time in seconds of the AudioContext.\n\t */\n\tget sampleRate(): number {\n\t\treturn this._context.sampleRate;\n\t}\n\n\t/**\n\t * The listener\n\t */\n\tget listener(): Listener {\n\t\tthis.initialize();\n\t\treturn this._listener;\n\t}\n\tset listener(l) {\n\t\tassert(\n\t\t\t!this._initialized,\n\t\t\t\"The listener cannot be set after initialization.\"\n\t\t);\n\t\tthis._listener = l;\n\t}\n\n\t/**\n\t * There is only one Transport per Context. It is created on initialization.\n\t */\n\tget transport(): Transport {\n\t\tthis.initialize();\n\t\treturn this._transport;\n\t}\n\tset transport(t: Transport) {\n\t\tassert(\n\t\t\t!this._initialized,\n\t\t\t\"The transport cannot be set after initialization.\"\n\t\t);\n\t\tthis._transport = t;\n\t}\n\n\t/**\n\t * This is the Draw object for the context which is useful for synchronizing the draw frame with the Tone.js clock.\n\t */\n\tget draw(): Draw {\n\t\tthis.initialize();\n\t\treturn this._draw;\n\t}\n\tset draw(d) {\n\t\tassert(!this._initialized, \"Draw cannot be set after initialization.\");\n\t\tthis._draw = d;\n\t}\n\n\t/**\n\t * A reference to the Context's destination node.\n\t */\n\tget destination(): Destination {\n\t\tthis.initialize();\n\t\treturn this._destination;\n\t}\n\tset destination(d: Destination) {\n\t\tassert(\n\t\t\t!this._initialized,\n\t\t\t\"The destination cannot be set after initialization.\"\n\t\t);\n\t\tthis._destination = d;\n\t}\n\n\t//--------------------------------------------\n\t// AUDIO WORKLET\n\t//--------------------------------------------\n\n\t/**\n\t * Maps a module name to promise of the addModule method\n\t */\n\tprivate _workletModules: Map<string, Promise<void>> = new Map();\n\n\t/**\n\t * Create an audio worklet node from a name and options. The module\n\t * must first be loaded using [[addAudioWorkletModule]].\n\t */\n\tcreateAudioWorkletNode(\n\t\tname: string,\n\t\toptions?: Partial<AudioWorkletNodeOptions>\n\t): AudioWorkletNode {\n\t\treturn createAudioWorkletNode(this.rawContext, name, options);\n\t}\n\n\t/**\n\t * Add an AudioWorkletProcessor module\n\t * @param url The url of the module\n\t * @param name The name of the module\n\t */\n\tasync addAudioWorkletModule(url: string, name: string): Promise<void> {\n\t\tassert(\n\t\t\tisDefined(this.rawContext.audioWorklet),\n\t\t\t\"AudioWorkletNode is only available in a secure context (https or localhost)\"\n\t\t);\n\t\tif (!this._workletModules.has(name)) {\n\t\t\tthis._workletModules.set(\n\t\t\t\tname,\n\t\t\t\tthis.rawContext.audioWorklet.addModule(url)\n\t\t\t);\n\t\t}\n\t\tawait this._workletModules.get(name);\n\t}\n\n\t/**\n\t * Returns a promise which resolves when all of the worklets have been loaded on this context\n\t */\n\tprotected async workletsAreReady(): Promise<void> {\n\t\tconst promises: Promise<void>[] = [];\n\t\tthis._workletModules.forEach((promise) => promises.push(promise));\n\t\tawait Promise.all(promises);\n\t}\n\n\t//---------------------------\n\t// TICKER\n\t//---------------------------\n\n\t/**\n\t * How often the interval callback is invoked.\n\t * This number corresponds to how responsive the scheduling\n\t * can be. context.updateInterval + context.lookAhead gives you the\n\t * total latency between scheduling an event and hearing it.\n\t */\n\tget updateInterval(): Seconds {\n\t\treturn this._ticker.updateInterval;\n\t}\n\tset updateInterval(interval: Seconds) {\n\t\tthis._ticker.updateInterval = interval;\n\t}\n\n\t/**\n\t * What the source of the clock is, either \"worker\" (default),\n\t * \"timeout\", or \"offline\" (none).\n\t */\n\tget clockSource(): TickerClockSource {\n\t\treturn this._ticker.type;\n\t}\n\tset clockSource(type: TickerClockSource) {\n\t\tthis._ticker.type = type;\n\t}\n\n\t/**\n\t * The type of playback, which affects tradeoffs between audio\n\t * output latency and responsiveness.\n\t * In addition to setting the value in seconds, the latencyHint also\n\t * accepts the strings \"interactive\" (prioritizes low latency),\n\t * \"playback\" (prioritizes sustained playback), \"balanced\" (balances\n\t * latency and performance).\n\t * @example\n\t * // prioritize sustained playback\n\t * const context = new Tone.Context({ latencyHint: \"playback\" });\n\t * // set this context as the global Context\n\t * Tone.setContext(context);\n\t * // the global context is gettable with Tone.getContext()\n\t * console.log(Tone.getContext().latencyHint);\n\t */\n\tget latencyHint(): ContextLatencyHint | Seconds {\n\t\treturn this._latencyHint;\n\t}\n\n\t/**\n\t * Update the lookAhead and updateInterval based on the latencyHint\n\t */\n\tprivate _setLatencyHint(hint: ContextLatencyHint | Seconds): void {\n\t\tlet lookAheadValue = 0;\n\t\tthis._latencyHint = hint;\n\t\tif (isString(hint)) {\n\t\t\tswitch (hint) {\n\t\t\t\tcase \"interactive\":\n\t\t\t\t\tlookAheadValue = 0.1;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"playback\":\n\t\t\t\t\tlookAheadValue = 0.5;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"balanced\":\n\t\t\t\t\tlookAheadValue = 0.25;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tthis.lookAhead = lookAheadValue;\n\t\tthis.updateInterval = lookAheadValue / 2;\n\t}\n\n\t/**\n\t * The unwrapped AudioContext or OfflineAudioContext\n\t */\n\tget rawContext(): AnyAudioContext {\n\t\treturn this._context;\n\t}\n\n\t/**\n\t * The current audio context time plus a short [[lookAhead]].\n\t */\n\tnow(): Seconds {\n\t\treturn this._context.currentTime + this.lookAhead;\n\t}\n\n\t/**\n\t * The current audio context time without the [[lookAhead]].\n\t * In most cases it is better to use [[now]] instead of [[immediate]] since\n\t * with [[now]] the [[lookAhead]] is applied equally to _all_ components including internal components,\n\t * to making sure that everything is scheduled in sync. Mixing [[now]] and [[immediate]]\n\t * can cause some timing issues. If no lookAhead is desired, you can set the [[lookAhead]] to `0`.\n\t */\n\timmediate(): Seconds {\n\t\treturn this._context.currentTime;\n\t}\n\n\t/**\n\t * Starts the audio context from a suspended state. This is required\n\t * to initially start the AudioContext. See [[Tone.start]]\n\t */\n\tresume(): Promise<void> {\n\t\tif (isAudioContext(this._context)) {\n\t\t\treturn this._context.resume();\n\t\t} else {\n\t\t\treturn Promise.resolve();\n\t\t}\n\t}\n\n\t/**\n\t * Close the context. Once closed, the context can no longer be used and\n\t * any AudioNodes created from the context will be silent.\n\t */\n\tasync close(): Promise<void> {\n\t\tif (isAudioContext(this._context)) {\n\t\t\tawait this._context.close();\n\t\t}\n\t\tif (this._initialized) {\n\t\t\tcloseContext(this);\n\t\t}\n\t}\n\n\t/**\n\t * **Internal** Generate a looped buffer at some constant value.\n\t */\n\tgetConstant(val: number): AudioBufferSourceNode {\n\t\tif (this._constants.has(val)) {\n\t\t\treturn this._constants.get(val) as AudioBufferSourceNode;\n\t\t} else {\n\t\t\tconst buffer = this._context.createBuffer(\n\t\t\t\t1,\n\t\t\t\t128,\n\t\t\t\tthis._context.sampleRate\n\t\t\t);\n\t\t\tconst arr = buffer.getChannelData(0);\n\t\t\tfor (let i = 0; i < arr.length; i++) {\n\t\t\t\tarr[i] = val;\n\t\t\t}\n\t\t\tconst constant = this._context.createBufferSource();\n\t\t\tconstant.channelCount = 1;\n\t\t\tconstant.channelCountMode = \"explicit\";\n\t\t\tconstant.buffer = buffer;\n\t\t\tconstant.loop = true;\n\t\t\tconstant.start(0);\n\t\t\tthis._constants.set(val, constant);\n\t\t\treturn constant;\n\t\t}\n\t}\n\n\t/**\n\t * Clean up. Also closes the audio context.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._ticker.dispose();\n\t\tthis._timeouts.dispose();\n\t\tObject.keys(this._constants).map((val) =>\n\t\t\tthis._constants[val].disconnect()\n\t\t);\n\t\treturn this;\n\t}\n\n\t//---------------------------\n\t// TIMEOUTS\n\t//---------------------------\n\n\t/**\n\t * The private loop which keeps track of the context scheduled timeouts\n\t * Is invoked from the clock source\n\t */\n\tprivate _timeoutLoop(): void {\n\t\tconst now = this.now();\n\t\tlet firstEvent = this._timeouts.peek();\n\t\twhile (this._timeouts.length && firstEvent && firstEvent.time <= now) {\n\t\t\t// invoke the callback\n\t\t\tfirstEvent.callback();\n\t\t\t// shift the first event off\n\t\t\tthis._timeouts.shift();\n\t\t\t// get the next one\n\t\t\tfirstEvent = this._timeouts.peek();\n\t\t}\n\t}\n\n\t/**\n\t * A setTimeout which is guaranteed by the clock source.\n\t * Also runs in the offline context.\n\t * @param  fn       The callback to invoke\n\t * @param  timeout  The timeout in seconds\n\t * @returns ID to use when invoking Context.clearTimeout\n\t */\n\tsetTimeout(fn: (...args: any[]) => void, timeout: Seconds): number {\n\t\tthis._timeoutIds++;\n\t\tconst now = this.now();\n\t\tthis._timeouts.add({\n\t\t\tcallback: fn,\n\t\t\tid: this._timeoutIds,\n\t\t\ttime: now + timeout,\n\t\t});\n\t\treturn this._timeoutIds;\n\t}\n\n\t/**\n\t * Clears a previously scheduled timeout with Tone.context.setTimeout\n\t * @param  id  The ID returned from setTimeout\n\t */\n\tclearTimeout(id: number): this {\n\t\tthis._timeouts.forEach((event) => {\n\t\t\tif (event.id === id) {\n\t\t\t\tthis._timeouts.remove(event);\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clear the function scheduled by [[setInterval]]\n\t */\n\tclearInterval(id: number): this {\n\t\treturn this.clearTimeout(id);\n\t}\n\n\t/**\n\t * Adds a repeating event to the context's callback clock\n\t */\n\tsetInterval(fn: (...args: any[]) => void, interval: Seconds): number {\n\t\tconst id = ++this._timeoutIds;\n\t\tconst intervalFn = () => {\n\t\t\tconst now = this.now();\n\t\t\tthis._timeouts.add({\n\t\t\t\tcallback: () => {\n\t\t\t\t\t// invoke the callback\n\t\t\t\t\tfn();\n\t\t\t\t\t// invoke the event to repeat it\n\t\t\t\t\tintervalFn();\n\t\t\t\t},\n\t\t\t\tid,\n\t\t\t\ttime: now + interval,\n\t\t\t});\n\t\t};\n\t\t// kick it off\n\t\tintervalFn();\n\t\treturn id;\n\t}\n}\n", "import { BaseContext } from \"./BaseContext\";\nimport { Seconds } from \"../type/Units\";\nimport { AnyAudioContext } from \"./AudioContext\";\n\ntype Draw = import(\"../util/Draw\").Draw;\ntype Destination = import(\"./Destination\").Destination;\ntype Transport = import(\"../clock/Transport\").Transport;\ntype Listener = import(\"./Listener\").Listener;\n\nexport class DummyContext extends BaseContext {\n\t//---------------------------\n\t// BASE AUDIO CONTEXT METHODS\n\t//---------------------------\n\tcreateAnalyser(): AnalyserNode {\n\t\treturn {} as AnalyserNode;\n\t}\n\n\tcreateOscillator(): OscillatorNode {\n\t\treturn {} as OscillatorNode;\n\t}\n\n\tcreateBufferSource() {\n\t\treturn {} as AudioBufferSourceNode;\n\t}\n\n\tcreateBiquadFilter(): BiquadFilterNode {\n\t\treturn {} as BiquadFilterNode;\n\t}\n\n\tcreateBuffer(\n\t\t_numberOfChannels: number,\n\t\t_length: number,\n\t\t_sampleRate: number\n\t): AudioBuffer {\n\t\treturn {} as AudioBuffer;\n\t}\n\n\tcreateChannelMerger(\n\t\t_numberOfInputs?: number | undefined\n\t): ChannelMergerNode {\n\t\treturn {} as ChannelMergerNode;\n\t}\n\n\tcreateChannelSplitter(\n\t\t_numberOfOutputs?: number | undefined\n\t): ChannelSplitterNode {\n\t\treturn {} as ChannelSplitterNode;\n\t}\n\n\tcreateConstantSource(): ConstantSourceNode {\n\t\treturn {} as ConstantSourceNode;\n\t}\n\n\tcreateConvolver(): ConvolverNode {\n\t\treturn {} as ConvolverNode;\n\t}\n\n\tcreateDelay(_maxDelayTime?: number | undefined): DelayNode {\n\t\treturn {} as DelayNode;\n\t}\n\n\tcreateDynamicsCompressor(): DynamicsCompressorNode {\n\t\treturn {} as DynamicsCompressorNode;\n\t}\n\n\tcreateGain(): GainNode {\n\t\treturn {} as GainNode;\n\t}\n\n\tcreateIIRFilter(\n\t\t_feedForward: number[] | Float32Array,\n\t\t_feedback: number[] | Float32Array\n\t): IIRFilterNode {\n\t\treturn {} as IIRFilterNode;\n\t}\n\n\tcreatePanner(): PannerNode {\n\t\treturn {} as PannerNode;\n\t}\n\n\tcreatePeriodicWave(\n\t\t_real: number[] | Float32Array,\n\t\t_imag: number[] | Float32Array,\n\t\t_constraints?: PeriodicWaveConstraints | undefined\n\t): PeriodicWave {\n\t\treturn {} as PeriodicWave;\n\t}\n\n\tcreateStereoPanner(): StereoPannerNode {\n\t\treturn {} as StereoPannerNode;\n\t}\n\n\tcreateWaveShaper(): WaveShaperNode {\n\t\treturn {} as WaveShaperNode;\n\t}\n\n\tcreateMediaStreamSource(_stream: MediaStream): MediaStreamAudioSourceNode {\n\t\treturn {} as MediaStreamAudioSourceNode;\n\t}\n\n\tcreateMediaElementSource(\n\t\t_element: HTMLMediaElement\n\t): MediaElementAudioSourceNode {\n\t\treturn {} as MediaElementAudioSourceNode;\n\t}\n\n\tcreateMediaStreamDestination(): MediaStreamAudioDestinationNode {\n\t\treturn {} as MediaStreamAudioDestinationNode;\n\t}\n\n\tdecodeAudioData(_audioData: ArrayBuffer): Promise<AudioBuffer> {\n\t\treturn Promise.resolve({} as AudioBuffer);\n\t}\n\n\t//---------------------------\n\t// TONE AUDIO CONTEXT METHODS\n\t//---------------------------\n\n\tcreateAudioWorkletNode(\n\t\t_name: string,\n\t\t_options?: Partial<AudioWorkletNodeOptions>\n\t): AudioWorkletNode {\n\t\treturn {} as AudioWorkletNode;\n\t}\n\n\tget rawContext(): AnyAudioContext {\n\t\treturn {} as AnyAudioContext;\n\t}\n\n\tasync addAudioWorkletModule(_url: string, _name: string): Promise<void> {\n\t\treturn Promise.resolve();\n\t}\n\n\tlookAhead = 0;\n\n\tlatencyHint = 0;\n\n\tresume(): Promise<void> {\n\t\treturn Promise.resolve();\n\t}\n\n\tsetTimeout(_fn: (...args: any[]) => void, _timeout: Seconds): number {\n\t\treturn 0;\n\t}\n\n\tclearTimeout(_id: number): this {\n\t\treturn this;\n\t}\n\n\tsetInterval(_fn: (...args: any[]) => void, _interval: Seconds): number {\n\t\treturn 0;\n\t}\n\n\tclearInterval(_id: number): this {\n\t\treturn this;\n\t}\n\n\tgetConstant(_val: number): AudioBufferSourceNode {\n\t\treturn {} as AudioBufferSourceNode;\n\t}\n\n\tget currentTime(): Seconds {\n\t\treturn 0;\n\t}\n\n\tget state(): AudioContextState {\n\t\treturn {} as AudioContextState;\n\t}\n\n\tget sampleRate(): number {\n\t\treturn 0;\n\t}\n\n\tget listener(): Listener {\n\t\treturn {} as Listener;\n\t}\n\n\tget transport(): Transport {\n\t\treturn {} as Transport;\n\t}\n\n\tget draw(): Draw {\n\t\treturn {} as Draw;\n\t}\n\tset draw(_d) {}\n\n\tget destination(): Destination {\n\t\treturn {} as Destination;\n\t}\n\tset destination(_d: Destination) {}\n\n\tnow() {\n\t\treturn 0;\n\t}\n\n\timmediate() {\n\t\treturn 0;\n\t}\n\n\treadonly isOffline: boolean = false;\n}\n", "import { isArray } from \"./TypeCheck\";\n\n// return an interface which excludes certain keys\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n\n/**\n * Make the property not writable using `defineProperty`. Internal use only.\n */\nexport function readOnly(target: object, property: string | string[]): void {\n\tif (isArray(property)) {\n\t\tproperty.forEach(str => readOnly(target, str));\n\t} else {\n\t\tObject.defineProperty(target, property, {\n\t\t\tenumerable: true,\n\t\t\twritable: false,\n\t\t});\n\t}\n}\n\n/**\n * Make an attribute writeable. Internal use only.\n */\nexport function writable(target: object, property: string | string[]): void {\n\tif (isArray(property)) {\n\t\tproperty.forEach(str => writable(target, str));\n\t} else {\n\t\tObject.defineProperty(target, property, {\n\t\t\twritable: true,\n\t\t});\n\t}\n}\n\nexport const noOp: (...args: any[]) => any = () => {\n\t// no operation here!\n};\n\n/**\n * Recursive Partial taken from here: https://stackoverflow.com/a/51365037\n */\nexport type RecursivePartial<T> = {\n\t[P in keyof T]?:\n\tT[P] extends Array<infer U> ? Array<RecursivePartial<U>> :\n\t\tT[P] extends object ? RecursivePartial<T[P]> :\n\t\t\tT[P];\n};\n", "import { getContext } from \"../Global\";\nimport { Tone } from \"../Tone\";\nimport { Samples, Seconds } from \"../type/Units\";\nimport { isAudioBuffer } from \"../util/AdvancedTypeCheck\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { noOp } from \"../util/Interface\";\nimport { isArray, isNumber, isString } from \"../util/TypeCheck\";\nimport { assert } from \"../util/Debug\";\n\ninterface ToneAudioBufferOptions {\n\turl?: string | AudioBuffer | ToneAudioBuffer;\n\treverse: boolean;\n\tonload: (buffer?: ToneAudioBuffer) => void;\n\tonerror: (error: Error) => void;\n}\n\n/**\n * AudioBuffer loading and storage. ToneAudioBuffer is used internally by all\n * classes that make requests for audio files such as Tone.Player,\n * Tone.Sampler and Tone.Convolver.\n * @example\n * const buffer = new Tone.ToneAudioBuffer(\"https://tonejs.github.io/audio/casio/A1.mp3\", () => {\n * \tconsole.log(\"loaded\");\n * });\n * @category Core\n */\nexport class ToneAudioBuffer extends Tone {\n\n\treadonly name: string = \"ToneAudioBuffer\";\n\n\t/**\n\t * stores the loaded AudioBuffer\n\t */\n\tprivate _buffer?: AudioBuffer;\n\n\t/**\n\t * indicates if the buffer should be reversed or not\n\t */\n\tprivate _reversed!: boolean;\n\n\t/**\n\t * Callback when the buffer is loaded.\n\t */\n\tonload: (buffer: ToneAudioBuffer) => void = noOp;\n\n\t/**\n\t *\n\t * @param url The url to load, or the audio buffer to set.\n\t * @param onload A callback which is invoked after the buffer is loaded.\n\t *                           It's recommended to use `ToneAudioBuffer.on('load', callback)` instead\n\t *                           since it will give you a callback when _all_ buffers are loaded.\n\t * @param onerror The callback to invoke if there is an error\n\t */\n\tconstructor(\n\t\turl?: string | ToneAudioBuffer | AudioBuffer,\n\t\tonload?: (buffer: ToneAudioBuffer) => void,\n\t\tonerror?: (error: Error) => void,\n\t);\n\tconstructor(options?: Partial<ToneAudioBufferOptions>);\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tconst options = optionsFromArguments(ToneAudioBuffer.getDefaults(), arguments, [\"url\", \"onload\", \"onerror\"]);\n\n\t\tthis.reverse = options.reverse;\n\t\tthis.onload = options.onload;\n\n\t\tif (options.url && isAudioBuffer(options.url) || options.url instanceof ToneAudioBuffer) {\n\t\t\tthis.set(options.url);\n\t\t} else if (isString(options.url)) {\n\t\t\t// initiate the download\n\t\t\tthis.load(options.url).catch(options.onerror);\n\t\t}\n\t}\n\n\tstatic getDefaults(): ToneAudioBufferOptions {\n\t\treturn {\n\t\t\tonerror: noOp,\n\t\t\tonload: noOp,\n\t\t\treverse: false,\n\t\t};\n\t}\n\n\t/**\n\t * The sample rate of the AudioBuffer\n\t */\n\tget sampleRate(): number {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.sampleRate;\n\t\t} else {\n\t\t\treturn getContext().sampleRate;\n\t\t}\n\t}\n\n\t/**\n\t * Pass in an AudioBuffer or ToneAudioBuffer to set the value of this buffer.\n\t */\n\tset(buffer: AudioBuffer | ToneAudioBuffer): this {\n\t\tif (buffer instanceof ToneAudioBuffer) {\n\t\t\t// if it's loaded, set it\n\t\t\tif (buffer.loaded) {\n\t\t\t\tthis._buffer = buffer.get();\n\t\t\t} else {\n\t\t\t\t// otherwise when it's loaded, invoke it's callback\n\t\t\t\tbuffer.onload = () => {\n\t\t\t\t\tthis.set(buffer);\n\t\t\t\t\tthis.onload(this);\n\t\t\t\t};\n\t\t\t}\n\t\t} else {\n\t\t\tthis._buffer = buffer;\n\t\t}\n\t\t// reverse it initially\n\t\tif (this._reversed) {\n\t\t\tthis._reverse();\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * The audio buffer stored in the object.\n\t */\n\tget(): AudioBuffer | undefined {\n\t\treturn this._buffer;\n\t}\n\n\t/**\n\t * Makes an fetch request for the selected url then decodes the file as an audio buffer.\n\t * Invokes the callback once the audio buffer loads.\n\t * @param url The url of the buffer to load. filetype support depends on the browser.\n\t * @returns A Promise which resolves with this ToneAudioBuffer\n\t */\n\tasync load(url: string): Promise<this> {\n\t\tconst doneLoading: Promise<void> = ToneAudioBuffer.load(url).then(audioBuffer => {\n\t\t\tthis.set(audioBuffer);\n\t\t\t// invoke the onload method\n\t\t\tthis.onload(this);\n\t\t});\n\t\tToneAudioBuffer.downloads.push(doneLoading);\n\t\ttry {\n\t\t\tawait doneLoading;\n\t\t} finally {\n\t\t\t// remove the downloaded file\n\t\t\tconst index = ToneAudioBuffer.downloads.indexOf(doneLoading);\n\t\t\tToneAudioBuffer.downloads.splice(index, 1);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._buffer = undefined;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the audio buffer from the array.\n\t * To create a multichannel AudioBuffer, pass in a multidimensional array.\n\t * @param array The array to fill the audio buffer\n\t */\n\tfromArray(array: Float32Array | Float32Array[]): this {\n\t\tconst isMultidimensional = isArray(array) && array[0].length > 0;\n\t\tconst channels = isMultidimensional ? array.length : 1;\n\t\tconst len = isMultidimensional ? (array[0] as Float32Array).length : array.length;\n\t\tconst context = getContext();\n\t\tconst buffer = context.createBuffer(channels, len, context.sampleRate);\n\t\tconst multiChannelArray: Float32Array[] = !isMultidimensional && channels === 1 ?\n\t\t\t[array as Float32Array] : array as Float32Array[];\n\n\t\tfor (let c = 0; c < channels; c++) {\n\t\t\tbuffer.copyToChannel(multiChannelArray[c], c);\n\t\t}\n\t\tthis._buffer = buffer;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sums multiple channels into 1 channel\n\t * @param chanNum Optionally only copy a single channel from the array.\n\t */\n\ttoMono(chanNum?: number): this {\n\t\tif (isNumber(chanNum)) {\n\t\t\tthis.fromArray(this.toArray(chanNum));\n\t\t} else {\n\t\t\tlet outputArray = new Float32Array(this.length as number);\n\t\t\tconst numChannels = this.numberOfChannels;\n\t\t\tfor (let channel = 0; channel < numChannels; channel++) {\n\t\t\t\tconst channelArray = this.toArray(channel) as Float32Array;\n\t\t\t\tfor (let i = 0; i < channelArray.length; i++) {\n\t\t\t\t\toutputArray[i] += channelArray[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\t// divide by the number of channels\n\t\t\toutputArray = outputArray.map(sample => sample / numChannels);\n\t\t\tthis.fromArray(outputArray);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the buffer as an array. Single channel buffers will return a 1-dimensional\n\t * Float32Array, and multichannel buffers will return multidimensional arrays.\n\t * @param channel Optionally only copy a single channel from the array.\n\t */\n\ttoArray(channel?: number): Float32Array | Float32Array[] {\n\t\tif (isNumber(channel)) {\n\t\t\treturn this.getChannelData(channel);\n\t\t} else if (this.numberOfChannels === 1) {\n\t\t\treturn this.toArray(0);\n\t\t} else {\n\t\t\tconst ret: Float32Array[] = [];\n\t\t\tfor (let c = 0; c < this.numberOfChannels; c++) {\n\t\t\t\tret[c] = this.getChannelData(c);\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\t}\n\n\t/**\n\t * Returns the Float32Array representing the PCM audio data for the specific channel.\n\t * @param  channel  The channel number to return\n\t * @return The audio as a TypedArray\n\t */\n\tgetChannelData(channel: number): Float32Array {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.getChannelData(channel);\n\t\t} else {\n\t\t\treturn new Float32Array(0);\n\t\t}\n\t}\n\n\t/**\n\t * Cut a subsection of the array and return a buffer of the\n\t * subsection. Does not modify the original buffer\n\t * @param start The time to start the slice\n\t * @param end The end time to slice. If none is given will default to the end of the buffer\n\t */\n\tslice(start: Seconds, end: Seconds = this.duration): ToneAudioBuffer {\n\t\tconst startSamples = Math.floor(start * this.sampleRate);\n\t\tconst endSamples = Math.floor(end * this.sampleRate);\n\t\tassert(startSamples < endSamples, \"The start time must be less than the end time\");\n\t\tconst length = endSamples - startSamples;\n\t\tconst retBuffer = getContext().createBuffer(this.numberOfChannels, length, this.sampleRate);\n\t\tfor (let channel = 0; channel < this.numberOfChannels; channel++) {\n\t\t\tretBuffer.copyToChannel(this.getChannelData(channel).subarray(startSamples, endSamples), channel);\n\t\t}\n\t\treturn new ToneAudioBuffer(retBuffer);\n\t}\n\n\t/**\n\t * Reverse the buffer.\n\t */\n\tprivate _reverse(): this {\n\t\tif (this.loaded) {\n\t\t\tfor (let i = 0; i < this.numberOfChannels; i++) {\n\t\t\t\tthis.getChannelData(i).reverse();\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * If the buffer is loaded or not\n\t */\n\tget loaded(): boolean {\n\t\treturn this.length > 0;\n\t}\n\n\t/**\n\t * The duration of the buffer in seconds.\n\t */\n\tget duration(): Seconds {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.duration;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * The length of the buffer in samples\n\t */\n\tget length(): Samples {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.length;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * The number of discrete audio channels. Returns 0 if no buffer is loaded.\n\t */\n\tget numberOfChannels(): number {\n\t\tif (this._buffer) {\n\t\t\treturn this._buffer.numberOfChannels;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * Reverse the buffer.\n\t */\n\tget reverse(): boolean {\n\t\treturn this._reversed;\n\t}\n\tset reverse(rev: boolean) {\n\t\tif (this._reversed !== rev) {\n\t\t\tthis._reversed = rev;\n\t\t\tthis._reverse();\n\t\t}\n\t}\n\n\t//-------------------------------------\n\t// STATIC METHODS\n\t//-------------------------------------\n\n\t/**\n\t * A path which is prefixed before every url.\n\t */\n\tstatic baseUrl = \"\";\n\n\t/**\n\t * Create a ToneAudioBuffer from the array. To create a multichannel AudioBuffer,\n\t * pass in a multidimensional array.\n\t * @param array The array to fill the audio buffer\n\t * @return A ToneAudioBuffer created from the array\n\t */\n\tstatic fromArray(array: Float32Array | Float32Array[]): ToneAudioBuffer {\n\t\treturn (new ToneAudioBuffer()).fromArray(array);\n\t}\n\n\t/**\n\t * Creates a ToneAudioBuffer from a URL, returns a promise which resolves to a ToneAudioBuffer\n\t * @param  url The url to load.\n\t * @return A promise which resolves to a ToneAudioBuffer\n\t */\n\tstatic async fromUrl(url: string): Promise<ToneAudioBuffer> {\n\t\tconst buffer = new ToneAudioBuffer();\n\t\treturn await buffer.load(url);\n\t}\n\n\t/**\n\t * All of the downloads\n\t */\n\tstatic downloads: Array<Promise<void>> = [];\n\n\t/**\n\t * Loads a url using fetch and returns the AudioBuffer.\n\t */\n\tstatic async load(url: string): Promise<AudioBuffer> {\n\n\t\t// test if the url contains multiple extensions\n\t\tconst matches = url.match(/\\[([^\\]\\[]+\\|.+)\\]$/);\n\t\tif (matches) {\n\t\t\tconst extensions = matches[1].split(\"|\");\n\t\t\tlet extension = extensions[0];\n\t\t\tfor (const ext of extensions) {\n\t\t\t\tif (ToneAudioBuffer.supportsType(ext)) {\n\t\t\t\t\textension = ext;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\turl = url.replace(matches[0], extension);\n\t\t}\n\n\t\t// make sure there is a slash between the baseUrl and the url\n\t\tconst baseUrl = ToneAudioBuffer.baseUrl === \"\" || ToneAudioBuffer.baseUrl.endsWith(\"/\") ? ToneAudioBuffer.baseUrl : ToneAudioBuffer.baseUrl + \"/\";\n\t\tconst response = await fetch(baseUrl + url);\n\t\tif (!response.ok) {\n\t\t\tthrow new Error(`could not load url: ${url}`);\n\t\t}\n\t\tconst arrayBuffer = await response.arrayBuffer();\n\n\t\tconst audioBuffer = await getContext().decodeAudioData(arrayBuffer);\n\n\t\treturn audioBuffer;\n\t}\n\n\t/**\n\t * Checks a url's extension to see if the current browser can play that file type.\n\t * @param url The url/extension to test\n\t * @return If the file extension can be played\n\t * @static\n\t * @example\n\t * Tone.ToneAudioBuffer.supportsType(\"wav\"); // returns true\n\t * Tone.ToneAudioBuffer.supportsType(\"path/to/file.wav\"); // returns true\n\t */\n\tstatic supportsType(url: string): boolean {\n\t\tconst extensions = url.split(\".\");\n\t\tconst extension = extensions[extensions.length - 1];\n\t\tconst response = document.createElement(\"audio\").canPlayType(\"audio/\" + extension);\n\t\treturn response !== \"\";\n\t}\n\n\t/**\n\t * Returns a Promise which resolves when all of the buffers have loaded\n\t */\n\tstatic async loaded(): Promise<void> {\n\t\t// this makes sure that the function is always async\n\t\tawait Promise.resolve();\n\t\twhile (ToneAudioBuffer.downloads.length) {\n\t\t\tawait ToneAudioBuffer.downloads[0];\n\t\t}\n\t}\n}\n", "import { createOfflineAudioContext } from \"../context/AudioContext\";\nimport { Context } from \"../context/Context\";\nimport { Seconds } from \"../type/Units\";\nimport { isOfflineAudioContext } from \"../util/AdvancedTypeCheck\";\nimport { ToneAudioBuffer } from \"./ToneAudioBuffer\";\n\n/**\n * Wrapper around the OfflineAudioContext\n * @category Core\n * @example\n * // generate a single channel, 0.5 second buffer\n * const context = new Tone.OfflineContext(1, 0.5, 44100);\n * const osc = new Tone.Oscillator({ context });\n * context.render().then(buffer => {\n * \tconsole.log(buffer.numberOfChannels, buffer.duration);\n * });\n */\nexport class OfflineContext extends Context {\n\n\treadonly name: string = \"OfflineContext\";\n\n\t/**\n\t * A private reference to the duration\n\t */\n\tprivate readonly _duration: Seconds;\n\n\t/**\n\t * An artificial clock source\n\t */\n\tprivate _currentTime: Seconds = 0;\n\n\t/**\n\t * Private reference to the OfflineAudioContext.\n\t */\n\tprotected _context!: OfflineAudioContext;\n\n\treadonly isOffline: boolean = true;\n\n\t/**\n\t * @param  channels  The number of channels to render\n\t * @param  duration  The duration to render in seconds\n\t * @param sampleRate the sample rate to render at\n\t */\n\tconstructor(\n\t\tchannels: number,\n\t\tduration: Seconds, \n\t\tsampleRate: number,\n\t);\n\tconstructor(context: OfflineAudioContext);\n\tconstructor() {\n\n\t\tsuper({\n\t\t\tclockSource: \"offline\",\n\t\t\tcontext: isOfflineAudioContext(arguments[0]) ?\n\t\t\t\targuments[0] : createOfflineAudioContext(arguments[0], arguments[1] * arguments[2], arguments[2]),\n\t\t\tlookAhead: 0,\n\t\t\tupdateInterval: isOfflineAudioContext(arguments[0]) ?\n\t\t\t\t128 / arguments[0].sampleRate : 128 / arguments[2],\n\t\t});\n\n\t\tthis._duration = isOfflineAudioContext(arguments[0]) ?\n\t\t\targuments[0].length / arguments[0].sampleRate : arguments[1];\n\t}\n\n\t/**\n\t * Override the now method to point to the internal clock time\n\t */\n\tnow(): Seconds {\n\t\treturn this._currentTime;\n\t}\n\n\t/**\n\t * Same as this.now()\n\t */\n\tget currentTime(): Seconds {\n\t\treturn this._currentTime;\n\t}\n\n\t/**\n\t * Render just the clock portion of the audio context.\n\t */\n\tprivate async _renderClock(asynchronous: boolean): Promise<void> {\n\t\tlet index = 0;\n\t\twhile (this._duration - this._currentTime >= 0) {\n\n\t\t\t// invoke all the callbacks on that time\n\t\t\tthis.emit(\"tick\");\n\n\t\t\t// increment the clock in block-sized chunks\n\t\t\tthis._currentTime += 128 / this.sampleRate;\n\n\t\t\t// yield once a second of audio\n\t\t\tindex++;\n\t\t\tconst yieldEvery = Math.floor(this.sampleRate / 128);\n\t\t\tif (asynchronous && index % yieldEvery === 0) {\n\t\t\t\tawait new Promise(done => setTimeout(done, 1));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Render the output of the OfflineContext\n\t * @param asynchronous If the clock should be rendered asynchronously, which will not block the main thread, but be slightly slower.\n\t */\n\tasync render(asynchronous = true): Promise<ToneAudioBuffer> {\n\t\tawait this.workletsAreReady();\n\t\tawait this._renderClock(asynchronous);\n\t\tconst buffer = await this._context.startRendering();\n\t\treturn new ToneAudioBuffer(buffer);\n\t}\n\n\t/**\n\t * Close the context\n\t */\n\tclose(): Promise<void> {\n\t\treturn Promise.resolve();\n\t}\n}\n", "import { version } from \"../version\";\nimport { AnyAudioContext, hasAudioContext, theWindow } from \"./context/AudioContext\";\nimport { Context } from \"./context/Context\";\nimport { DummyContext } from \"./context/DummyContext\";\nimport { BaseContext } from \"./context/BaseContext\";\nimport { OfflineContext } from \"./context/OfflineContext\";\nimport { isAudioContext, isOfflineAudioContext } from \"./util/AdvancedTypeCheck\";\n\n/**\n * This dummy context is used to avoid throwing immediate errors when importing in Node.js\n */\nconst dummyContext = new DummyContext();\n\n/**\n * The global audio context which is getable and assignable through\n * getContext and setContext\n */\nlet globalContext: BaseContext = dummyContext;\n\n/**\n * Returns the default system-wide [[Context]]\n * @category Core\n */\nexport function getContext(): BaseContext {\n\tif (globalContext === dummyContext && hasAudioContext) {\n\t\tsetContext(new Context());\n\t}\n\treturn globalContext;\n}\n\n/**\n * Set the default audio context\n * @category Core\n */\nexport function setContext(context: BaseContext | AnyAudioContext): void {\n\tif (isAudioContext(context)) {\n\t\tglobalContext = new Context(context);\n\t} else if (isOfflineAudioContext(context)) {\n\t\tglobalContext = new OfflineContext(context);\n\t} else {\n\t\tglobalContext = context;\n\t}\n}\n\n/**\n * Most browsers will not play _any_ audio until a user\n * clicks something (like a play button). Invoke this method\n * on a click or keypress event handler to start the audio context.\n * More about the Autoplay policy\n * [here](https://developers.google.com/web/updates/2017/09/autoplay-policy-changes#webaudio)\n * @example\n * document.querySelector(\"button\").addEventListener(\"click\", async () => {\n * \tawait Tone.start();\n * \tconsole.log(\"context started\");\n * });\n * @category Core\n */\nexport function start(): Promise<void> {\n\treturn globalContext.resume();\n}\n\n/**\n * Log Tone.js + version in the console.\n */\nif (theWindow && !theWindow.TONE_SILENCE_LOGGING) {\n\tlet prefix = \"v\";\n\tif (version === \"dev\") {\n\t\tprefix = \"\";\n\t}\n\tconst printString = ` * Tone.js ${prefix}${version} * `;\n\t// eslint-disable-next-line no-console\n\tconsole.log(`%c${printString}`, \"background: #000; color: #fff\");\n}\n", "import { BaseContext } from \"../context/BaseContext\";\nimport { Tone } from \"../Tone\";\nimport { isDefined, isObject, isString, isUndef } from \"../util/TypeCheck\";\nimport { BPM, Hertz, MidiNote, Milliseconds, Samples, Seconds, Ticks, Time } from \"./Units\";\n\nexport type TimeValue = Time | TimeBaseClass<any, any>;\n\n/**\n * The units that the TimeBase can accept. extended by other classes\n */\nexport type TimeBaseUnit = \"s\" | \"n\" | \"t\" | \"m\" | \"i\" | \"hz\" | \"tr\" | \"samples\" | \"number\";\n\nexport interface TypeFunction {\n\tregexp: RegExp;\n\tmethod: (value: string, ...args: string[]) => number;\n}\n\nexport interface TimeExpression<Type extends number> {\n\t[key: string]: {\n\t\tregexp: RegExp;\n\t\tmethod: (value: string, ...args: string[]) => Type;\n\t};\n}\n\n/**\n * TimeBase is a flexible encoding of time which can be evaluated to and from a string.\n */\nexport abstract class TimeBaseClass<Type extends number, Unit extends string> extends Tone {\n\n\treadonly context: BaseContext;\n\n\t/**\n\t * The value of the units\n\t */\n\tprotected _val?: TimeValue;\n\n\t/**\n\t * The units of time\n\t */\n\tprotected _units?: Unit;\n\n\t/**\n\t * All of the conversion expressions\n\t */\n\tprotected _expressions: TimeExpression<Type>;\n\n\t/**\n\t * The default units\n\t */\n\treadonly defaultUnits: Unit = \"s\" as Unit;\n\n\t/**\n\t * @param context The context associated with the time value. Used to compute\n\t * Transport and context-relative timing.\n\t * @param  value  The time value as a number, string or object\n\t * @param  units  Unit values\n\t */\n\tconstructor(context: BaseContext, value?: TimeValue, units?: Unit) {\n\t\tsuper();\n\n\t\tthis._val = value;\n\t\tthis._units = units;\n\t\tthis.context = context;\n\t\tthis._expressions = this._getExpressions();\n\t}\n\n\t/**\n\t * All of the time encoding expressions\n\t */\n\tprotected _getExpressions(): TimeExpression<Type> {\n\t\treturn {\n\t\t\thz: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._frequencyToUnits(parseFloat(value));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?)hz$/i,\n\t\t\t},\n\t\t\ti: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._ticksToUnits(parseInt(value, 10));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)i$/i,\n\t\t\t},\n\t\t\tm: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._beatsToUnits(parseInt(value, 10) * this._getTimeSignature());\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)m$/i,\n\t\t\t},\n\t\t\tn: {\n\t\t\t\tmethod: (value, dot) => {\n\t\t\t\t\tconst numericValue = parseInt(value, 10);\n\t\t\t\t\tconst scalar = dot === \".\" ? 1.5 : 1;\n\t\t\t\t\tif (numericValue === 1) {\n\t\t\t\t\t\treturn this._beatsToUnits(this._getTimeSignature()) * scalar as Type;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn this._beatsToUnits(4 / numericValue) * scalar as Type;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)n(\\.?)$/i,\n\t\t\t},\n\t\t\tnumber: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn this._expressions[this.defaultUnits].method.call(this, value);\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?)$/,\n\t\t\t},\n\t\t\ts: {\n\t\t\t\tmethod: (value): Type => {\n\t\t\t\t\treturn this._secondsToUnits(parseFloat(value));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?)s$/,\n\t\t\t},\n\t\t\tsamples: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\treturn parseInt(value, 10) / this.context.sampleRate as Type;\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)samples$/,\n\t\t\t},\n\t\t\tt: {\n\t\t\t\tmethod: (value) => {\n\t\t\t\t\tconst numericValue = parseInt(value, 10);\n\t\t\t\t\treturn this._beatsToUnits(8 / (Math.floor(numericValue) * 3));\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+)t$/i,\n\t\t\t},\n\t\t\ttr: {\n\t\t\t\tmethod: (m, q, s) => {\n\t\t\t\t\tlet total = 0;\n\t\t\t\t\tif (m && m !== \"0\") {\n\t\t\t\t\t\ttotal += this._beatsToUnits(this._getTimeSignature() * parseFloat(m));\n\t\t\t\t\t}\n\t\t\t\t\tif (q && q !== \"0\") {\n\t\t\t\t\t\ttotal += this._beatsToUnits(parseFloat(q));\n\t\t\t\t\t}\n\t\t\t\t\tif (s && s !== \"0\") {\n\t\t\t\t\t\ttotal += this._beatsToUnits(parseFloat(s) / 4);\n\t\t\t\t\t}\n\t\t\t\t\treturn total as Type;\n\t\t\t\t},\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?$/,\n\t\t\t},\n\t\t};\n\t}\n\n\t//-------------------------------------\n\t// \tVALUE OF\n\t//-------------------------------------\n\n\t/**\n\t * Evaluate the time value. Returns the time in seconds.\n\t */\n\tvalueOf(): Type {\n\t\tif (this._val instanceof TimeBaseClass) {\n\t\t\tthis.fromType(this._val);\n\t\t}\n\t\tif (isUndef(this._val)) {\n\t\t\treturn this._noArg();\n\t\t} else if (isString(this._val) && isUndef(this._units)) {\n\t\t\tfor (const units in this._expressions) {\n\t\t\t\tif (this._expressions[units].regexp.test(this._val.trim())) {\n\t\t\t\t\tthis._units = units as Unit;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (isObject(this._val)) {\n\t\t\tlet total = 0;\n\t\t\tfor (const typeName in this._val) {\n\t\t\t\tif (isDefined(this._val[typeName])) {\n\t\t\t\t\tconst quantity = this._val[typeName];\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tconst time = (new this.constructor(this.context, typeName)).valueOf() * quantity;\n\t\t\t\t\ttotal += time;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn total as Type;\n\t\t}\n\t\tif (isDefined(this._units)) {\n\t\t\tconst expr = this._expressions[this._units];\n\t\t\tconst matching = this._val.toString().trim().match(expr.regexp);\n\t\t\tif (matching) {\n\t\t\t\treturn expr.method.apply(this, matching.slice(1));\n\t\t\t} else {\n\t\t\t\treturn expr.method.call(this, this._val);\n\t\t\t}\n\t\t} else if (isString(this._val)) {\n\t\t\treturn parseFloat(this._val) as Type;\n\t\t} else {\n\t\t\treturn this._val as Type;\n\t\t}\n\t}\n\n\t//-------------------------------------\n\t// \tUNIT CONVERSIONS\n\t//-------------------------------------\n\n\t/**\n\t * Returns the value of a frequency in the current units\n\t */\n\tprotected _frequencyToUnits(freq: Hertz): Type {\n\t\treturn 1 / freq as Type;\n\t}\n\n\t/**\n\t * Return the value of the beats in the current units\n\t */\n\tprotected _beatsToUnits(beats: number): Type {\n\t\treturn (60 / this._getBpm()) * beats as Type;\n\t}\n\n\t/**\n\t * Returns the value of a second in the current units\n\t */\n\tprotected _secondsToUnits(seconds: Seconds): Type {\n\t\treturn seconds as Type;\n\t}\n\n\t/**\n\t * Returns the value of a tick in the current time units\n\t */\n\tprotected _ticksToUnits(ticks: Ticks): Type {\n\t\treturn (ticks * (this._beatsToUnits(1)) / this._getPPQ()) as Type;\n\t}\n\n\t/**\n\t * With no arguments, return 'now'\n\t */\n\tprotected _noArg(): Type {\n\t\treturn this._now();\n\t}\n\n\t//-------------------------------------\n\t// \tTEMPO CONVERSIONS\n\t//-------------------------------------\n\n\t/**\n\t * Return the bpm\n\t */\n\tprotected _getBpm(): BPM {\n\t\treturn this.context.transport.bpm.value;\n\t}\n\n\t/**\n\t * Return the timeSignature\n\t */\n\tprotected _getTimeSignature(): number {\n\t\treturn this.context.transport.timeSignature as number;\n\t}\n\n\t/**\n\t * Return the PPQ or 192 if Transport is not available\n\t */\n\tprotected _getPPQ(): number {\n\t\treturn this.context.transport.PPQ;\n\t}\n\n\t/**\n\t * Return the current time in whichever context is relevant\n\t */\n\tprotected abstract _now(): Type;\n\n\t//-------------------------------------\n\t// \tCONVERSION INTERFACE\n\t//-------------------------------------\n\n\t/**\n\t * Coerce a time type into this units type.\n\t * @param type Any time type units\n\t */\n\tfromType(type: TimeBaseClass<any, any>): this {\n\t\tthis._units = undefined;\n\t\tswitch (this.defaultUnits) {\n\t\t\tcase \"s\":\n\t\t\t\tthis._val = type.toSeconds();\n\t\t\t\tbreak;\n\t\t\tcase \"i\":\n\t\t\t\tthis._val = type.toTicks();\n\t\t\t\tbreak;\n\t\t\tcase \"hz\":\n\t\t\t\tthis._val = type.toFrequency();\n\t\t\t\tbreak;\n\t\t\tcase \"midi\":\n\t\t\t\tthis._val = type.toMidi();\n\t\t\t\tbreak;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Return the value in seconds\n\t */\n\tabstract toSeconds(): Seconds;\n\n\t/**\n\t * Return the value as a Midi note\n\t */\n\tabstract toMidi(): MidiNote;\n\n\t/**\n\t * Convert the value into ticks\n\t */\n\tabstract toTicks(): Ticks;\n\n\t/**\n\t * Return the value in hertz\n\t */\n\ttoFrequency(): Hertz {\n\t\treturn 1 / this.toSeconds();\n\t}\n\n\t/**\n\t * Return the time in samples\n\t */\n\ttoSamples(): Samples {\n\t\treturn this.toSeconds() * this.context.sampleRate;\n\t}\n\n\t/**\n\t * Return the time in milliseconds.\n\t */\n\ttoMilliseconds(): Milliseconds {\n\t\treturn this.toSeconds() * 1000;\n\t}\n}\n", "import { getContext } from \"../Global\";\nimport { ftom } from \"./Conversions\";\nimport { TimeBaseClass, TimeBaseUnit, TimeExpression, TimeValue } from \"./TimeBase\";\nimport { BarsBeatsSixteenths, MidiNote, Seconds, Subdivision, Ticks, Time } from \"./Units\";\n\n/**\n * TimeClass is a primitive type for encoding and decoding Time values.\n * TimeClass can be passed into the parameter of any method which takes time as an argument.\n * @param  val    The time value.\n * @param  units  The units of the value.\n * @example\n * const time = Tone.Time(\"4n\"); // a quarter note\n * @category Unit\n */\nexport class TimeClass<Type extends Seconds | Ticks = Seconds, Unit extends string = TimeBaseUnit>\n\textends TimeBaseClass<Type, Unit> {\n\n\treadonly name: string = \"TimeClass\";\n\n\tprotected _getExpressions(): TimeExpression<Type> {\n\t\treturn Object.assign(super._getExpressions(), {\n\t\t\tnow: {\n\t\t\t\tmethod: (capture: string): Type => {\n\t\t\t\t\treturn this._now() + new (this.constructor as typeof TimeClass)(this.context, capture).valueOf() as Type;\n\t\t\t\t},\n\t\t\t\tregexp: /^\\+(.+)/,\n\t\t\t},\n\t\t\tquantize: {\n\t\t\t\tmethod: (capture: string): Type => {\n\t\t\t\t\tconst quantTo = new TimeClass(this.context, capture).valueOf();\n\t\t\t\t\treturn this._secondsToUnits(this.context.transport.nextSubdivision(quantTo));\n\t\t\t\t},\n\t\t\t\tregexp: /^@(.+)/,\n\t\t\t},\n\t\t});\n\t}\n\n\t/**\n\t * Quantize the time by the given subdivision. Optionally add a\n\t * percentage which will move the time value towards the ideal\n\t * quantized value by that percentage.\n\t * @param  subdiv    The subdivision to quantize to\n\t * @param  percent  Move the time value towards the quantized value by a percentage.\n\t * @example\n\t * Tone.Time(21).quantize(2); // returns 22\n\t * Tone.Time(0.6).quantize(\"4n\", 0.5); // returns 0.55\n\t */\n\tquantize(subdiv: Time, percent = 1): Type {\n\t\tconst subdivision = new (this.constructor as typeof TimeClass)(this.context, subdiv).valueOf();\n\t\tconst value = this.valueOf();\n\t\tconst multiple = Math.round(value / subdivision);\n\t\tconst ideal = multiple * subdivision;\n\t\tconst diff = ideal - value;\n\t\treturn value + diff * percent as Type;\n\t}\n\n\t//-------------------------------------\n\t// CONVERSIONS\n\t//-------------------------------------\n\t/**\n\t * Convert a Time to Notation. The notation values are will be the\n\t * closest representation between 1m to 128th note.\n\t * @return {Notation}\n\t * @example\n\t * // if the Transport is at 120bpm:\n\t * Tone.Time(2).toNotation(); // returns \"1m\"\n\t */\n\ttoNotation(): Subdivision {\n\t\tconst time = this.toSeconds();\n\t\tconst testNotations: Subdivision[] = [\"1m\"];\n\t\tfor (let power = 1; power < 9; power++) {\n\t\t\tconst subdiv = Math.pow(2, power);\n\t\t\ttestNotations.push(subdiv + \"n.\" as Subdivision);\n\t\t\ttestNotations.push(subdiv + \"n\" as Subdivision);\n\t\t\ttestNotations.push(subdiv + \"t\" as Subdivision);\n\t\t}\n\t\ttestNotations.push(\"0\");\n\t\t// find the closets notation representation\n\t\tlet closest = testNotations[0];\n\t\tlet closestSeconds = new TimeClass(this.context, testNotations[0]).toSeconds();\n\t\ttestNotations.forEach(notation => {\n\t\t\tconst notationSeconds = new TimeClass(this.context, notation).toSeconds();\n\t\t\tif (Math.abs(notationSeconds - time) < Math.abs(closestSeconds - time)) {\n\t\t\t\tclosest = notation;\n\t\t\t\tclosestSeconds = notationSeconds;\n\t\t\t}\n\t\t});\n\t\treturn closest;\n\t}\n\n\t/**\n\t * Return the time encoded as Bars:Beats:Sixteenths.\n\t */\n\ttoBarsBeatsSixteenths(): BarsBeatsSixteenths {\n\t\tconst quarterTime = this._beatsToUnits(1);\n\t\tlet quarters = this.valueOf() / quarterTime;\n\t\tquarters = parseFloat(quarters.toFixed(4));\n\t\tconst measures = Math.floor(quarters / this._getTimeSignature());\n\t\tlet sixteenths = (quarters % 1) * 4;\n\t\tquarters = Math.floor(quarters) % this._getTimeSignature();\n\t\tconst sixteenthString = sixteenths.toString();\n\t\tif (sixteenthString.length > 3) {\n\t\t\t// the additional parseFloat removes insignificant trailing zeroes\n\t\t\tsixteenths = parseFloat(parseFloat(sixteenthString).toFixed(3));\n\t\t}\n\t\tconst progress = [measures, quarters, sixteenths];\n\t\treturn progress.join(\":\");\n\t}\n\n\t/**\n\t * Return the time in ticks.\n\t */\n\ttoTicks(): Ticks {\n\t\tconst quarterTime = this._beatsToUnits(1);\n\t\tconst quarters = this.valueOf() / quarterTime;\n\t\treturn Math.round(quarters * this._getPPQ());\n\t}\n\n\t/**\n\t * Return the time in seconds.\n\t */\n\ttoSeconds(): Seconds {\n\t\treturn this.valueOf();\n\t}\n\n\t/**\n\t * Return the value as a midi note.\n\t */\n\ttoMidi(): MidiNote {\n\t\treturn ftom(this.toFrequency());\n\t}\n\n\tprotected _now(): Type {\n\t\treturn this.context.now() as Type;\n\t}\n}\n\n/**\n * Create a TimeClass from a time string or number. The time is computed against the \n * global Tone.Context. To use a specific context, use [[TimeClass]]\n * @param value A value which represents time\n * @param units The value's units if they can't be inferred by the value.\n * @category Unit\n * @example\n * const time = Tone.Time(\"4n\").toSeconds();\n * console.log(time);\n * @example\n * const note = Tone.Time(1).toNotation();\n * console.log(note);\n * @example\n * const freq = Tone.Time(0.5).toFrequency();\n * console.log(freq);\n */\nexport function Time(value?: TimeValue, units?: TimeBaseUnit): TimeClass<Seconds> {\n\treturn new TimeClass(getContext(), value, units);\n}\n", "import { getContext } from \"../Global\";\nimport { intervalToFrequencyRatio, mtof } from \"./Conversions\";\nimport { ftom, getA4, setA4 } from \"./Conversions\";\nimport { TimeClass } from \"./Time\";\nimport { TimeBaseUnit, TimeExpression, TimeValue } from \"./TimeBase\";\nimport { Frequency, Hertz, Interval, MidiNote, Note, Seconds, Ticks } from \"./Units\";\n\nexport type FrequencyUnit = TimeBaseUnit | \"midi\";\n\n/**\n * Frequency is a primitive type for encoding Frequency values.\n * Eventually all time values are evaluated to hertz using the `valueOf` method.\n * @example\n * Tone.Frequency(\"C3\"); // 261\n * Tone.Frequency(38, \"midi\");\n * Tone.Frequency(\"C3\").transpose(4);\n * @category Unit\n */\nexport class FrequencyClass<Type extends number = Hertz> extends TimeClass<Type, FrequencyUnit> {\n\n\treadonly name: string = \"Frequency\";\n\n\treadonly defaultUnits: FrequencyUnit = \"hz\";\n\n\t/**\n\t * The [concert tuning pitch](https://en.wikipedia.org/wiki/Concert_pitch) which is used\n\t * to generate all the other pitch values from notes. A4's values in Hertz.\n\t */\n\tstatic get A4(): Hertz {\n\t\treturn getA4();\n\t}\n\tstatic set A4(freq: Hertz) {\n\t\tsetA4(freq);\n\t}\n\n\t//-------------------------------------\n\t// \tAUGMENT BASE EXPRESSIONS\n\t//-------------------------------------\n\n\tprotected _getExpressions(): TimeExpression<Type> {\n\t\treturn Object.assign({}, super._getExpressions(), {\n\t\t\tmidi: {\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?midi)/,\n\t\t\t\tmethod(value): number {\n\t\t\t\t\tif (this.defaultUnits === \"midi\") {\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn FrequencyClass.mtof(value);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\tnote: {\n\t\t\t\tregexp: /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i,\n\t\t\t\tmethod(pitch, octave): number {\n\t\t\t\t\tconst index = noteToScaleIndex[pitch.toLowerCase()];\n\t\t\t\t\tconst noteNumber = index + (parseInt(octave, 10) + 1) * 12;\n\t\t\t\t\tif (this.defaultUnits === \"midi\") {\n\t\t\t\t\t\treturn noteNumber;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn FrequencyClass.mtof(noteNumber);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\ttr: {\n\t\t\t\tregexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?/,\n\t\t\t\tmethod(m, q, s): number {\n\t\t\t\t\tlet total = 1;\n\t\t\t\t\tif (m && m !== \"0\") {\n\t\t\t\t\t\ttotal *= this._beatsToUnits(this._getTimeSignature() * parseFloat(m));\n\t\t\t\t\t}\n\t\t\t\t\tif (q && q !== \"0\") {\n\t\t\t\t\t\ttotal *= this._beatsToUnits(parseFloat(q));\n\t\t\t\t\t}\n\t\t\t\t\tif (s && s !== \"0\") {\n\t\t\t\t\t\ttotal *= this._beatsToUnits(parseFloat(s) / 4);\n\t\t\t\t\t}\n\t\t\t\t\treturn total;\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t}\n\n\t//-------------------------------------\n\t// \tEXPRESSIONS\n\t//-------------------------------------\n\n\t/**\n\t * Transposes the frequency by the given number of semitones.\n\t * @return  A new transposed frequency\n\t * @example\n\t * Tone.Frequency(\"A4\").transpose(3); // \"C5\"\n\t */\n\ttranspose(interval: Interval): FrequencyClass {\n\t\treturn new FrequencyClass(this.context, this.valueOf() * intervalToFrequencyRatio(interval));\n\t}\n\n\t/**\n\t * Takes an array of semitone intervals and returns\n\t * an array of frequencies transposed by those intervals.\n\t * @return  Returns an array of Frequencies\n\t * @example\n\t * Tone.Frequency(\"A4\").harmonize([0, 3, 7]); // [\"A4\", \"C5\", \"E5\"]\n\t */\n\tharmonize(intervals: Interval[]): FrequencyClass[] {\n\t\treturn intervals.map(interval => {\n\t\t\treturn this.transpose(interval);\n\t\t});\n\t}\n\n\t//-------------------------------------\n\t// \tUNIT CONVERSIONS\n\t//-------------------------------------\n\n\t/**\n\t * Return the value of the frequency as a MIDI note\n\t * @example\n\t * Tone.Frequency(\"C4\").toMidi(); // 60\n\t */\n\ttoMidi(): MidiNote {\n\t\treturn ftom(this.valueOf());\n\t}\n\n\t/**\n\t * Return the value of the frequency in Scientific Pitch Notation\n\t * @example\n\t * Tone.Frequency(69, \"midi\").toNote(); // \"A4\"\n\t */\n\ttoNote(): Note {\n\t\tconst freq = this.toFrequency();\n\t\tconst log = Math.log2(freq / FrequencyClass.A4);\n\t\tlet noteNumber = Math.round(12 * log) + 57;\n\t\tconst octave = Math.floor(noteNumber / 12);\n\t\tif (octave < 0) {\n\t\t\tnoteNumber += -12 * octave;\n\t\t}\n\t\tconst noteName = scaleIndexToNote[noteNumber % 12];\n\t\treturn noteName + octave.toString() as Note;\n\t}\n\n\t/**\n\t * Return the duration of one cycle in seconds.\n\t */\n\ttoSeconds(): Seconds {\n\t\treturn 1 / super.toSeconds();\n\t}\n\n\t/**\n\t * Return the duration of one cycle in ticks\n\t */\n\ttoTicks(): Ticks {\n\t\tconst quarterTime = this._beatsToUnits(1);\n\t\tconst quarters = this.valueOf() / quarterTime;\n\t\treturn Math.floor(quarters * this._getPPQ());\n\t}\n\n\t//-------------------------------------\n\t// \tUNIT CONVERSIONS HELPERS\n\t//-------------------------------------\n\n\t/**\n\t * With no arguments, return 0\n\t */\n\tprotected _noArg(): Type {\n\t\treturn 0 as Type;\n\t}\n\n\t/**\n\t * Returns the value of a frequency in the current units\n\t */\n\tprotected _frequencyToUnits(freq: Hertz): Type {\n\t\treturn freq as Type;\n\t}\n\n\t/**\n\t * Returns the value of a tick in the current time units\n\t */\n\tprotected _ticksToUnits(ticks: Ticks): Type {\n\t\treturn 1 / ((ticks * 60) / (this._getBpm() * this._getPPQ())) as Type;\n\t}\n\n\t/**\n\t * Return the value of the beats in the current units\n\t */\n\tprotected _beatsToUnits(beats: number): Type {\n\t\treturn 1 / super._beatsToUnits(beats) as Type;\n\t}\n\n\t/**\n\t * Returns the value of a second in the current units\n\t */\n\tprotected _secondsToUnits(seconds: Seconds): Type {\n\t\treturn 1 / seconds as Type;\n\t}\n\n\t/**\n\t * Convert a MIDI note to frequency value.\n\t * @param  midi The midi number to convert.\n\t * @return The corresponding frequency value\n\t */\n\tstatic mtof(midi: MidiNote): Hertz {\n\t\treturn mtof(midi);\n\t}\n\n\t/**\n\t * Convert a frequency value to a MIDI note.\n\t * @param frequency The value to frequency value to convert.\n\t */\n\tstatic ftom(frequency: Hertz): MidiNote {\n\t\treturn ftom(frequency);\n\t}\n}\n\n//-------------------------------------\n// \tFREQUENCY CONVERSIONS\n//-------------------------------------\n\n/**\n * Note to scale index. \n * @hidden\n */\nconst noteToScaleIndex = {\n\tcbb: -2, cb: -1, c: 0, \"c#\": 1, cx: 2,\n\tdbb: 0, db: 1, d: 2, \"d#\": 3, dx: 4,\n\tebb: 2, eb: 3, e: 4, \"e#\": 5, ex: 6,\n\tfbb: 3, fb: 4, f: 5, \"f#\": 6, fx: 7,\n\tgbb: 5, gb: 6, g: 7, \"g#\": 8, gx: 9,\n\tabb: 7, ab: 8, a: 9, \"a#\": 10, ax: 11,\n\tbbb: 9, bb: 10, b: 11, \"b#\": 12, bx: 13,\n};\n\n/**\n * scale index to note (sharps)\n * @hidden\n */\nconst scaleIndexToNote = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n\n/**\n * Convert a value into a FrequencyClass object.\n * @category Unit\n * @example\n * const midi = Tone.Frequency(\"C3\").toMidi();\n * console.log(midi);\n * @example\n * const hertz = Tone.Frequency(38, \"midi\").toFrequency();\n * console.log(hertz);\n */\nexport function Frequency(value?: TimeValue | Frequency, units?: FrequencyUnit): FrequencyClass {\n\treturn new FrequencyClass(getContext(), value, units);\n}\n", "import { getContext } from \"../Global\";\nimport { Seconds, Ticks } from \"../type/Units\";\nimport { TimeClass } from \"./Time\";\nimport { TimeBaseUnit, TimeValue } from \"./TimeBase\";\n\n/**\n * TransportTime is a the time along the Transport's\n * timeline. It is similar to Tone.Time, but instead of evaluating\n * against the AudioContext's clock, it is evaluated against\n * the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).\n * @category Unit\n */\nexport class TransportTimeClass<Type extends Seconds | Ticks = Seconds> extends TimeClass<Type> {\n\n\treadonly name: string = \"TransportTime\";\n\n\t/**\n\t * Return the current time in whichever context is relevant\n\t */\n\tprotected _now(): Type {\n\t\treturn this.context.transport.seconds as Type;\n\t}\n}\n\n/**\n * TransportTime is a the time along the Transport's\n * timeline. It is similar to [[Time]], but instead of evaluating\n * against the AudioContext's clock, it is evaluated against\n * the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).\n * @category Unit\n */\nexport function TransportTime(value?: TimeValue, units?: TimeBaseUnit): TransportTimeClass {\n\treturn new TransportTimeClass(getContext(), value, units);\n}\n", "import { getContext } from \"../Global\";\nimport { Tone } from \"../Tone\";\nimport { FrequencyClass } from \"../type/Frequency\";\nimport { TimeClass } from \"../type/Time\";\nimport { TransportTimeClass } from \"../type/TransportTime\";\nimport { Frequency, Hertz, Seconds, Ticks, Time } from \"../type/Units\";\nimport { getDefaultsFromInstance, optionsFromArguments } from \"../util/Defaults\";\nimport { RecursivePartial } from \"../util/Interface\";\nimport { isArray, isBoolean, isDefined, isNumber, isString, isUndef } from \"../util/TypeCheck\";\nimport { BaseContext } from \"./BaseContext\";\n\n/**\n * A unit which process audio\n */\nexport interface ToneWithContextOptions {\n\tcontext: BaseContext;\n}\n\n/**\n * The Base class for all nodes that have an AudioContext.\n */\nexport abstract class ToneWithContext<Options extends ToneWithContextOptions> extends Tone {\n\n\t/**\n\t * The context belonging to the node.\n\t */\n\treadonly context: BaseContext;\n\n\t/**\n\t * The default context to use if no AudioContext is passed in to the constructor.\n\t * Probably should not be set manually. Used internally.\n\t * @hidden\n\t */\n\treadonly defaultContext?: BaseContext;\n\n\t/**\n\t * Pass in a constructor as the first argument\n\t */\n\tconstructor(context?: BaseContext)\n\tconstructor(options?: Partial<ToneWithContextOptions>);\n\tconstructor() {\n\t\tsuper();\n\t\tconst options = optionsFromArguments(ToneWithContext.getDefaults(), arguments, [\"context\"]);\n\t\tif (this.defaultContext) {\n\t\t\tthis.context = this.defaultContext;\n\t\t} else {\n\t\t\tthis.context = options.context;\n\t\t}\n\t}\n\n\tstatic getDefaults(): ToneWithContextOptions {\n\t\treturn {\n\t\t\tcontext: getContext(),\n\t\t};\n\t}\n\n\t/**\n\t * Return the current time of the Context clock plus the lookAhead.\n\t * @example\n\t * setInterval(() => {\n\t * \tconsole.log(Tone.now());\n\t * }, 100);\n\t */\n\tnow(): Seconds {\n\t\treturn this.context.currentTime + this.context.lookAhead;\n\t}\n\n\t/**\n\t * Return the current time of the Context clock without any lookAhead.\n\t * @example\n\t * setInterval(() => {\n\t * \tconsole.log(Tone.immediate());\n\t * }, 100);\n\t */\n\timmediate(): Seconds {\n\t\treturn this.context.currentTime;\n\t}\n\n\t/**\n\t * The duration in seconds of one sample.\n\t * @example\n\t * console.log(Tone.Transport.sampleTime);\n\t */\n\tget sampleTime(): Seconds {\n\t\treturn 1 / this.context.sampleRate;\n\t}\n\n\t/**\n\t * The number of seconds of 1 processing block (128 samples)\n\t * @example\n\t * console.log(Tone.Destination.blockTime);\n\t */\n\tget blockTime(): Seconds {\n\t\treturn 128 / this.context.sampleRate;\n\t}\n\n\t/**\n\t * Convert the incoming time to seconds. \n\t * This is calculated against the current [[Tone.Transport]] bpm\n\t * @example\n\t * const gain = new Tone.Gain();\n\t * setInterval(() => console.log(gain.toSeconds(\"4n\")), 100);\n\t * // ramp the tempo to 60 bpm over 30 seconds\n\t * Tone.getTransport().bpm.rampTo(60, 30);\n\t */\n\ttoSeconds(time?: Time): Seconds {\n\t\treturn new TimeClass(this.context, time).toSeconds();\n\t}\n\n\t/**\n\t * Convert the input to a frequency number\n\t * @example\n\t * const gain = new Tone.Gain();\n\t * console.log(gain.toFrequency(\"4n\"));\n\t */\n\ttoFrequency(freq: Frequency): Hertz {\n\t\treturn new FrequencyClass(this.context, freq).toFrequency();\n\t}\n\n\t/**\n\t * Convert the input time into ticks\n\t * @example\n\t * const gain = new Tone.Gain();\n\t * console.log(gain.toTicks(\"4n\"));\n\t */\n\ttoTicks(time?: Time | TimeClass): Ticks {\n\t\treturn new TransportTimeClass(this.context, time).toTicks();\n\t}\n\n\t//-------------------------------------\n\t// \tGET/SET\n\t//-------------------------------------\n\n\t/**\n\t * Get a subset of the properties which are in the partial props\n\t */\n\tprotected _getPartialProperties(props: Options): Partial<Options> {\n\t\tconst options = this.get();\n\t\t// remove attributes from the prop that are not in the partial\n\t\tObject.keys(options).forEach(name => {\n\t\t\tif (isUndef(props[name])) {\n\t\t\t\tdelete options[name];\n\t\t\t}\n\t\t});\n\t\treturn options;\n\t}\n\n\t/**\n\t * Get the object's attributes.\n\t * @example\n\t * const osc = new Tone.Oscillator();\n\t * console.log(osc.get());\n\t */\n\tget(): Options {\n\t\tconst defaults = getDefaultsFromInstance(this) as Options;\n\t\tObject.keys(defaults).forEach(attribute => {\n\t\t\tif (Reflect.has(this, attribute)) {\n\t\t\t\tconst member = this[attribute];\n\t\t\t\tif (isDefined(member) && isDefined(member.value) && isDefined(member.setValueAtTime)) {\n\t\t\t\t\tdefaults[attribute] = member.value;\n\t\t\t\t} else if (member instanceof ToneWithContext) {\n\t\t\t\t\tdefaults[attribute] = member._getPartialProperties(defaults[attribute]);\n\t\t\t\t\t// otherwise make sure it's a serializable type\n\t\t\t\t} else if (isArray(member) || isNumber(member) || isString(member) || isBoolean(member)) {\n\t\t\t\t\tdefaults[attribute] = member;\n\t\t\t\t} else {\n\t\t\t\t\t// remove all undefined and unserializable attributes\n\t\t\t\t\tdelete defaults[attribute];\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn defaults;\n\t}\n\n\t/**\n\t * Set multiple properties at once with an object.\n\t * @example\n\t * const filter = new Tone.Filter().toDestination();\n\t * // set values using an object\n\t * filter.set({\n\t * \tfrequency: \"C6\",\n\t * \ttype: \"highpass\"\n\t * });\n\t * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/Analogsynth_octaves_highmid.mp3\").connect(filter);\n\t * player.autostart = true;\n\t */\n\tset(props: RecursivePartial<Options>): this {\n\t\tObject.keys(props).forEach(attribute => {\n\t\t\tif (Reflect.has(this, attribute) && isDefined(this[attribute])) {\n\t\t\t\tif (this[attribute] && isDefined(this[attribute].value) && isDefined(this[attribute].setValueAtTime)) {\n\t\t\t\t\t// small optimization\n\t\t\t\t\tif (this[attribute].value !== props[attribute]) {\n\t\t\t\t\t\tthis[attribute].value = props[attribute];\n\t\t\t\t\t}\n\t\t\t\t} else if (this[attribute] instanceof ToneWithContext) {\n\t\t\t\t\tthis[attribute].set(props[attribute]);\n\t\t\t\t} else {\n\t\t\t\t\tthis[attribute] = props[attribute];\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n}\n", "import { AbstractParam } from \"../context/AbstractParam\";\nimport { dbToGain, gainToDb } from \"../type/Conversions\";\nimport { Decibels, Frequency, Positive, Time, UnitMap, UnitName } from \"../type/Units\";\nimport { isAudioParam } from \"../util/AdvancedTypeCheck\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isDefined } from \"../util/TypeCheck\";\nimport { ToneWithContext, ToneWithContextOptions } from \"./ToneWithContext\";\nimport { EQ } from \"../util/Math\";\nimport { assert, assertRange } from \"../util/Debug\";\n\nexport interface ParamOptions<TypeName extends UnitName> extends ToneWithContextOptions {\n\tunits: TypeName;\n\tvalue?: UnitMap[TypeName];\n\tparam: AudioParam | Param<TypeName>;\n\tconvert: boolean;\n\tminValue?: number;\n\tmaxValue?: number;\n\tswappable?: boolean;\n}\n\n/**\n * the possible automation types\n */\ntype AutomationType = \"linearRampToValueAtTime\" | \"exponentialRampToValueAtTime\" | \"setValueAtTime\" | \"setTargetAtTime\" | \"cancelScheduledValues\";\n\ninterface TargetAutomationEvent {\n\ttype: \"setTargetAtTime\";\n\ttime: number;\n\tvalue: number;\n\tconstant: number;\n}\n\ninterface NormalAutomationEvent {\n\ttype: Exclude<AutomationType, \"setTargetAtTime\">;\n\ttime: number;\n\tvalue: number;\n}\n/**\n * The events on the automation\n */\nexport type AutomationEvent = NormalAutomationEvent | TargetAutomationEvent;\n\n/**\n * Param wraps the native Web Audio's AudioParam to provide\n * additional unit conversion functionality. It also\n * serves as a base-class for classes which have a single,\n * automatable parameter.\n * @category Core\n */\nexport class Param<TypeName extends UnitName = \"number\">\n\textends ToneWithContext<ParamOptions<TypeName>>\n\timplements AbstractParam<TypeName> {\n\n\treadonly name: string = \"Param\";\n\n\treadonly input: GainNode | AudioParam;\n\n\treadonly units: UnitName;\n\tconvert: boolean;\n\toverridden = false;\n\n\t/**\n\t * The timeline which tracks all of the automations.\n\t */\n\tprotected _events: Timeline<AutomationEvent>;\n\n\t/**\n\t * The native parameter to control\n\t */\n\tprotected _param: AudioParam;\n\n\t/**\n\t * The default value before anything is assigned\n\t */\n\tprotected _initialValue: number;\n\n\t/**\n\t * The minimum output value\n\t */\n\tprivate _minOutput = 1e-7;\n\n\t/**\n\t * Private reference to the min and max values if passed into the constructor\n\t */\n\tprivate readonly _minValue?: number;\n\tprivate readonly _maxValue?: number;\n\n\t/**\n\t * If the underlying AudioParam can be swapped out\n\t * using the setParam method. \n\t */\n\tprotected readonly _swappable: boolean;\n\n\t/**\n\t * @param param The AudioParam to wrap\n\t * @param units The unit name\n\t * @param convert Whether or not to convert the value to the target units\n\t */\n\tconstructor(param: AudioParam, units?: TypeName, convert?: boolean);\n\tconstructor(options: Partial<ParamOptions<TypeName>>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Param.getDefaults(), arguments, [\"param\", \"units\", \"convert\"]));\n\n\t\tconst options = optionsFromArguments(Param.getDefaults(), arguments, [\"param\", \"units\", \"convert\"]);\n\n\t\tassert(isDefined(options.param) &&\n\t\t\t(isAudioParam(options.param) || options.param instanceof Param), \"param must be an AudioParam\");\n\n\t\twhile (!isAudioParam(options.param)) {\n\t\t\toptions.param = options.param._param;\n\t\t}\n\n\t\tthis._swappable = isDefined(options.swappable) ? options.swappable : false;\n\t\tif (this._swappable) {\n\t\t\tthis.input = this.context.createGain();\n\t\t\t// initialize\n\t\t\tthis._param = options.param;\n\t\t\tthis.input.connect(this._param);\n\t\t} else {\n\t\t\tthis._param = this.input = options.param;\n\t\t}\n\t\tthis._events = new Timeline<AutomationEvent>(1000);\n\t\tthis._initialValue = this._param.defaultValue;\n\t\tthis.units = options.units;\n\t\tthis.convert = options.convert;\n\t\tthis._minValue = options.minValue;\n\t\tthis._maxValue = options.maxValue;\n\n\t\t// if the value is defined, set it immediately\n\t\tif (isDefined(options.value) && options.value !== this._toType(this._initialValue)) {\n\t\t\tthis.setValueAtTime(options.value, 0);\n\t\t}\n\t}\n\n\tstatic getDefaults(): ParamOptions<any> {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tconvert: true,\n\t\t\tunits: \"number\" as UnitName,\n\t\t} as ParamOptions<any>);\n\t}\n\n\tget value(): UnitMap[TypeName] {\n\t\tconst now = this.now();\n\t\treturn this.getValueAtTime(now);\n\t}\n\tset value(value) {\n\t\tthis.cancelScheduledValues(this.now());\n\t\tthis.setValueAtTime(value, this.now());\n\t}\n\n\tget minValue(): number {\n\t\t// if it's not the default minValue, return it\n\t\tif (isDefined(this._minValue)) {\n\t\t\treturn this._minValue;\n\t\t} else if (this.units === \"time\" || this.units === \"frequency\" ||\n\t\t\tthis.units === \"normalRange\" || this.units === \"positive\" ||\n\t\t\tthis.units === \"transportTime\" || this.units === \"ticks\" ||\n\t\t\tthis.units === \"bpm\" || this.units === \"hertz\" || this.units === \"samples\") {\n\t\t\treturn 0;\n\t\t} else if (this.units === \"audioRange\") {\n\t\t\treturn -1;\n\t\t} else if (this.units === \"decibels\") {\n\t\t\treturn -Infinity;\n\t\t} else {\n\t\t\treturn this._param.minValue;\n\t\t}\n\t}\n\n\tget maxValue(): number {\n\t\tif (isDefined(this._maxValue)) {\n\t\t\treturn this._maxValue;\n\t\t} else if (this.units === \"normalRange\" ||\n\t\t\tthis.units === \"audioRange\") {\n\t\t\treturn 1;\n\t\t} else {\n\t\t\treturn this._param.maxValue;\n\t\t}\n\t}\n\n\t/**\n\t * Type guard based on the unit name\n\t */\n\tprivate _is<T>(arg: any, type: UnitName): arg is T {\n\t\treturn this.units === type;\n\t}\n\n\t/**\n\t * Make sure the value is always in the defined range\n\t */\n\tprivate _assertRange(value: number): number {\n\t\tif (isDefined(this.maxValue) && isDefined(this.minValue)) {\n\t\t\tassertRange(value, this._fromType(this.minValue), this._fromType(this.maxValue));\n\t\t}\n\t\treturn value;\n\t}\n\n\t/**\n\t * Convert the given value from the type specified by Param.units\n\t * into the destination value (such as Gain or Frequency).\n\t */\n\tprotected _fromType(val: UnitMap[TypeName]): number {\n\t\tif (this.convert && !this.overridden) {\n\t\t\tif (this._is<Time>(val, \"time\")) {\n\t\t\t\treturn this.toSeconds(val);\n\t\t\t} else if (this._is<Decibels>(val, \"decibels\")) {\n\t\t\t\treturn dbToGain(val);\n\t\t\t} else if (this._is<Frequency>(val, \"frequency\")) {\n\t\t\t\treturn this.toFrequency(val);\n\t\t\t} else {\n\t\t\t\treturn val as number;\n\t\t\t}\n\t\t} else if (this.overridden) {\n\t\t\t// if it's overridden, should only schedule 0s\n\t\t\treturn 0;\n\t\t} else {\n\t\t\treturn val as number;\n\t\t}\n\t}\n\n\t/**\n\t * Convert the parameters value into the units specified by Param.units.\n\t */\n\tprotected _toType(val: number): UnitMap[TypeName] {\n\t\tif (this.convert && this.units === \"decibels\") {\n\t\t\treturn gainToDb(val) as UnitMap[TypeName];\n\t\t} else {\n\t\t\treturn val as UnitMap[TypeName];\n\t\t}\n\t}\n\n\t//-------------------------------------\n\t// ABSTRACT PARAM INTERFACE\n\t// all docs are generated from ParamInterface.ts\n\t//-------------------------------------\n\n\tsetValueAtTime(value: UnitMap[TypeName], time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst numericValue = this._fromType(value);\n\t\tassert(isFinite(numericValue) && isFinite(computedTime),\n\t\t\t`Invalid argument(s) to setValueAtTime: ${JSON.stringify(value)}, ${JSON.stringify(time)}`);\n\t\tthis._assertRange(numericValue);\n\t\tthis.log(this.units, \"setValueAtTime\", value, computedTime);\n\t\tthis._events.add({\n\t\t\ttime: computedTime,\n\t\t\ttype: \"setValueAtTime\",\n\t\t\tvalue: numericValue,\n\t\t});\n\t\tthis._param.setValueAtTime(numericValue, computedTime);\n\t\treturn this;\n\t}\n\n\tgetValueAtTime(time: Time): UnitMap[TypeName] {\n\t\tconst computedTime = Math.max(this.toSeconds(time), 0);\n\t\tconst after = this._events.getAfter(computedTime);\n\t\tconst before = this._events.get(computedTime);\n\t\tlet value = this._initialValue;\n\t\t// if it was set by\n\t\tif (before === null) {\n\t\t\tvalue = this._initialValue;\n\t\t} else if (before.type === \"setTargetAtTime\" && (after === null || after.type === \"setValueAtTime\")) {\n\t\t\tconst previous = this._events.getBefore(before.time);\n\t\t\tlet previousVal;\n\t\t\tif (previous === null) {\n\t\t\t\tpreviousVal = this._initialValue;\n\t\t\t} else {\n\t\t\t\tpreviousVal = previous.value;\n\t\t\t}\n\t\t\tif (before.type === \"setTargetAtTime\") {\n\t\t\t\tvalue = this._exponentialApproach(before.time, previousVal, before.value, before.constant, computedTime);\n\t\t\t}\n\t\t} else if (after === null) {\n\t\t\tvalue = before.value;\n\t\t} else if (after.type === \"linearRampToValueAtTime\" || after.type === \"exponentialRampToValueAtTime\") {\n\t\t\tlet beforeValue = before.value;\n\t\t\tif (before.type === \"setTargetAtTime\") {\n\t\t\t\tconst previous = this._events.getBefore(before.time);\n\t\t\t\tif (previous === null) {\n\t\t\t\t\tbeforeValue = this._initialValue;\n\t\t\t\t} else {\n\t\t\t\t\tbeforeValue = previous.value;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (after.type === \"linearRampToValueAtTime\") {\n\t\t\t\tvalue = this._linearInterpolate(before.time, beforeValue, after.time, after.value, computedTime);\n\t\t\t} else {\n\t\t\t\tvalue = this._exponentialInterpolate(before.time, beforeValue, after.time, after.value, computedTime);\n\t\t\t}\n\t\t} else {\n\t\t\tvalue = before.value;\n\t\t}\n\t\treturn this._toType(value);\n\t}\n\n\tsetRampPoint(time: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tlet currentVal = this.getValueAtTime(time);\n\t\tthis.cancelAndHoldAtTime(time);\n\t\tif (this._fromType(currentVal) === 0) {\n\t\t\tcurrentVal = this._toType(this._minOutput);\n\t\t}\n\t\tthis.setValueAtTime(currentVal, time);\n\t\treturn this;\n\t}\n\n\tlinearRampToValueAtTime(value: UnitMap[TypeName], endTime: Time): this {\n\t\tconst numericValue = this._fromType(value);\n\t\tconst computedTime = this.toSeconds(endTime);\n\t\tassert(isFinite(numericValue) && isFinite(computedTime),\n\t\t\t`Invalid argument(s) to linearRampToValueAtTime: ${JSON.stringify(value)}, ${JSON.stringify(endTime)}`);\n\t\tthis._assertRange(numericValue);\n\t\tthis._events.add({\n\t\t\ttime: computedTime,\n\t\t\ttype: \"linearRampToValueAtTime\",\n\t\t\tvalue: numericValue,\n\t\t});\n\t\tthis.log(this.units, \"linearRampToValueAtTime\", value, computedTime);\n\t\tthis._param.linearRampToValueAtTime(numericValue, computedTime);\n\t\treturn this;\n\t}\n\n\texponentialRampToValueAtTime(value: UnitMap[TypeName], endTime: Time): this {\n\t\tlet numericValue = this._fromType(value);\n\t\t// the value can't be 0\n\t\tnumericValue = EQ(numericValue, 0) ? this._minOutput : numericValue;\n\t\tthis._assertRange(numericValue);\n\t\tconst computedTime = this.toSeconds(endTime);\n\t\tassert(isFinite(numericValue) && isFinite(computedTime),\n\t\t\t`Invalid argument(s) to exponentialRampToValueAtTime: ${JSON.stringify(value)}, ${JSON.stringify(endTime)}`);\n\t\t// store the event\n\t\tthis._events.add({\n\t\t\ttime: computedTime,\n\t\t\ttype: \"exponentialRampToValueAtTime\",\n\t\t\tvalue: numericValue,\n\t\t});\n\t\tthis.log(this.units, \"exponentialRampToValueAtTime\", value, computedTime);\n\t\tthis._param.exponentialRampToValueAtTime(numericValue, computedTime);\n\t\treturn this;\n\t}\n\n\texponentialRampTo(value: UnitMap[TypeName], rampTime: Time, startTime?: Time): this {\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis.setRampPoint(startTime);\n\t\tthis.exponentialRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n\t\treturn this;\n\t}\n\n\tlinearRampTo(value: UnitMap[TypeName], rampTime: Time, startTime?: Time): this {\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis.setRampPoint(startTime);\n\t\tthis.linearRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n\t\treturn this;\n\t}\n\n\ttargetRampTo(value: UnitMap[TypeName], rampTime: Time, startTime?: Time): this {\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis.setRampPoint(startTime);\n\t\tthis.exponentialApproachValueAtTime(value, startTime, rampTime);\n\t\treturn this;\n\t}\n\n\texponentialApproachValueAtTime(value: UnitMap[TypeName], time: Time, rampTime: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\trampTime = this.toSeconds(rampTime);\n\t\tconst timeConstant = Math.log(rampTime + 1) / Math.log(200);\n\t\tthis.setTargetAtTime(value, time, timeConstant);\n\t\t// at 90% start a linear ramp to the final value\n\t\tthis.cancelAndHoldAtTime(time + rampTime * 0.9);\n\t\tthis.linearRampToValueAtTime(value, time + rampTime);\n\t\treturn this;\n\t}\n\n\tsetTargetAtTime(value: UnitMap[TypeName], startTime: Time, timeConstant: Positive): this {\n\t\tconst numericValue = this._fromType(value);\n\t\t// The value will never be able to approach without timeConstant > 0.\n\t\tassert(isFinite(timeConstant) && timeConstant > 0, \"timeConstant must be a number greater than 0\");\n\t\tconst computedTime = this.toSeconds(startTime);\n\t\tthis._assertRange(numericValue);\n\t\tassert(isFinite(numericValue) && isFinite(computedTime),\n\t\t\t`Invalid argument(s) to setTargetAtTime: ${JSON.stringify(value)}, ${JSON.stringify(startTime)}`);\n\t\tthis._events.add({\n\t\t\tconstant: timeConstant,\n\t\t\ttime: computedTime,\n\t\t\ttype: \"setTargetAtTime\",\n\t\t\tvalue: numericValue,\n\t\t});\n\t\tthis.log(this.units, \"setTargetAtTime\", value, computedTime, timeConstant);\n\t\tthis._param.setTargetAtTime(numericValue, computedTime, timeConstant);\n\t\treturn this;\n\t}\n\n\tsetValueCurveAtTime(values: UnitMap[TypeName][], startTime: Time, duration: Time, scaling = 1): this {\n\t\tduration = this.toSeconds(duration);\n\t\tstartTime = this.toSeconds(startTime);\n\t\tconst startingValue = this._fromType(values[0]) * scaling;\n\t\tthis.setValueAtTime(this._toType(startingValue), startTime);\n\t\tconst segTime = duration / (values.length - 1);\n\t\tfor (let i = 1; i < values.length; i++) {\n\t\t\tconst numericValue = this._fromType(values[i]) * scaling;\n\t\t\tthis.linearRampToValueAtTime(this._toType(numericValue), startTime + i * segTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\tcancelScheduledValues(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tassert(isFinite(computedTime), `Invalid argument to cancelScheduledValues: ${JSON.stringify(time)}`);\n\t\tthis._events.cancel(computedTime);\n\t\tthis._param.cancelScheduledValues(computedTime);\n\t\tthis.log(this.units, \"cancelScheduledValues\", computedTime);\n\t\treturn this;\n\t}\n\n\tcancelAndHoldAtTime(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst valueAtTime = this._fromType(this.getValueAtTime(computedTime));\n\t\t// remove the schedule events\n\t\tassert(isFinite(computedTime), `Invalid argument to cancelAndHoldAtTime: ${JSON.stringify(time)}`);\n\n\t\tthis.log(this.units, \"cancelAndHoldAtTime\", computedTime, \"value=\" + valueAtTime);\n\t\t\n\t\t// if there is an event at the given computedTime\n\t\t// and that even is not a \"set\"\n\t\tconst before = this._events.get(computedTime);\n\t\tconst after = this._events.getAfter(computedTime);\n\t\tif (before && EQ(before.time, computedTime)) {\n\t\t\t// remove everything after\n\t\t\tif (after) {\n\t\t\t\tthis._param.cancelScheduledValues(after.time);\n\t\t\t\tthis._events.cancel(after.time);\n\t\t\t} else {\n\t\t\t\tthis._param.cancelAndHoldAtTime(computedTime);\n\t\t\t\tthis._events.cancel(computedTime + this.sampleTime);\n\t\t\t}\n\t\t} else if (after) {\n\t\t\tthis._param.cancelScheduledValues(after.time);\n\t\t\t// cancel the next event(s)\n\t\t\tthis._events.cancel(after.time);\n\t\t\tif (after.type === \"linearRampToValueAtTime\") {\n\t\t\t\tthis.linearRampToValueAtTime(this._toType(valueAtTime), computedTime);\n\t\t\t} else if (after.type === \"exponentialRampToValueAtTime\") {\n\t\t\t\tthis.exponentialRampToValueAtTime(this._toType(valueAtTime), computedTime);\n\t\t\t}\n\t\t}\n\n\t\t// set the value at the given time\n\t\tthis._events.add({\n\t\t\ttime: computedTime,\n\t\t\ttype: \"setValueAtTime\",\n\t\t\tvalue: valueAtTime,\n\t\t});\n\t\tthis._param.setValueAtTime(valueAtTime, computedTime);\n\t\treturn this;\n\t}\n\n\trampTo(value: UnitMap[TypeName], rampTime: Time = 0.1, startTime?: Time): this {\n\t\tif (this.units === \"frequency\" || this.units === \"bpm\" || this.units === \"decibels\") {\n\t\t\tthis.exponentialRampTo(value, rampTime, startTime);\n\t\t} else {\n\t\t\tthis.linearRampTo(value, rampTime, startTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Apply all of the previously scheduled events to the passed in Param or AudioParam.\n\t * The applied values will start at the context's current time and schedule\n\t * all of the events which are scheduled on this Param onto the passed in param.\n\t */\n\tapply(param: Param | AudioParam): this {\n\t\tconst now = this.context.currentTime;\n\t\t// set the param's value at the current time and schedule everything else\n\t\tparam.setValueAtTime(this.getValueAtTime(now) as number, now);\n\t\t// if the previous event was a curve, then set the rest of it\n\t\tconst previousEvent = this._events.get(now);\n\t\tif (previousEvent && previousEvent.type === \"setTargetAtTime\") {\n\t\t\t// approx it until the next event with linear ramps\n\t\t\tconst nextEvent = this._events.getAfter(previousEvent.time);\n\t\t\t// or for 2 seconds if there is no event\n\t\t\tconst endTime = nextEvent ? nextEvent.time : now + 2;\n\t\t\tconst subdivisions = (endTime - now) / 10;\n\t\t\tfor (let i = now; i < endTime; i += subdivisions) {\n\t\t\t\tparam.linearRampToValueAtTime(this.getValueAtTime(i) as number, i);\n\t\t\t}\n\t\t}\n\t\tthis._events.forEachAfter(this.context.currentTime, event => {\n\t\t\tif (event.type === \"cancelScheduledValues\") {\n\t\t\t\tparam.cancelScheduledValues(event.time);\n\t\t\t} else if (event.type === \"setTargetAtTime\") {\n\t\t\t\tparam.setTargetAtTime(event.value, event.time, event.constant);\n\t\t\t} else {\n\t\t\t\tparam[event.type](event.value, event.time);\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Replace the Param's internal AudioParam. Will apply scheduled curves \n\t * onto the parameter and replace the connections.\n\t */\n\tsetParam(param: AudioParam): this {\n\t\tassert(this._swappable, \"The Param must be assigned as 'swappable' in the constructor\");\n\t\tconst input = this.input as GainNode;\n\t\tinput.disconnect(this._param);\n\t\tthis.apply(param);\n\t\tthis._param = param;\n\t\tinput.connect(this._param);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._events.dispose();\n\t\treturn this;\n\t}\n\n\tget defaultValue(): UnitMap[TypeName] {\n\t\treturn this._toType(this._param.defaultValue);\n\t}\n\n\t//-------------------------------------\n\t// \tAUTOMATION CURVE CALCULATIONS\n\t// \tMIT License, copyright (c) 2014 Jordan Santell\n\t//-------------------------------------\n\n\t// Calculates the the value along the curve produced by setTargetAtTime\n\tprotected _exponentialApproach(t0: number, v0: number, v1: number, timeConstant: number, t: number): number {\n\t\treturn v1 + (v0 - v1) * Math.exp(-(t - t0) / timeConstant);\n\t}\n\n\t// Calculates the the value along the curve produced by linearRampToValueAtTime\n\tprotected _linearInterpolate(t0: number, v0: number, t1: number, v1: number, t: number): number {\n\t\treturn v0 + (v1 - v0) * ((t - t0) / (t1 - t0));\n\t}\n\n\t// Calculates the the value along the curve produced by exponentialRampToValueAtTime\n\tprotected _exponentialInterpolate(t0: number, v0: number, t1: number, v1: number, t: number): number {\n\t\treturn v0 * Math.pow(v1 / v0, (t - t0) / (t1 - t0));\n\t}\n}\n", "import { isAudioNode, isAudioParam } from \"../util/AdvancedTypeCheck\";\nimport { isDefined } from \"../util/TypeCheck\";\nimport { Param } from \"./Param\";\nimport { ToneWithContext, ToneWithContextOptions } from \"./ToneWithContext\";\nimport { assert, warn } from \"../util/Debug\";\n\nexport type InputNode = ToneAudioNode | AudioNode | Param<any> | AudioParam;\nexport type OutputNode = ToneAudioNode | AudioNode;\n\ninterface ChannelProperties {\n\tchannelCount: number;\n\tchannelCountMode: ChannelCountMode;\n\tchannelInterpretation: ChannelInterpretation;\n}\n\n/**\n * The possible options for this node\n */\nexport type ToneAudioNodeOptions = ToneWithContextOptions;\n\n/**\n * ToneAudioNode is the base class for classes which process audio.\n */\nexport abstract class ToneAudioNode<Options extends ToneAudioNodeOptions = ToneAudioNodeOptions>\n\textends ToneWithContext<Options> {\n\n\t/**\n\t * The name of the class\n\t */\n\tabstract readonly name: string = \"ToneAudioNode\";\n\n\t/**\n\t * The input node or nodes. If the object is a source,\n\t * it does not have any input and this.input is undefined.\n\t */\n\tabstract input: InputNode | undefined;\n\n\t/**\n\t * The output nodes. If the object is a sink,\n\t * it does not have any output and this.output is undefined.\n\t */\n\tabstract output: OutputNode | undefined;\n\n\t/**\n\t * The number of inputs feeding into the AudioNode.\n\t * For source nodes, this will be 0.\n\t * @example\n\t * const node = new Tone.Gain();\n\t * console.log(node.numberOfInputs);\n\t */\n\tget numberOfInputs(): number {\n\t\tif (isDefined(this.input)) {\n\t\t\tif (isAudioParam(this.input) || this.input instanceof Param) {\n\t\t\t\treturn 1;\n\t\t\t} else {\n\t\t\t\treturn this.input.numberOfInputs;\n\t\t\t}\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * The number of outputs of the AudioNode.\n\t * @example\n\t * const node = new Tone.Gain();\n\t * console.log(node.numberOfOutputs);\n\t */\n\tget numberOfOutputs(): number {\n\t\tif (isDefined(this.output)) {\n\t\t\treturn this.output.numberOfOutputs;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * List all of the node that must be set to match the ChannelProperties\n\t */\n\tprotected _internalChannels: OutputNode[] = [];\n\n\t//-------------------------------------\n\t// AUDIO PROPERTIES\n\t//-------------------------------------\n\n\t/**\n\t * Used to decide which nodes to get/set properties on\n\t */\n\tprivate _isAudioNode(node: any): node is AudioNode | ToneAudioNode {\n\t\treturn isDefined(node) && (node instanceof ToneAudioNode || isAudioNode(node));\n\t}\n\n\t/**\n\t * Get all of the audio nodes (either internal or input/output) which together\n\t * make up how the class node responds to channel input/output\n\t */\n\tprivate _getInternalNodes(): OutputNode[] {\n\t\tconst nodeList = this._internalChannels.slice(0);\n\t\tif (this._isAudioNode(this.input)) {\n\t\t\tnodeList.push(this.input);\n\t\t}\n\t\tif (this._isAudioNode(this.output)) {\n\t\t\tif (this.input !== this.output) {\n\t\t\t\tnodeList.push(this.output);\n\t\t\t}\n\t\t}\n\t\treturn nodeList;\n\t}\n\n\t/**\n\t * Set the audio options for this node such as channelInterpretation\n\t * channelCount, etc.\n\t * @param options\n\t */\n\tprivate _setChannelProperties(options: ChannelProperties): void {\n\t\tconst nodeList = this._getInternalNodes();\n\t\tnodeList.forEach(node => {\n\t\t\tnode.channelCount = options.channelCount;\n\t\t\tnode.channelCountMode = options.channelCountMode;\n\t\t\tnode.channelInterpretation = options.channelInterpretation;\n\t\t});\n\t}\n\n\t/**\n\t * Get the current audio options for this node such as channelInterpretation\n\t * channelCount, etc.\n\t */\n\tprivate _getChannelProperties(): ChannelProperties {\n\t\tconst nodeList = this._getInternalNodes();\n\t\tassert(nodeList.length > 0, \"ToneAudioNode does not have any internal nodes\");\n\t\t// use the first node to get properties\n\t\t// they should all be the same\n\t\tconst node = nodeList[0];\n\t\treturn {\n\t\t\tchannelCount: node.channelCount,\n\t\t\tchannelCountMode: node.channelCountMode,\n\t\t\tchannelInterpretation: node.channelInterpretation,\n\t\t};\n\t}\n\n\t/**\n\t * channelCount is the number of channels used when up-mixing and down-mixing\n\t * connections to any inputs to the node. The default value is 2 except for\n\t * specific nodes where its value is specially determined.\n\t */\n\tget channelCount(): number {\n\t\treturn this._getChannelProperties().channelCount;\n\t}\n\tset channelCount(channelCount) {\n\t\tconst props = this._getChannelProperties();\n\t\t// merge it with the other properties\n\t\tthis._setChannelProperties(Object.assign(props, { channelCount }));\n\t}\n\n\t/**\n\t * channelCountMode determines how channels will be counted when up-mixing and\n\t * down-mixing connections to any inputs to the node.\n\t * The default value is \"max\". This attribute has no effect for nodes with no inputs.\n\t * * \"max\" - computedNumberOfChannels is the maximum of the number of channels of all connections to an input. In this mode channelCount is ignored.\n\t * * \"clamped-max\" - computedNumberOfChannels is determined as for \"max\" and then clamped to a maximum value of the given channelCount.\n\t * * \"explicit\" - computedNumberOfChannels is the exact value as specified by the channelCount.\n\t */\n\tget channelCountMode(): ChannelCountMode {\n\t\treturn this._getChannelProperties().channelCountMode;\n\t}\n\tset channelCountMode(channelCountMode) {\n\t\tconst props = this._getChannelProperties();\n\t\t// merge it with the other properties\n\t\tthis._setChannelProperties(Object.assign(props, { channelCountMode }));\n\t}\n\n\t/**\n\t * channelInterpretation determines how individual channels will be treated\n\t * when up-mixing and down-mixing connections to any inputs to the node.\n\t * The default value is \"speakers\".\n\t */\n\tget channelInterpretation(): ChannelInterpretation {\n\t\treturn this._getChannelProperties().channelInterpretation;\n\t}\n\tset channelInterpretation(channelInterpretation) {\n\t\tconst props = this._getChannelProperties();\n\t\t// merge it with the other properties\n\t\tthis._setChannelProperties(Object.assign(props, { channelInterpretation }));\n\t}\n\n\t//-------------------------------------\n\t// CONNECTIONS\n\t//-------------------------------------\n\n\t/**\n\t * connect the output of a ToneAudioNode to an AudioParam, AudioNode, or ToneAudioNode\n\t * @param destination The output to connect to\n\t * @param outputNum The output to connect from\n\t * @param inputNum The input to connect to\n\t */\n\tconnect(destination: InputNode, outputNum = 0, inputNum = 0): this {\n\t\tconnect(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Connect the output to the context's destination node.\n\t * @example\n\t * const osc = new Tone.Oscillator(\"C2\").start();\n\t * osc.toDestination();\n\t */\n\ttoDestination(): this {\n\t\tthis.connect(this.context.destination);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Connect the output to the context's destination node.\n\t * See [[toDestination]]\n\t * @deprecated\n\t */\n\ttoMaster(): this {\n\t\twarn(\"toMaster() has been renamed toDestination()\");\n\t\treturn this.toDestination();\n\t}\n\n\t/**\n\t * disconnect the output\n\t */\n\tdisconnect(destination?: InputNode, outputNum = 0, inputNum = 0): this {\n\t\tdisconnect(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Connect the output of this node to the rest of the nodes in series.\n\t * @example\n\t * const player = new Tone.Player(\"https://tonejs.github.io/audio/drum-samples/handdrum-loop.mp3\");\n\t * player.autostart = true;\n\t * const filter = new Tone.AutoFilter(4).start();\n\t * const distortion = new Tone.Distortion(0.5);\n\t * // connect the player to the filter, distortion and then to the master output\n\t * player.chain(filter, distortion, Tone.Destination);\n\t */\n\tchain(...nodes: InputNode[]): this {\n\t\tconnectSeries(this, ...nodes);\n\t\treturn this;\n\t}\n\n\t/**\n\t * connect the output of this node to the rest of the nodes in parallel.\n\t * @example\n\t * const player = new Tone.Player(\"https://tonejs.github.io/audio/drum-samples/conga-rhythm.mp3\");\n\t * player.autostart = true;\n\t * const pitchShift = new Tone.PitchShift(4).toDestination();\n\t * const filter = new Tone.Filter(\"G5\").toDestination();\n\t * // connect a node to the pitch shift and filter in parallel\n\t * player.fan(pitchShift, filter);\n\t */\n\tfan(...nodes: InputNode[]): this {\n\t\tnodes.forEach(node => this.connect(node));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Dispose and disconnect\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (isDefined(this.input)) {\n\t\t\tif (this.input instanceof ToneAudioNode) {\n\t\t\t\tthis.input.dispose();\n\t\t\t} else if (isAudioNode(this.input)) {\n\t\t\t\tthis.input.disconnect();\n\t\t\t}\n\t\t}\n\t\tif (isDefined(this.output)) {\n\t\t\tif (this.output instanceof ToneAudioNode) {\n\t\t\t\tthis.output.dispose();\n\t\t\t} else if (isAudioNode(this.output)) {\n\t\t\t\tthis.output.disconnect();\n\t\t\t}\n\t\t}\n\t\tthis._internalChannels = [];\n\t\treturn this;\n\t}\n}\n\n//-------------------------------------\n// CONNECTIONS\n//-------------------------------------\n\n/**\n * connect together all of the arguments in series\n * @param nodes\n */\nexport function connectSeries(...nodes: InputNode[]): void {\n\tconst first = nodes.shift();\n\tnodes.reduce((prev, current) => {\n\t\tif (prev instanceof ToneAudioNode) {\n\t\t\tprev.connect(current);\n\t\t} else if (isAudioNode(prev)) {\n\t\t\tconnect(prev, current);\n\t\t}\n\t\treturn current;\n\t}, first);\n}\n\n/**\n * Connect two nodes together so that signal flows from the\n * first node to the second. Optionally specify the input and output channels.\n * @param srcNode The source node\n * @param dstNode The destination node\n * @param outputNumber The output channel of the srcNode\n * @param inputNumber The input channel of the dstNode\n */\nexport function connect(srcNode: OutputNode, dstNode: InputNode, outputNumber = 0, inputNumber = 0): void {\n\n\tassert(isDefined(srcNode), \"Cannot connect from undefined node\");\n\tassert(isDefined(dstNode), \"Cannot connect to undefined node\");\n\n\tif (dstNode instanceof ToneAudioNode || isAudioNode(dstNode)) {\n\t\tassert(dstNode.numberOfInputs > 0, \"Cannot connect to node with no inputs\");\n\t}\n\tassert(srcNode.numberOfOutputs > 0, \"Cannot connect from node with no outputs\");\n\n\t// resolve the input of the dstNode\n\twhile ((dstNode instanceof ToneAudioNode || dstNode instanceof Param)) {\n\t\tif (isDefined(dstNode.input)) {\n\t\t\tdstNode = dstNode.input;\n\t\t}\n\t}\n\n\twhile (srcNode instanceof ToneAudioNode) {\n\t\tif (isDefined(srcNode.output)) {\n\t\t\tsrcNode = srcNode.output;\n\t\t}\n\t}\n\n\t// make the connection\n\tif (isAudioParam(dstNode)) {\n\t\tsrcNode.connect(dstNode as AudioParam, outputNumber);\n\t} else {\n\t\tsrcNode.connect(dstNode, outputNumber, inputNumber);\n\t}\n}\n\n/**\n * Disconnect a node from all nodes or optionally include a destination node and input/output channels.\n * @param srcNode The source node\n * @param dstNode The destination node\n * @param outputNumber The output channel of the srcNode\n * @param inputNumber The input channel of the dstNode\n */\nexport function disconnect(\n\tsrcNode: OutputNode,\n\tdstNode?: InputNode,\n\toutputNumber = 0,\n\tinputNumber = 0,\n): void {\n\n\t// resolve the destination node\n\tif (isDefined(dstNode)) {\n\t\twhile (dstNode instanceof ToneAudioNode) {\n\t\t\tdstNode = dstNode.input;\n\t\t}\n\t}\n\n\t// resolve the src node\n\twhile (!(isAudioNode(srcNode))) {\n\t\tif (isDefined(srcNode.output)) {\n\t\t\tsrcNode = srcNode.output;\n\t\t}\n\t}\n\n\tif (isAudioParam(dstNode)) {\n\t\tsrcNode.disconnect(dstNode, outputNumber);\n\t} else if (isAudioNode(dstNode)) {\n\t\tsrcNode.disconnect(dstNode, outputNumber, inputNumber);\n\t} else {\n\t\tsrcNode.disconnect();\n\t}\n}\n", "import { Param } from \"../context/Param\";\nimport { UnitMap, UnitName } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"./ToneAudioNode\";\n\ninterface GainOptions<TypeName extends UnitName> extends ToneAudioNodeOptions {\n\tgain: UnitMap[TypeName];\n\tunits: TypeName;\n\tconvert: boolean;\n\tminValue?: number;\n\tmaxValue?: number;\n}\n\n/**\n * A thin wrapper around the Native Web Audio GainNode.\n * The GainNode is a basic building block of the Web Audio\n * API and is useful for routing audio and adjusting gains.\n * @category Core\n * @example\n * return Tone.Offline(() => {\n * \tconst gainNode = new Tone.Gain(0).toDestination();\n * \tconst osc = new Tone.Oscillator(30).connect(gainNode).start();\n * \tgainNode.gain.rampTo(1, 0.1);\n * \tgainNode.gain.rampTo(0, 0.4, 0.2);\n * }, 0.7, 1);\n */\nexport class Gain<TypeName extends \"gain\" | \"decibels\" | \"normalRange\" = \"gain\"> extends ToneAudioNode<GainOptions<TypeName>> {\n\n\treadonly name: string = \"Gain\";\n\n\t/**\n\t * The gain parameter of the gain node.\n\t * @example\n\t * const gainNode = new Tone.Gain(0).toDestination();\n\t * const osc = new Tone.Oscillator().connect(gainNode).start();\n\t * gainNode.gain.rampTo(1, 0.1);\n\t * gainNode.gain.rampTo(0, 2, \"+0.5\");\n\t */\n\treadonly gain: Param<TypeName>;\n\n\t/**\n\t * The wrapped GainNode.\n\t */\n\tprivate _gainNode: GainNode = this.context.createGain();\n\n\t// input = output\n\treadonly input: GainNode = this._gainNode;\n\treadonly output: GainNode = this._gainNode;\n\n\t/**\n\t * @param  gain The initial gain of the GainNode\n\t * @param units The units of the gain parameter.\n\t */\n\tconstructor(gain?: UnitMap[TypeName], units?: TypeName);\n\tconstructor(options?: Partial<GainOptions<TypeName>>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Gain.getDefaults(), arguments, [\"gain\", \"units\"]));\n\t\tconst options = optionsFromArguments(Gain.getDefaults(), arguments, [\"gain\", \"units\"]);\n\n\t\tthis.gain = new Param({\n\t\t\tcontext: this.context,\n\t\t\tconvert: options.convert,\n\t\t\tparam: this._gainNode.gain,\n\t\t\tunits: options.units,\n\t\t\tvalue: options.gain,\n\t\t\tminValue: options.minValue,\n\t\t\tmaxValue: options.maxValue,\n\t\t});\n\t\treadOnly(this, \"gain\");\n\t}\n\n\tstatic getDefaults(): GainOptions<any> {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tconvert: true,\n\t\t\tgain: 1,\n\t\t\tunits: \"gain\",\n\t\t});\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._gainNode.disconnect();\n\t\tthis.gain.dispose();\n\t\treturn this;\n\t}\n}\n", "import { Gain } from \"../../core/context/Gain\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Decibels } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\n\ninterface VolumeOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n\tmute: boolean;\n}\n\n/**\n * Volume is a simple volume node, useful for creating a volume fader.\n *\n * @example\n * const vol = new Tone.Volume(-12).toDestination();\n * const osc = new Tone.Oscillator().connect(vol).start();\n * @category Component\n */\nexport class Volume extends ToneAudioNode<VolumeOptions> {\n\n\treadonly name: string = \"Volume\";\n\n\t/**\n\t * the output node\n\t */\n\toutput: Gain<\"decibels\">;\n\n\t/**\n\t * Input and output are the same\n\t */\n\tinput: Gain<\"decibels\">;\n\n\t/**\n\t * The unmuted volume\n\t */\n\tprivate _unmutedVolume: Decibels;\n\n\t/**\n\t * The volume control in decibels.\n\t * @example\n\t * const vol = new Tone.Volume().toDestination();\n\t * const osc = new Tone.Oscillator().connect(vol).start();\n\t * vol.volume.value = -20;\n\t */\n\tvolume: Param<\"decibels\">;\n\n\t/**\n\t * @param volume the initial volume in decibels\n\t */\n\tconstructor(volume?: Decibels);\n\tconstructor(options?: Partial<VolumeOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Volume.getDefaults(), arguments, [\"volume\"]));\n\t\tconst options = optionsFromArguments(Volume.getDefaults(), arguments, [\"volume\"]);\n\n\t\tthis.input = this.output = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.volume,\n\t\t\tunits: \"decibels\",\n\t\t});\n\t\tthis.volume = this.output.gain;\n\t\treadOnly(this, \"volume\");\n\t\tthis._unmutedVolume = options.volume;\n\n\t\t// set the mute initially\n\t\tthis.mute = options.mute;\n\t}\n\n\tstatic getDefaults(): VolumeOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Mute the output.\n\t * @example\n\t * const vol = new Tone.Volume(-12).toDestination();\n\t * const osc = new Tone.Oscillator().connect(vol).start();\n\t * // mute the output\n\t * vol.mute = true;\n\t */\n\tget mute(): boolean {\n\t\treturn this.volume.value === -Infinity;\n\t}\n\tset mute(mute: boolean) {\n\t\tif (!this.mute && mute) {\n\t\t\tthis._unmutedVolume = this.volume.value;\n\t\t\t// maybe it should ramp here?\n\t\t\tthis.volume.value = -Infinity;\n\t\t} else if (this.mute && !mute) {\n\t\t\tthis.volume.value = this._unmutedVolume;\n\t\t}\n\t}\n\n\t/**\n\t * clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.input.dispose();\n\t\tthis.volume.dispose();\n\t\treturn this;\n\t}\n}\n", "import { Volume } from \"../component/channel/Volume\";\nimport { Param } from \"../core/context/Param\";\nimport { OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { Decibels, Frequency, NormalRange, Time } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\n\nexport interface InstrumentOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n}\n\n/**\n * Base-class for all instruments\n */\nexport abstract class Instrument<Options extends InstrumentOptions> extends ToneAudioNode<Options> {\n\n\t/**\n\t * The output and volume triming node\n\t */\n\tprivate _volume: Volume;\n\toutput: OutputNode;\n\n\t/**\n\t * The instrument only has an output\n\t */\n\tinput: undefined;\n\n\t/**\n\t * The volume of the output in decibels.\n\t * @example\n\t * const amSynth = new Tone.AMSynth().toDestination();\n\t * amSynth.volume.value = -6;\n\t * amSynth.triggerAttackRelease(\"G#3\", 0.2);\n\t */\n\tvolume: Param<\"decibels\">;\n\n\t/**\n\t * Keep track of all events scheduled to the transport\n\t * when the instrument is 'synced'\n\t */\n\tprivate _scheduledEvents: number[] = [];\n\n\t/**\n\t * If the instrument is currently synced\n\t */\n\tprivate _synced = false;\n\n\tconstructor(options?: Partial<InstrumentOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Instrument.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Instrument.getDefaults(), arguments);\n\n\t\tthis._volume = this.output = new Volume({\n\t\t\tcontext: this.context,\n\t\t\tvolume: options.volume,\n\t\t});\n\t\tthis.volume = this._volume.volume;\n\t\treadOnly(this, \"volume\");\n\t}\n\n\tstatic getDefaults(): InstrumentOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Sync the instrument to the Transport. All subsequent calls of\n\t * [[triggerAttack]] and [[triggerRelease]] will be scheduled along the transport.\n\t * @example\n\t * const fmSynth = new Tone.FMSynth().toDestination();\n\t * fmSynth.volume.value = -6;\n\t * fmSynth.sync();\n\t * // schedule 3 notes when the transport first starts\n\t * fmSynth.triggerAttackRelease(\"C4\", \"8n\", 0);\n\t * fmSynth.triggerAttackRelease(\"E4\", \"8n\", \"8n\");\n\t * fmSynth.triggerAttackRelease(\"G4\", \"8n\", \"4n\");\n\t * // start the transport to hear the notes\n\t * Tone.Transport.start();\n\t */\n\tsync(): this {\n\t\tif (this._syncState()) {\n\t\t\tthis._syncMethod(\"triggerAttack\", 1);\n\t\t\tthis._syncMethod(\"triggerRelease\", 0);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * set _sync\n\t */\n\tprotected _syncState(): boolean {\n\t\tlet changed = false;\n\t\tif (!this._synced) {\n\t\t\tthis._synced = true;\n\t\t\tchanged = true;\n\t\t}\n\t\treturn changed;\n\t}\n\n\t/**\n\t * Wrap the given method so that it can be synchronized\n\t * @param method Which method to wrap and sync\n\t * @param  timePosition What position the time argument appears in\n\t */\n\tprotected _syncMethod(method: string, timePosition: number): void {\n\t\tconst originalMethod = this[\"_original_\" + method] = this[method];\n\t\tthis[method] = (...args: any[]) => {\n\t\t\tconst time = args[timePosition];\n\t\t\tconst id = this.context.transport.schedule((t) => {\n\t\t\t\targs[timePosition] = t;\n\t\t\t\toriginalMethod.apply(this, args);\n\t\t\t}, time);\n\t\t\tthis._scheduledEvents.push(id);\n\t\t};\n\t}\n\n\t/**\n\t * Unsync the instrument from the Transport\n\t */\n\tunsync(): this {\n\t\tthis._scheduledEvents.forEach(id => this.context.transport.clear(id));\n\t\tthis._scheduledEvents = [];\n\t\tif (this._synced) {\n\t\t\tthis._synced = false;\n\t\t\tthis.triggerAttack = this._original_triggerAttack;\n\t\t\tthis.triggerRelease = this._original_triggerRelease;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Trigger the attack and then the release after the duration.\n\t * @param  note     The note to trigger.\n\t * @param  duration How long the note should be held for before\n\t *                         triggering the release. This value must be greater than 0.\n\t * @param time  When the note should be triggered.\n\t * @param  velocity The velocity the note should be triggered at.\n\t * @example\n\t * const synth = new Tone.Synth().toDestination();\n\t * // trigger \"C4\" for the duration of an 8th note\n\t * synth.triggerAttackRelease(\"C4\", \"8n\");\n\t */\n\ttriggerAttackRelease(note: Frequency, duration: Time, time?: Time, velocity?: NormalRange): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst computedDuration = this.toSeconds(duration);\n\t\tthis.triggerAttack(note, computedTime, velocity);\n\t\tthis.triggerRelease(computedTime + computedDuration);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Start the instrument's note.\n\t * @param note the note to trigger\n\t * @param time the time to trigger the ntoe\n\t * @param velocity the velocity to trigger the note (betwee 0-1)\n\t */\n\tabstract triggerAttack(note: Frequency, time?: Time, velocity?: NormalRange): this;\n\tprivate _original_triggerAttack = this.triggerAttack;\n\n\t/**\n\t * Trigger the release phase of the current note.\n\t * @param time when to trigger the release\n\t */\n\tabstract triggerRelease(...args: any[]): this;\n\tprivate _original_triggerRelease = this.triggerRelease;\n\n\t/**\n\t * clean up\n\t * @returns {Instrument} this\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._volume.dispose();\n\t\tthis.unsync();\n\t\tthis._scheduledEvents = [];\n\t\treturn this;\n\t}\n}\n"],
  "mappings": "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",
  "names": ["insertElementInSet", "cacheTestResult", "createNotSupportedError", "exposeCurrentFrameAndCurrentTime", "getNativeContext", "getOrCreateBackupOfflineAudioContext", "isNativeOfflineAudioContext", "nativeAudioWorkletNodeConstructor", "window", "addActiveInputConnectionToAudioNode", "addPassiveInputConnectionToAudioNode", "connectNativeAudioNodeToNativeAudioNode", "deleteActiveInputConnectionToAudioNode", "disconnectNativeAudioNodeFromNativeAudioNode", "getAudioNodeConnections", "getAudioNodeTailTime", "getEventListenersOfAudioNode", "getNativeAudioNode", "insertElementInSet", "isActiveAudioNode", "isPartOfACycle", "isPassiveAudioNode", "insertElementInSet", "createNativeGainNode", "disconnect", "getUnrenderedAudioWorkletNodes", "createAnalyserNodeRenderer", "createIndexSizeError", "createNativeAnalyserNode", "getNativeContext", "isNativeOfflineAudioContext", "createNativeAnalyserNode", "getNativeAudioNode", "renderInputsOfAudioNode", "DEFAULT_OPTIONS", "audioBufferStore", "cacheTestResult", "createNotSupportedError", "nativeAudioBufferConstructor", "nativeOfflineAudioContextConstructor", "wrapAudioBufferCopyChannelMethods", "wrapAudioBufferCopyChannelMethodsOutOfBounds", "AudioBuffer", "DEFAULT_OPTIONS", "audioNodeConstructor", "createAudioBufferSourceNodeRenderer", "createAudioParam", "createInvalidStateError", "createNativeAudioBufferSourceNode", "getNativeContext", "isNativeOfflineAudioContext", "wrapEventListener", "connectAudioParam", "createNativeAudioBufferSourceNode", "getNativeAudioNode", "renderAutomation", "renderInputsOfAudioNode", "start", "baseAudioContextConstructor", "createInvalidStateError", "createNotSupportedError", "createUnknownError", "mediaElementAudioSourceNodeConstructor", "mediaStreamAudioDestinationNodeConstructor", "mediaStreamAudioSourceNodeConstructor", "mediaStreamTrackAudioSourceNodeConstructor", "nativeAudioContextConstructor", "audioNodeConstructor", "createAudioDestinationNodeRenderer", "createIndexSizeError", "createInvalidStateError", "getNativeContext", "isNativeOfflineAudioContext", "renderInputsOfAudioNode", "renderInputsOfAudioNode", "createAudioParam", "createNativeChannelMergerNode", "createNativeConstantSourceNode", "createNativeScriptProcessorNode", "createNotSupportedError", "getFirstSample", "isNativeOfflineAudioContext", "overwriteAccessors", "nativeAudioWorkletNodeConstructor", "connect", "disconnect", "cacheTestResult", "createIndexSizeError", "createInvalidAccessError", "createNotSupportedError", "eventTargetConstructor", "getNativeContext", "isNativeAudioContext", "isNativeAudioNode", "isNativeAudioParam", "isNativeOfflineAudioContext", "nativeAudioWorkletNodeConstructor", "audioParamAudioNodeStore", "createAudioParamRenderer", "createCancelAndHoldAutomationEvent", "createCancelScheduledValuesAutomationEvent", "createExponentialRampToValueAutomationEvent", "createLinearRampToValueAutomationEvent", "createSetTargetAutomationEvent", "createSetValueAutomationEvent", "createSetValueCurveAutomationEvent", "nativeAudioContextConstructor", "setValueAtTimeUntilPossible", "DEFAULT_OPTIONS", "addUnrenderedAudioWorkletNode", "audioNodeConstructor", "createAudioParam", "createAudioWorkletNodeRenderer", "createNativeAudioWorkletNode", "getAudioNodeConnections", "getBackupOfflineAudioContext", "getNativeContext", "isNativeOfflineAudioContext", "nativeAudioWorkletNodeConstructor", "sanitizeAudioWorkletNodeOptions", "setActiveAudioWorkletNodeInputs", "testAudioWorkletNodeOptionsClonability", "wrapEventListener", "exposeCurrentFrameAndCurrentTime", "connectAudioParam", "connectMultipleOutputs", "createNativeAudioBufferSourceNode", "createNativeChannelMergerNode", "createNativeChannelSplitterNode", "createNativeConstantSourceNode", "createNativeGainNode", "deleteUnrenderedAudioWorkletNode", "disconnectMultipleOutputs", "getNativeAudioNode", "nativeAudioWorkletNodeConstructor", "nativeOfflineAudioContextConstructor", "renderAutomation", "renderInputsOfAudioNode", "renderNativeOfflineAudioContext", "addAudioWorkletModule", "analyserNodeConstructor", "audioBufferConstructor", "audioBufferSourceNodeConstructor", "biquadFilterNodeConstructor", "channelMergerNodeConstructor", "channelSplitterNodeConstructor", "constantSourceNodeConstructor", "convolverNodeConstructor", "decodeAudioData", "delayNodeConstructor", "dynamicsCompressorNodeConstructor", "gainNodeConstructor", "iIRFilterNodeConstructor", "minimalBaseAudioContextConstructor", "oscillatorNodeConstructor", "pannerNodeConstructor", "periodicWaveConstructor", "stereoPannerNodeConstructor", "waveShaperNodeConstructor", "DEFAULT_OPTIONS", "audioNodeConstructor", "createAudioParam", "createBiquadFilterNodeRenderer", "createInvalidAccessError", "createNativeBiquadFilterNode", "getNativeContext", "isNativeOfflineAudioContext", "setAudioNodeTailTime", "connectAudioParam", "createNativeBiquadFilterNode", "getNativeAudioNode", "renderAutomation", "renderInputsOfAudioNode", "DEFAULT_OPTIONS", "audioNodeConstructor", "createChannelMergerNodeRenderer", "createNativeChannelMergerNode", "getNativeContext", "isNativeOfflineAudioContext", "createNativeChannelMergerNode", "getNativeAudioNode", "renderInputsOfAudioNode", "DEFAULT_OPTIONS", "audioNodeConstructor", "createChannelSplitterNodeRenderer", "createNativeChannelSplitterNode", "getNativeContext", "isNativeOfflineAudioContext", "sanitizeChannelSplitterOptions", "createNativeChannelSplitterNode", "getNativeAudioNode", "renderInputsOfAudioNode", "renderInputsOfAudioParam", "createIndexSizeError", "createNativeAudioBufferSourceNode", "DEFAULT_OPTIONS", "audioNodeConstructor", "createAudioParam", "createConstantSourceNodeRendererFactory", "createNativeConstantSourceNode", "getNativeContext", "isNativeOfflineAudioContext", "wrapEventListener", "connectAudioParam", "createNativeConstantSourceNode", "getNativeAudioNode", "renderAutomation", "renderInputsOfAudioNode", "start", "DEFAULT_OPTIONS", "audioNodeConstructor", "createConvolverNodeRenderer", "createNativeConvolverNode", "getNativeContext", "isNativeOfflineAudioContext", "setAudioNodeTailTime", "createNativeConvolverNode", "getNativeAudioNode", "renderInputsOfAudioNode", "createNotSupportedError", "nativeOfflineAudioContextConstructor", "audioBufferStore", "cacheTestResult", "createDataCloneError", "createEncodingError", "getNativeContext", "isNativeContext", "testAudioBufferCopyChannelMethodsOutOfBoundsSupport", "testPromiseSupport", "wrapAudioBufferCopyChannelMethods", "wrapAudioBufferCopyChannelMethodsOutOfBounds", "connectNativeAudioNodeToNativeAudioNode", "getAudioNodeConnections", "getNativeAudioNode", "getNativeAudioParam", "getNativeContext", "isActiveAudioNode", "isNativeOfflineAudioContext", "DEFAULT_OPTIONS", "audioNodeConstructor", "createAudioParam", "createDelayNodeRenderer", "createNativeDelayNode", "getNativeContext", "isNativeOfflineAudioContext", "setAudioNodeTailTime", "connectAudioParam", "createNativeDelayNode", "getNativeAudioNode", "renderAutomation", "renderInputsOfAudioNode", "pickElementFromSet", "getUnrenderedAudioWorkletNodes", "audioParamAudioNodeStore", "getAudioNodeConnections", "getValueForKey", "createIndexSizeError", "DEFAULT_OPTIONS", "audioNodeConstructor", "createAudioParam", "createDynamicsCompressorNodeRenderer", "createNativeDynamicsCompressorNode", "createNotSupportedError", "getNativeContext", "isNativeOfflineAudioContext", "setAudioNodeTailTime", "connectAudioParam", "createNativeDynamicsCompressorNode", "getNativeAudioNode", "renderAutomation", "renderInputsOfAudioNode", "window", "wrapEventListener", "window", "createAbortError", "DEFAULT_OPTIONS", "audioNodeConstructor", "createAudioParam", "createGainNodeRenderer", "createNativeGainNode", "getNativeContext", "isNativeOfflineAudioContext", "connectAudioParam", "createNativeGainNode", "getNativeAudioNode", "renderAutomation", "renderInputsOfAudioNode", "activeAudioWorkletNodeInputsStore", "getValueForKey", "getAudioNodeConnections", "audioNodeTailTimeStore", "getAudioParamConnections", "backupOfflineAudioContextStore", "backupOfflineAudioContextStore", "nativeOfflineAudioContextConstructor", "unrenderedAudioWorkletNodeStore", "DEFAULT_OPTIONS", "audioNodeConstructor", "createNativeIIRFilterNode", "createIIRFilterNodeRenderer", "getNativeContext", "isNativeOfflineAudioContext", "setAudioNodeTailTime", "createNativeAudioBufferSourceNode", "getNativeAudioNode", "nativeOfflineAudioContextConstructor", "renderInputsOfAudioNode", "renderNativeOfflineAudioContext", "disconnectNativeAudioNodeFromNativeAudioNode", "getAudioNodeConnections", "getNativeAudioNode", "getNativeAudioParam", "isActiveAudioNode", "isNativeAudioContext", "isNativeAudioNode", "isNativeAudioParam", "isNativeOfflineAudioContext", "nativeAudioContextConstructor", "window", "window", "isNativeAudioContext", "isNativeOfflineAudioContext", "nativeOfflineAudioContextConstructor", "window", "cacheTestResult", "testTransferablesSupport", "audioNodeConstructor", "createNativeMediaElementAudioSourceNode", "getNativeContext", "isNativeOfflineAudioContext", "DEFAULT_OPTIONS", "audioNodeConstructor", "createNativeMediaStreamAudioDestinationNode", "getNativeContext", "isNativeOfflineAudioContext", "audioNodeConstructor", "createNativeMediaStreamAudioSourceNode", "getNativeContext", "isNativeOfflineAudioContext", "audioNodeConstructor", "createNativeMediaStreamTrackAudioSourceNode", "getNativeContext", "createInvalidStateError", "createNotSupportedError", "createUnknownError", "minimalBaseAudioContextConstructor", "nativeAudioContextConstructor", "audioDestinationNodeConstructor", "createAudioListener", "eventTargetConstructor", "isNativeOfflineAudioContext", "unrenderedAudioWorkletNodeStore", "wrapEventListener", "DEFAULT_OPTIONS", "cacheTestResult", "createInvalidStateError", "createNativeOfflineAudioContext", "minimalBaseAudioContextConstructor", "startRendering", "insertElementInSet", "isNativeAudioNode", "connect", "disconnect", "cacheTestResult", "createIndexSizeError", "window", "start", "start", "addSilentConnection", "cacheTestResult", "testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport", "testAudioBufferSourceNodeStartMethodOffsetClampingSupport", "testAudioBufferSourceNodeStopMethodNullifiedBufferSupport", "testAudioScheduledSourceNodeStartMethodNegativeParametersSupport", "testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport", "testAudioScheduledSourceNodeStopMethodNegativeParametersSupport", "wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls", "window", "createNativeGainNode", "overwriteAccessors", "window", "createInvalidStateError", "createNativeAudioWorkletNodeFaker", "createNativeGainNode", "createNotSupportedError", "monitorConnections", "nativeAudioWorkletNodeConstructor", "connectMultipleOutputs", "createIndexSizeError", "createInvalidStateError", "createNativeChannelMergerNode", "createNativeChannelSplitterNode", "createNativeConstantSourceNode", "createNativeGainNode", "createNativeScriptProcessorNode", "createNotSupportedError", "disconnectMultipleOutputs", "exposeCurrentFrameAndCurrentTime", "getActiveAudioWorkletNodeInputs", "monitorConnections", "nativeAudioContextConstructor", "wrapChannelMergerNode", "addSilentConnection", "cacheTestResult", "createNativeConstantSourceNodeFaker", "testAudioScheduledSourceNodeStartMethodNegativeParametersSupport", "testAudioScheduledSourceNodeStopMethodNegativeParametersSupport", "addSilentConnection", "createNativeAudioBufferSourceNode", "createNativeGainNode", "monitorConnections", "createNotSupportedError", "overwriteAccessors", "createNotSupportedError", "createNativeIIRFilterNodeFaker", "createInvalidAccessError", "createInvalidStateError", "createNativeScriptProcessorNode", "createNotSupportedError", "createInvalidStateError", "isNativeOfflineAudioContext", "window", "addSilentConnection", "cacheTestResult", "testAudioScheduledSourceNodeStartMethodNegativeParametersSupport", "testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport", "testAudioScheduledSourceNodeStopMethodNegativeParametersSupport", "wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls", "createNativePannerNodeFaker", "connectNativeAudioNodeToNativeAudioNode", "createInvalidStateError", "createNativeChannelMergerNode", "createNativeGainNode", "createNativeScriptProcessorNode", "createNativeWaveShaperNode", "createNotSupportedError", "disconnectNativeAudioNodeFromNativeAudioNode", "getFirstSample", "monitorConnections", "createIndexSizeError", "createNotSupportedError", "createNativeChannelMergerNode", "createNativeChannelSplitterNode", "createNativeGainNode", "createNativeWaveShaperNode", "createNotSupportedError", "monitorConnections", "nativeStereoPannerNodeFakerFactory", "createConnectedNativeAudioBufferSourceNode", "createInvalidStateError", "createNativeWaveShaperNodeFaker", "isDCCurve", "monitorConnections", "nativeAudioContextConstructor", "overwriteAccessors", "createConnectedNativeAudioBufferSourceNode", "createInvalidStateError", "createNativeGainNode", "isDCCurve", "monitorConnections", "DEFAULT_OPTIONS", "baseAudioContextConstructor", "cacheTestResult", "createInvalidStateError", "createNativeOfflineAudioContext", "startRendering", "DEFAULT_OPTIONS", "audioNodeConstructor", "createAudioParam", "createNativeOscillatorNode", "createOscillatorNodeRenderer", "getNativeContext", "isNativeOfflineAudioContext", "wrapEventListener", "connectAudioParam", "createNativeOscillatorNode", "getNativeAudioNode", "renderAutomation", "renderInputsOfAudioNode", "start", "DEFAULT_OPTIONS", "audioNodeConstructor", "createAudioParam", "createNativePannerNode", "createPannerNodeRenderer", "getNativeContext", "isNativeOfflineAudioContext", "setAudioNodeTailTime", "connectAudioParam", "createNativeChannelMergerNode", "createNativeConstantSourceNode", "createNativeGainNode", "createNativePannerNode", "getNativeAudioNode", "nativeOfflineAudioContextConstructor", "renderAutomation", "renderInputsOfAudioNode", "renderNativeOfflineAudioContext", "DEFAULT_OPTIONS", "createNativePeriodicWave", "getNativeContext", "sanitizePeriodicWaveOptions", "renderInputsOfAudioParam", "getAudioNodeConnections", "getAudioNodeRenderer", "isPartOfACycle", "getAudioNodeRenderer", "getAudioParamConnections", "isPartOfACycle", "cacheTestResult", "createNativeGainNode", "createNativeScriptProcessorNode", "activeAudioWorkletNodeInputsStore", "audioNodeTailTimeStore", "audioBufferStore", "cacheTestResult", "getAudioNodeRenderer", "getUnrenderedAudioWorkletNodes", "renderNativeOfflineAudioContext", "testAudioBufferCopyChannelMethodsOutOfBoundsSupport", "wrapAudioBufferCopyChannelMethods", "wrapAudioBufferCopyChannelMethodsOutOfBounds", "DEFAULT_OPTIONS", "audioNodeConstructor", "createAudioParam", "createNativeStereoPannerNode", "createStereoPannerNodeRenderer", "getNativeContext", "isNativeOfflineAudioContext", "connectAudioParam", "createNativeStereoPannerNode", "getNativeAudioNode", "renderAutomation", "renderInputsOfAudioNode", "nativeAudioBufferConstructor", "nativeOfflineAudioContextConstructor", "nativeAudioContextConstructor", "nativeOfflineAudioContextConstructor", "nativeAudioContextConstructor", "nativeOfflineAudioContextConstructor", "isSupported", "nativeAudioWorkletNodeConstructor", "nativeOfflineAudioContextConstructor", "nativeAudioWorkletNodeConstructor", "nativeOfflineAudioContextConstructor", "nativeOfflineAudioContextConstructor", "nativeOfflineAudioContextConstructor", "nativeOfflineAudioContextConstructor", "nativeOfflineAudioContextConstructor", "window", "nativeAudioContextConstructor", "createNativeGainNode", "nativeOfflineAudioContextConstructor", "nativeOfflineAudioContextConstructor", "DEFAULT_OPTIONS", "audioNodeConstructor", "createInvalidStateError", "createNativeWaveShaperNode", "createWaveShaperNodeRenderer", "getNativeContext", "isNativeOfflineAudioContext", "setAudioNodeTailTime", "createNativeWaveShaperNode", "getNativeAudioNode", "renderInputsOfAudioNode", "convertNumberToUnsignedLong", "createIndexSizeError", "convertNumberToUnsignedLong", "copyFromChannel", "copyToChannel", "overwriteAccessors", "createInvalidStateError", "monitorConnections", "start", "disconnect", "window", "isNativeAudioNode", "window", "isNativeAudioNode", "window", "isNativeAudioNode", "window", "isAudioNode", "isAudioNode", "start", "log", "isAudioNode"]
}
