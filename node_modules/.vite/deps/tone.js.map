{
  "version": 3,
  "sources": ["../../tone/Tone/core/util/StateTimeline.ts", "../../tone/Tone/source/OneShotSource.ts", "../../tone/Tone/signal/ToneConstantSource.ts", "../../tone/Tone/signal/Signal.ts", "../../tone/Tone/core/clock/TickParam.ts", "../../tone/Tone/core/clock/TickSignal.ts", "../../tone/Tone/core/clock/TickSource.ts", "../../tone/Tone/core/clock/Clock.ts", "../../tone/Tone/core/context/Delay.ts", "../../tone/Tone/core/context/Offline.ts", "../../tone/Tone/core/context/ToneAudioBuffers.ts", "../../tone/Tone/core/type/Midi.ts", "../../tone/Tone/core/type/Ticks.ts", "../../tone/Tone/core/util/Draw.ts", "../../tone/Tone/core/util/IntervalTimeline.ts", "../../tone/Tone/core/type/Units.ts", "../../tone/Tone/core/context/Destination.ts", "../../tone/Tone/core/util/TimelineValue.ts", "../../tone/Tone/core/clock/TransportEvent.ts", "../../tone/Tone/core/clock/TransportRepeatEvent.ts", "../../tone/Tone/core/clock/Transport.ts", "../../tone/Tone/source/Source.ts", "../../tone/Tone/source/buffer/ToneBufferSource.ts", "../../tone/Tone/source/Noise.ts", "../../tone/Tone/source/UserMedia.ts", "../../tone/Tone/source/oscillator/OscillatorInterface.ts", "../../tone/Tone/source/oscillator/ToneOscillatorNode.ts", "../../tone/Tone/source/oscillator/Oscillator.ts", "../../tone/Tone/signal/SignalOperator.ts", "../../tone/Tone/signal/WaveShaper.ts", "../../tone/Tone/signal/AudioToGain.ts", "../../tone/Tone/signal/Multiply.ts", "../../tone/Tone/source/oscillator/AMOscillator.ts", "../../tone/Tone/source/oscillator/FMOscillator.ts", "../../tone/Tone/source/oscillator/PulseOscillator.ts", "../../tone/Tone/source/oscillator/FatOscillator.ts", "../../tone/Tone/source/oscillator/PWMOscillator.ts", "../../tone/Tone/source/oscillator/OmniOscillator.ts", "../../tone/Tone/signal/Add.ts", "../../tone/Tone/signal/Scale.ts", "../../tone/Tone/signal/Zero.ts", "../../tone/Tone/source/oscillator/LFO.ts", "../../tone/Tone/core/util/Decorator.ts", "../../tone/Tone/source/buffer/Player.ts", "../../tone/Tone/source/buffer/Players.ts", "../../tone/Tone/source/buffer/GrainPlayer.ts", "../../tone/Tone/signal/Abs.ts", "../../tone/Tone/signal/GainToAudio.ts", "../../tone/Tone/signal/Negate.ts", "../../tone/Tone/signal/Subtract.ts", "../../tone/Tone/signal/GreaterThanZero.ts", "../../tone/Tone/signal/GreaterThan.ts", "../../tone/Tone/signal/Pow.ts", "../../tone/Tone/signal/ScaleExp.ts", "../../tone/Tone/signal/SyncedSignal.ts", "../../tone/Tone/component/envelope/Envelope.ts", "../../tone/Tone/instrument/Monophonic.ts", "../../tone/Tone/component/envelope/AmplitudeEnvelope.ts", "../../tone/Tone/instrument/Synth.ts", "../../tone/Tone/instrument/ModulationSynth.ts", "../../tone/Tone/instrument/AMSynth.ts", "../../tone/Tone/component/filter/BiquadFilter.ts", "../../tone/Tone/component/filter/Filter.ts", "../../tone/Tone/component/envelope/FrequencyEnvelope.ts", "../../tone/Tone/instrument/MonoSynth.ts", "../../tone/Tone/instrument/DuoSynth.ts", "../../tone/Tone/instrument/FMSynth.ts", "../../tone/Tone/instrument/MetalSynth.ts", "../../tone/Tone/instrument/MembraneSynth.ts", "../../tone/Tone/instrument/NoiseSynth.ts", "../../tone/Tone/core/worklet/WorkletGlobalScope.ts", "../../tone/Tone/core/worklet/ToneAudioWorklet.ts", "../../tone/Tone/core/worklet/ToneAudioWorkletProcessor.worklet.ts", "../../tone/Tone/core/worklet/SingleIOProcessor.worklet.ts", "../../tone/Tone/core/worklet/DelayLine.worklet.ts", "../../tone/Tone/component/filter/FeedbackCombFilter.worklet.ts", "../../tone/Tone/component/filter/FeedbackCombFilter.ts", "../../tone/Tone/component/filter/OnePoleFilter.ts", "../../tone/Tone/component/filter/LowpassCombFilter.ts", "../../tone/Tone/instrument/PluckSynth.ts", "../../tone/Tone/instrument/PolySynth.ts", "../../tone/Tone/instrument/Sampler.ts", "../../tone/Tone/event/ToneEvent.ts", "../../tone/Tone/event/Loop.ts", "../../tone/Tone/event/Part.ts", "../../tone/Tone/event/PatternGenerator.ts", "../../tone/Tone/event/Pattern.ts", "../../tone/Tone/event/Sequence.ts", "../../tone/Tone/component/channel/CrossFade.ts", "../../tone/Tone/effect/Effect.ts", "../../tone/Tone/effect/LFOEffect.ts", "../../tone/Tone/effect/AutoFilter.ts", "../../tone/Tone/component/channel/Panner.ts", "../../tone/Tone/effect/AutoPanner.ts", "../../tone/Tone/component/analysis/Follower.ts", "../../tone/Tone/effect/AutoWah.ts", "../../tone/Tone/effect/BitCrusher.worklet.ts", "../../tone/Tone/effect/BitCrusher.ts", "../../tone/Tone/effect/Chebyshev.ts", "../../tone/Tone/component/channel/Split.ts", "../../tone/Tone/component/channel/Merge.ts", "../../tone/Tone/effect/StereoEffect.ts", "../../tone/Tone/effect/StereoFeedbackEffect.ts", "../../tone/Tone/effect/Chorus.ts", "../../tone/Tone/effect/Distortion.ts", "../../tone/Tone/effect/FeedbackEffect.ts", "../../tone/Tone/effect/FeedbackDelay.ts", "../../tone/Tone/component/filter/PhaseShiftAllpass.ts", "../../tone/Tone/effect/FrequencyShifter.ts", "../../tone/Tone/effect/Freeverb.ts", "../../tone/Tone/effect/JCReverb.ts", "../../tone/Tone/effect/StereoXFeedbackEffect.ts", "../../tone/Tone/effect/PingPongDelay.ts", "../../tone/Tone/effect/PitchShift.ts", "../../tone/Tone/effect/Phaser.ts", "../../tone/Tone/effect/Reverb.ts", "../../tone/Tone/component/channel/MidSideSplit.ts", "../../tone/Tone/component/channel/MidSideMerge.ts", "../../tone/Tone/effect/MidSideEffect.ts", "../../tone/Tone/effect/StereoWidener.ts", "../../tone/Tone/effect/Tremolo.ts", "../../tone/Tone/effect/Vibrato.ts", "../../tone/Tone/component/analysis/Analyser.ts", "../../tone/Tone/component/analysis/MeterBase.ts", "../../tone/Tone/component/analysis/Meter.ts", "../../tone/Tone/component/analysis/FFT.ts", "../../tone/Tone/component/analysis/DCMeter.ts", "../../tone/Tone/component/analysis/Waveform.ts", "../../tone/Tone/component/channel/Solo.ts", "../../tone/Tone/component/channel/PanVol.ts", "../../tone/Tone/component/channel/Channel.ts", "../../tone/Tone/component/channel/Mono.ts", "../../tone/Tone/component/channel/MultibandSplit.ts", "../../tone/Tone/core/context/Listener.ts", "../../tone/Tone/component/channel/Panner3D.ts", "../../tone/Tone/component/channel/Recorder.ts", "../../tone/Tone/component/dynamics/Compressor.ts", "../../tone/Tone/component/dynamics/Gate.ts", "../../tone/Tone/component/dynamics/Limiter.ts", "../../tone/Tone/component/dynamics/MidSideCompressor.ts", "../../tone/Tone/component/dynamics/MultibandCompressor.ts", "../../tone/Tone/component/filter/EQ3.ts", "../../tone/Tone/component/filter/Convolver.ts", "../../tone/Tone/index.ts"],
  "sourcesContent": ["import { Seconds } from \"../type/Units\";\nimport { Timeline, TimelineEvent } from \"./Timeline\";\nimport { assertRange } from \"./Debug\";\n\nexport type BasicPlaybackState = \"started\" | \"stopped\";\nexport type PlaybackState = BasicPlaybackState | \"paused\";\n\nexport interface StateTimelineEvent extends TimelineEvent {\n\tstate: PlaybackState;\n}\n\n/**\n * A Timeline State. Provides the methods: `setStateAtTime(\"state\", time)` and `getValueAtTime(time)`\n * @param initial The initial state of the StateTimeline.  Defaults to `undefined`\n */\nexport class StateTimeline<AdditionalOptions extends {} = {}> extends Timeline<StateTimelineEvent & AdditionalOptions> {\n\n\treadonly name: string = \"StateTimeline\";\n\n\t/**\n\t * The initial state\n\t */\n\tprivate _initial: PlaybackState;\n\n\tconstructor(initial: PlaybackState = \"stopped\") {\n\t\tsuper();\n\t\tthis._initial = initial;\n\t\tthis.setStateAtTime(this._initial, 0);\n\t}\n\n\t/**\n\t * Returns the scheduled state scheduled before or at\n\t * the given time.\n\t * @param  time  The time to query.\n\t * @return  The name of the state input in setStateAtTime.\n\t */\n\tgetValueAtTime(time: Seconds): PlaybackState {\n\t\tconst event = this.get(time);\n\t\tif (event !== null) {\n\t\t\treturn event.state;\n\t\t} else {\n\t\t\treturn this._initial;\n\t\t}\n\t}\n\n\t/**\n\t * Add a state to the timeline.\n\t * @param  state The name of the state to set.\n\t * @param  time  The time to query.\n\t * @param options Any additional options that are needed in the timeline.\n\t */\n\tsetStateAtTime(state: PlaybackState, time: Seconds, options?: AdditionalOptions): this {\n\t\tassertRange(time, 0);\n\t\tthis.add(Object.assign({}, options, {\n\t\t\tstate,\n\t\t\ttime,\n\t\t}));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Return the event before the time with the given state\n\t * @param  state The state to look for\n\t * @param  time  When to check before\n\t * @return  The event with the given state before the time\n\t */\n\tgetLastState(state: PlaybackState, time: number): StateTimelineEvent & AdditionalOptions | undefined {\n\t\t// time = this.toSeconds(time);\n\t\tconst index = this._search(time);\n\t\tfor (let i = index; i >= 0; i--) {\n\t\t\tconst event = this._timeline[i];\n\t\t\tif (event.state === state) {\n\t\t\t\treturn event;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Return the event after the time with the given state\n\t * @param  state The state to look for\n\t * @param  time  When to check from\n\t * @return  The event with the given state after the time\n\t */\n\tgetNextState(state: PlaybackState, time: number): StateTimelineEvent & AdditionalOptions | undefined {\n\t\t// time = this.toSeconds(time);\n\t\tconst index = this._search(time);\n\t\tif (index !== -1) {\n\t\t\tfor (let i = index; i < this._timeline.length; i++) {\n\t\t\t\tconst event = this._timeline[i];\n\t\t\t\tif (event.state === state) {\n\t\t\t\t\treturn event;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n", "import { Gain } from \"../core/context/Gain\";\nimport {\n\tToneAudioNode,\n\tToneAudioNodeOptions,\n} from \"../core/context/ToneAudioNode\";\nimport { GainFactor, Seconds, Time } from \"../core/type/Units\";\nimport { noOp } from \"../core/util/Interface\";\nimport { assert } from \"../core/util/Debug\";\nimport { BasicPlaybackState } from \"../core/util/StateTimeline\";\n\nexport type OneShotSourceCurve = \"linear\" | \"exponential\";\n\ntype onEndedCallback = (source: OneShotSource<any>) => void;\n\nexport interface OneShotSourceOptions extends ToneAudioNodeOptions {\n\tonended: onEndedCallback;\n\tfadeIn: Time;\n\tfadeOut: Time;\n\tcurve: OneShotSourceCurve;\n}\n\n/**\n * Base class for fire-and-forget nodes\n */\nexport abstract class OneShotSource<\n\tOptions extends ToneAudioNodeOptions\n> extends ToneAudioNode<Options> {\n\t/**\n\t * The callback to invoke after the\n\t * source is done playing.\n\t */\n\tonended: onEndedCallback = noOp;\n\n\t/**\n\t * Sources do not have input nodes\n\t */\n\tinput: undefined;\n\n\t/**\n\t * The start time\n\t */\n\tprotected _startTime = -1;\n\n\t/**\n\t * The stop time\n\t */\n\tprotected _stopTime = -1;\n\n\t/**\n\t * The id of the timeout\n\t */\n\tprivate _timeout = -1;\n\n\t/**\n\t * The public output node\n\t */\n\toutput: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\n\t/**\n\t * The output gain node.\n\t */\n\tprotected _gainNode = this.output;\n\n\t/**\n\t * The fadeIn time of the amplitude envelope.\n\t */\n\tprotected _fadeIn: Time;\n\n\t/**\n\t * The fadeOut time of the amplitude envelope.\n\t */\n\tprotected _fadeOut: Time;\n\n\t/**\n\t * The curve applied to the fades, either \"linear\" or \"exponential\"\n\t */\n\tprotected _curve: OneShotSourceCurve;\n\n\tconstructor(options: OneShotSourceOptions) {\n\t\tsuper(options);\n\n\t\tthis._fadeIn = options.fadeIn;\n\t\tthis._fadeOut = options.fadeOut;\n\t\tthis._curve = options.curve;\n\t\tthis.onended = options.onended;\n\t}\n\n\tstatic getDefaults(): OneShotSourceOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tcurve: \"linear\" as OneShotSourceCurve,\n\t\t\tfadeIn: 0,\n\t\t\tfadeOut: 0,\n\t\t\tonended: noOp,\n\t\t});\n\t}\n\n\t/**\n\t * Stop the source node\n\t */\n\tprotected abstract _stopSource(time: Seconds): void;\n\n\t/**\n\t * Start the source node at the given time\n\t * @param  time When to start the node\n\t */\n\tprotected abstract start(time?: Time): this;\n\t/**\n\t * Start the source at the given time\n\t * @param  time When to start the source\n\t */\n\tprotected _startGain(time: Seconds, gain: GainFactor = 1): this {\n\t\tassert(\n\t\t\tthis._startTime === -1,\n\t\t\t\"Source cannot be started more than once\"\n\t\t);\n\t\t// apply a fade in envelope\n\t\tconst fadeInTime = this.toSeconds(this._fadeIn);\n\n\t\t// record the start time\n\t\tthis._startTime = time + fadeInTime;\n\t\tthis._startTime = Math.max(this._startTime, this.context.currentTime);\n\n\t\t// schedule the envelope\n\t\tif (fadeInTime > 0) {\n\t\t\tthis._gainNode.gain.setValueAtTime(0, time);\n\t\t\tif (this._curve === \"linear\") {\n\t\t\t\tthis._gainNode.gain.linearRampToValueAtTime(\n\t\t\t\t\tgain,\n\t\t\t\t\ttime + fadeInTime\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tthis._gainNode.gain.exponentialApproachValueAtTime(\n\t\t\t\t\tgain,\n\t\t\t\t\ttime,\n\t\t\t\t\tfadeInTime\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._gainNode.gain.setValueAtTime(gain, time);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the source node at the given time.\n\t * @param time When to stop the source\n\t */\n\tstop(time?: Time): this {\n\t\tthis.log(\"stop\", time);\n\t\tthis._stopGain(this.toSeconds(time));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the source at the given time\n\t * @param  time When to stop the source\n\t */\n\tprotected _stopGain(time: Seconds): this {\n\t\tassert(this._startTime !== -1, \"'start' must be called before 'stop'\");\n\t\t// cancel the previous stop\n\t\tthis.cancelStop();\n\n\t\t// the fadeOut time\n\t\tconst fadeOutTime = this.toSeconds(this._fadeOut);\n\n\t\t// schedule the stop callback\n\t\tthis._stopTime = this.toSeconds(time) + fadeOutTime;\n\t\tthis._stopTime = Math.max(this._stopTime, this.context.currentTime);\n\t\tif (fadeOutTime > 0) {\n\t\t\t// start the fade out curve at the given time\n\t\t\tif (this._curve === \"linear\") {\n\t\t\t\tthis._gainNode.gain.linearRampTo(0, fadeOutTime, time);\n\t\t\t} else {\n\t\t\t\tthis._gainNode.gain.targetRampTo(0, fadeOutTime, time);\n\t\t\t}\n\t\t} else {\n\t\t\t// stop any ongoing ramps, and set the value to 0\n\t\t\tthis._gainNode.gain.cancelAndHoldAtTime(time);\n\t\t\tthis._gainNode.gain.setValueAtTime(0, time);\n\t\t}\n\t\tthis.context.clearTimeout(this._timeout);\n\t\tthis._timeout = this.context.setTimeout(() => {\n\t\t\t// allow additional time for the exponential curve to fully decay\n\t\t\tconst additionalTail =\n\t\t\t\tthis._curve === \"exponential\" ? fadeOutTime * 2 : 0;\n\t\t\tthis._stopSource(this.now() + additionalTail);\n\t\t\tthis._onended();\n\t\t}, this._stopTime - this.context.currentTime);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Invoke the onended callback\n\t */\n\tprotected _onended(): void {\n\t\tif (this.onended !== noOp) {\n\t\t\tthis.onended(this);\n\t\t\t// overwrite onended to make sure it only is called once\n\t\t\tthis.onended = noOp;\n\t\t\t// dispose when it's ended to free up for garbage collection only in the online context\n\t\t\tif (!this.context.isOffline) {\n\t\t\t\tconst disposeCallback = () => this.dispose();\n\t\t\t\t// @ts-ignore\n\t\t\t\tif (typeof window.requestIdleCallback !== \"undefined\") {\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\twindow.requestIdleCallback(disposeCallback);\n\t\t\t\t} else {\n\t\t\t\t\tsetTimeout(disposeCallback, 1000);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Get the playback state at the given time\n\t */\n\tgetStateAtTime = function(time: Time): BasicPlaybackState {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (\n\t\t\tthis._startTime !== -1 &&\n\t\t\tcomputedTime >= this._startTime &&\n\t\t\t(this._stopTime === -1 || computedTime <= this._stopTime)\n\t\t) {\n\t\t\treturn \"started\";\n\t\t} else {\n\t\t\treturn \"stopped\";\n\t\t}\n\t};\n\n\t/**\n\t * Get the playback state at the current time\n\t */\n\tget state(): BasicPlaybackState {\n\t\treturn this.getStateAtTime(this.now());\n\t}\n\n\t/**\n\t * Cancel a scheduled stop event\n\t */\n\tcancelStop(): this {\n\t\tthis.log(\"cancelStop\");\n\t\tassert(this._startTime !== -1, \"Source is not started\");\n\t\t// cancel the stop envelope\n\t\tthis._gainNode.gain.cancelScheduledValues(\n\t\t\tthis._startTime + this.sampleTime\n\t\t);\n\t\tthis.context.clearTimeout(this._timeout);\n\t\tthis._stopTime = -1;\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._gainNode.disconnect();\n\t\treturn this;\n\t}\n}\n", "import { connect } from \"../core/context/ToneAudioNode\";\nimport { Param } from \"../core/context/Param\";\nimport { Seconds, Time, UnitMap, UnitName } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { OneShotSource, OneShotSourceOptions } from \"../source/OneShotSource\";\n\nexport interface ToneConstantSourceOptions<TypeName extends UnitName> extends OneShotSourceOptions {\n\tconvert: boolean;\n\toffset: UnitMap[TypeName];\n\tunits: TypeName;\n\tminValue?: number;\n\tmaxValue?: number;\n}\n\n/**\n * Wrapper around the native fire-and-forget ConstantSource.\n * Adds the ability to reschedule the stop method.\n * @category Signal\n */\nexport class ToneConstantSource<TypeName extends UnitName = \"number\"> extends OneShotSource<ToneConstantSourceOptions<TypeName>> {\n\n\treadonly name: string = \"ToneConstantSource\";\n\n\t/**\n\t * The signal generator\n\t */\n\tprivate _source = this.context.createConstantSource();\n\n\t/**\n\t * The offset of the signal generator\n\t */\n\treadonly offset: Param<TypeName>;\n\n\t/**\n\t * @param  offset   The offset value\n\t */\n\tconstructor(offset: UnitMap[TypeName]);\n\tconstructor(options?: Partial<ToneConstantSourceOptions<TypeName>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(ToneConstantSource.getDefaults(), arguments, [\"offset\"]));\n\t\tconst options = optionsFromArguments(ToneConstantSource.getDefaults(), arguments, [\"offset\"]);\n\n\t\tconnect(this._source, this._gainNode);\n\n\t\tthis.offset = new Param({\n\t\t\tcontext: this.context,\n\t\t\tconvert: options.convert,\n\t\t\tparam: this._source.offset,\n\t\t\tunits: options.units,\n\t\t\tvalue: options.offset,\n\t\t\tminValue: options.minValue,\n\t\t\tmaxValue: options.maxValue,\n\t\t});\n\t}\n\n\tstatic getDefaults(): ToneConstantSourceOptions<any> {\n\t\treturn Object.assign(OneShotSource.getDefaults(), {\n\t\t\tconvert: true,\n\t\t\toffset: 1,\n\t\t\tunits: \"number\" as UnitName,\n\t\t});\n\t}\n\n\t/**\n\t * Start the source node at the given time\n\t * @param  time When to start the source\n\t */\n\tstart(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis.log(\"start\", computedTime);\n\t\tthis._startGain(computedTime);\n\t\tthis._source.start(computedTime);\n\t\treturn this;\n\t}\n\n\tprotected _stopSource(time?: Seconds): void {\n\t\tthis._source.stop(time);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this.state === \"started\") {\n\t\t\tthis.stop();\n\t\t}\n\t\tthis._source.disconnect();\n\t\tthis.offset.dispose();\n\t\treturn this;\n\t}\n}\n", "import { AbstractParam } from \"../core/context/AbstractParam\";\nimport { Param } from \"../core/context/Param\";\nimport { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { connect } from \"../core/context/ToneAudioNode\";\nimport { Time, UnitMap, UnitName } from \"../core/type/Units\";\nimport { isAudioParam } from \"../core/util/AdvancedTypeCheck\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { ToneConstantSource } from \"./ToneConstantSource\";\n\nexport interface SignalOptions<TypeName extends UnitName> extends ToneAudioNodeOptions {\n\tvalue: UnitMap[TypeName];\n\tunits: TypeName;\n\tconvert: boolean;\n\tminValue?: number;\n\tmaxValue?: number;\n}\n\n/**\n * A signal is an audio-rate value. Tone.Signal is a core component of the library.\n * Unlike a number, Signals can be scheduled with sample-level accuracy. Tone.Signal\n * has all of the methods available to native Web Audio\n * [AudioParam](http://webaudio.github.io/web-audio-api/#the-audioparam-interface)\n * as well as additional conveniences. Read more about working with signals\n * [here](https://github.com/Tonejs/Tone.js/wiki/Signals).\n *\n * @example\n * const osc = new Tone.Oscillator().toDestination().start();\n * // a scheduleable signal which can be connected to control an AudioParam or another Signal\n * const signal = new Tone.Signal({\n * \tvalue: \"C4\",\n * \tunits: \"frequency\"\n * }).connect(osc.frequency);\n * // the scheduled ramp controls the connected signal\n * signal.rampTo(\"C2\", 4, \"+0.5\");\n * @category Signal\n */\nexport class Signal<TypeName extends UnitName = \"number\"> extends ToneAudioNode<SignalOptions<any>>\n\timplements AbstractParam<TypeName> {\n\n\treadonly name: string = \"Signal\";\n\n\t/**\n\t * Indicates if the value should be overridden on connection.\n\t */\n\treadonly override: boolean = true;\n\n\t/**\n\t * The constant source node which generates the signal\n\t */\n\tprotected _constantSource: ToneConstantSource<TypeName>;\n\treadonly output: OutputNode;\n\tprotected _param: Param<TypeName>;\n\treadonly input: InputNode;\n\n\t/**\n\t * @param value Initial value of the signal\n\t * @param units The unit name, e.g. \"frequency\"\n\t */\n\tconstructor(value?: UnitMap[TypeName], units?: TypeName);\n\tconstructor(options?: Partial<SignalOptions<TypeName>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]));\n\n\t\tconst options = optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]) as SignalOptions<TypeName>;\n\n\t\tthis.output = this._constantSource = new ToneConstantSource({\n\t\t\tcontext: this.context,\n\t\t\tconvert: options.convert,\n\t\t\toffset: options.value,\n\t\t\tunits: options.units,\n\t\t\tminValue: options.minValue,\n\t\t\tmaxValue: options.maxValue,\n\t\t});\n\t\tthis._constantSource.start(0);\n\t\tthis.input = this._param = this._constantSource.offset;\n\t}\n\n\tstatic getDefaults(): SignalOptions<any> {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tconvert: true,\n\t\t\tunits: \"number\" as UnitName,\n\t\t\tvalue: 0,\n\t\t});\n\t}\n\n\tconnect(destination: InputNode, outputNum = 0, inputNum = 0): this {\n\t\t// start it only when connected to something\n\t\tconnectSignal(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._param.dispose();\n\t\tthis._constantSource.dispose();\n\t\treturn this;\n\t}\n\n\t//-------------------------------------\n\t// ABSTRACT PARAM INTERFACE\n\t// just a proxy for the ConstantSourceNode's offset AudioParam\n\t// all docs are generated from AbstractParam.ts\n\t//-------------------------------------\n\n\tsetValueAtTime(value: UnitMap[TypeName], time: Time): this {\n\t\tthis._param.setValueAtTime(value, time);\n\t\treturn this;\n\t}\n\tgetValueAtTime(time: Time): UnitMap[TypeName] {\n\t\treturn this._param.getValueAtTime(time);\n\t}\n\tsetRampPoint(time: Time): this {\n\t\tthis._param.setRampPoint(time);\n\t\treturn this;\n\t}\n\tlinearRampToValueAtTime(value: UnitMap[TypeName], time: Time): this {\n\t\tthis._param.linearRampToValueAtTime(value, time);\n\t\treturn this;\n\t}\n\texponentialRampToValueAtTime(value: UnitMap[TypeName], time: Time): this {\n\t\tthis._param.exponentialRampToValueAtTime(value, time);\n\t\treturn this;\n\t}\n\texponentialRampTo(value: UnitMap[TypeName], rampTime: Time, startTime?: Time): this {\n\t\tthis._param.exponentialRampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\tlinearRampTo(value: UnitMap[TypeName], rampTime: Time, startTime?: Time): this {\n\t\tthis._param.linearRampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\ttargetRampTo(value: UnitMap[TypeName], rampTime: Time, startTime?: Time): this {\n\t\tthis._param.targetRampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\texponentialApproachValueAtTime(value: UnitMap[TypeName], time: Time, rampTime: Time): this {\n\t\tthis._param.exponentialApproachValueAtTime(value, time, rampTime);\n\t\treturn this;\n\t}\n\tsetTargetAtTime(value: UnitMap[TypeName], startTime: Time, timeConstant: number): this {\n\t\tthis._param.setTargetAtTime(value, startTime, timeConstant);\n\t\treturn this;\n\t}\n\tsetValueCurveAtTime(values: UnitMap[TypeName][], startTime: Time, duration: Time, scaling?: number): this {\n\t\tthis._param.setValueCurveAtTime(values, startTime, duration, scaling);\n\t\treturn this;\n\t}\n\tcancelScheduledValues(time: Time): this {\n\t\tthis._param.cancelScheduledValues(time);\n\t\treturn this;\n\t}\n\tcancelAndHoldAtTime(time: Time): this {\n\t\tthis._param.cancelAndHoldAtTime(time);\n\t\treturn this;\n\t}\n\trampTo(value: UnitMap[TypeName], rampTime: Time, startTime?: Time): this {\n\t\tthis._param.rampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\n\tget value(): UnitMap[TypeName] {\n\t\treturn this._param.value;\n\t}\n\tset value(value: UnitMap[TypeName]) {\n\t\tthis._param.value = value;\n\t}\n\n\tget convert(): boolean {\n\t\treturn this._param.convert;\n\t}\n\tset convert(convert: boolean) {\n\t\tthis._param.convert = convert;\n\t}\n\n\tget units(): UnitName {\n\t\treturn this._param.units;\n\t}\n\n\tget overridden(): boolean {\n\t\treturn this._param.overridden;\n\t}\n\tset overridden(overridden: boolean) {\n\t\tthis._param.overridden = overridden;\n\t}\n\n\tget maxValue(): number {\n\t\treturn this._param.maxValue;\n\t}\n\tget minValue(): number {\n\t\treturn this._param.minValue;\n\t}\n\n\t/**\n\t * See [[Param.apply]].\n\t */\n\tapply(param: Param | AudioParam): this {\n\t\tthis._param.apply(param);\n\t\treturn this;\n\t}\n}\n\n/**\n * When connecting from a signal, it's necessary to zero out the node destination\n * node if that node is also a signal. If the destination is not 0, then the values\n * will be summed. This method insures that the output of the destination signal will\n * be the same as the source signal, making the destination signal a pass through node.\n * @param signal The output signal to connect from\n * @param destination the destination to connect to\n * @param outputNum the optional output number\n * @param inputNum the input number\n */\nexport function connectSignal(signal: OutputNode, destination: InputNode, outputNum?: number, inputNum?: number): void {\n\tif (destination instanceof Param || isAudioParam(destination) ||\n\t\t(destination instanceof Signal && destination.override)) {\n\t\t// cancel changes\n\t\tdestination.cancelScheduledValues(0);\n\t\t// reset the value\n\t\tdestination.setValueAtTime(0, 0);\n\t\t// mark the value as overridden\n\t\tif (destination instanceof Signal) {\n\t\t\tdestination.overridden = true;\n\t\t}\n\t}\n\tconnect(signal, destination, outputNum, inputNum);\n}\n", "import { AutomationEvent, Param, ParamOptions } from \"../context/Param\";\nimport { Seconds, Ticks, Time, UnitMap, UnitName } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isUndef } from \"../util/TypeCheck\";\n\ntype TickAutomationEvent = AutomationEvent & {\n\tticks: number;\n};\n\ninterface TickParamOptions<TypeName extends UnitName> extends ParamOptions<TypeName> {\n\tmultiplier: number;\n}\n\n/**\n * A Param class just for computing ticks. Similar to the [[Param]] class,\n * but offers conversion to BPM values as well as ability to compute tick\n * duration and elapsed ticks\n */\nexport class TickParam<TypeName extends \"hertz\" | \"bpm\"> extends Param<TypeName> {\n\n\treadonly name: string = \"TickParam\";\n\n\t/**\n\t * The timeline which tracks all of the automations.\n\t */\n\tprotected _events: Timeline<TickAutomationEvent> = new Timeline(Infinity);\n\n\t/**\n\t * The internal holder for the multiplier value\n\t */\n\tprivate _multiplier = 1;\n\n\t/**\n\t * @param param The AudioParam to wrap\n\t * @param units The unit name\n\t * @param convert Whether or not to convert the value to the target units\n\t */\n\t/**\n\t * @param value The initial value of the signal\n\t */\n\tconstructor(value?: number);\n\tconstructor(options: Partial<TickParamOptions<TypeName>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(TickParam.getDefaults(), arguments, [\"value\"]));\n\t\tconst options = optionsFromArguments(TickParam.getDefaults(), arguments, [\"value\"]);\n\n\t\t// set the multiplier\n\t\tthis._multiplier = options.multiplier;\n\n\t\t// clear the ticks from the beginning\n\t\tthis._events.cancel(0);\n\t\t// set an initial event\n\t\tthis._events.add({\n\t\t\tticks: 0,\n\t\t\ttime: 0,\n\t\t\ttype: \"setValueAtTime\",\n\t\t\tvalue: this._fromType(options.value),\n\t\t});\n\t\tthis.setValueAtTime(options.value, 0);\n\t}\n\n\tstatic getDefaults(): TickParamOptions<any> {\n\t\treturn Object.assign(Param.getDefaults(), {\n\t\t\tmultiplier: 1,\n\t\t\tunits: \"hertz\",\n\t\t\tvalue: 1,\n\t\t});\n\t}\n\n\tsetTargetAtTime(value: UnitMap[TypeName], time: Time, constant: number): this {\n\t\t// approximate it with multiple linear ramps\n\t\ttime = this.toSeconds(time);\n\t\tthis.setRampPoint(time);\n\t\tconst computedValue = this._fromType(value);\n\n\t\t// start from previously scheduled value\n\t\tconst prevEvent = this._events.get(time) as TickAutomationEvent;\n\t\tconst segments = Math.round(Math.max(1 / constant, 1));\n\t\tfor (let i = 0; i <= segments; i++) {\n\t\t\tconst segTime = constant * i + time;\n\t\t\tconst rampVal = this._exponentialApproach(prevEvent.time, prevEvent.value, computedValue, constant, segTime);\n\t\t\tthis.linearRampToValueAtTime(this._toType(rampVal), segTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\tsetValueAtTime(value: UnitMap[TypeName], time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tsuper.setValueAtTime(value, time);\n\t\tconst event = this._events.get(computedTime) as TickAutomationEvent;\n\t\tconst previousEvent = this._events.previousEvent(event);\n\t\tconst ticksUntilTime = this._getTicksUntilEvent(previousEvent, computedTime);\n\t\tevent.ticks = Math.max(ticksUntilTime, 0);\n\t\treturn this;\n\t}\n\n\tlinearRampToValueAtTime(value: UnitMap[TypeName], time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tsuper.linearRampToValueAtTime(value, time);\n\t\tconst event = this._events.get(computedTime) as TickAutomationEvent;\n\t\tconst previousEvent = this._events.previousEvent(event);\n\t\tconst ticksUntilTime = this._getTicksUntilEvent(previousEvent, computedTime);\n\t\tevent.ticks = Math.max(ticksUntilTime, 0);\n\t\treturn this;\n\t}\n\n\texponentialRampToValueAtTime(value: UnitMap[TypeName], time: Time): this {\n\t\t// aproximate it with multiple linear ramps\n\t\ttime = this.toSeconds(time);\n\t\tconst computedVal = this._fromType(value);\n\n\t\t// start from previously scheduled value\n\t\tconst prevEvent = this._events.get(time) as TickAutomationEvent;\n\t\t// approx 10 segments per second\n\t\tconst segments = Math.round(Math.max((time - prevEvent.time) * 10, 1));\n\t\tconst segmentDur = ((time - prevEvent.time) / segments);\n\t\tfor (let i = 0; i <= segments; i++) {\n\t\t\tconst segTime = segmentDur * i + prevEvent.time;\n\t\t\tconst rampVal = this._exponentialInterpolate(prevEvent.time, prevEvent.value, time, computedVal, segTime);\n\t\t\tthis.linearRampToValueAtTime(this._toType(rampVal), segTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the tick value at the time. Takes into account\n\t * any automation curves scheduled on the signal.\n\t * @param  event The time to get the tick count at\n\t * @return The number of ticks which have elapsed at the time given any automations.\n\t */\n\tprivate _getTicksUntilEvent(event: TickAutomationEvent | null, time: number): Ticks {\n\t\tif (event === null) {\n\t\t\tevent = {\n\t\t\t\tticks: 0,\n\t\t\t\ttime: 0,\n\t\t\t\ttype: \"setValueAtTime\",\n\t\t\t\tvalue: 0,\n\t\t\t};\n\t\t} else if (isUndef(event.ticks)) {\n\t\t\tconst previousEvent = this._events.previousEvent(event);\n\t\t\tevent.ticks = this._getTicksUntilEvent(previousEvent, event.time);\n\t\t}\n\t\tconst val0 = this._fromType(this.getValueAtTime(event.time));\n\t\tlet val1 = this._fromType(this.getValueAtTime(time));\n\t\t// if it's right on the line, take the previous value\n\t\tconst onTheLineEvent = this._events.get(time);\n\t\tif (onTheLineEvent && onTheLineEvent.time === time && onTheLineEvent.type === \"setValueAtTime\") {\n\t\t\tval1 = this._fromType(this.getValueAtTime(time - this.sampleTime));\n\t\t}\n\t\treturn 0.5 * (time - event.time) * (val0 + val1) + event.ticks;\n\t}\n\n\t/**\n\t * Returns the tick value at the time. Takes into account\n\t * any automation curves scheduled on the signal.\n\t * @param  time The time to get the tick count at\n\t * @return The number of ticks which have elapsed at the time given any automations.\n\t */\n\tgetTicksAtTime(time: Time): Ticks {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst event = this._events.get(computedTime);\n\t\treturn Math.max(this._getTicksUntilEvent(event, computedTime), 0);\n\t}\n\n\t/**\n\t * Return the elapsed time of the number of ticks from the given time\n\t * @param ticks The number of ticks to calculate\n\t * @param  time The time to get the next tick from\n\t * @return The duration of the number of ticks from the given time in seconds\n\t */\n\tgetDurationOfTicks(ticks: Ticks, time: Time): Seconds {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst currentTick = this.getTicksAtTime(time);\n\t\treturn this.getTimeOfTick(currentTick + ticks) - computedTime;\n\t}\n\n\t/**\n\t * Given a tick, returns the time that tick occurs at.\n\t * @return The time that the tick occurs.\n\t */\n\tgetTimeOfTick(tick: Ticks): Seconds {\n\t\tconst before = this._events.get(tick, \"ticks\");\n\t\tconst after = this._events.getAfter(tick, \"ticks\");\n\t\tif (before && before.ticks === tick) {\n\t\t\treturn before.time;\n\t\t} else if (before && after &&\n\t\t\tafter.type === \"linearRampToValueAtTime\" &&\n\t\t\tbefore.value !== after.value) {\n\t\t\tconst val0 = this._fromType(this.getValueAtTime(before.time));\n\t\t\tconst val1 = this._fromType(this.getValueAtTime(after.time));\n\t\t\tconst delta = (val1 - val0) / (after.time - before.time);\n\t\t\tconst k = Math.sqrt(Math.pow(val0, 2) - 2 * delta * (before.ticks - tick));\n\t\t\tconst sol1 = (-val0 + k) / delta;\n\t\t\tconst sol2 = (-val0 - k) / delta;\n\t\t\treturn (sol1 > 0 ? sol1 : sol2) + before.time;\n\t\t} else if (before) {\n\t\t\tif (before.value === 0) {\n\t\t\t\treturn Infinity;\n\t\t\t} else {\n\t\t\t\treturn before.time + (tick - before.ticks) / before.value;\n\t\t\t}\n\t\t} else {\n\t\t\treturn tick / this._initialValue;\n\t\t}\n\t}\n\n\t/**\n\t * Convert some number of ticks their the duration in seconds accounting\n\t * for any automation curves starting at the given time.\n\t * @param  ticks The number of ticks to convert to seconds.\n\t * @param  when  When along the automation timeline to convert the ticks.\n\t * @return The duration in seconds of the ticks.\n\t */\n\tticksToTime(ticks: Ticks, when: Time): Seconds {\n\t\treturn this.getDurationOfTicks(ticks, when);\n\t}\n\n\t/**\n\t * The inverse of [[ticksToTime]]. Convert a duration in\n\t * seconds to the corresponding number of ticks accounting for any\n\t * automation curves starting at the given time.\n\t * @param  duration The time interval to convert to ticks.\n\t * @param  when When along the automation timeline to convert the ticks.\n\t * @return The duration in ticks.\n\t */\n\ttimeToTicks(duration: Time, when: Time): Ticks {\n\t\tconst computedTime = this.toSeconds(when);\n\t\tconst computedDuration = this.toSeconds(duration);\n\t\tconst startTicks = this.getTicksAtTime(computedTime);\n\t\tconst endTicks = this.getTicksAtTime(computedTime + computedDuration);\n\t\treturn endTicks - startTicks;\n\t}\n\n\t/**\n\t * Convert from the type when the unit value is BPM\n\t */\n\tprotected _fromType(val: UnitMap[TypeName]): number {\n\t\tif (this.units === \"bpm\" && this.multiplier) {\n\t\t\treturn 1 / (60 / val / this.multiplier);\n\t\t} else {\n\t\t\treturn super._fromType(val);\n\t\t}\n\t}\n\n\t/**\n\t * Special case of type conversion where the units === \"bpm\"\n\t */\n\tprotected _toType(val: number): UnitMap[TypeName] {\n\t\tif (this.units === \"bpm\" && this.multiplier) {\n\t\t\treturn (val / this.multiplier) * 60 as UnitMap[TypeName];\n\t\t} else {\n\t\t\treturn super._toType(val);\n\t\t}\n\t}\n\t/**\n\t * A multiplier on the bpm value. Useful for setting a PPQ relative to the base frequency value.\n\t */\n\tget multiplier(): number {\n\t\treturn this._multiplier;\n\t}\n\tset multiplier(m: number) {\n\t\t// get and reset the current value with the new multiplier\n\t\t// might be necessary to clear all the previous values\n\t\tconst currentVal = this.value;\n\t\tthis._multiplier = m;\n\t\tthis.cancelScheduledValues(0);\n\t\tthis.setValueAtTime(currentVal, 0);\n\t}\n}\n", "import { Signal, SignalOptions } from \"../../signal/Signal\";\nimport { InputNode } from \"../context/ToneAudioNode\";\nimport { Seconds, Ticks, Time, UnitMap, UnitName } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { TickParam } from \"./TickParam\";\n\ninterface TickSignalOptions<TypeName extends UnitName> extends SignalOptions<TypeName> {\n\tvalue: UnitMap[TypeName];\n\tmultiplier: number;\n}\n\n/**\n * TickSignal extends Tone.Signal, but adds the capability\n * to calculate the number of elapsed ticks. exponential and target curves\n * are approximated with multiple linear ramps.\n *\n * Thank you Bruno Dias, H. Sofia Pinto, and David M. Matos,\n * for your [WAC paper](https://smartech.gatech.edu/bitstream/handle/1853/54588/WAC2016-49.pdf)\n * describing integrating timing functions for tempo calculations.\n */\nexport class TickSignal<TypeName extends \"hertz\" | \"bpm\"> extends Signal<TypeName> {\n\n\treadonly name: string = \"TickSignal\";\n\n\t/**\n\t * The param which controls the output signal value\n\t */\n\tprotected _param: TickParam<TypeName>;\n\treadonly input: InputNode;\n\n\t/**\n\t * @param value The initial value of the signal\n\t */\n\tconstructor(value?: UnitMap[TypeName]);\n\tconstructor(options: Partial<TickSignalOptions<TypeName>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(TickSignal.getDefaults(), arguments, [\"value\"]));\n\t\tconst options = optionsFromArguments(TickSignal.getDefaults(), arguments, [\"value\"]);\n\n\t\tthis.input = this._param = new TickParam({\n\t\t\tcontext: this.context,\n\t\t\tconvert: options.convert,\n\t\t\tmultiplier: options.multiplier,\n\t\t\tparam: this._constantSource.offset,\n\t\t\tunits: options.units,\n\t\t\tvalue: options.value,\n\t\t});\n\t}\n\n\tstatic getDefaults(): TickSignalOptions<any> {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tmultiplier: 1,\n\t\t\tunits: \"hertz\",\n\t\t\tvalue: 1,\n\t\t});\n\t}\n\n\tticksToTime(ticks: Ticks, when: Time): Seconds {\n\t\treturn this._param.ticksToTime(ticks, when);\n\t}\n\n\ttimeToTicks(duration: Time, when: Time): Ticks {\n\t\treturn this._param.timeToTicks(duration, when);\n\t}\n\n\tgetTimeOfTick(tick: Ticks): Seconds {\n\t\treturn this._param.getTimeOfTick(tick);\n\t}\n\n\tgetDurationOfTicks(ticks: Ticks, time: Time): Seconds {\n\t\treturn this._param.getDurationOfTicks(ticks, time);\n\t}\n\n\tgetTicksAtTime(time: Time): Ticks {\n\t\treturn this._param.getTicksAtTime(time);\n\t}\n\n\t/**\n\t * A multiplier on the bpm value. Useful for setting a PPQ relative to the base frequency value.\n\t */\n\tget multiplier(): number {\n\t\treturn this._param.multiplier;\n\t}\n\tset multiplier(m: number) {\n\t\tthis._param.multiplier = m;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._param.dispose();\n\t\treturn this;\n\t}\n}\n", "import { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { Seconds, Ticks, Time } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { PlaybackState, StateTimeline, StateTimelineEvent } from \"../util/StateTimeline\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isDefined } from \"../util/TypeCheck\";\nimport { TickSignal } from \"./TickSignal\";\nimport { EQ } from \"../util/Math\";\n\ninterface TickSourceOptions extends ToneWithContextOptions {\n\tfrequency: number;\n\tunits: \"bpm\" | \"hertz\";\n}\n\ninterface TickSourceOffsetEvent {\n\tticks: number;\n\ttime: number;\n\tseconds: number;\n}\n\n/**\n * Uses [TickSignal](TickSignal) to track elapsed ticks with complex automation curves.\n */\nexport class TickSource<TypeName extends \"bpm\" | \"hertz\"> extends ToneWithContext<TickSourceOptions> {\n\n\treadonly name: string = \"TickSource\";\n\n\t/**\n\t * The frequency the callback function should be invoked.\n\t */\n\treadonly frequency: TickSignal<TypeName>;\n\n\t/**\n\t * The state timeline\n\t */\n\tprivate _state: StateTimeline = new StateTimeline();\n\n\t/**\n\t * The offset values of the ticks\n\t */\n\tprivate _tickOffset: Timeline<TickSourceOffsetEvent> = new Timeline();\n\n\t/**\n\t * @param frequency The initial frequency that the signal ticks at\n\t */\n\tconstructor(frequency?: number);\n\tconstructor(options?: Partial<TickSourceOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(TickSource.getDefaults(), arguments, [\"frequency\"]));\n\t\tconst options = optionsFromArguments(TickSource.getDefaults(), arguments, [\"frequency\"]);\n\n\t\tthis.frequency = new TickSignal({\n\t\t\tcontext: this.context,\n\t\t\tunits: options.units as TypeName,\n\t\t\tvalue: options.frequency,\n\t\t});\n\t\treadOnly(this, \"frequency\");\n\n\t\t// set the initial state\n\t\tthis._state.setStateAtTime(\"stopped\", 0);\n\t\t// add the first event\n\t\tthis.setTicksAtTime(0, 0);\n\t}\n\n\tstatic getDefaults(): TickSourceOptions {\n\t\treturn Object.assign({\n\t\t\tfrequency: 1,\n\t\t\tunits: \"hertz\" as \"hertz\",\n\t\t}, ToneWithContext.getDefaults());\n\t}\n\n\t/**\n\t * Returns the playback state of the source, either \"started\", \"stopped\" or \"paused\".\n\t */\n\tget state(): PlaybackState {\n\t\treturn this.getStateAtTime(this.now());\n\t}\n\n\t/**\n\t * Start the clock at the given time. Optionally pass in an offset\n\t * of where to start the tick counter from.\n\t * @param  time    The time the clock should start\n\t * @param offset The number of ticks to start the source at\n\t */\n\tstart(time: Time, offset?: Ticks): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(computedTime) !== \"started\") {\n\t\t\tthis._state.setStateAtTime(\"started\", computedTime);\n\t\t\tif (isDefined(offset)) {\n\t\t\t\tthis.setTicksAtTime(offset, computedTime);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the clock. Stopping the clock resets the tick counter to 0.\n\t * @param time The time when the clock should stop.\n\t */\n\tstop(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\t// cancel the previous stop\n\t\tif (this._state.getValueAtTime(computedTime) === \"stopped\") {\n\t\t\tconst event = this._state.get(computedTime);\n\t\t\tif (event && event.time > 0) {\n\t\t\t\tthis._tickOffset.cancel(event.time);\n\t\t\t\tthis._state.cancel(event.time);\n\t\t\t}\n\t\t}\n\t\tthis._state.cancel(computedTime);\n\t\tthis._state.setStateAtTime(\"stopped\", computedTime);\n\t\tthis.setTicksAtTime(0, computedTime);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Pause the clock. Pausing does not reset the tick counter.\n\t * @param time The time when the clock should stop.\n\t */\n\tpause(time: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(computedTime) === \"started\") {\n\t\t\tthis._state.setStateAtTime(\"paused\", computedTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Cancel start/stop/pause and setTickAtTime events scheduled after the given time.\n\t * @param time When to clear the events after\n\t */\n\tcancel(time: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis._state.cancel(time);\n\t\tthis._tickOffset.cancel(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the elapsed ticks at the given time\n\t * @param  time  When to get the tick value\n\t * @return The number of ticks\n\t */\n\tgetTicksAtTime(time?: Time): Ticks {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst stopEvent = this._state.getLastState(\"stopped\", computedTime) as StateTimelineEvent;\n\t\t// this event allows forEachBetween to iterate until the current time\n\t\tconst tmpEvent: StateTimelineEvent = { state: \"paused\", time: computedTime };\n\t\tthis._state.add(tmpEvent);\n\n\t\t// keep track of the previous offset event\n\t\tlet lastState = stopEvent;\n\t\tlet elapsedTicks = 0;\n\n\t\t// iterate through all the events since the last stop\n\t\tthis._state.forEachBetween(stopEvent.time, computedTime + this.sampleTime, e => {\n\t\t\tlet periodStartTime = lastState.time;\n\t\t\t// if there is an offset event in this period use that\n\t\t\tconst offsetEvent = this._tickOffset.get(e.time);\n\t\t\tif (offsetEvent && offsetEvent.time >= lastState.time) {\n\t\t\t\telapsedTicks = offsetEvent.ticks;\n\t\t\t\tperiodStartTime = offsetEvent.time;\n\t\t\t}\n\t\t\tif (lastState.state === \"started\" && e.state !== \"started\") {\n\t\t\t\telapsedTicks += this.frequency.getTicksAtTime(e.time) - this.frequency.getTicksAtTime(periodStartTime);\n\t\t\t}\n\t\t\tlastState = e;\n\t\t});\n\n\t\t// remove the temporary event\n\t\tthis._state.remove(tmpEvent);\n\n\t\t// return the ticks\n\t\treturn elapsedTicks;\n\t}\n\n\t/**\n\t * The number of times the callback was invoked. Starts counting at 0\n\t * and increments after the callback was invoked. Returns -1 when stopped.\n\t */\n\tget ticks(): Ticks {\n\t\treturn this.getTicksAtTime(this.now());\n\t}\n\tset ticks(t: Ticks) {\n\t\tthis.setTicksAtTime(t, this.now());\n\t}\n\n\t/**\n\t * The time since ticks=0 that the TickSource has been running. Accounts\n\t * for tempo curves\n\t */\n\tget seconds(): Seconds {\n\t\treturn this.getSecondsAtTime(this.now());\n\t}\n\tset seconds(s: Seconds) {\n\t\tconst now = this.now();\n\t\tconst ticks = this.frequency.timeToTicks(s, now);\n\t\tthis.setTicksAtTime(ticks, now);\n\t}\n\n\t/**\n\t * Return the elapsed seconds at the given time.\n\t * @param  time  When to get the elapsed seconds\n\t * @return  The number of elapsed seconds\n\t */\n\tgetSecondsAtTime(time: Time): Seconds {\n\t\ttime = this.toSeconds(time);\n\t\tconst stopEvent = this._state.getLastState(\"stopped\", time) as StateTimelineEvent;\n\t\t// this event allows forEachBetween to iterate until the current time\n\t\tconst tmpEvent: StateTimelineEvent = { state: \"paused\", time };\n\t\tthis._state.add(tmpEvent);\n\n\t\t// keep track of the previous offset event\n\t\tlet lastState = stopEvent;\n\t\tlet elapsedSeconds = 0;\n\n\t\t// iterate through all the events since the last stop\n\t\tthis._state.forEachBetween(stopEvent.time, time + this.sampleTime, e => {\n\t\t\tlet periodStartTime = lastState.time;\n\t\t\t// if there is an offset event in this period use that\n\t\t\tconst offsetEvent = this._tickOffset.get(e.time);\n\t\t\tif (offsetEvent && offsetEvent.time >= lastState.time) {\n\t\t\t\telapsedSeconds = offsetEvent.seconds;\n\t\t\t\tperiodStartTime = offsetEvent.time;\n\t\t\t}\n\t\t\tif (lastState.state === \"started\" && e.state !== \"started\") {\n\t\t\t\telapsedSeconds += e.time - periodStartTime;\n\t\t\t}\n\t\t\tlastState = e;\n\t\t});\n\n\t\t// remove the temporary event\n\t\tthis._state.remove(tmpEvent);\n\n\t\t// return the ticks\n\t\treturn elapsedSeconds;\n\t}\n\n\t/**\n\t * Set the clock's ticks at the given time.\n\t * @param  ticks The tick value to set\n\t * @param  time  When to set the tick value\n\t */\n\tsetTicksAtTime(ticks: Ticks, time: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis._tickOffset.cancel(time);\n\t\tthis._tickOffset.add({\n\t\t\tseconds: this.frequency.getDurationOfTicks(ticks, time),\n\t\t\tticks,\n\t\t\ttime,\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the scheduled state at the given time.\n\t * @param  time  The time to query.\n\t */\n\tgetStateAtTime(time: Time): PlaybackState {\n\t\ttime = this.toSeconds(time);\n\t\treturn this._state.getValueAtTime(time);\n\t}\n\n\t/**\n\t * Get the time of the given tick. The second argument\n\t * is when to test before. Since ticks can be set (with setTicksAtTime)\n\t * there may be multiple times for a given tick value.\n\t * @param  tick The tick number.\n\t * @param  before When to measure the tick value from.\n\t * @return The time of the tick\n\t */\n\tgetTimeOfTick(tick: Ticks, before = this.now()): Seconds {\n\t\tconst offset = this._tickOffset.get(before) as TickSourceOffsetEvent;\n\t\tconst event = this._state.get(before) as StateTimelineEvent;\n\t\tconst startTime = Math.max(offset.time, event.time);\n\t\tconst absoluteTicks = this.frequency.getTicksAtTime(startTime) + tick - offset.ticks;\n\t\treturn this.frequency.getTimeOfTick(absoluteTicks);\n\t}\n\n\t/**\n\t * Invoke the callback event at all scheduled ticks between the\n\t * start time and the end time\n\t * @param  startTime  The beginning of the search range\n\t * @param  endTime    The end of the search range\n\t * @param  callback   The callback to invoke with each tick\n\t */\n\tforEachTickBetween(startTime: number, endTime: number, callback: (when: Seconds, ticks: Ticks) => void): this {\n\t\t// only iterate through the sections where it is \"started\"\n\t\tlet lastStateEvent = this._state.get(startTime);\n\t\tthis._state.forEachBetween(startTime, endTime, event => {\n\t\t\tif (lastStateEvent && lastStateEvent.state === \"started\" && event.state !== \"started\") {\n\t\t\t\tthis.forEachTickBetween(Math.max(lastStateEvent.time, startTime), event.time - this.sampleTime, callback);\n\t\t\t}\n\t\t\tlastStateEvent = event;\n\t\t});\n\n\t\tlet error: Error | null = null;\n\n\t\tif (lastStateEvent && lastStateEvent.state === \"started\") {\n\t\t\tconst maxStartTime = Math.max(lastStateEvent.time, startTime);\n\t\t\t// figure out the difference between the frequency ticks and the\n\t\t\tconst startTicks = this.frequency.getTicksAtTime(maxStartTime);\n\t\t\tconst ticksAtStart = this.frequency.getTicksAtTime(lastStateEvent.time);\n\t\t\tconst diff = startTicks - ticksAtStart;\n\t\t\tlet offset = Math.ceil(diff) - diff;\n\t\t\t// guard against floating point issues\n\t\t\toffset = EQ(offset, 1) ? 0 : offset;\n\t\t\tlet nextTickTime = this.frequency.getTimeOfTick(startTicks + offset);\n\t\t\twhile (nextTickTime < endTime) {\n\t\t\t\ttry {\n\t\t\t\t\tcallback(nextTickTime, Math.round(this.getTicksAtTime(nextTickTime)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\terror = e;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tnextTickTime += this.frequency.getDurationOfTicks(1, nextTickTime);\n\t\t\t}\n\t\t}\n\n\t\tif (error) {\n\t\t\tthrow error;\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._state.dispose();\n\t\tthis._tickOffset.dispose();\n\t\tthis.frequency.dispose();\n\t\treturn this;\n\t}\n}\n", "import { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { Frequency, Hertz, Seconds, Ticks, Time } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Emitter } from \"../util/Emitter\";\nimport { noOp, readOnly } from \"../util/Interface\";\nimport { PlaybackState, StateTimeline } from \"../util/StateTimeline\";\nimport { TickSignal } from \"./TickSignal\";\nimport { TickSource } from \"./TickSource\";\nimport { assertContextRunning } from \"../util/Debug\";\n\ntype ClockCallback = (time: Seconds, ticks?: Ticks) => void;\n\ninterface ClockOptions extends ToneWithContextOptions {\n\tfrequency: Hertz;\n\tcallback: ClockCallback;\n\tunits: \"hertz\" | \"bpm\";\n}\n\ntype ClockEvent = \"start\" | \"stop\" | \"pause\";\n\n/**\n * A sample accurate clock which provides a callback at the given rate.\n * While the callback is not sample-accurate (it is still susceptible to\n * loose JS timing), the time passed in as the argument to the callback\n * is precise. For most applications, it is better to use Tone.Transport\n * instead of the Clock by itself since you can synchronize multiple callbacks.\n * @example\n * // the callback will be invoked approximately once a second\n * // and will print the time exactly once a second apart.\n * const clock = new Tone.Clock(time => {\n * \tconsole.log(time);\n * }, 1);\n * clock.start();\n * @category Core\n */\nexport class Clock<TypeName extends \"bpm\" | \"hertz\" = \"hertz\">\n\textends ToneWithContext<ClockOptions> implements Emitter<ClockEvent> {\n\n\treadonly name: string = \"Clock\";\n\n\t/**\n\t * The callback function to invoke at the scheduled tick.\n\t */\n\tcallback: ClockCallback = noOp;\n\n\t/**\n\t * The tick counter\n\t */\n\tprivate _tickSource: TickSource<TypeName>;\n\n\t/**\n\t * The last time the loop callback was invoked\n\t */\n\tprivate _lastUpdate = 0;\n\n\t/**\n\t * Keep track of the playback state\n\t */\n\tprivate _state: StateTimeline = new StateTimeline(\"stopped\");\n\n\t/**\n\t * Context bound reference to the _loop method\n\t * This is necessary to remove the event in the end.\n\t */\n\tprivate _boundLoop: () => void = this._loop.bind(this);\n\n\t/**\n\t * The rate the callback function should be invoked.\n\t */\n\tfrequency: TickSignal<TypeName>;\n\n\t/**\n\t * @param callback The callback to be invoked with the time of the audio event\n\t * @param frequency The rate of the callback\n\t */\n\tconstructor(callback?: ClockCallback, frequency?: Frequency);\n\tconstructor(options: Partial<ClockOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Clock.getDefaults(), arguments, [\"callback\", \"frequency\"]));\n\t\tconst options = optionsFromArguments(Clock.getDefaults(), arguments, [\"callback\", \"frequency\"]);\n\n\t\tthis.callback = options.callback;\n\t\tthis._tickSource = new TickSource({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.frequency,\n\t\t\tunits: options.units,\n\t\t});\n\t\tthis._lastUpdate = 0;\n\t\tthis.frequency = this._tickSource.frequency;\n\t\treadOnly(this, \"frequency\");\n\n\t\t// add an initial state\n\t\tthis._state.setStateAtTime(\"stopped\", 0);\n\n\t\t// bind a callback to the worker thread\n\t\tthis.context.on(\"tick\", this._boundLoop);\n\t}\n\n\tstatic getDefaults(): ClockOptions {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tcallback: noOp as ClockCallback,\n\t\t\tfrequency: 1,\n\t\t\tunits: \"hertz\",\n\t\t}) as ClockOptions;\n\t}\n\n\t/**\n\t * Returns the playback state of the source, either \"started\", \"stopped\" or \"paused\".\n\t */\n\tget state(): PlaybackState {\n\t\treturn this._state.getValueAtTime(this.now());\n\t}\n\n\t/**\n\t * Start the clock at the given time. Optionally pass in an offset\n\t * of where to start the tick counter from.\n\t * @param  time    The time the clock should start\n\t * @param offset  Where the tick counter starts counting from.\n\t */\n\tstart(time?: Time, offset?: Ticks): this {\n\t\t// make sure the context is running\n\t\tassertContextRunning(this.context);\n\t\t// start the loop\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis.log(\"start\", computedTime);\n\t\tif (this._state.getValueAtTime(computedTime) !== \"started\") {\n\t\t\tthis._state.setStateAtTime(\"started\", computedTime);\n\t\t\tthis._tickSource.start(computedTime, offset);\n\t\t\tif (computedTime < this._lastUpdate) {\n\t\t\t\tthis.emit(\"start\", computedTime, offset);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the clock. Stopping the clock resets the tick counter to 0.\n\t * @param time The time when the clock should stop.\n\t * @example\n\t * const clock = new Tone.Clock(time => {\n\t * \tconsole.log(time);\n\t * }, 1);\n\t * clock.start();\n\t * // stop the clock after 10 seconds\n\t * clock.stop(\"+10\");\n\t */\n\tstop(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis.log(\"stop\", computedTime);\n\t\tthis._state.cancel(computedTime);\n\t\tthis._state.setStateAtTime(\"stopped\", computedTime);\n\t\tthis._tickSource.stop(computedTime);\n\t\tif (computedTime < this._lastUpdate) {\n\t\t\tthis.emit(\"stop\", computedTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Pause the clock. Pausing does not reset the tick counter.\n\t * @param time The time when the clock should stop.\n\t */\n\tpause(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(computedTime) === \"started\") {\n\t\t\tthis._state.setStateAtTime(\"paused\", computedTime);\n\t\t\tthis._tickSource.pause(computedTime);\n\t\t\tif (computedTime < this._lastUpdate) {\n\t\t\t\tthis.emit(\"pause\", computedTime);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * The number of times the callback was invoked. Starts counting at 0\n\t * and increments after the callback was invoked.\n\t */\n\tget ticks(): Ticks {\n\t\treturn Math.ceil(this.getTicksAtTime(this.now()));\n\t}\n\tset ticks(t: Ticks) {\n\t\tthis._tickSource.ticks = t;\n\t}\n\n\t/**\n\t * The time since ticks=0 that the Clock has been running. Accounts for tempo curves\n\t */\n\tget seconds(): Seconds {\n\t\treturn this._tickSource.seconds;\n\t}\n\tset seconds(s: Seconds) {\n\t\tthis._tickSource.seconds = s;\n\t}\n\n\t/**\n\t * Return the elapsed seconds at the given time.\n\t * @param  time  When to get the elapsed seconds\n\t * @return  The number of elapsed seconds\n\t */\n\tgetSecondsAtTime(time: Time): Seconds {\n\t\treturn this._tickSource.getSecondsAtTime(time);\n\t}\n\n\t/**\n\t * Set the clock's ticks at the given time.\n\t * @param  ticks The tick value to set\n\t * @param  time  When to set the tick value\n\t */\n\tsetTicksAtTime(ticks: Ticks, time: Time): this {\n\t\tthis._tickSource.setTicksAtTime(ticks, time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the time of the given tick. The second argument\n\t * is when to test before. Since ticks can be set (with setTicksAtTime)\n\t * there may be multiple times for a given tick value.\n\t * @param  tick The tick number.\n\t * @param  before When to measure the tick value from.\n\t * @return The time of the tick\n\t */\n\tgetTimeOfTick(tick: Ticks, before = this.now()): Seconds {\n\t\treturn this._tickSource.getTimeOfTick(tick, before);\n\t}\n\n\t/**\n\t * Get the clock's ticks at the given time.\n\t * @param  time  When to get the tick value\n\t * @return The tick value at the given time.\n\t */\n\tgetTicksAtTime(time?: Time): Ticks {\n\t\treturn this._tickSource.getTicksAtTime(time);\n\t}\n\n\t/**\n\t * Get the time of the next tick\n\t * @param  offset The tick number.\n\t */\n\tnextTickTime(offset: Ticks, when: Time): Seconds {\n\t\tconst computedTime = this.toSeconds(when);\n\t\tconst currentTick = this.getTicksAtTime(computedTime);\n\t\treturn this._tickSource.getTimeOfTick(currentTick + offset, computedTime);\n\t}\n\n\t/**\n\t * The scheduling loop.\n\t */\n\tprivate _loop(): void {\n\n\t\tconst startTime = this._lastUpdate;\n\t\tconst endTime = this.now();\n\t\tthis._lastUpdate = endTime;\n\t\tthis.log(\"loop\", startTime, endTime);\n\n\t\tif (startTime !== endTime) {\n\t\t\t// the state change events\n\t\t\tthis._state.forEachBetween(startTime, endTime, e => {\n\t\t\t\tswitch (e.state) {\n\t\t\t\t\tcase \"started\":\n\t\t\t\t\t\tconst offset = this._tickSource.getTicksAtTime(e.time);\n\t\t\t\t\t\tthis.emit(\"start\", e.time, offset);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"stopped\":\n\t\t\t\t\t\tif (e.time !== 0) {\n\t\t\t\t\t\t\tthis.emit(\"stop\", e.time);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"paused\":\n\t\t\t\t\t\tthis.emit(\"pause\", e.time);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t});\n\t\t\t// the tick callbacks\n\t\t\tthis._tickSource.forEachTickBetween(startTime, endTime, (time, ticks) => {\n\t\t\t\tthis.callback(time, ticks);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Returns the scheduled state at the given time.\n\t * @param  time  The time to query.\n\t * @return  The name of the state input in setStateAtTime.\n\t * @example\n\t * const clock = new Tone.Clock();\n\t * clock.start(\"+0.1\");\n\t * clock.getStateAtTime(\"+0.1\"); // returns \"started\"\n\t */\n\tgetStateAtTime(time: Time): PlaybackState {\n\t\tconst computedTime = this.toSeconds(time);\n\t\treturn this._state.getValueAtTime(computedTime);\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.context.off(\"tick\", this._boundLoop);\n\t\tthis._tickSource.dispose();\n\t\tthis._state.dispose();\n\t\treturn this;\n\t}\n\n\t//-------------------------------------\n\t// EMITTER MIXIN TO SATISFY COMPILER\n\t//-------------------------------------\n\n\ton!: (event: ClockEvent, callback: (...args: any[]) => void) => this;\n\tonce!: (event: ClockEvent, callback: (...args: any[]) => void) => this;\n\toff!: (event: ClockEvent, callback?: ((...args: any[]) => void) | undefined) => this;\n\temit!: (event: any, ...args: any[]) => this;\n}\n\nEmitter.mixin(Clock);\n", "import { Param } from \"../context/Param\";\nimport { Seconds, Time } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"./ToneAudioNode\";\n\nexport interface DelayOptions extends ToneAudioNodeOptions {\n\tdelayTime: Time;\n\tmaxDelay: Time;\n}\n\n/**\n * Wrapper around Web Audio's native [DelayNode](http://webaudio.github.io/web-audio-api/#the-delaynode-interface).\n * @category Core\n * @example\n * return Tone.Offline(() => {\n * \tconst delay = new Tone.Delay(0.1).toDestination();\n * \t// connect the signal to both the delay and the destination\n * \tconst pulse = new Tone.PulseOscillator().connect(delay).toDestination();\n * \t// start and stop the pulse\n * \tpulse.start(0).stop(0.01);\n * }, 0.5, 1);\n */\nexport class Delay extends ToneAudioNode<DelayOptions> {\n\n\treadonly name: string = \"Delay\";\n\n\t/**\n\t * Private holder of the max delay time\n\t */\n\tprivate _maxDelay: Seconds;\n\n\t/**\n\t * The amount of time the incoming signal is delayed.\n\t * @example\n\t * const delay = new Tone.Delay().toDestination();\n\t * // modulate the delayTime between 0.1 and 1 seconds\n\t * const delayLFO = new Tone.LFO(0.5, 0.1, 1).start().connect(delay.delayTime);\n\t * const pulse = new Tone.PulseOscillator().connect(delay).start();\n\t * // the change in delayTime causes the pitch to go up and down\n\t */\n\treadonly delayTime: Param<\"time\">;\n\n\t/**\n\t * Private reference to the internal DelayNode\n\t */\n\tprivate _delayNode: DelayNode;\n\treadonly input: DelayNode;\n\treadonly output: DelayNode;\n\n\t/**\n\t * @param delayTime The delay applied to the incoming signal.\n\t * @param maxDelay The maximum delay time.\n\t */\n\tconstructor(delayTime?: Time, maxDelay?: Time);\n\tconstructor(options?: Partial<DelayOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Delay.getDefaults(), arguments, [\"delayTime\", \"maxDelay\"]));\n\n\t\tconst options = optionsFromArguments(Delay.getDefaults(), arguments, [\"delayTime\", \"maxDelay\"]);\n\n\t\tconst maxDelayInSeconds = this.toSeconds(options.maxDelay);\n\t\tthis._maxDelay = Math.max(maxDelayInSeconds, this.toSeconds(options.delayTime));\n\n\t\tthis._delayNode = this.input = this.output = this.context.createDelay(maxDelayInSeconds);\n\n\t\tthis.delayTime = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._delayNode.delayTime,\n\t\t\tunits: \"time\",\n\t\t\tvalue: options.delayTime,\n\t\t\tminValue: 0,\n\t\t\tmaxValue: this.maxDelay,\n\t\t});\n\n\t\treadOnly(this, \"delayTime\");\n\t}\n\n\tstatic getDefaults(): DelayOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tdelayTime: 0,\n\t\t\tmaxDelay: 1,\n\t\t});\n\t}\n\n\t/**\n\t * The maximum delay time. This cannot be changed after\n\t * the value is passed into the constructor.\n\t */\n\tget maxDelay(): Seconds {\n\t\treturn this._maxDelay;\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._delayNode.disconnect();\n\t\tthis.delayTime.dispose();\n\t\treturn this;\n\t}\n}\n", "import { getContext, setContext } from \"../Global\";\nimport { Seconds } from \"../type/Units\";\nimport { OfflineContext } from \"./OfflineContext\";\nimport { ToneAudioBuffer } from \"./ToneAudioBuffer\";\n\n/**\n * Generate a buffer by rendering all of the Tone.js code within the callback using the OfflineAudioContext.\n * The OfflineAudioContext is capable of rendering much faster than real time in many cases.\n * The callback function also passes in an offline instance of [[Context]] which can be used\n * to schedule events along the Transport. \n * @param  callback  All Tone.js nodes which are created and scheduled within this callback are recorded into the output Buffer.\n * @param  duration     the amount of time to record for.\n * @return  The promise which is invoked with the ToneAudioBuffer of the recorded output.\n * @example\n * // render 2 seconds of the oscillator\n * Tone.Offline(() => {\n * \t// only nodes created in this callback will be recorded\n * \tconst oscillator = new Tone.Oscillator().toDestination().start(0);\n * }, 2).then((buffer) => {\n * \t// do something with the output buffer\n * \tconsole.log(buffer);\n * });\n * @example\n * // can also schedule events along the Transport\n * // using the passed in Offline Transport\n * Tone.Offline(({ transport }) => {\n * \tconst osc = new Tone.Oscillator().toDestination();\n * \ttransport.schedule(time => {\n * \t\tosc.start(time).stop(time + 0.1);\n * \t}, 1);\n * \t// make sure to start the transport\n * \ttransport.start(0.2);\n * }, 4).then((buffer) => {\n * \t// do something with the output buffer\n * \tconsole.log(buffer);\n * });\n * @category Core\n */\nexport async function Offline(\n\tcallback: (context: OfflineContext) => Promise<void> | void,\n\tduration: Seconds,\n\tchannels = 2,\n\tsampleRate: number = getContext().sampleRate,\n): Promise<ToneAudioBuffer> {\n\t// set the OfflineAudioContext based on the current context\n\tconst originalContext = getContext();\n\n\tconst context = new OfflineContext(channels, duration, sampleRate);\n\tsetContext(context);\n\n\t// invoke the callback/scheduling\n\tawait callback(context);\n\n\t// then render the audio\n\tconst bufferPromise = context.render();\n\n\t// return the original AudioContext\n\tsetContext(originalContext);\n\n\t// await the rendering\n\tconst buffer = await bufferPromise;\n\n\t// return the audio\n\treturn new ToneAudioBuffer(buffer);\n}\n", "import { Tone } from \"../Tone\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { noOp } from \"../util/Interface\";\nimport { isString } from \"../util/TypeCheck\";\nimport { ToneAudioBuffer } from \"./ToneAudioBuffer\";\nimport { assert } from \"../util/Debug\";\n\nexport interface ToneAudioBuffersUrlMap {\n\t[name: string]: string | AudioBuffer | ToneAudioBuffer;\n\t[name: number]: string | AudioBuffer | ToneAudioBuffer;\n}\n\ninterface ToneAudioBuffersOptions {\n\turls: ToneAudioBuffersUrlMap;\n\tonload: () => void;\n\tonerror?: (error: Error) => void;\n\tbaseUrl: string;\n}\n\n/**\n * A data structure for holding multiple buffers in a Map-like datastructure.\n *\n * @example\n * const pianoSamples = new Tone.ToneAudioBuffers({\n * \tA1: \"https://tonejs.github.io/audio/casio/A1.mp3\",\n * \tA2: \"https://tonejs.github.io/audio/casio/A2.mp3\",\n * }, () => {\n * \tconst player = new Tone.Player().toDestination();\n * \t// play one of the samples when they all load\n * \tplayer.buffer = pianoSamples.get(\"A2\");\n * \tplayer.start();\n * });\n * @example\n * // To pass in additional parameters in the second parameter\n * const buffers = new Tone.ToneAudioBuffers({\n * \t urls: {\n * \t\t A1: \"A1.mp3\",\n * \t\t A2: \"A2.mp3\",\n * \t },\n * \t onload: () => console.log(\"loaded\"),\n * \t baseUrl: \"https://tonejs.github.io/audio/casio/\"\n * });\n * @category Core\n */\nexport class ToneAudioBuffers extends Tone {\n\n\treadonly name: string = \"ToneAudioBuffers\";\n\n\t/**\n\t * All of the buffers\n\t */\n\tprivate _buffers: Map<string, ToneAudioBuffer> = new Map();\n\n\t/**\n\t * A path which is prefixed before every url.\n\t */\n\tbaseUrl: string;\n\n\t/**\n\t * Keep track of the number of loaded buffers\n\t */\n\tprivate _loadingCount = 0;\n\n\t/**\n\t * @param  urls  An object literal or array of urls to load.\n\t * @param onload  The callback to invoke when the buffers are loaded.\n\t * @param baseUrl A prefix url to add before all the urls\n\t */\n\tconstructor(\n\t\turls?: ToneAudioBuffersUrlMap,\n\t\tonload?: () => void,\n\t\tbaseUrl?: string,\n\t);\n\tconstructor(options?: Partial<ToneAudioBuffersOptions>);\n\tconstructor() {\n\n\t\tsuper();\n\t\tconst options = optionsFromArguments(\n\t\t\tToneAudioBuffers.getDefaults(), arguments, [\"urls\", \"onload\", \"baseUrl\"], \"urls\",\n\t\t);\n\n\t\tthis.baseUrl = options.baseUrl;\n\t\t// add each one\n\t\tObject.keys(options.urls).forEach(name => {\n\t\t\tthis._loadingCount++;\n\t\t\tconst url = options.urls[name];\n\t\t\tthis.add(name, url, this._bufferLoaded.bind(this, options.onload), options.onerror);\n\t\t});\n\n\t}\n\n\tstatic getDefaults(): ToneAudioBuffersOptions {\n\t\treturn {\n\t\t\tbaseUrl: \"\",\n\t\t\tonerror: noOp,\n\t\t\tonload: noOp,\n\t\t\turls: {},\n\t\t};\n\t}\n\n\t/**\n\t * True if the buffers object has a buffer by that name.\n\t * @param  name  The key or index of the buffer.\n\t */\n\thas(name: string | number): boolean {\n\t\treturn this._buffers.has(name.toString());\n\t}\n\n\t/**\n\t * Get a buffer by name. If an array was loaded,\n\t * then use the array index.\n\t * @param  name  The key or index of the buffer.\n\t */\n\tget(name: string | number): ToneAudioBuffer {\n\t\tassert(this.has(name), `ToneAudioBuffers has no buffer named: ${name}`);\n\t\treturn this._buffers.get(name.toString()) as ToneAudioBuffer;\n\t}\n\n\t/**\n\t * A buffer was loaded. decrement the counter.\n\t */\n\tprivate _bufferLoaded(callback: () => void): void {\n\t\tthis._loadingCount--;\n\t\tif (this._loadingCount === 0 && callback) {\n\t\t\tcallback();\n\t\t}\n\t}\n\n\t/**\n\t * If the buffers are loaded or not\n\t */\n\tget loaded(): boolean {\n\t\treturn Array.from(this._buffers).every(([_, buffer]) => buffer.loaded);\n\t}\n\n\t/**\n\t * Add a buffer by name and url to the Buffers\n\t * @param  name      A unique name to give the buffer\n\t * @param  url  Either the url of the bufer, or a buffer which will be added with the given name.\n\t * @param  callback  The callback to invoke when the url is loaded.\n\t * @param  onerror  Invoked if the buffer can't be loaded\n\t */\n\tadd(\n\t\tname: string | number,\n\t\turl: string | AudioBuffer | ToneAudioBuffer,\n\t\tcallback: () => void = noOp,\n\t\tonerror: (e: Error) => void = noOp,\n\t): this {\n\t\tif (isString(url)) {\n\t\t\tthis._buffers.set(name.toString(), new ToneAudioBuffer(this.baseUrl + url, callback, onerror));\n\t\t} else {\n\t\t\tthis._buffers.set(name.toString(), new ToneAudioBuffer(url, callback, onerror));\n\t\t}\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._buffers.forEach(buffer => buffer.dispose());\n\t\tthis._buffers.clear();\n\t\treturn this;\n\t}\n}\n", "import { getContext } from \"../Global\";\nimport { ftom, mtof } from \"./Conversions\";\nimport { FrequencyClass, FrequencyUnit } from \"./Frequency\";\nimport { TimeValue } from \"./TimeBase\";\nimport { Hertz, Interval, MidiNote, Seconds, Ticks } from \"./Units\";\n\n/**\n * Midi is a primitive type for encoding Time values.\n * Midi can be constructed with or without the `new` keyword. Midi can be passed\n * into the parameter of any method which takes time as an argument.\n * @category Unit\n */\nexport class MidiClass extends FrequencyClass<MidiNote> {\n\n\treadonly name: string = \"MidiClass\";\n\n\treadonly defaultUnits = \"midi\";\n\n\t/**\n\t * Returns the value of a frequency in the current units\n\t */\n\tprotected _frequencyToUnits(freq: Hertz): MidiNote {\n\t\treturn ftom(super._frequencyToUnits(freq));\n\t}\n\n\t/**\n\t * Returns the value of a tick in the current time units\n\t */\n\tprotected _ticksToUnits(ticks: Ticks): MidiNote {\n\t\treturn ftom(super._ticksToUnits(ticks));\n\t}\n\n\t/**\n\t * Return the value of the beats in the current units\n\t */\n\tprotected _beatsToUnits(beats: number): MidiNote {\n\t\treturn ftom(super._beatsToUnits(beats));\n\t}\n\n\t/**\n\t * Returns the value of a second in the current units\n\t */\n\tprotected _secondsToUnits(seconds: Seconds): MidiNote {\n\t\treturn ftom(super._secondsToUnits(seconds));\n\t}\n\n\t/**\n\t * Return the value of the frequency as a MIDI note\n\t * @example\n\t * Tone.Midi(60).toMidi(); // 60\n\t */\n\ttoMidi(): MidiNote {\n\t\treturn this.valueOf();\n\t}\n\n\t/**\n\t * Return the value of the frequency as a MIDI note\n\t * @example\n\t * Tone.Midi(60).toFrequency(); // 261.6255653005986\n\t */\n\ttoFrequency(): Hertz {\n\t\treturn mtof(this.toMidi());\n\t}\n\n\t/**\n\t * Transposes the frequency by the given number of semitones.\n\t * @return A new transposed MidiClass\n\t * @example\n\t * Tone.Midi(\"A4\").transpose(3); // \"C5\"\n\t */\n\ttranspose(interval: Interval): MidiClass {\n\t\treturn new MidiClass(this.context, this.toMidi() + interval);\n\t}\n}\n\n/**\n * Convert a value into a FrequencyClass object.\n * @category Unit\n */\nexport function Midi(value?: TimeValue, units?: FrequencyUnit): MidiClass {\n\treturn new MidiClass(getContext(), value, units);\n}\n", "import { getContext } from \"../Global\";\nimport { TimeBaseUnit, TimeValue } from \"./TimeBase\";\nimport { TransportTimeClass } from \"./TransportTime\";\nimport { Seconds, Ticks } from \"./Units\";\n\n/**\n * Ticks is a primitive type for encoding Time values.\n * Ticks can be constructed with or without the `new` keyword. Ticks can be passed\n * into the parameter of any method which takes time as an argument.\n * @example\n * const t = Tone.Ticks(\"4n\"); // a quarter note as ticks\n * @category Unit\n */\nexport class TicksClass extends TransportTimeClass<Ticks> {\n\n\treadonly name: string = \"Ticks\";\n\n\treadonly defaultUnits: TimeBaseUnit = \"i\";\n\n\t/**\n\t * Get the current time in the given units\n\t */\n\tprotected _now(): Ticks {\n\t\treturn this.context.transport.ticks;\n\t}\n\n\t/**\n\t * Return the value of the beats in the current units\n\t */\n\tprotected _beatsToUnits(beats: number): Ticks {\n\t\treturn this._getPPQ() * beats;\n\t}\n\n\t/**\n\t * Returns the value of a second in the current units\n\t */\n\tprotected _secondsToUnits(seconds: Seconds): Ticks {\n\t\treturn Math.floor(seconds / (60 / this._getBpm()) * this._getPPQ());\n\t}\n\n\t/**\n\t * Returns the value of a tick in the current time units\n\t */\n\tprotected _ticksToUnits(ticks: Ticks): Ticks {\n\t\treturn ticks;\n\t}\n\n\t/**\n\t * Return the time in ticks\n\t */\n\ttoTicks(): Ticks {\n\t\treturn this.valueOf() as Ticks;\n\t}\n\n\t/**\n\t * Return the time in seconds\n\t */\n\ttoSeconds(): Seconds {\n\t\treturn (this.valueOf() / this._getPPQ()) * (60 / this._getBpm());\n\t}\n}\n\n/**\n * Convert a time representation to ticks\n * @category Unit\n */\nexport function Ticks(value?: TimeValue, units?: TimeBaseUnit): TicksClass {\n\treturn new TicksClass(getContext(), value, units);\n}\n", "import { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { Seconds, Time } from \"../type/Units\";\nimport { Timeline, TimelineEvent } from \"./Timeline\";\nimport { onContextClose, onContextInit } from \"../context/ContextInitialization\";\n\ninterface DrawEvent extends TimelineEvent {\n\tcallback: () => void;\n}\n\n/**\n * Draw is useful for synchronizing visuals and audio events.\n * Callbacks from Tone.Transport or any of the Tone.Event classes\n * always happen _before_ the scheduled time and are not synchronized\n * to the animation frame so they are not good for triggering tightly\n * synchronized visuals and sound. Draw makes it easy to schedule\n * callbacks using the AudioContext time and uses requestAnimationFrame.\n * @example\n * Tone.Transport.schedule((time) => {\n * \t// use the time argument to schedule a callback with Draw\n * \tTone.Draw.schedule(() => {\n * \t\t// do drawing or DOM manipulation here\n * \t\tconsole.log(time);\n * \t}, time);\n * }, \"+0.5\");\n * Tone.Transport.start();\n * @category Core\n */\nexport class Draw extends ToneWithContext<ToneWithContextOptions> {\n\n\treadonly name: string = \"Draw\";\n\n\t/**\n\t * The duration after which events are not invoked.\n\t */\n\texpiration: Seconds = 0.25;\n\n\t/**\n\t * The amount of time before the scheduled time\n\t * that the callback can be invoked. Default is\n\t * half the time of an animation frame (0.008 seconds).\n\t */\n\tanticipation: Seconds = 0.008;\n\n\t/**\n\t * All of the events.\n\t */\n\tprivate _events: Timeline<DrawEvent> = new Timeline();\n\n\t/**\n\t * The draw loop\n\t */\n\tprivate _boundDrawLoop = this._drawLoop.bind(this);\n\n\t/**\n\t * The animation frame id\n\t */\n\tprivate _animationFrame = -1;\n\n\t/**\n\t * Schedule a function at the given time to be invoked\n\t * on the nearest animation frame.\n\t * @param  callback  Callback is invoked at the given time.\n\t * @param  time      The time relative to the AudioContext time to invoke the callback.\n\t * @example\n\t * Tone.Transport.scheduleRepeat(time => {\n\t * \tTone.Draw.schedule(() => console.log(time), time);\n\t * }, 1);\n\t * Tone.Transport.start();\n\t */\n\tschedule(callback: () => void, time: Time): this {\n\t\tthis._events.add({\n\t\t\tcallback,\n\t\t\ttime: this.toSeconds(time),\n\t\t});\n\t\t// start the draw loop on the first event\n\t\tif (this._events.length === 1) {\n\t\t\tthis._animationFrame = requestAnimationFrame(this._boundDrawLoop);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Cancel events scheduled after the given time\n\t * @param  after  Time after which scheduled events will be removed from the scheduling timeline.\n\t */\n\tcancel(after?: Time): this {\n\t\tthis._events.cancel(this.toSeconds(after));\n\t\treturn this;\n\t}\n\n\t/**\n\t * The draw loop\n\t */\n\tprivate _drawLoop(): void {\n\t\tconst now = this.context.currentTime;\n\t\twhile (this._events.length && (this._events.peek() as DrawEvent).time - this.anticipation <= now) {\n\t\t\tconst event = this._events.shift();\n\t\t\tif (event && now - event.time <= this.expiration) {\n\t\t\t\tevent.callback();\n\t\t\t}\n\t\t}\n\t\tif (this._events.length > 0) {\n\t\t\tthis._animationFrame = requestAnimationFrame(this._boundDrawLoop);\n\t\t}\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._events.dispose();\n\t\tcancelAnimationFrame(this._animationFrame);\n\t\treturn this;\n\t}\n}\n\n//-------------------------------------\n// \tINITIALIZATION\n//-------------------------------------\n\nonContextInit(context => {\n\tcontext.draw = new Draw({ context });\n});\n\nonContextClose(context => {\n\tcontext.draw.dispose();\n});\n", "import { Tone } from \"../Tone\";\nimport { isDefined } from \"./TypeCheck\";\nimport { assert } from \"./Debug\";\n\n/**\n * An IntervalTimeline event must have a time and duration\n */\nexport interface IntervalTimelineEvent {\n\ttime: number;\n\tduration: number;\n\t[propName: string]: any;\n}\n\ntype IteratorCallback = (event: IntervalTimelineEvent) => void;\n\n/**\n * Similar to Tone.Timeline, but all events represent\n * intervals with both \"time\" and \"duration\" times. The\n * events are placed in a tree structure optimized\n * for querying an intersection point with the timeline\n * events. Internally uses an [Interval Tree](https://en.wikipedia.org/wiki/Interval_tree)\n * to represent the data.\n */\nexport class IntervalTimeline extends Tone {\n\n\treadonly name: string = \"IntervalTimeline\";\n\n\t/**\n\t * The root node of the inteval tree\n\t */\n\tprivate _root: IntervalNode | null = null;\n\n\t/**\n\t * Keep track of the length of the timeline.\n\t */\n\tprivate _length = 0;\n\n\t/**\n\t * The event to add to the timeline. All events must\n\t * have a time and duration value\n\t * @param  event  The event to add to the timeline\n\t */\n\tadd(event: IntervalTimelineEvent): this {\n\t\tassert(isDefined(event.time), \"Events must have a time property\");\n\t\tassert(isDefined(event.duration), \"Events must have a duration parameter\");\n\n\t\tevent.time = event.time.valueOf();\n\t\tlet node: IntervalNode | null = new IntervalNode(event.time, event.time + event.duration, event);\n\t\tif (this._root === null) {\n\t\t\tthis._root = node;\n\t\t} else {\n\t\t\tthis._root.insert(node);\n\t\t}\n\t\tthis._length++;\n\t\t// Restructure tree to be balanced\n\t\twhile (node !== null) {\n\t\t\tnode.updateHeight();\n\t\t\tnode.updateMax();\n\t\t\tthis._rebalance(node);\n\t\t\tnode = node.parent;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Remove an event from the timeline.\n\t * @param  event  The event to remove from the timeline\n\t */\n\tremove(event: IntervalTimelineEvent): this {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.search(event.time, results);\n\t\t\tfor (const node of results) {\n\t\t\t\tif (node.event === event) {\n\t\t\t\t\tthis._removeNode(node);\n\t\t\t\t\tthis._length--;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * The number of items in the timeline.\n\t * @readOnly\n\t */\n\tget length(): number {\n\t\treturn this._length;\n\t}\n\n\t/**\n\t * Remove events whose time time is after the given time\n\t * @param  after  The time to query.\n\t */\n\tcancel(after: number): this {\n\t\tthis.forEachFrom(after, event => this.remove(event));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the root node as the given node\n\t */\n\tprivate _setRoot(node: IntervalNode | null): void {\n\t\tthis._root = node;\n\t\tif (this._root !== null) {\n\t\t\tthis._root.parent = null;\n\t\t}\n\t}\n\n\t/**\n\t * Replace the references to the node in the node's parent\n\t * with the replacement node.\n\t */\n\tprivate _replaceNodeInParent(node: IntervalNode, replacement: IntervalNode | null): void {\n\t\tif (node.parent !== null) {\n\t\t\tif (node.isLeftChild()) {\n\t\t\t\tnode.parent.left = replacement;\n\t\t\t} else {\n\t\t\t\tnode.parent.right = replacement;\n\t\t\t}\n\t\t\tthis._rebalance(node.parent);\n\t\t} else {\n\t\t\tthis._setRoot(replacement);\n\t\t}\n\t}\n\n\t/**\n\t * Remove the node from the tree and replace it with\n\t * a successor which follows the schema.\n\t */\n\tprivate _removeNode(node: IntervalNode): void {\n\t\tif (node.left === null && node.right === null) {\n\t\t\tthis._replaceNodeInParent(node, null);\n\t\t} else if (node.right === null) {\n\t\t\tthis._replaceNodeInParent(node, node.left);\n\t\t} else if (node.left === null) {\n\t\t\tthis._replaceNodeInParent(node, node.right);\n\t\t} else {\n\t\t\tconst balance = node.getBalance();\n\t\t\tlet replacement: IntervalNode;\n\t\t\tlet temp: IntervalNode | null = null;\n\t\t\tif (balance > 0) {\n\t\t\t\tif (node.left.right === null) {\n\t\t\t\t\treplacement = node.left;\n\t\t\t\t\treplacement.right = node.right;\n\t\t\t\t\ttemp = replacement;\n\t\t\t\t} else {\n\t\t\t\t\treplacement = node.left.right;\n\t\t\t\t\twhile (replacement.right !== null) {\n\t\t\t\t\t\treplacement = replacement.right;\n\t\t\t\t\t}\n\t\t\t\t\tif (replacement.parent) {\n\t\t\t\t\t\treplacement.parent.right = replacement.left;\n\t\t\t\t\t\ttemp = replacement.parent;\n\t\t\t\t\t\treplacement.left = node.left;\n\t\t\t\t\t\treplacement.right = node.right;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (node.right.left === null) {\n\t\t\t\treplacement = node.right;\n\t\t\t\treplacement.left = node.left;\n\t\t\t\ttemp = replacement;\n\t\t\t} else {\n\t\t\t\treplacement = node.right.left;\n\t\t\t\twhile (replacement.left !== null) {\n\t\t\t\t\treplacement = replacement.left;\n\t\t\t\t}\n\t\t\t\tif (replacement.parent) {\n\t\t\t\t\treplacement.parent.left = replacement.right;\n\t\t\t\t\ttemp = replacement.parent;\n\t\t\t\t\treplacement.left = node.left;\n\t\t\t\t\treplacement.right = node.right;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (node.parent !== null) {\n\t\t\t\tif (node.isLeftChild()) {\n\t\t\t\t\tnode.parent.left = replacement;\n\t\t\t\t} else {\n\t\t\t\t\tnode.parent.right = replacement;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._setRoot(replacement);\n\t\t\t}\n\t\t\tif (temp) {\n\t\t\t\tthis._rebalance(temp);\n\t\t\t}\n\t\t}\n\t\tnode.dispose();\n\t}\n\n\t/**\n\t * Rotate the tree to the left\n\t */\n\tprivate _rotateLeft(node: IntervalNode): void {\n\t\tconst parent = node.parent;\n\t\tconst isLeftChild = node.isLeftChild();\n\n\t\t// Make node.right the new root of this sub tree (instead of node)\n\t\tconst pivotNode = node.right;\n\t\tif (pivotNode) {\n\t\t\tnode.right = pivotNode.left;\n\t\t\tpivotNode.left = node;\n\t\t}\n\n\t\tif (parent !== null) {\n\t\t\tif (isLeftChild) {\n\t\t\t\tparent.left = pivotNode;\n\t\t\t} else {\n\t\t\t\tparent.right = pivotNode;\n\t\t\t}\n\t\t} else {\n\t\t\tthis._setRoot(pivotNode);\n\t\t}\n\t}\n\n\t/**\n\t * Rotate the tree to the right\n\t */\n\tprivate _rotateRight(node: IntervalNode): void {\n\t\tconst parent = node.parent;\n\t\tconst isLeftChild = node.isLeftChild();\n\n\t\t// Make node.left the new root of this sub tree (instead of node)\n\t\tconst pivotNode = node.left;\n\t\tif (pivotNode) {\n\t\t\tnode.left = pivotNode.right;\n\t\t\tpivotNode.right = node;\n\t\t}\n\n\t\tif (parent !== null) {\n\t\t\tif (isLeftChild) {\n\t\t\t\tparent.left = pivotNode;\n\t\t\t} else {\n\t\t\t\tparent.right = pivotNode;\n\t\t\t}\n\t\t} else {\n\t\t\tthis._setRoot(pivotNode);\n\t\t}\n\t}\n\n\t/**\n\t * Balance the BST\n\t */\n\tprivate _rebalance(node: IntervalNode): void {\n\t\tconst balance = node.getBalance();\n\t\tif (balance > 1 && node.left) {\n\t\t\tif (node.left.getBalance() < 0) {\n\t\t\t\tthis._rotateLeft(node.left);\n\t\t\t} else {\n\t\t\t\tthis._rotateRight(node);\n\t\t\t}\n\t\t} else if (balance < -1 && node.right) {\n\t\t\tif (node.right.getBalance() > 0) {\n\t\t\t\tthis._rotateRight(node.right);\n\t\t\t} else {\n\t\t\t\tthis._rotateLeft(node);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Get an event whose time and duration span the give time. Will\n\t * return the match whose \"time\" value is closest to the given time.\n\t * @return  The event which spans the desired time\n\t */\n\tget(time: number): IntervalTimelineEvent | null {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.search(time, results);\n\t\t\tif (results.length > 0) {\n\t\t\t\tlet max = results[0];\n\t\t\t\tfor (let i = 1; i < results.length; i++) {\n\t\t\t\t\tif (results[i].low > max.low) {\n\t\t\t\t\t\tmax = results[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn max.event;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Iterate over everything in the timeline.\n\t * @param  callback The callback to invoke with every item\n\t */\n\tforEach(callback: IteratorCallback): this {\n\t\tif (this._root !== null) {\n\t\t\tconst allNodes: IntervalNode[] = [];\n\t\t\tthis._root.traverse(node => allNodes.push(node));\n\t\t\tallNodes.forEach(node => {\n\t\t\t\tif (node.event) {\n\t\t\t\t\tcallback(node.event);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Iterate over everything in the array in which the given time\n\t * overlaps with the time and duration time of the event.\n\t * @param  time The time to check if items are overlapping\n\t * @param  callback The callback to invoke with every item\n\t */\n\tforEachAtTime(time: number, callback: IteratorCallback): this {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.search(time, results);\n\t\t\tresults.forEach(node => {\n\t\t\t\tif (node.event) {\n\t\t\t\t\tcallback(node.event);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Iterate over everything in the array in which the time is greater\n\t * than or equal to the given time.\n\t * @param  time The time to check if items are before\n\t * @param  callback The callback to invoke with every item\n\t */\n\tforEachFrom(time: number, callback: IteratorCallback): this {\n\t\tif (this._root !== null) {\n\t\t\tconst results: IntervalNode[] = [];\n\t\t\tthis._root.searchAfter(time, results);\n\t\t\tresults.forEach(node => {\n\t\t\t\tif (node.event) {\n\t\t\t\t\tcallback(node.event);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this._root !== null) {\n\t\t\tthis._root.traverse(node => node.dispose());\n\t\t}\n\t\tthis._root = null;\n\t\treturn this;\n\t}\n}\n\n//-------------------------------------\n// \tINTERVAL NODE HELPER\n//-------------------------------------\n\n/**\n * Represents a node in the binary search tree, with the addition\n * of a \"high\" value which keeps track of the highest value of\n * its children.\n * References:\n * https://brooknovak.wordpress.com/2013/12/07/augmented-interval-tree-in-c/\n * http://www.mif.vu.lt/~valdas/ALGORITMAI/LITERATURA/Cormen/Cormen.pdf\n * @param low\n * @param high\n */\nclass IntervalNode {\n\n\t// the event container\n\tevent: IntervalTimelineEvent | null;\n\t// the low value\n\tlow: number;\n\t// the high value\n\thigh: number;\n\t// the high value for this and all child nodes\n\tmax: number;\n\t// the nodes to the left\n\tprivate _left: IntervalNode | null = null;\n\t// the nodes to the right\n\tprivate _right: IntervalNode | null = null;\n\t// the parent node\n\tparent: IntervalNode | null = null;\n\t// the number of child nodes\n\theight = 0;\n\n\tconstructor(low: number, high: number, event: IntervalTimelineEvent) {\n\t\tthis.event = event;\n\t\t// the low value\n\t\tthis.low = low;\n\t\t// the high value\n\t\tthis.high = high;\n\t\t// the high value for this and all child nodes\n\t\tthis.max = this.high;\n\t}\n\n\t/**\n\t * Insert a node into the correct spot in the tree\n\t */\n\tinsert(node: IntervalNode): void {\n\t\tif (node.low <= this.low) {\n\t\t\tif (this.left === null) {\n\t\t\t\tthis.left = node;\n\t\t\t} else {\n\t\t\t\tthis.left.insert(node);\n\t\t\t}\n\t\t} else if (this.right === null) {\n\t\t\tthis.right = node;\n\t\t} else {\n\t\t\tthis.right.insert(node);\n\t\t}\n\t}\n\n\t/**\n\t * Search the tree for nodes which overlap\n\t * with the given point\n\t * @param  point  The point to query\n\t * @param  results  The array to put the results\n\t */\n\tsearch(point: number, results: IntervalNode[]): void {\n\t\t// If p is to the right of the rightmost point of any interval\n\t\t// in this node and all children, there won't be any matches.\n\t\tif (point > this.max) {\n\t\t\treturn;\n\t\t}\n\t\t// Search left children\n\t\tif (this.left !== null) {\n\t\t\tthis.left.search(point, results);\n\t\t}\n\t\t// Check this node\n\t\tif (this.low <= point && this.high > point) {\n\t\t\tresults.push(this);\n\t\t}\n\t\t// If p is to the left of the time of this interval,\n\t\t// then it can't be in any child to the right.\n\t\tif (this.low > point) {\n\t\t\treturn;\n\t\t}\n\t\t// Search right children\n\t\tif (this.right !== null) {\n\t\t\tthis.right.search(point, results);\n\t\t}\n\t}\n\n\t/**\n\t * Search the tree for nodes which are less\n\t * than the given point\n\t * @param  point  The point to query\n\t * @param  results  The array to put the results\n\t */\n\tsearchAfter(point: number, results: IntervalNode[]): void {\n\t\t// Check this node\n\t\tif (this.low >= point) {\n\t\t\tresults.push(this);\n\t\t\tif (this.left !== null) {\n\t\t\t\tthis.left.searchAfter(point, results);\n\t\t\t}\n\t\t}\n\t\t// search the right side\n\t\tif (this.right !== null) {\n\t\t\tthis.right.searchAfter(point, results);\n\t\t}\n\t}\n\n\t/**\n\t * Invoke the callback on this element and both it's branches\n\t * @param  {Function}  callback\n\t */\n\ttraverse(callback: (self: IntervalNode) => void): void {\n\t\tcallback(this);\n\t\tif (this.left !== null) {\n\t\t\tthis.left.traverse(callback);\n\t\t}\n\t\tif (this.right !== null) {\n\t\t\tthis.right.traverse(callback);\n\t\t}\n\t}\n\n\t/**\n\t * Update the height of the node\n\t */\n\tupdateHeight(): void {\n\t\tif (this.left !== null && this.right !== null) {\n\t\t\tthis.height = Math.max(this.left.height, this.right.height) + 1;\n\t\t} else if (this.right !== null) {\n\t\t\tthis.height = this.right.height + 1;\n\t\t} else if (this.left !== null) {\n\t\t\tthis.height = this.left.height + 1;\n\t\t} else {\n\t\t\tthis.height = 0;\n\t\t}\n\t}\n\n\t/**\n\t * Update the height of the node\n\t */\n\tupdateMax(): void {\n\t\tthis.max = this.high;\n\t\tif (this.left !== null) {\n\t\t\tthis.max = Math.max(this.max, this.left.max);\n\t\t}\n\t\tif (this.right !== null) {\n\t\t\tthis.max = Math.max(this.max, this.right.max);\n\t\t}\n\t}\n\n\t/**\n\t * The balance is how the leafs are distributed on the node\n\t * @return  Negative numbers are balanced to the right\n\t */\n\tgetBalance(): number {\n\t\tlet balance = 0;\n\t\tif (this.left !== null && this.right !== null) {\n\t\t\tbalance = this.left.height - this.right.height;\n\t\t} else if (this.left !== null) {\n\t\t\tbalance = this.left.height + 1;\n\t\t} else if (this.right !== null) {\n\t\t\tbalance = -(this.right.height + 1);\n\t\t}\n\t\treturn balance;\n\t}\n\n\t/**\n\t * @returns true if this node is the left child of its parent\n\t */\n\tisLeftChild(): boolean {\n\t\treturn this.parent !== null && this.parent.left === this;\n\t}\n\n\t/**\n\t * get/set the left node\n\t */\n\tget left(): IntervalNode | null {\n\t\treturn this._left;\n\t}\n\n\tset left(node: IntervalNode | null) {\n\t\tthis._left = node;\n\t\tif (node !== null) {\n\t\t\tnode.parent = this;\n\t\t}\n\t\tthis.updateHeight();\n\t\tthis.updateMax();\n\t}\n\n\t/**\n\t * get/set the right node\n\t */\n\tget right(): IntervalNode | null {\n\t\treturn this._right;\n\t}\n\n\tset right(node: IntervalNode | null) {\n\t\tthis._right = node;\n\t\tif (node !== null) {\n\t\t\tnode.parent = this;\n\t\t}\n\t\tthis.updateHeight();\n\t\tthis.updateMax();\n\t}\n\n\t/**\n\t * null out references.\n\t */\n\tdispose(): void {\n\t\tthis.parent = null;\n\t\tthis._left = null;\n\t\tthis._right = null;\n\t\tthis.event = null;\n\t}\n}\n", "export * from \"./NoteUnits\";\n\nimport { Note } from \"./NoteUnits\";\n\n/**\n * A number representing a time in seconds\n * @category Unit\n */\nexport type Seconds = number;\n\n/**\n * A number used to measure the intensity of a sound on a logarithmic scale.\n * @category Unit\n */\nexport type Decibels = number;\n\n/**\n * A number that is between [0, 1]\n * @category Unit\n */\nexport type NormalRange = number;\n\n/**\n * A number that is between [-1, 1]\n * @category Unit\n */\nexport type AudioRange = number;\n\n/**\n * Half-step note increments, i.e. 12 is an octave above the root. and 1 is a half-step up.\n * @category Unit\n */\nexport type Interval = number;\n\n/**\n * A number representing the multiplication factor applied to a signal\n * @category Unit\n */\nexport type GainFactor = number;\n\n/**\n * A number greater than or equal to 0.\n * @category Unit\n */\nexport type Positive = number;\n\n/**\n * Represents a subdivision of a measure.\n * The number represents the subdivision. \"t\" represents a triplet. A \".\" add a half.\n * e.g. \"4n\" is a quarter note, \"4t\" is a quarter note triplet, and \"4n.\" is a dotted quarter note.\n * @category Unit\n */\nexport type Subdivision = \"1m\" | \"1n\" | \"1n.\" | \"2n\" | \"2n.\" | \"2t\" | \"4n\" | \"4n.\" | \"4t\" | \"8n\" | \"8n.\" | \"8t\" |\n\"16n\" | \"16n.\" | \"16t\" | \"32n\" | \"32n.\" | \"32t\" | \"64n\" | \"64n.\" | \"64t\" | \"128n\" | \"128n.\" | \"128t\" |\n\"256n\" | \"256n.\" | \"256t\" | \"0\";\n\n/**\n * A time object has a subdivision as the keys and a number as the values.\n * @example\n * Tone.Time({\n * \t\"2n\": 1,\n * \t\"8n\": 3\n * }).valueOf(); // 2n + 8n * 3\n * @category Unit\n */\nexport type TimeObject = {\n\t[sub in Subdivision]?: number;\n};\n\n/**\n * Time can be described in a number of ways. Read more [Time](https://github.com/Tonejs/Tone.js/wiki/Time).\n * * Numbers, which will be taken literally as the time (in seconds).\n * * Notation, (\"4n\", \"8t\") describes time in BPM and time signature relative values.\n * * TransportTime, (\"4:3:2\") will also provide tempo and time signature relative times in the form BARS:QUARTERS:SIXTEENTHS.\n * * Frequency, (\"8hz\") is converted to the length of the cycle in seconds.\n * * Now-Relative, (\"+1\") prefix any of the above with \"+\" and it will be interpreted as \"the current time plus whatever expression follows\".\n * * Object, ({\"4n\" : 3, \"8t\" : -1}). The resulting time is equal to the sum of all of the keys multiplied by the values in the object.\n * * No Argument, for methods which accept time, no argument will be interpreted as \"now\" (i.e. the currentTime).\n * @category Unit\n */\nexport type Time = string | Seconds | TimeObject | Subdivision;\n\n/**\n * Frequency can be described similar to time, except ultimately the\n * values are converted to frequency instead of seconds. A number\n * is taken literally as the value in hertz. Additionally any of the\n * Time encodings can be used. Note names in the form\n * of NOTE OCTAVE (i.e. C4) are also accepted and converted to their\n * frequency value.\n * @category Unit\n */\nexport type Frequency = Subdivision | Note | string | Hertz;\n\n/**\n *\n * @category Unit\n */\nexport type TimeSignature = number | number[];\n\n/**\n * TransportTime describes a position along the Transport's timeline. It is\n * similar to Time in that it uses all the same encodings, but TransportTime specifically\n * pertains to the Transport's timeline, which is startable, stoppable, loopable, and seekable.\n * [Read more](https://github.com/Tonejs/Tone.js/wiki/TransportTime)\n * @category Unit\n */\nexport type TransportTime = Time;\n\n/**\n * Ticks are the basic subunit of the Transport. They are\n * the smallest unit of time that the Transport supports.\n * @category Unit\n */\nexport type Ticks = number;\n\n/**\n * Beats per minute\n * @category Unit\n */\nexport type BPM = number;\n\n/**\n * Angle between 0 and 360.\n * @category Unit\n */\nexport type Degrees = number;\n\n/**\n * Angle between 0 and 2 * PI.\n * @category Unit\n */\nexport type Radians = number;\n\n/**\n * A colon-separated representation of time in the form of\n * Bars:Beats:Sixteenths.\n * @category Unit\n */\nexport type BarsBeatsSixteenths = string;\n/**\n * Sampling is the reduction of a continuous signal to a discrete signal.\n * Audio is typically sampled 44100 times per second.\n * @category Unit\n */\nexport type Samples = number;\n\n/**\n * Hertz are a frequency representation defined as one cycle per second.\n * @category Unit\n */\nexport type Hertz = number;\n\n/**\n * A Cent is 1/100th of a semitone.\n * e.g. a value of 50 cents would be halfway between two intervals.\n * @category Unit\n */\nexport type Cents = number;\n\n/**\n * One millisecond is a thousandth of a second.\n * @category Unit\n */\nexport type Milliseconds = number;\n\n/**\n * A value which is a power of 2\n * @category Unit\n */\nexport type PowerOfTwo = number;\n\n/**\n * Map the unit name to a unit value\n */\nexport interface UnitMap {\n\tnumber: number;\n\tdecibels: Decibels;\n\tnormalRange: NormalRange;\n\taudioRange: AudioRange;\n\tgain: GainFactor;\n\tpositive: Positive;\n\ttime: Time;\n\tfrequency: Frequency;\n\ttransportTime: TransportTime;\n\tticks: Ticks;\n\tbpm: BPM;\n\tdegrees: Degrees;\n\tradians: Radians;\n\tsamples: Samples;\n\thertz: Hertz;\n\tcents: Cents;\n}\n\n/**\n * All of the unit types\n * @category Unit\n */\nexport type Unit = UnitMap[keyof UnitMap];\n\n/**\n * All of the unit names\n * @category Unit\n */\nexport type UnitName = keyof UnitMap;\n", "import { Volume } from \"../../component/channel/Volume\";\nimport { Decibels } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { onContextClose, onContextInit } from \"./ContextInitialization\";\nimport { Gain } from \"./Gain\";\nimport { Param } from \"./Param\";\nimport { connectSeries, ToneAudioNode, ToneAudioNodeOptions } from \"./ToneAudioNode\";\n\ninterface DestinationOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n\tmute: boolean;\n}\n\n/**\n * A single master output which is connected to the\n * AudioDestinationNode (aka your speakers).\n * It provides useful conveniences such as the ability\n * to set the volume and mute the entire application.\n * It also gives you the ability to apply master effects to your application.\n *\n * @example\n * const oscillator = new Tone.Oscillator().start();\n * // the audio will go from the oscillator to the speakers\n * oscillator.connect(Tone.getDestination());\n * // a convenience for connecting to the master output is also provided:\n * oscillator.toDestination();\n * @category Core\n */\nexport class Destination extends ToneAudioNode<DestinationOptions> {\n\n\treadonly name: string = \"Destination\";\n\n\tinput: Volume = new Volume({ context: this.context });\n\toutput: Gain = new Gain({ context: this.context });\n\n\t/**\n\t * The volume of the master output in decibels. -Infinity is silent, and 0 is no change. \n\t * @example\n\t * const osc = new Tone.Oscillator().toDestination();\n\t * osc.start();\n\t * // ramp the volume down to silent over 10 seconds\n\t * Tone.getDestination().volume.rampTo(-Infinity, 10);\n\t */\n\tvolume: Param<\"decibels\"> = this.input.volume;\n\n\tconstructor(options: Partial<DestinationOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Destination.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Destination.getDefaults(), arguments);\n\n\t\tconnectSeries(this.input, this.output, this.context.rawContext.destination);\n\n\t\tthis.mute = options.mute;\n\t\tthis._internalChannels = [this.input, this.context.rawContext.destination, this.output];\n\t}\n\n\tstatic getDefaults(): DestinationOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Mute the output.\n\t * @example\n\t * const oscillator = new Tone.Oscillator().start().toDestination();\n\t * setTimeout(() => {\n\t * \t// mute the output\n\t * \tTone.Destination.mute = true;\n\t * }, 1000);\n\t */\n\tget mute(): boolean {\n\t\treturn this.input.mute;\n\t}\n\tset mute(mute: boolean) {\n\t\tthis.input.mute = mute;\n\t}\n\n\t/**\n\t * Add a master effects chain. NOTE: this will disconnect any nodes which were previously\n\t * chained in the master effects chain.\n\t * @param args All arguments will be connected in a row and the Master will be routed through it.\n\t * @example\n\t * // route all audio through a filter and compressor\n\t * const lowpass = new Tone.Filter(800, \"lowpass\");\n\t * const compressor = new Tone.Compressor(-18);\n\t * Tone.Destination.chain(lowpass, compressor);\n\t */\n\tchain(...args: Array<AudioNode | ToneAudioNode>): this {\n\t\tthis.input.disconnect();\n\t\targs.unshift(this.input);\n\t\targs.push(this.output);\n\t\tconnectSeries(...args);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The maximum number of channels the system can output\n\t * @example\n\t * console.log(Tone.Destination.maxChannelCount);\n\t */\n\tget maxChannelCount(): number {\n\t\treturn this.context.rawContext.destination.maxChannelCount;\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.volume.dispose();\n\t\treturn this;\n\t}\n}\n\n//-------------------------------------\n// \tINITIALIZATION\n//-------------------------------------\n\nonContextInit(context => {\n\tcontext.destination = new Destination({ context });\n});\n\nonContextClose(context => {\n\tcontext.destination.dispose();\n});\n", "import { Timeline, TimelineEvent } from \"./Timeline\";\nimport { Tone } from \"../Tone\";\nimport { Seconds } from \"../type/Units\";\n\ninterface TimelineValueEvent<T> extends TimelineEvent {\n\tvalue: T;\n}\n\n/**\n * Represents a single value which is gettable and settable in a timed way\n */\nexport class TimelineValue<Type> extends Tone {\n\n\treadonly name: string = \"TimelineValue\";\n\n\t/**\n\t * The timeline which stores the values\n\t */\n\tprivate _timeline: Timeline<TimelineValueEvent<Type>> = new Timeline({ memory: 10 })\n\n\t/**\n\t * Hold the value to return if there is no scheduled values\n\t */\n\tprivate _initialValue: Type;\n\n\t/**\n\t * @param initialValue The value to return if there is no scheduled values\n\t */\n\tconstructor(initialValue: Type) {\n\n\t\tsuper();\n\t\tthis._initialValue = initialValue;\n\t}\n\n\t/**\n\t * Set the value at the given time\n\t */\n\tset(value: Type, time: Seconds): this {\n\t\tthis._timeline.add({\n\t\t\tvalue, time\n\t\t});\n\t\treturn this;\n\t}\n\t\n\t/**\n\t * Get the value at the given time\n\t */\n\tget(time: Seconds): Type {\n\t\tconst event = this._timeline.get(time);\n\t\tif (event) {\n\t\t\treturn event.value;\n\t\t} else {\n\t\t\treturn this._initialValue;\n\t\t}\n\t}\n}\n", "import { Seconds, Ticks } from \"../type/Units\";\nimport { noOp } from \"../util/Interface\";\n\ntype Transport = import(\"../clock/Transport\").Transport;\n\nexport interface TransportEventOptions {\n\tcallback: (time: number) => void;\n\tonce: boolean;\n\ttime: Ticks;\n}\n\n/**\n * TransportEvent is an internal class used by [[Transport]]\n * to schedule events. Do no invoke this class directly, it is\n * handled from within Tone.Transport.\n */\nexport class TransportEvent {\n\n\t/**\n\t * Reference to the Transport that created it\n\t */\n\tprotected transport: Transport;\n\n\t/**\n\t * The unique id of the event\n\t */\n\tid: number = TransportEvent._eventId++;\n\n\t/**\n\t * The time the event starts\n\t */\n\ttime: Ticks;\n\n\t/**\n\t * The callback to invoke\n\t */\n\tprivate callback?: (time: Seconds) => void;\n\n\t/**\n\t * If the event should be removed after being invoked.\n\t */\n\tprivate _once: boolean;\n\n\t/**\n\t * @param transport The transport object which the event belongs to\n\t */\n\tconstructor(transport: Transport, opts: Partial<TransportEventOptions>) {\n\n\t\tconst options: TransportEventOptions = Object.assign(TransportEvent.getDefaults(), opts);\n\n\t\tthis.transport = transport;\n\t\tthis.callback = options.callback;\n\t\tthis._once = options.once;\n\t\tthis.time = options.time;\n\t}\n\n\tstatic getDefaults(): TransportEventOptions {\n\t\treturn {\n\t\t\tcallback: noOp,\n\t\t\tonce: false,\n\t\t\ttime: 0,\n\t\t};\n\t}\n\n\t/**\n\t * Current ID counter\n\t */\n\tprivate static _eventId = 0;\n\n\t/**\n\t * Invoke the event callback.\n\t * @param  time  The AudioContext time in seconds of the event\n\t */\n\tinvoke(time: Seconds): void {\n\t\tif (this.callback) {\n\t\t\tthis.callback(time);\n\t\t\tif (this._once) {\n\t\t\t\tthis.transport.clear(this.id);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tthis.callback = undefined;\n\t\treturn this;\n\t}\n}\n", "import { BaseContext } from \"../context/BaseContext\";\nimport { TicksClass } from \"../type/Ticks\";\nimport { Seconds, Ticks, Time } from \"../type/Units\";\nimport { TransportEvent, TransportEventOptions } from \"./TransportEvent\";\n\ntype Transport = import(\"../clock/Transport\").Transport;\n\ninterface TransportRepeatEventOptions extends TransportEventOptions {\n\tinterval: Ticks;\n\tduration: Ticks;\n}\n\n/**\n * TransportRepeatEvent is an internal class used by Tone.Transport\n * to schedule repeat events. This class should not be instantiated directly.\n */\nexport class TransportRepeatEvent extends TransportEvent {\n\n\t/**\n\t * When the event should stop repeating\n\t */\n\tprivate duration: Ticks;\n\n\t/**\n\t * The interval of the repeated event\n\t */\n\tprivate _interval: Ticks;\n\n\t/**\n\t * The ID of the current timeline event\n\t */\n\tprivate _currentId = -1;\n\n\t/**\n\t * The ID of the next timeline event\n\t */\n\tprivate _nextId = -1;\n\n\t/**\n\t * The time of the next event\n\t */\n\tprivate _nextTick = this.time;\n\n\t/**\n\t * a reference to the bound start method\n\t */\n\tprivate _boundRestart = this._restart.bind(this);\n\n\t/**\n\t * The audio context belonging to this event\n\t */\n\tprotected context: BaseContext;\n\n\t/**\n\t * @param transport The transport object which the event belongs to\n\t */\n\tconstructor(transport: Transport, opts: Partial<TransportRepeatEventOptions>) {\n\n\t\tsuper(transport, opts);\n\n\t\tconst options = Object.assign(TransportRepeatEvent.getDefaults(), opts);\n\n\t\tthis.duration = new TicksClass(transport.context, options.duration).valueOf();\n\t\tthis._interval = new TicksClass(transport.context, options.interval).valueOf();\n\t\tthis._nextTick = options.time;\n\t\tthis.transport.on(\"start\", this._boundRestart);\n\t\tthis.transport.on(\"loopStart\", this._boundRestart);\n\t\tthis.context = this.transport.context;\n\t\tthis._restart();\n\t}\n\n\tstatic getDefaults(): TransportRepeatEventOptions {\n\t\treturn Object.assign({}, TransportEvent.getDefaults(), {\n\t\t\tduration: Infinity,\n\t\t\tinterval: 1,\n\t\t\tonce: false,\n\t\t});\n\t}\n\n\t/**\n\t * Invoke the callback. Returns the tick time which\n\t * the next event should be scheduled at.\n\t * @param  time  The AudioContext time in seconds of the event\n\t */\n\tinvoke(time: Seconds): void {\n\t\t// create more events if necessary\n\t\tthis._createEvents(time);\n\t\t// call the super class\n\t\tsuper.invoke(time);\n\t}\n\n\t/**\n\t * Push more events onto the timeline to keep up with the position of the timeline\n\t */\n\tprivate _createEvents(time: Seconds): void {\n\t\t// schedule the next event\n\t\tconst ticks = this.transport.getTicksAtTime(time);\n\t\tif (ticks >= this.time && ticks >= this._nextTick && this._nextTick + this._interval < this.time + this.duration) {\n\t\t\tthis._nextTick += this._interval;\n\t\t\tthis._currentId = this._nextId;\n\t\t\tthis._nextId = this.transport.scheduleOnce(this.invoke.bind(this),\n\t\t\t\tnew TicksClass(this.context, this._nextTick).toSeconds());\n\t\t}\n\t}\n\n\t/**\n\t * Push more events onto the timeline to keep up with the position of the timeline\n\t */\n\tprivate _restart(time?: Time): void {\n\t\tthis.transport.clear(this._currentId);\n\t\tthis.transport.clear(this._nextId);\n\t\tthis._nextTick = this.time;\n\t\tconst ticks = this.transport.getTicksAtTime(time);\n\t\tif (ticks > this.time) {\n\t\t\tthis._nextTick = this.time + Math.ceil((ticks - this.time) / this._interval) * this._interval;\n\t\t}\n\t\tthis._currentId = this.transport.scheduleOnce(this.invoke.bind(this),\n\t\t\tnew TicksClass(this.context, this._nextTick).toSeconds());\n\t\tthis._nextTick += this._interval;\n\t\tthis._nextId = this.transport.scheduleOnce(this.invoke.bind(this),\n\t\t\tnew TicksClass(this.context, this._nextTick).toSeconds());\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.transport.clear(this._currentId);\n\t\tthis.transport.clear(this._nextId);\n\t\tthis.transport.off(\"start\", this._boundRestart);\n\t\tthis.transport.off(\"loopStart\", this._boundRestart);\n\t\treturn this;\n\t}\n}\n", "import { TimeClass } from \"../../core/type/Time\";\nimport { PlaybackState } from \"../../core/util/StateTimeline\";\nimport { TimelineValue } from \"../../core/util/TimelineValue\";\nimport { Signal } from \"../../signal/Signal\";\nimport { onContextClose, onContextInit } from \"../context/ContextInitialization\";\nimport { Gain } from \"../context/Gain\";\nimport { ToneWithContext, ToneWithContextOptions } from \"../context/ToneWithContext\";\nimport { TicksClass } from \"../type/Ticks\";\nimport { TransportTimeClass } from \"../type/TransportTime\";\nimport {\n\tBarsBeatsSixteenths, BPM, NormalRange, Seconds,\n\tSubdivision, Ticks, Time, TimeSignature, TransportTime\n} from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Emitter } from \"../util/Emitter\";\nimport { readOnly, writable } from \"../util/Interface\";\nimport { IntervalTimeline } from \"../util/IntervalTimeline\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isArray, isDefined } from \"../util/TypeCheck\";\nimport { Clock } from \"./Clock\";\nimport { TickParam } from \"./TickParam\";\nimport { TransportEvent } from \"./TransportEvent\";\nimport { TransportRepeatEvent } from \"./TransportRepeatEvent\";\n\ninterface TransportOptions extends ToneWithContextOptions {\n\tbpm: BPM;\n\tswing: NormalRange;\n\tswingSubdivision: Subdivision;\n\ttimeSignature: number;\n\tloopStart: Time;\n\tloopEnd: Time;\n\tppq: number;\n}\n\ntype TransportEventNames = \"start\" | \"stop\" | \"pause\" | \"loop\" | \"loopEnd\" | \"loopStart\";\n\ninterface SyncedSignalEvent {\n\tsignal: Signal;\n\tinitial: number;\n\tratio: Gain;\n}\n\ntype TransportCallback = (time: Seconds) => void;\n\n/**\n * Transport for timing musical events.\n * Supports tempo curves and time changes. Unlike browser-based timing (setInterval, requestAnimationFrame)\n * Transport timing events pass in the exact time of the scheduled event\n * in the argument of the callback function. Pass that time value to the object\n * you're scheduling. <br><br>\n * A single transport is created for you when the library is initialized.\n * <br><br>\n * The transport emits the events: \"start\", \"stop\", \"pause\", and \"loop\" which are\n * called with the time of that event as the argument.\n *\n * @example\n * const osc = new Tone.Oscillator().toDestination();\n * // repeated event every 8th note\n * Tone.Transport.scheduleRepeat((time) => {\n * \t// use the callback time to schedule events\n * \tosc.start(time).stop(time + 0.1);\n * }, \"8n\");\n * // transport must be started before it starts invoking events\n * Tone.Transport.start();\n * @category Core\n */\nexport class Transport extends ToneWithContext<TransportOptions> implements Emitter<TransportEventNames> {\n\n\treadonly name: string = \"Transport\";\n\n\t//-------------------------------------\n\t// \tLOOPING\n\t//-------------------------------------\n\n\t/**\n\t * If the transport loops or not.\n\t */\n\tprivate _loop: TimelineValue<boolean> = new TimelineValue(false);\n\n\t/**\n\t * The loop start position in ticks\n\t */\n\tprivate _loopStart: Ticks = 0;\n\n\t/**\n\t * The loop end position in ticks\n\t */\n\tprivate _loopEnd: Ticks = 0;\n\n\t//-------------------------------------\n\t// \tCLOCK/TEMPO\n\t//-------------------------------------\n\n\t/**\n\t * Pulses per quarter is the number of ticks per quarter note.\n\t */\n\tprivate _ppq: number;\n\n\t/**\n\t * watches the main oscillator for timing ticks\n\t * initially starts at 120bpm\n\t */\n\tprivate _clock: Clock<\"bpm\">;\n\n\t/**\n\t * The Beats Per Minute of the Transport.\n\t * @example\n\t * const osc = new Tone.Oscillator().toDestination();\n\t * Tone.Transport.bpm.value = 80;\n\t * // start/stop the oscillator every quarter note\n\t * Tone.Transport.scheduleRepeat(time => {\n\t * \tosc.start(time).stop(time + 0.1);\n\t * }, \"4n\");\n\t * Tone.Transport.start();\n\t * // ramp the bpm to 120 over 10 seconds\n\t * Tone.Transport.bpm.rampTo(120, 10);\n\t */\n\tbpm: TickParam<\"bpm\">;\n\n\t/**\n\t * The time signature, or more accurately the numerator\n\t * of the time signature over a denominator of 4.\n\t */\n\tprivate _timeSignature: number;\n\n\t//-------------------------------------\n\t// \tTIMELINE EVENTS\n\t//-------------------------------------\n\n\t/**\n\t * All the events in an object to keep track by ID\n\t */\n\tprivate _scheduledEvents = {};\n\n\t/**\n\t * The scheduled events.\n\t */\n\tprivate _timeline: Timeline<TransportEvent> = new Timeline();\n\n\t/**\n\t * Repeated events\n\t */\n\tprivate _repeatedEvents: IntervalTimeline = new IntervalTimeline();\n\n\t/**\n\t * All of the synced Signals\n\t */\n\tprivate _syncedSignals: SyncedSignalEvent[] = [];\n\n\t//-------------------------------------\n\t// \tSWING\n\t//-------------------------------------\n\n\t/**\n\t * The subdivision of the swing\n\t */\n\tprivate _swingTicks: Ticks;\n\n\t/**\n\t * The swing amount\n\t */\n\tprivate _swingAmount: NormalRange = 0;\n\n\tconstructor(options?: Partial<TransportOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Transport.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Transport.getDefaults(), arguments);\n\n\t\t// CLOCK/TEMPO\n\t\tthis._ppq = options.ppq;\n\t\tthis._clock = new Clock({\n\t\t\tcallback: this._processTick.bind(this),\n\t\t\tcontext: this.context,\n\t\t\tfrequency: 0,\n\t\t\tunits: \"bpm\",\n\t\t});\n\t\tthis._bindClockEvents();\n\t\tthis.bpm = this._clock.frequency as unknown as TickParam<\"bpm\">;\n\t\tthis._clock.frequency.multiplier = options.ppq;\n\t\tthis.bpm.setValueAtTime(options.bpm, 0);\n\t\treadOnly(this, \"bpm\");\n\t\tthis._timeSignature = options.timeSignature;\n\n\t\t// SWING\n\t\tthis._swingTicks = options.ppq / 2; // 8n\n\t}\n\n\tstatic getDefaults(): TransportOptions {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tbpm: 120,\n\t\t\tloopEnd: \"4m\" as Subdivision,\n\t\t\tloopStart: 0,\n\t\t\tppq: 192,\n\t\t\tswing: 0,\n\t\t\tswingSubdivision: \"8n\" as Subdivision,\n\t\t\ttimeSignature: 4,\n\t\t});\n\t}\n\n\t//-------------------------------------\n\t// \tTICKS\n\t//-------------------------------------\n\n\t/**\n\t * called on every tick\n\t * @param  tickTime clock relative tick time\n\t */\n\tprivate _processTick(tickTime: Seconds, ticks: Ticks): void {\n\t\t// do the loop test\n\t\tif (this._loop.get(tickTime)) {\n\t\t\tif (ticks >= this._loopEnd) {\n\t\t\t\tthis.emit(\"loopEnd\", tickTime);\n\t\t\t\tthis._clock.setTicksAtTime(this._loopStart, tickTime);\n\t\t\t\tticks = this._loopStart;\n\t\t\t\tthis.emit(\"loopStart\", tickTime, this._clock.getSecondsAtTime(tickTime));\n\t\t\t\tthis.emit(\"loop\", tickTime);\n\t\t\t}\n\t\t}\n\t\t// handle swing\n\t\tif (this._swingAmount > 0 &&\n\t\t\tticks % this._ppq !== 0 && // not on a downbeat\n\t\t\tticks % (this._swingTicks * 2) !== 0) {\n\t\t\t// add some swing\n\t\t\tconst progress = (ticks % (this._swingTicks * 2)) / (this._swingTicks * 2);\n\t\t\tconst amount = Math.sin((progress) * Math.PI) * this._swingAmount;\n\t\t\ttickTime += new TicksClass(this.context, this._swingTicks * 2 / 3).toSeconds() * amount;\n\t\t}\n\t\t// invoke the timeline events scheduled on this tick\n\t\tthis._timeline.forEachAtTime(ticks, event => event.invoke(tickTime));\n\t}\n\n\t//-------------------------------------\n\t// \tSCHEDULABLE EVENTS\n\t//-------------------------------------\n\n\t/**\n\t * Schedule an event along the timeline.\n\t * @param callback The callback to be invoked at the time.\n\t * @param time The time to invoke the callback at.\n\t * @return The id of the event which can be used for canceling the event.\n\t * @example\n\t * // schedule an event on the 16th measure\n\t * Tone.Transport.schedule((time) => {\n\t * \t// invoked on measure 16\n\t * \tconsole.log(\"measure 16!\");\n\t * }, \"16:0:0\");\n\t */\n\tschedule(callback: TransportCallback, time: TransportTime | TransportTimeClass): number {\n\t\tconst event = new TransportEvent(this, {\n\t\t\tcallback,\n\t\t\ttime: new TransportTimeClass(this.context, time).toTicks(),\n\t\t});\n\t\treturn this._addEvent(event, this._timeline);\n\t}\n\n\t/**\n\t * Schedule a repeated event along the timeline. The event will fire\n\t * at the `interval` starting at the `startTime` and for the specified\n\t * `duration`.\n\t * @param  callback   The callback to invoke.\n\t * @param  interval   The duration between successive callbacks. Must be a positive number.\n\t * @param  startTime  When along the timeline the events should start being invoked.\n\t * @param  duration How long the event should repeat.\n\t * @return  The ID of the scheduled event. Use this to cancel the event.\n\t * @example\n\t * const osc = new Tone.Oscillator().toDestination().start();\n\t * // a callback invoked every eighth note after the first measure\n\t * Tone.Transport.scheduleRepeat((time) => {\n\t * \tosc.start(time).stop(time + 0.1);\n\t * }, \"8n\", \"1m\");\n\t */\n\tscheduleRepeat(\n\t\tcallback: TransportCallback,\n\t\tinterval: Time | TimeClass,\n\t\tstartTime?: TransportTime | TransportTimeClass,\n\t\tduration: Time = Infinity,\n\t): number {\n\t\tconst event = new TransportRepeatEvent(this, {\n\t\t\tcallback,\n\t\t\tduration: new TimeClass(this.context, duration).toTicks(),\n\t\t\tinterval: new TimeClass(this.context, interval).toTicks(),\n\t\t\ttime: new TransportTimeClass(this.context, startTime).toTicks(),\n\t\t});\n\t\t// kick it off if the Transport is started\n\t\t// @ts-ignore\n\t\treturn this._addEvent(event, this._repeatedEvents);\n\t}\n\n\t/**\n\t * Schedule an event that will be removed after it is invoked.\n\t * @param callback The callback to invoke once.\n\t * @param time The time the callback should be invoked.\n\t * @returns The ID of the scheduled event.\n\t */\n\tscheduleOnce(callback: TransportCallback, time: TransportTime | TransportTimeClass): number {\n\t\tconst event = new TransportEvent(this, {\n\t\t\tcallback,\n\t\t\tonce: true,\n\t\t\ttime: new TransportTimeClass(this.context, time).toTicks(),\n\t\t});\n\t\treturn this._addEvent(event, this._timeline);\n\t}\n\n\t/**\n\t * Clear the passed in event id from the timeline\n\t * @param eventId The id of the event.\n\t */\n\tclear(eventId: number): this {\n\t\tif (this._scheduledEvents.hasOwnProperty(eventId)) {\n\t\t\tconst item = this._scheduledEvents[eventId.toString()];\n\t\t\titem.timeline.remove(item.event);\n\t\t\titem.event.dispose();\n\t\t\tdelete this._scheduledEvents[eventId.toString()];\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add an event to the correct timeline. Keep track of the\n\t * timeline it was added to.\n\t * @returns the event id which was just added\n\t */\n\tprivate _addEvent(event: TransportEvent, timeline: Timeline<TransportEvent>): number {\n\t\tthis._scheduledEvents[event.id.toString()] = {\n\t\t\tevent,\n\t\t\ttimeline,\n\t\t};\n\t\ttimeline.add(event);\n\t\treturn event.id;\n\t}\n\n\t/**\n\t * Remove scheduled events from the timeline after\n\t * the given time. Repeated events will be removed\n\t * if their startTime is after the given time\n\t * @param after Clear all events after this time.\n\t */\n\tcancel(after: TransportTime = 0): this {\n\t\tconst computedAfter = this.toTicks(after);\n\t\tthis._timeline.forEachFrom(computedAfter, event => this.clear(event.id));\n\t\tthis._repeatedEvents.forEachFrom(computedAfter, event => this.clear(event.id));\n\t\treturn this;\n\t}\n\n\t//-------------------------------------\n\t// \tSTART/STOP/PAUSE\n\t//-------------------------------------\n\n\t/**\n\t * Bind start/stop/pause events from the clock and emit them.\n\t */\n\tprivate _bindClockEvents(): void {\n\t\tthis._clock.on(\"start\", (time, offset) => {\n\t\t\toffset = new TicksClass(this.context, offset).toSeconds();\n\t\t\tthis.emit(\"start\", time, offset);\n\t\t});\n\n\t\tthis._clock.on(\"stop\", (time) => {\n\t\t\tthis.emit(\"stop\", time);\n\t\t});\n\n\t\tthis._clock.on(\"pause\", (time) => {\n\t\t\tthis.emit(\"pause\", time);\n\t\t});\n\t}\n\n\t/**\n\t * Returns the playback state of the source, either \"started\", \"stopped\", or \"paused\"\n\t */\n\tget state(): PlaybackState {\n\t\treturn this._clock.getStateAtTime(this.now());\n\t}\n\n\t/**\n\t * Start the transport and all sources synced to the transport.\n\t * @param  time The time when the transport should start.\n\t * @param  offset The timeline offset to start the transport.\n\t * @example\n\t * // start the transport in one second starting at beginning of the 5th measure.\n\t * Tone.Transport.start(\"+1\", \"4:0:0\");\n\t */\n\tstart(time?: Time, offset?: TransportTime): this {\n\t\tlet offsetTicks;\n\t\tif (isDefined(offset)) {\n\t\t\toffsetTicks = this.toTicks(offset);\n\t\t}\n\t\t// start the clock\n\t\tthis._clock.start(time, offsetTicks);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the transport and all sources synced to the transport.\n\t * @param time The time when the transport should stop.\n\t * @example\n\t * Tone.Transport.stop();\n\t */\n\tstop(time?: Time): this {\n\t\tthis._clock.stop(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Pause the transport and all sources synced to the transport.\n\t */\n\tpause(time?: Time): this {\n\t\tthis._clock.pause(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Toggle the current state of the transport. If it is\n\t * started, it will stop it, otherwise it will start the Transport.\n\t * @param  time The time of the event\n\t */\n\ttoggle(time?: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tif (this._clock.getStateAtTime(time) !== \"started\") {\n\t\t\tthis.start(time);\n\t\t} else {\n\t\t\tthis.stop(time);\n\t\t}\n\t\treturn this;\n\t}\n\n\t//-------------------------------------\n\t// \tSETTERS/GETTERS\n\t//-------------------------------------\n\n\t/**\n\t * The time signature as just the numerator over 4.\n\t * For example 4/4 would be just 4 and 6/8 would be 3.\n\t * @example\n\t * // common time\n\t * Tone.Transport.timeSignature = 4;\n\t * // 7/8\n\t * Tone.Transport.timeSignature = [7, 8];\n\t * // this will be reduced to a single number\n\t * Tone.Transport.timeSignature; // returns 3.5\n\t */\n\tget timeSignature(): TimeSignature {\n\t\treturn this._timeSignature;\n\t}\n\tset timeSignature(timeSig: TimeSignature) {\n\t\tif (isArray(timeSig)) {\n\t\t\ttimeSig = (timeSig[0] / timeSig[1]) * 4;\n\t\t}\n\t\tthis._timeSignature = timeSig;\n\t}\n\n\t/**\n\t * When the Transport.loop = true, this is the starting position of the loop.\n\t */\n\tget loopStart(): Time {\n\t\treturn new TimeClass(this.context, this._loopStart, \"i\").toSeconds();\n\t}\n\tset loopStart(startPosition: Time) {\n\t\tthis._loopStart = this.toTicks(startPosition);\n\t}\n\n\t/**\n\t * When the Transport.loop = true, this is the ending position of the loop.\n\t */\n\tget loopEnd(): Time {\n\t\treturn new TimeClass(this.context, this._loopEnd, \"i\").toSeconds();\n\t}\n\tset loopEnd(endPosition: Time) {\n\t\tthis._loopEnd = this.toTicks(endPosition);\n\t}\n\n\t/**\n\t * If the transport loops or not.\n\t */\n\tget loop(): boolean {\n\t\treturn this._loop.get(this.now());\n\t}\n\tset loop(loop) {\n\t\tthis._loop.set(loop, this.now());\n\t}\n\n\t/**\n\t * Set the loop start and stop at the same time.\n\t * @example\n\t * // loop over the first measure\n\t * Tone.Transport.setLoopPoints(0, \"1m\");\n\t * Tone.Transport.loop = true;\n\t */\n\tsetLoopPoints(startPosition: TransportTime, endPosition: TransportTime): this {\n\t\tthis.loopStart = startPosition;\n\t\tthis.loopEnd = endPosition;\n\t\treturn this;\n\t}\n\n\t/**\n\t * The swing value. Between 0-1 where 1 equal to the note + half the subdivision.\n\t */\n\tget swing(): NormalRange {\n\t\treturn this._swingAmount;\n\t}\n\tset swing(amount: NormalRange) {\n\t\t// scale the values to a normal range\n\t\tthis._swingAmount = amount;\n\t}\n\n\t/**\n\t * Set the subdivision which the swing will be applied to.\n\t * The default value is an 8th note. Value must be less\n\t * than a quarter note.\n\t */\n\tget swingSubdivision(): Subdivision {\n\t\treturn new TicksClass(this.context, this._swingTicks).toNotation();\n\t}\n\tset swingSubdivision(subdivision: Subdivision) {\n\t\tthis._swingTicks = this.toTicks(subdivision);\n\t}\n\n\t/**\n\t * The Transport's position in Bars:Beats:Sixteenths.\n\t * Setting the value will jump to that position right away.\n\t */\n\tget position(): BarsBeatsSixteenths | Time {\n\t\tconst now = this.now();\n\t\tconst ticks = this._clock.getTicksAtTime(now);\n\t\treturn new TicksClass(this.context, ticks).toBarsBeatsSixteenths();\n\t}\n\tset position(progress: Time) {\n\t\tconst ticks = this.toTicks(progress);\n\t\tthis.ticks = ticks;\n\t}\n\n\t/**\n\t * The Transport's position in seconds\n\t * Setting the value will jump to that position right away.\n\t */\n\tget seconds(): Seconds {\n\t\treturn this._clock.seconds;\n\t}\n\tset seconds(s: Seconds) {\n\t\tconst now = this.now();\n\t\tconst ticks = this._clock.frequency.timeToTicks(s, now);\n\t\tthis.ticks = ticks;\n\t}\n\n\t/**\n\t * The Transport's loop position as a normalized value. Always\n\t * returns 0 if the transport if loop is not true.\n\t */\n\tget progress(): NormalRange {\n\t\tif (this.loop) {\n\t\t\tconst now = this.now();\n\t\t\tconst ticks = this._clock.getTicksAtTime(now);\n\t\t\treturn (ticks - this._loopStart) / (this._loopEnd - this._loopStart);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * The transports current tick position.\n\t */\n\tget ticks(): Ticks {\n\t\treturn this._clock.ticks;\n\t}\n\tset ticks(t: Ticks) {\n\t\tif (this._clock.ticks !== t) {\n\t\t\tconst now = this.now();\n\t\t\t// stop everything synced to the transport\n\t\t\tif (this.state === \"started\") {\n\t\t\t\tconst ticks = this._clock.getTicksAtTime(now);\n\t\t\t\t// schedule to start on the next tick, #573\n\t\t\t\tconst remainingTick = this._clock.frequency.getDurationOfTicks(Math.ceil(ticks) - ticks, now);\n\t\t\t\tconst time = now + remainingTick;\n\t\t\t\tthis.emit(\"stop\", time);\n\t\t\t\tthis._clock.setTicksAtTime(t, time);\n\t\t\t\t// restart it with the new time\n\t\t\t\tthis.emit(\"start\", time, this._clock.getSecondsAtTime(time));\n\t\t\t} else {\n\t\t\t\tthis._clock.setTicksAtTime(t, now);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Get the clock's ticks at the given time.\n\t * @param  time  When to get the tick value\n\t * @return The tick value at the given time.\n\t */\n\tgetTicksAtTime(time?: Time): Ticks {\n\t\treturn Math.round(this._clock.getTicksAtTime(time));\n\t}\n\n\t/**\n\t * Return the elapsed seconds at the given time.\n\t * @param  time  When to get the elapsed seconds\n\t * @return  The number of elapsed seconds\n\t */\n\tgetSecondsAtTime(time: Time): Seconds {\n\t\treturn this._clock.getSecondsAtTime(time);\n\t}\n\n\t/**\n\t * Pulses Per Quarter note. This is the smallest resolution\n\t * the Transport timing supports. This should be set once\n\t * on initialization and not set again. Changing this value\n\t * after other objects have been created can cause problems.\n\t */\n\tget PPQ(): number {\n\t\treturn this._clock.frequency.multiplier;\n\t}\n\tset PPQ(ppq: number) {\n\t\tthis._clock.frequency.multiplier = ppq;\n\t}\n\n\t//-------------------------------------\n\t// \tSYNCING\n\t//-------------------------------------\n\n\t/**\n\t * Returns the time aligned to the next subdivision\n\t * of the Transport. If the Transport is not started,\n\t * it will return 0.\n\t * Note: this will not work precisely during tempo ramps.\n\t * @param  subdivision  The subdivision to quantize to\n\t * @return  The context time of the next subdivision.\n\t * @example\n\t * // the transport must be started, otherwise returns 0\n\t * Tone.Transport.start(); \n\t * Tone.Transport.nextSubdivision(\"4n\");\n\t */\n\tnextSubdivision(subdivision?: Time): Seconds {\n\t\tsubdivision = this.toTicks(subdivision);\n\t\tif (this.state !== \"started\") {\n\t\t\t// if the transport's not started, return 0\n\t\t\treturn 0;\n\t\t} else {\n\t\t\tconst now = this.now();\n\t\t\t// the remainder of the current ticks and the subdivision\n\t\t\tconst transportPos = this.getTicksAtTime(now);\n\t\t\tconst remainingTicks = subdivision - transportPos % subdivision;\n\t\t\treturn this._clock.nextTickTime(remainingTicks, now);\n\t\t}\n\t}\n\n\t/**\n\t * Attaches the signal to the tempo control signal so that\n\t * any changes in the tempo will change the signal in the same\n\t * ratio.\n\t *\n\t * @param signal\n\t * @param ratio Optionally pass in the ratio between the two signals.\n\t * \t\t\tOtherwise it will be computed based on their current values.\n\t */\n\tsyncSignal(signal: Signal<any>, ratio?: number): this {\n\t\tif (!ratio) {\n\t\t\t// get the sync ratio\n\t\t\tconst now = this.now();\n\t\t\tif (signal.getValueAtTime(now) !== 0) {\n\t\t\t\tconst bpm = this.bpm.getValueAtTime(now);\n\t\t\t\tconst computedFreq = 1 / (60 / bpm / this.PPQ);\n\t\t\t\tratio = signal.getValueAtTime(now) / computedFreq;\n\t\t\t} else {\n\t\t\t\tratio = 0;\n\t\t\t}\n\t\t}\n\t\tconst ratioSignal = new Gain(ratio);\n\t\t// @ts-ignore\n\t\tthis.bpm.connect(ratioSignal);\n\t\t// @ts-ignore\n\t\tratioSignal.connect(signal._param);\n\t\tthis._syncedSignals.push({\n\t\t\tinitial: signal.value,\n\t\t\tratio: ratioSignal,\n\t\t\tsignal,\n\t\t});\n\t\tsignal.value = 0;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unsyncs a previously synced signal from the transport's control.\n\t * See Transport.syncSignal.\n\t */\n\tunsyncSignal(signal: Signal<any>): this {\n\t\tfor (let i = this._syncedSignals.length - 1; i >= 0; i--) {\n\t\t\tconst syncedSignal = this._syncedSignals[i];\n\t\t\tif (syncedSignal.signal === signal) {\n\t\t\t\tsyncedSignal.ratio.dispose();\n\t\t\t\tsyncedSignal.signal.value = syncedSignal.initial;\n\t\t\t\tthis._syncedSignals.splice(i, 1);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._clock.dispose();\n\t\twritable(this, \"bpm\");\n\t\tthis._timeline.dispose();\n\t\tthis._repeatedEvents.dispose();\n\t\treturn this;\n\t}\n\n\t//-------------------------------------\n\t// EMITTER MIXIN TO SATISFY COMPILER\n\t//-------------------------------------\n\n\ton!: (event: TransportEventNames, callback: (...args: any[]) => void) => this;\n\tonce!: (event: TransportEventNames, callback: (...args: any[]) => void) => this;\n\toff!: (event: TransportEventNames, callback?: ((...args: any[]) => void) | undefined) => this;\n\temit!: (event: any, ...args: any[]) => this;\n}\n\nEmitter.mixin(Transport);\n\n//-------------------------------------\n// \tINITIALIZATION\n//-------------------------------------\n\nonContextInit(context => {\n\tcontext.transport = new Transport({ context });\n});\n\nonContextClose(context => {\n\tcontext.transport.dispose();\n});\n", "import { Volume } from \"../component/channel/Volume\";\nimport \"../core/context/Destination\";\nimport \"../core/clock/Transport\";\nimport { Param } from \"../core/context/Param\";\nimport { OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { Decibels, Seconds, Time } from \"../core/type/Units\";\nimport { defaultArg } from \"../core/util/Defaults\";\nimport { noOp, readOnly } from \"../core/util/Interface\";\nimport { BasicPlaybackState, StateTimeline, StateTimelineEvent } from \"../core/util/StateTimeline\";\nimport { isDefined, isUndef } from \"../core/util/TypeCheck\";\nimport { assert, assertContextRunning } from \"../core/util/Debug\";\nimport { GT } from \"../core/util/Math\";\n\ntype onStopCallback = (source: Source<any>) => void;\n\nexport interface SourceOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n\tmute: boolean;\n\tonstop: onStopCallback;\n}\n\n/**\n * Base class for sources. \n * start/stop of this.context.transport.\n * \n * ```\n * // Multiple state change events can be chained together,\n * // but must be set in the correct order and with ascending times\n * // OK\n * state.start().stop(\"+0.2\");\n * // OK\n * state.start().stop(\"+0.2\").start(\"+0.4\").stop(\"+0.7\")\n * // BAD\n * state.stop(\"+0.2\").start();\n * // BAD\n * state.start(\"+0.3\").stop(\"+0.2\");\n * ```\n */\nexport abstract class Source<Options extends SourceOptions> extends ToneAudioNode<Options> {\n\n\t/**\n\t * The output volume node\n\t */\n\tprivate _volume: Volume;\n\n\t/**\n\t * The output note\n\t */\n\toutput: OutputNode;\n\n\t/**\n\t * Sources have no inputs\n\t */\n\tinput = undefined;\n\n\t/**\n\t * The volume of the output in decibels.\n\t * @example\n\t * const source = new Tone.PWMOscillator().toDestination();\n\t * source.volume.value = -6;\n\t */\n\tvolume: Param<\"decibels\">;\n\n\t/**\n\t * The callback to invoke when the source is stopped.\n\t */\n\tonstop: onStopCallback;\n\n\t/**\n\t * Keep track of the scheduled state.\n\t */\n\tprotected _state: StateTimeline<{\n\t\tduration?: Seconds;\n\t\toffset?: Seconds;\n\t\t/**\n\t\t * Either the buffer is explicitly scheduled to end using the stop method,\n\t\t * or it's implicitly ended when the buffer is over.\n\t\t */\n\t\timplicitEnd?: boolean;\n\t}> = new StateTimeline(\"stopped\");\n\n\t/**\n\t * The synced `start` callback function from the transport\n\t */\n\tprotected _synced = false;\n\n\t/**\n\t * Keep track of all of the scheduled event ids\n\t */\n\tprivate _scheduled: number[] = [];\n\n\t/**\n\t * Placeholder functions for syncing/unsyncing to transport\n\t */\n\tprivate _syncedStart: (time: Seconds, offset: Seconds) => void = noOp;\n\tprivate _syncedStop: (time: Seconds) => void = noOp;\n\n\tconstructor(options: SourceOptions) {\n\t\tsuper(options);\n\t\tthis._state.memory = 100;\n\t\tthis._state.increasing = true;\n\n\t\tthis._volume = this.output = new Volume({\n\t\t\tcontext: this.context,\n\t\t\tmute: options.mute,\n\t\t\tvolume: options.volume,\n\t\t});\n\t\tthis.volume = this._volume.volume;\n\t\treadOnly(this, \"volume\");\n\t\tthis.onstop = options.onstop;\n\t}\n\n\tstatic getDefaults(): SourceOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tonstop: noOp,\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Returns the playback state of the source, either \"started\" or \"stopped\".\n\t * @example\n\t * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/ahntone_c3.mp3\", () => {\n\t * \tplayer.start();\n\t * \tconsole.log(player.state);\n\t * }).toDestination();\n\t */\n\tget state(): BasicPlaybackState {\n\t\tif (this._synced) {\n\t\t\tif (this.context.transport.state === \"started\") {\n\t\t\t\treturn this._state.getValueAtTime(this.context.transport.seconds) as BasicPlaybackState;\n\t\t\t} else {\n\t\t\t\treturn \"stopped\";\n\t\t\t}\n\t\t} else {\n\t\t\treturn this._state.getValueAtTime(this.now()) as BasicPlaybackState;\n\t\t}\n\t}\n\n\t/**\n\t * Mute the output.\n\t * @example\n\t * const osc = new Tone.Oscillator().toDestination().start();\n\t * // mute the output\n\t * osc.mute = true;\n\t */\n\tget mute(): boolean {\n\t\treturn this._volume.mute;\n\t}\n\tset mute(mute: boolean) {\n\t\tthis._volume.mute = mute;\n\t}\n\n\t// overwrite these functions\n\tprotected abstract _start(time: Time, offset?: Time, duration?: Time): void;\n\tprotected abstract _stop(time: Time): void;\n\tprotected abstract _restart(time: Seconds, offset?: Time, duration?: Time): void;\n\n\t/**\n\t * Ensure that the scheduled time is not before the current time.\n\t * Should only be used when scheduled unsynced.\n\t */\n\tprivate _clampToCurrentTime(time: Seconds): Seconds {\n\t\tif (this._synced) {\n\t\t\treturn time;\n\t\t} else {\n\t\t\treturn Math.max(time, this.context.currentTime);\n\t\t}\n\t}\n\n\t/**\n\t * Start the source at the specified time. If no time is given,\n\t * start the source now.\n\t * @param  time When the source should be started.\n\t * @example\n\t * const source = new Tone.Oscillator().toDestination();\n\t * source.start(\"+0.5\"); // starts the source 0.5 seconds from now\n\t */\n\tstart(time?: Time, offset?: Time, duration?: Time): this {\n\t\tlet computedTime = isUndef(time) && this._synced ? this.context.transport.seconds : this.toSeconds(time);\n\t\tcomputedTime = this._clampToCurrentTime(computedTime);\n\t\t// if it's started, stop it and restart it\n\t\tif (!this._synced && this._state.getValueAtTime(computedTime) === \"started\") {\n\t\t\t// time should be strictly greater than the previous start time\n\t\t\tassert(GT(computedTime, (this._state.get(computedTime) as StateTimelineEvent).time), \"Start time must be strictly greater than previous start time\");\n\t\t\tthis._state.cancel(computedTime);\n\t\t\tthis._state.setStateAtTime(\"started\", computedTime);\n\t\t\tthis.log(\"restart\", computedTime);\n\t\t\tthis.restart(computedTime, offset, duration);\n\t\t} else {\n\t\t\tthis.log(\"start\", computedTime);\n\t\t\tthis._state.setStateAtTime(\"started\", computedTime);\n\t\t\tif (this._synced) {\n\t\t\t\t// add the offset time to the event\n\t\t\t\tconst event = this._state.get(computedTime);\n\t\t\t\tif (event) {\n\t\t\t\t\tevent.offset = this.toSeconds(defaultArg(offset, 0));\n\t\t\t\t\tevent.duration = duration ? this.toSeconds(duration) : undefined;\n\t\t\t\t}\n\t\t\t\tconst sched = this.context.transport.schedule(t => {\n\t\t\t\t\tthis._start(t, offset, duration);\n\t\t\t\t}, computedTime);\n\t\t\t\tthis._scheduled.push(sched);\n\n\t\t\t\t// if the transport is already started\n\t\t\t\t// and the time is greater than where the transport is\n\t\t\t\tif (this.context.transport.state === \"started\" && \n\t\t\t\t\tthis.context.transport.getSecondsAtTime(this.immediate()) > computedTime) {\n\t\t\t\t\tthis._syncedStart(this.now(), this.context.transport.seconds);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tassertContextRunning(this.context);\n\t\t\t\tthis._start(computedTime, offset, duration);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the source at the specified time. If no time is given,\n\t * stop the source now.\n\t * @param  time When the source should be stopped.\n\t * @example\n\t * const source = new Tone.Oscillator().toDestination();\n\t * source.start();\n\t * source.stop(\"+0.5\"); // stops the source 0.5 seconds from now\n\t */\n\tstop(time?: Time): this {\n\t\tlet computedTime = isUndef(time) && this._synced ? this.context.transport.seconds : this.toSeconds(time);\n\t\tcomputedTime = this._clampToCurrentTime(computedTime);\n\t\tif (this._state.getValueAtTime(computedTime) === \"started\" || isDefined(this._state.getNextState(\"started\", computedTime))) {\n\t\t\tthis.log(\"stop\", computedTime);\n\t\t\tif (!this._synced) {\n\t\t\t\tthis._stop(computedTime);\n\t\t\t} else {\n\t\t\t\tconst sched = this.context.transport.schedule(this._stop.bind(this), computedTime);\n\t\t\t\tthis._scheduled.push(sched);\n\t\t\t}\n\t\t\tthis._state.cancel(computedTime);\n\t\t\tthis._state.setStateAtTime(\"stopped\", computedTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Restart the source.\n\t */\n\trestart(time?: Time, offset?: Time, duration?: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tif (this._state.getValueAtTime(time) === \"started\") {\n\t\t\tthis._state.cancel(time);\n\t\t\tthis._restart(time, offset, duration);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sync the source to the Transport so that all subsequent\n\t * calls to `start` and `stop` are synced to the TransportTime\n\t * instead of the AudioContext time.\n\t *\n\t * @example\n\t * const osc = new Tone.Oscillator().toDestination();\n\t * // sync the source so that it plays between 0 and 0.3 on the Transport's timeline\n\t * osc.sync().start(0).stop(0.3);\n\t * // start the transport.\n\t * Tone.Transport.start();\n\t * // set it to loop once a second\n\t * Tone.Transport.loop = true;\n\t * Tone.Transport.loopEnd = 1;\n\t */\n\tsync(): this {\n\t\tif (!this._synced) {\n\t\t\tthis._synced = true;\n\t\t\tthis._syncedStart = (time, offset) => {\n\t\t\t\tif (offset > 0) {\n\t\t\t\t\t// get the playback state at that time\n\t\t\t\t\tconst stateEvent = this._state.get(offset);\n\t\t\t\t\t// listen for start events which may occur in the middle of the sync'ed time\n\t\t\t\t\tif (stateEvent && stateEvent.state === \"started\" && stateEvent.time !== offset) {\n\t\t\t\t\t\t// get the offset\n\t\t\t\t\t\tconst startOffset = offset - this.toSeconds(stateEvent.time);\n\t\t\t\t\t\tlet duration: number | undefined;\n\t\t\t\t\t\tif (stateEvent.duration) {\n\t\t\t\t\t\t\tduration = this.toSeconds(stateEvent.duration) - startOffset;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._start(time, this.toSeconds(stateEvent.offset) + startOffset, duration);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis._syncedStop = time => {\n\t\t\t\tconst seconds = this.context.transport.getSecondsAtTime(Math.max(time - this.sampleTime, 0));\n\t\t\t\tif (this._state.getValueAtTime(seconds) === \"started\") {\n\t\t\t\t\tthis._stop(time);\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.context.transport.on(\"start\", this._syncedStart);\n\t\t\tthis.context.transport.on(\"loopStart\", this._syncedStart);\n\t\t\tthis.context.transport.on(\"stop\", this._syncedStop);\n\t\t\tthis.context.transport.on(\"pause\", this._syncedStop);\n\t\t\tthis.context.transport.on(\"loopEnd\", this._syncedStop);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unsync the source to the Transport. See Source.sync\n\t */\n\tunsync(): this {\n\t\tif (this._synced) {\n\t\t\tthis.context.transport.off(\"stop\", this._syncedStop);\n\t\t\tthis.context.transport.off(\"pause\", this._syncedStop);\n\t\t\tthis.context.transport.off(\"loopEnd\", this._syncedStop);\n\t\t\tthis.context.transport.off(\"start\", this._syncedStart);\n\t\t\tthis.context.transport.off(\"loopStart\", this._syncedStart);\n\t\t}\n\t\tthis._synced = false;\n\t\t// clear all of the scheduled ids\n\t\tthis._scheduled.forEach(id => this.context.transport.clear(id));\n\t\tthis._scheduled = [];\n\t\tthis._state.cancel(0);\n\t\t// stop it also\n\t\tthis._stop(0);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.onstop = noOp;\n\t\tthis.unsync();\n\t\tthis._volume.dispose();\n\t\tthis._state.dispose();\n\t\treturn this;\n\t}\n}\n", "import { connect } from \"../../core/context/ToneAudioNode\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { GainFactor, Positive, Seconds, Time } from \"../../core/type/Units\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp } from \"../../core/util/Interface\";\nimport { isDefined } from \"../../core/util/TypeCheck\";\nimport { assert } from \"../../core/util/Debug\";\nimport { OneShotSource, OneShotSourceCurve, OneShotSourceOptions } from \"../OneShotSource\";\nimport { EQ, GTE, LT } from \"../../core/util/Math\";\n\nexport type ToneBufferSourceCurve = OneShotSourceCurve;\n\nexport interface ToneBufferSourceOptions extends OneShotSourceOptions {\n\turl: string | AudioBuffer | ToneAudioBuffer;\n\tcurve: ToneBufferSourceCurve;\n\tplaybackRate: Positive;\n\tfadeIn: Time;\n\tfadeOut: Time;\n\tloopStart: Time;\n\tloopEnd: Time;\n\tloop: boolean;\n\tonload: () => void;\n\tonerror: (error: Error) => void;\n}\n\n/**\n * Wrapper around the native BufferSourceNode.\n * @category Source\n */\nexport class ToneBufferSource extends OneShotSource<ToneBufferSourceOptions> {\n\n\treadonly name: string = \"ToneBufferSource\";\n\n\t/**\n\t * The oscillator\n\t */\n\tprivate _source = this.context.createBufferSource();\n\tprotected _internalChannels = [this._source];\n\n\t/**\n\t * The frequency of the oscillator\n\t */\n\treadonly playbackRate: Param<\"positive\">;\n\n\t/**\n\t * The private instance of the buffer object\n\t */\n\tprivate _buffer: ToneAudioBuffer;\n\n\t/**\n\t * indicators if the source has started/stopped\n\t */\n\tprivate _sourceStarted = false;\n\tprivate _sourceStopped = false;\n\n\t/**\n\t * @param url The buffer to play or url to load\n\t * @param onload The callback to invoke when the buffer is done playing.\n\t */\n\tconstructor(url?: ToneAudioBuffer | AudioBuffer | string, onload?: () => void);\n\tconstructor(options?: Partial<ToneBufferSourceOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(ToneBufferSource.getDefaults(), arguments, [\"url\", \"onload\"]));\n\t\tconst options = optionsFromArguments(ToneBufferSource.getDefaults(), arguments, [\"url\", \"onload\"]);\n\n\t\tconnect(this._source, this._gainNode);\n\t\tthis._source.onended = () => this._stopSource();\n\n\t\t/**\n\t\t * The playbackRate of the buffer\n\t\t */\n\t\tthis.playbackRate = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._source.playbackRate,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.playbackRate,\n\t\t});\n\n\t\t// set some values initially\n\t\tthis.loop = options.loop;\n\t\tthis.loopStart = options.loopStart;\n\t\tthis.loopEnd = options.loopEnd;\n\t\tthis._buffer = new ToneAudioBuffer(options.url, options.onload, options.onerror);\n\n\t\tthis._internalChannels.push(this._source);\n\t}\n\n\tstatic getDefaults(): ToneBufferSourceOptions {\n\t\treturn Object.assign(OneShotSource.getDefaults(), {\n\t\t\turl: new ToneAudioBuffer(),\n\t\t\tloop: false,\n\t\t\tloopEnd: 0,\n\t\t\tloopStart: 0,\n\t\t\tonload: noOp,\n\t\t\tonerror: noOp,\n\t\t\tplaybackRate: 1,\n\t\t});\n\t}\n\n\t/**\n\t * The fadeIn time of the amplitude envelope.\n\t */\n\tget fadeIn(): Time {\n\t\treturn this._fadeIn;\n\t}\n\tset fadeIn(t: Time) {\n\t\tthis._fadeIn = t;\n\t}\n\n\t/**\n\t * The fadeOut time of the amplitude envelope.\n\t */\n\tget fadeOut(): Time {\n\t\treturn this._fadeOut;\n\t}\n\tset fadeOut(t: Time) {\n\t\tthis._fadeOut = t;\n\t}\n\n\t/**\n\t * The curve applied to the fades, either \"linear\" or \"exponential\"\n\t */\n\tget curve(): ToneBufferSourceCurve {\n\t\treturn this._curve;\n\t}\n\tset curve(t) {\n\t\tthis._curve = t;\n\t}\n\n\t/**\n\t * Start the buffer\n\t * @param  time When the player should start.\n\t * @param  offset The offset from the beginning of the sample to start at.\n\t * @param  duration How long the sample should play. If no duration is given, it will default to the full length of the sample (minus any offset)\n\t * @param  gain  The gain to play the buffer back at.\n\t */\n\tstart(time?: Time, offset?: Time, duration?: Time, gain: GainFactor = 1): this {\n\t\tassert(this.buffer.loaded, \"buffer is either not set or not loaded\");\n\t\tconst computedTime = this.toSeconds(time);\n\n\t\t// apply the gain envelope\n\t\tthis._startGain(computedTime, gain);\n\n\t\t// if it's a loop the default offset is the loopstart point\n\t\tif (this.loop) {\n\t\t\toffset = defaultArg(offset, this.loopStart);\n\t\t} else {\n\t\t\t// otherwise the default offset is 0\n\t\t\toffset = defaultArg(offset, 0);\n\t\t}\n\t\t// make sure the offset is not less than 0\n\t\tlet computedOffset = Math.max(this.toSeconds(offset), 0);\n\n\t\t// start the buffer source\n\t\tif (this.loop) {\n\t\t\t// modify the offset if it's greater than the loop time\n\t\t\tconst loopEnd = this.toSeconds(this.loopEnd) || this.buffer.duration;\n\t\t\tconst loopStart = this.toSeconds(this.loopStart);\n\t\t\tconst loopDuration = loopEnd - loopStart;\n\t\t\t// move the offset back\n\t\t\tif (GTE(computedOffset, loopEnd)) {\n\t\t\t\tcomputedOffset = ((computedOffset - loopStart) % loopDuration) + loopStart;\n\t\t\t}\n\t\t\t// when the offset is very close to the duration, set it to 0\n\t\t\tif (EQ(computedOffset, this.buffer.duration)) {\n\t\t\t\tcomputedOffset = 0;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// this.buffer.loaded would have return false if the AudioBuffer was undefined\n\t\tthis._source.buffer = this.buffer.get() as AudioBuffer;\n\t\tthis._source.loopEnd = this.toSeconds(this.loopEnd) || this.buffer.duration;\n\t\tif (LT(computedOffset, this.buffer.duration)) {\n\t\t\tthis._sourceStarted = true;\n\t\t\tthis._source.start(computedTime, computedOffset);\n\t\t}\n\n\t\t// if a duration is given, schedule a stop\n\t\tif (isDefined(duration)) {\n\t\t\tlet computedDur = this.toSeconds(duration);\n\t\t\t// make sure it's never negative\n\t\t\tcomputedDur = Math.max(computedDur, 0);\n\t\t\tthis.stop(computedTime + computedDur);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tprotected _stopSource(time?: Seconds): void {\n\t\tif (!this._sourceStopped && this._sourceStarted) {\n\t\t\tthis._sourceStopped = true;\n\t\t\tthis._source.stop(this.toSeconds(time));\n\t\t\tthis._onended();\n\t\t}\n\t}\n\n\t/**\n\t * If loop is true, the loop will start at this position.\n\t */\n\tget loopStart(): Time {\n\t\treturn this._source.loopStart;\n\t}\n\tset loopStart(loopStart: Time) {\n\t\tthis._source.loopStart = this.toSeconds(loopStart);\n\t}\n\n\t/**\n\t * If loop is true, the loop will end at this position.\n\t */\n\tget loopEnd(): Time {\n\t\treturn this._source.loopEnd;\n\t}\n\tset loopEnd(loopEnd: Time) {\n\t\tthis._source.loopEnd = this.toSeconds(loopEnd);\n\t}\n\n\t/**\n\t * The audio buffer belonging to the player.\n\t */\n\tget buffer(): ToneAudioBuffer {\n\t\treturn this._buffer;\n\t}\n\tset buffer(buffer: ToneAudioBuffer) {\n\t\tthis._buffer.set(buffer);\n\t}\n\n\t/**\n\t * If the buffer should loop once it's over.\n\t */\n\tget loop(): boolean {\n\t\treturn this._source.loop;\n\t}\n\tset loop(loop: boolean) {\n\t\tthis._source.loop = loop;\n\t\tif (this._sourceStarted) {\n\t\t\tthis.cancelStop();\n\t\t}\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._source.onended = null;\n\t\tthis._source.disconnect();\n\t\tthis._buffer.dispose();\n\t\tthis.playbackRate.dispose();\n\t\treturn this;\n\t}\n}\n", "import { ToneAudioBuffer } from \"../core/context/ToneAudioBuffer\";\nimport { Positive, Time } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { assert } from \"../core/util/Debug\";\nimport { Source, SourceOptions } from \"../source/Source\";\nimport { ToneBufferSource } from \"./buffer/ToneBufferSource\";\n\nexport type NoiseType = \"white\" | \"brown\" | \"pink\";\n\nexport interface NoiseOptions extends SourceOptions {\n\ttype: NoiseType;\n\tplaybackRate: Positive;\n\tfadeIn: Time;\n\tfadeOut: Time;\n}\n\n/**\n * Noise is a noise generator. It uses looped noise buffers to save on performance.\n * Noise supports the noise types: \"pink\", \"white\", and \"brown\". Read more about\n * colors of noise on [Wikipedia](https://en.wikipedia.org/wiki/Colors_of_noise).\n *\n * @example\n * // initialize the noise and start\n * const noise = new Tone.Noise(\"pink\").start();\n * // make an autofilter to shape the noise\n * const autoFilter = new Tone.AutoFilter({\n * \tfrequency: \"8n\",\n * \tbaseFrequency: 200,\n * \toctaves: 8\n * }).toDestination().start();\n * // connect the noise\n * noise.connect(autoFilter);\n * // start the autofilter LFO\n * autoFilter.start();\n * @category Source\n */\nexport class Noise extends Source<NoiseOptions> {\n\n\treadonly name: string = \"Noise\";\n\n\t/**\n\t * Private reference to the source\n\t */\n\tprivate _source: ToneBufferSource | null = null;\n\n\t/**\n\t * private reference to the type\n\t */\n\tprivate _type!: NoiseType;\n\n\t/**\n\t * The playback rate of the noise. Affects\n\t * the \"frequency\" of the noise.\n\t */\n\tprivate _playbackRate: Positive;\n\n\t/**\n\t * The fadeIn time of the amplitude envelope.\n\t */\n\tprotected _fadeIn: Time;\n\n\t/**\n\t * The fadeOut time of the amplitude envelope.\n\t */\n\tprotected _fadeOut: Time;\n\n\t/**\n\t * @param type the noise type (white|pink|brown)\n\t */\n\tconstructor(type?: NoiseType);\n\tconstructor(options?: Partial<NoiseOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Noise.getDefaults(), arguments, [\"type\"]));\n\t\tconst options = optionsFromArguments(Noise.getDefaults(), arguments, [\"type\"]);\n\n\t\tthis._playbackRate = options.playbackRate;\n\t\tthis.type = options.type;\n\t\tthis._fadeIn = options.fadeIn;\n\t\tthis._fadeOut = options.fadeOut;\n\t}\n\n\tstatic getDefaults(): NoiseOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tfadeIn: 0,\n\t\t\tfadeOut: 0,\n\t\t\tplaybackRate: 1,\n\t\t\ttype: \"white\" as NoiseType,\n\t\t});\n\t}\n\n\t/**\n\t * The type of the noise. Can be \"white\", \"brown\", or \"pink\".\n\t * @example\n\t * const noise = new Tone.Noise().toDestination().start();\n\t * noise.type = \"brown\";\n\t */\n\tget type(): NoiseType {\n\t\treturn this._type;\n\t}\n\tset type(type: NoiseType) {\n\t\tassert(type in _noiseBuffers, \"Noise: invalid type: \" + type);\n\t\tif (this._type !== type) {\n\t\t\tthis._type = type;\n\t\t\t// if it's playing, stop and restart it\n\t\t\tif (this.state === \"started\") {\n\t\t\t\tconst now = this.now();\n\t\t\t\tthis._stop(now);\n\t\t\t\tthis._start(now);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * The playback rate of the noise. Affects\n\t * the \"frequency\" of the noise.\n\t */\n\tget playbackRate(): Positive {\n\t\treturn this._playbackRate;\n\t}\n\tset playbackRate(rate: Positive) {\n\t\tthis._playbackRate = rate;\n\t\tif (this._source) {\n\t\t\tthis._source.playbackRate.value = rate;\n\t\t}\n\t}\n\n\t/**\n\t * internal start method\n\t */\n\tprotected _start(time?: Time): void {\n\t\tconst buffer = _noiseBuffers[this._type];\n\t\tthis._source = new ToneBufferSource({\n\t\t\turl: buffer,\n\t\t\tcontext: this.context,\n\t\t\tfadeIn: this._fadeIn,\n\t\t\tfadeOut: this._fadeOut,\n\t\t\tloop: true,\n\t\t\tonended: () => this.onstop(this),\n\t\t\tplaybackRate: this._playbackRate,\n\t\t}).connect(this.output);\n\t\tthis._source.start(this.toSeconds(time), Math.random() * (buffer.duration - 0.001));\n\t}\n\n\t/**\n\t * internal stop method\n\t */\n\tprotected _stop(time?: Time): void {\n\t\tif (this._source) {\n\t\t\tthis._source.stop(this.toSeconds(time));\n\t\t\tthis._source = null;\n\t\t}\n\t}\n\n\t/**\n\t * The fadeIn time of the amplitude envelope.\n\t */\n\tget fadeIn(): Time {\n\t\treturn this._fadeIn;\n\t}\n\tset fadeIn(time) {\n\t\tthis._fadeIn = time;\n\t\tif (this._source) {\n\t\t\tthis._source.fadeIn = this._fadeIn;\n\t\t}\n\t}\n\n\t/**\n\t * The fadeOut time of the amplitude envelope.\n\t */\n\tget fadeOut(): Time {\n\t\treturn this._fadeOut;\n\t}\n\tset fadeOut(time) {\n\t\tthis._fadeOut = time;\n\t\tif (this._source) {\n\t\t\tthis._source.fadeOut = this._fadeOut;\n\t\t}\n\t}\n\n\tprotected _restart(time?: Time): void {\n\t\t// TODO could be optimized by cancelling the buffer source 'stop'\n\t\tthis._stop(time);\n\t\tthis._start(time);\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this._source) {\n\t\t\tthis._source.disconnect();\n\t\t}\n\t\treturn this;\n\t}\n}\n\n//--------------------\n// THE NOISE BUFFERS\n//--------------------\n\n// Noise buffer stats\nconst BUFFER_LENGTH = 44100 * 5;\nconst NUM_CHANNELS = 2;\n\n/**\n * The cached noise buffers\n */\ninterface NoiseCache {\n\t[key: string]: ToneAudioBuffer | null;\n}\n\n/**\n * Cache the noise buffers\n */\nconst _noiseCache: NoiseCache = {\n\tbrown: null,\n\tpink: null,\n\twhite: null,\n};\n\n/**\n * The noise arrays. Generated on initialization.\n * borrowed heavily from https://github.com/zacharydenton/noise.js\n * (c) 2013 Zach Denton (MIT)\n */\nconst _noiseBuffers = {\n\tget brown(): ToneAudioBuffer {\n\t\tif (!_noiseCache.brown) {\n\t\t\tconst buffer: Float32Array[] = [];\n\t\t\tfor (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n\t\t\t\tconst channel = new Float32Array(BUFFER_LENGTH);\n\t\t\t\tbuffer[channelNum] = channel;\n\t\t\t\tlet lastOut = 0.0;\n\t\t\t\tfor (let i = 0; i < BUFFER_LENGTH; i++) {\n\t\t\t\t\tconst white = Math.random() * 2 - 1;\n\t\t\t\t\tchannel[i] = (lastOut + (0.02 * white)) / 1.02;\n\t\t\t\t\tlastOut = channel[i];\n\t\t\t\t\tchannel[i] *= 3.5; // (roughly) compensate for gain\n\t\t\t\t}\n\t\t\t}\n\t\t\t_noiseCache.brown = new ToneAudioBuffer().fromArray(buffer);\n\t\t}\n\t\treturn _noiseCache.brown;\n\t},\n\n\tget pink(): ToneAudioBuffer {\n\t\tif (!_noiseCache.pink) {\n\t\t\tconst buffer: Float32Array[] = [];\n\t\t\tfor (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n\t\t\t\tconst channel = new Float32Array(BUFFER_LENGTH);\n\t\t\t\tbuffer[channelNum] = channel;\n\t\t\t\tlet b0, b1, b2, b3, b4, b5, b6;\n\t\t\t\tb0 = b1 = b2 = b3 = b4 = b5 = b6 = 0.0;\n\t\t\t\tfor (let i = 0; i < BUFFER_LENGTH; i++) {\n\t\t\t\t\tconst white = Math.random() * 2 - 1;\n\t\t\t\t\tb0 = 0.99886 * b0 + white * 0.0555179;\n\t\t\t\t\tb1 = 0.99332 * b1 + white * 0.0750759;\n\t\t\t\t\tb2 = 0.96900 * b2 + white * 0.1538520;\n\t\t\t\t\tb3 = 0.86650 * b3 + white * 0.3104856;\n\t\t\t\t\tb4 = 0.55000 * b4 + white * 0.5329522;\n\t\t\t\t\tb5 = -0.7616 * b5 - white * 0.0168980;\n\t\t\t\t\tchannel[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;\n\t\t\t\t\tchannel[i] *= 0.11; // (roughly) compensate for gain\n\t\t\t\t\tb6 = white * 0.115926;\n\t\t\t\t}\n\t\t\t}\n\t\t\t_noiseCache.pink = new ToneAudioBuffer().fromArray(buffer);\n\t\t}\n\t\treturn _noiseCache.pink;\n\t},\n\n\tget white(): ToneAudioBuffer {\n\t\tif (!_noiseCache.white) {\n\t\t\tconst buffer: Float32Array[] = [];\n\t\t\tfor (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n\t\t\t\tconst channel = new Float32Array(BUFFER_LENGTH);\n\t\t\t\tbuffer[channelNum] = channel;\n\t\t\t\tfor (let i = 0; i < BUFFER_LENGTH; i++) {\n\t\t\t\t\tchannel[i] = Math.random() * 2 - 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t_noiseCache.white = new ToneAudioBuffer().fromArray(buffer);\n\t\t}\n\t\treturn _noiseCache.white;\n\t},\n};\n", "import { connect, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { Decibels } from \"../core/type/Units\";\nimport { Volume } from \"../component/channel/Volume\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { assert } from \"../core/util/Debug\";\nimport { Param } from \"../core/context/Param\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { isDefined, isNumber } from \"../core/util/TypeCheck\";\n\nexport interface UserMediaOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n\tmute: boolean;\n}\n/**\n * UserMedia uses MediaDevices.getUserMedia to open up and external microphone or audio input. \n * Check [MediaDevices API Support](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia)\n * to see which browsers are supported. Access to an external input\n * is limited to secure (HTTPS) connections.\n * @example\n * const meter = new Tone.Meter();\n * const mic = new Tone.UserMedia().connect(meter);\n * mic.open().then(() => {\n * \t// promise resolves when input is available\n * \tconsole.log(\"mic open\");\n * \t// print the incoming mic levels in decibels\n * \tsetInterval(() => console.log(meter.getValue()), 100);\n * }).catch(e => {\n * \t// promise is rejected when the user doesn't have or allow mic access\n * \tconsole.log(\"mic not open\");\n * });\n * @category Source\n */\n\nexport class UserMedia extends ToneAudioNode<UserMediaOptions> {\n\n\treadonly name: string = \"UserMedia\";\n\n\treadonly input: undefined;\n\treadonly output: OutputNode;\n\n\t/**\n\t * The MediaStreamNode\n\t */\n\tprivate _mediaStream?: MediaStreamAudioSourceNode;\n\n\t/**\n\t * The media stream created by getUserMedia.\n\t */\n\tprivate _stream?: MediaStream;\n\n\t/**\n\t * The open device\n\t */\n\tprivate _device?: MediaDeviceInfo;\n\n\t/**\n\t * The output volume node\n\t */\n\tprivate _volume: Volume;\n\n\t/**\n\t * The volume of the output in decibels.\n\t */\n\treadonly volume: Param<\"decibels\">;\n\n\t/**\n\t * @param volume The level of the input in decibels\n\t */\n\tconstructor(volume?: Decibels);\n\tconstructor(options?: Partial<UserMediaOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(UserMedia.getDefaults(), arguments, [\"volume\"]));\n\t\tconst options = optionsFromArguments(UserMedia.getDefaults(), arguments, [\"volume\"]);\n\n\t\tthis._volume = this.output = new Volume({\n\t\t\tcontext: this.context,\n\t\t\tvolume: options.volume,\n\t\t});\n\t\tthis.volume = this._volume.volume;\n\t\treadOnly(this, \"volume\");\n\t\tthis.mute = options.mute;\n\t}\n\n\tstatic getDefaults(): UserMediaOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tvolume: 0\n\t\t});\n\t}\n\n\t/**\n\t * Open the media stream. If a string is passed in, it is assumed\n\t * to be the label or id of the stream, if a number is passed in,\n\t * it is the input number of the stream.\n\t * @param  labelOrId The label or id of the audio input media device.\n\t *                   With no argument, the default stream is opened.\n\t * @return The promise is resolved when the stream is open.\n\t */\n\tasync open(labelOrId?: string | number): Promise<this> {\n\t\tassert(UserMedia.supported, \"UserMedia is not supported\");\n\t\t// close the previous stream\n\t\tif (this.state === \"started\") {\n\t\t\tthis.close();\n\t\t}\n\t\tconst devices = await UserMedia.enumerateDevices();\n\t\tif (isNumber(labelOrId)) {\n\t\t\tthis._device = devices[labelOrId];\n\t\t} else {\n\t\t\tthis._device = devices.find((device) => {\n\t\t\t\treturn device.label === labelOrId || device.deviceId === labelOrId;\n\t\t\t});\n\t\t\t// didn't find a matching device\n\t\t\tif (!this._device && devices.length > 0) {\n\t\t\t\tthis._device = devices[0];\n\t\t\t}\n\t\t\tassert(isDefined(this._device), `No matching device ${labelOrId}`);\n\t\t}\n\t\t// do getUserMedia\n\t\tconst constraints = {\n\t\t\taudio: {\n\t\t\t\techoCancellation: false,\n\t\t\t\tsampleRate: this.context.sampleRate,\n\t\t\t\tnoiseSuppression: false,\n\t\t\t\tmozNoiseSuppression: false,\n\t\t\t}\n\t\t};\n\t\tif (this._device) {\n\t\t\t// @ts-ignore\n\t\t\tconstraints.audio.deviceId = this._device.deviceId;\n\t\t}\n\t\tconst stream = await navigator.mediaDevices.getUserMedia(constraints);\n\t\t// start a new source only if the previous one is closed\n\t\tif (!this._stream) {\n\t\t\tthis._stream = stream;\n\t\t\t// Wrap a MediaStreamSourceNode around the live input stream.\n\t\t\tconst mediaStreamNode = this.context.createMediaStreamSource(stream);\n\t\t\t// Connect the MediaStreamSourceNode to a gate gain node\n\t\t\tconnect(mediaStreamNode, this.output);\n\t\t\tthis._mediaStream = mediaStreamNode;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Close the media stream\n\t */\n\tclose(): this {\n\t\tif (this._stream && this._mediaStream) {\n\t\t\tthis._stream.getAudioTracks().forEach((track) => {\n\t\t\t\ttrack.stop();\n\t\t\t});\n\t\t\tthis._stream = undefined;\n\t\t\t// remove the old media stream\n\t\t\tthis._mediaStream.disconnect();\n\t\t\tthis._mediaStream = undefined;\n\t\t}\n\t\tthis._device = undefined;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns a promise which resolves with the list of audio input devices available.\n\t * @return The promise that is resolved with the devices\n\t * @example\n\t * Tone.UserMedia.enumerateDevices().then((devices) => {\n\t * \t// print the device labels\n\t * \tconsole.log(devices.map(device => device.label));\n\t * });\n\t */\n\tstatic async enumerateDevices(): Promise<MediaDeviceInfo[]> {\n\t\tconst allDevices = await navigator.mediaDevices.enumerateDevices();\n\t\treturn allDevices.filter(device => {\n\t\t\treturn device.kind === \"audioinput\";\n\t\t});\n\t}\n\n\t/**\n\t * Returns the playback state of the source, \"started\" when the microphone is open\n\t * and \"stopped\" when the mic is closed.\n\t */\n\tget state() {\n\t\treturn this._stream && this._stream.active ? \"started\" : \"stopped\";\n\t}\n\n\t/**\n\t * Returns an identifier for the represented device that is\n\t * persisted across sessions. It is un-guessable by other applications and\n\t * unique to the origin of the calling application. It is reset when the\n\t * user clears cookies (for Private Browsing, a different identifier is\n\t * used that is not persisted across sessions). Returns undefined when the\n\t * device is not open.\n\t */\n\tget deviceId(): string | undefined {\n\t\tif (this._device) {\n\t\t\treturn this._device.deviceId;\n\t\t} else {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\t/**\n\t * Returns a group identifier. Two devices have the\n\t * same group identifier if they belong to the same physical device.\n\t * Returns null  when the device is not open.\n\t */\n\tget groupId(): string | undefined {\n\t\tif (this._device) {\n\t\t\treturn this._device.groupId;\n\t\t} else {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\t/**\n\t * Returns a label describing this device (for example \"Built-in Microphone\").\n\t * Returns undefined when the device is not open or label is not available\n\t * because of permissions.\n\t */\n\tget label(): string | undefined {\n\t\tif (this._device) {\n\t\t\treturn this._device.label;\n\t\t} else {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\t/**\n\t * Mute the output.\n\t * @example\n\t * const mic = new Tone.UserMedia();\n\t * mic.open().then(() => {\n\t * \t// promise resolves when input is available\n\t * });\n\t * // mute the output\n\t * mic.mute = true;\n\t */\n\tget mute(): boolean {\n\t\treturn this._volume.mute;\n\t}\n\tset mute(mute) {\n\t\tthis._volume.mute = mute;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.close();\n\t\tthis._volume.dispose();\n\t\tthis.volume.dispose();\n\t\treturn this;\n\t}\n\n\t/**\n\t * If getUserMedia is supported by the browser.\n\t */\n\tstatic get supported(): boolean {\n\t\treturn isDefined(navigator.mediaDevices) &&\n\t\t\tisDefined(navigator.mediaDevices.getUserMedia);\n\t}\n}\n", "import { AudioRange, Cents, Degrees, Frequency, Positive } from \"../../core/type/Units\";\nimport { Omit } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { SourceOptions } from \"../Source\";\nimport { OfflineContext } from \"../../core/context/OfflineContext\";\n\n/**\n * The common interface of all Oscillators\n */\nexport interface ToneOscillatorInterface {\n\n\t/**\n\t * The oscillator type without the partialsCount appended to the end\n\t * @example\n\t * const osc = new Tone.Oscillator();\n\t * osc.type = \"sine2\";\n\t * console.log(osc.baseType); // \"sine\"\n\t */\n\tbaseType: OscillatorType | \"pulse\" | \"pwm\";\n\n\t/**\n\t * The oscillator's type. Also capable of setting the first x number of partials of the oscillator. \n\t * For example: \"sine4\" would set be the first 4 partials of the sine wave and \"triangle8\" would \n\t * set the first 8 partials of the triangle wave.\n\t * @example\n\t * return Tone.Offline(() => {\n\t * \tconst osc = new Tone.Oscillator().toDestination().start();\n\t * \tosc.type = \"sine2\";\n\t * }, 0.1, 1);\n\t */\n\ttype: ExtendedToneOscillatorType;\n\n\t/**\n\t * The frequency value of the oscillator\n\t * @example\n\t * const osc = new Tone.FMOscillator(\"Bb4\").toDestination().start();\n\t * osc.frequency.rampTo(\"D2\", 3);\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * The detune value in cents (100th of a semitone).\n\t * @example\n\t * const osc = new Tone.PulseOscillator(\"F3\").toDestination().start();\n\t * // pitch it 1 octave = 12 semitones = 1200 cents\n\t * osc.detune.setValueAtTime(-1200, Tone.now());\n\t * osc.detune.setValueAtTime(1200, Tone.now() + 0.5);\n\t * osc.detune.linearRampToValueAtTime(0, Tone.now() + 1);\n\t * osc.stop(Tone.now() + 1.5);\n\t */\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * The phase is the starting position within the oscillator's cycle. For example\n\t * a phase of 180 would start halfway through the oscillator's cycle. \n\t * @example\n\t * return Tone.Offline(() => {\n\t * \tconst osc = new Tone.Oscillator({\n\t * \t\tfrequency: 20,\n\t * \t\tphase: 90\n\t * \t}).toDestination().start();\n\t * }, 0.1, 1);\n\t */\n\tphase: Degrees;\n\n\t/**\n\t * The partials describes the relative amplitude of each of the harmonics of the oscillator. \n\t * The first value in the array is the first harmonic (i.e. the fundamental frequency), the \n\t * second harmonic is an octave up, the third harmonic is an octave and a fifth, etc. The resulting\n\t * oscillator output is composed of a sine tone at the relative amplitude at each of the harmonic intervals. \n\t * \n\t * Setting this value will automatically set the type to \"custom\".\n\t * The value is an empty array when the type is not \"custom\".\n\t * @example\n\t * const osc = new Tone.Oscillator(\"F3\").toDestination().start();\n\t * setInterval(() => {\n\t * \t// generate 8 random partials\n\t * \tosc.partials = new Array(8).fill(0).map(() => Math.random());\n\t * }, 1000);\n\t */\n\tpartials: number[];\n\n\t/**\n\t * 'partialCount' offers an alternative way to set the number of used partials.\n\t * When partialCount is 0, the maximum number of partials are used when representing\n\t * the waveform using the periodicWave. When 'partials' is set, this value is\n\t * not settable, but equals the length of the partials array. A square wave wave\n\t * is composed of only odd harmonics up through the harmonic series. Partial count\n\t * can limit the number of harmonics which are used to generate the waveform.\n\t * @example\n\t * const osc = new Tone.Oscillator(\"C3\", \"square\").toDestination().start();\n\t * osc.partialCount = 1;\n\t * setInterval(() => {\n\t * \tosc.partialCount++;\n\t * \tconsole.log(osc.partialCount);\n\t * }, 500);\n\t */\n\tpartialCount?: number;\n\n\t/**\n\t * Returns an array of values which represents the waveform.\n\t * @param length The length of the waveform to return\n\t */\n\tasArray(length: number): Promise<Float32Array>;\n}\n\n/**\n * Render a segment of the oscillator to an offline context and return the results as an array\n */\nexport async function generateWaveform(instance: any, length: number): Promise<Float32Array> {\n\tconst duration = length / instance.context.sampleRate;\n\tconst context = new OfflineContext(1, duration, instance.context.sampleRate);\n\tconst clone = new instance.constructor(Object.assign(instance.get(), {\n\t\t// should do 2 iterations\n\t\tfrequency: 2 / duration,\n\t\t// zero out the detune\n\t\tdetune: 0,\n\t\tcontext\n\t})).toDestination();\n\tclone.start(0);\n\tconst buffer = await context.render();\n\treturn buffer.getChannelData(0);\n}\n\n/**\n * Oscillators with partials\n */\ntype SineWithPartials =\n\t\"sine1\" | \"sine2\" | \"sine3\" | \"sine4\" | \"sine5\" | \"sine6\" | \"sine7\" | \"sine8\" | \"sine9\" |\n\t\"sine10\" | \"sine11\" | \"sine12\" | \"sine13\" | \"sine14\" | \"sine15\" | \"sine16\" | \"sine17\" | \"sine18\" | \"sine19\" |\n\t\"sine20\" | \"sine21\" | \"sine22\" | \"sine23\" | \"sine24\" | \"sine25\" | \"sine26\" | \"sine27\" | \"sine28\" | \"sine29\" |\n\t\"sine30\" | \"sine31\" | \"sine32\";\n\ntype SquareWithPartials =\n\t\"square1\" | \"square2\" | \"square3\" | \"square4\" | \"square5\" | \"square6\" | \"square7\" | \"square8\" | \"square9\" |\n\t\"square10\" | \"square11\" | \"square12\" | \"square13\" | \"square14\" | \"square15\" | \"square16\" | \"square17\" | \"square18\" | \"square19\" |\n\t\"square20\" | \"square21\" | \"square22\" | \"square23\" | \"square24\" | \"square25\" | \"square26\" | \"square27\" | \"square28\" | \"square29\" |\n\t\"square30\" | \"square31\" | \"square32\";\n\ntype SawtoothWithPartials =\n\t\"sawtooth1\" | \"sawtooth2\" | \"sawtooth3\" | \"sawtooth4\" | \"sawtooth5\" | \"sawtooth6\" | \"sawtooth7\" | \"sawtooth8\" | \"sawtooth9\" |\n\t\"sawtooth10\" | \"sawtooth11\" | \"sawtooth12\" | \"sawtooth13\" | \"sawtooth14\" | \"sawtooth15\" | \"sawtooth16\" | \"sawtooth17\" | \"sawtooth18\" | \"sawtooth19\" |\n\t\"sawtooth20\" | \"sawtooth21\" | \"sawtooth22\" | \"sawtooth23\" | \"sawtooth24\" | \"sawtooth25\" | \"sawtooth26\" | \"sawtooth27\" | \"sawtooth28\" | \"sawtooth29\" |\n\t\"sawtooth30\" | \"sawtooth31\" | \"sawtooth32\";\n\ntype TriangleWithPartials =\n\t\"triangle1\" | \"triangle2\" | \"triangle3\" | \"triangle4\" | \"triangle5\" | \"triangle6\" | \"triangle7\" | \"triangle8\" | \"triangle9\" |\n\t\"triangle10\" | \"triangle11\" | \"triangle12\" | \"triangle13\" | \"triangle14\" | \"triangle15\" | \"triangle16\" | \"triangle17\" | \"triangle18\" | \"triangle19\" |\n\t\"triangle20\" | \"triangle21\" | \"triangle22\" | \"triangle23\" | \"triangle24\" | \"triangle25\" | \"triangle26\" | \"triangle27\" | \"triangle28\" | \"triangle29\" |\n\t\"triangle30\" | \"triangle31\" | \"triangle32\";\n\ntype TypeWithPartials = SineWithPartials | SquareWithPartials | TriangleWithPartials | SawtoothWithPartials;\n\ninterface BaseOscillatorOptions extends SourceOptions {\n\tfrequency: Frequency;\n\tdetune: Cents;\n\tphase: Degrees;\n}\n\nexport type NonCustomOscillatorType = Exclude<OscillatorType, \"custom\">;\n\ntype AllNonCustomOscillatorType = NonCustomOscillatorType | TypeWithPartials;\n\nexport type ToneOscillatorType = AllNonCustomOscillatorType | \"custom\";\n\nexport type ExtendedToneOscillatorType = ToneOscillatorType | \"pwm\" | \"pulse\";\n\n/**\n * Oscillator Interfaces\n */\ninterface ToneCustomOscillatorOptions extends BaseOscillatorOptions {\n\ttype: \"custom\";\n\tpartials: number[];\n}\n\ninterface ToneTypeOscillatorOptions extends BaseOscillatorOptions {\n\ttype: NonCustomOscillatorType;\n\tpartialCount?: number;\n}\n\ninterface TonePartialOscillatorOptions extends BaseOscillatorOptions {\n\ttype: TypeWithPartials;\n}\n\nexport type ToneOscillatorConstructorOptions = ToneCustomOscillatorOptions | ToneTypeOscillatorOptions | TonePartialOscillatorOptions;\n\nexport interface ToneOscillatorOptions extends BaseOscillatorOptions {\n\ttype: ToneOscillatorType;\n\tpartialCount: number;\n\tpartials: number[];\n}\n\n/**\n * FMOscillator Interface\n */\ninterface FMBaseOscillatorOptions extends BaseOscillatorOptions {\n\tharmonicity: Positive;\n\tmodulationIndex: Positive;\n\tmodulationType: AllNonCustomOscillatorType;\n}\n\ninterface FMCustomOscillatorOptions extends FMBaseOscillatorOptions {\n\ttype: \"custom\";\n\tpartials: number[];\n}\n\ninterface FMTypeOscillatorOptions extends FMBaseOscillatorOptions {\n\ttype: NonCustomOscillatorType;\n\tpartialsCount?: number;\n}\n\ninterface FMPartialsOscillatorOptions extends FMBaseOscillatorOptions {\n\ttype: TypeWithPartials;\n}\n\nexport type FMConstructorOptions = FMTypeOscillatorOptions | FMCustomOscillatorOptions | FMPartialsOscillatorOptions;\n\nexport interface FMOscillatorOptions extends ToneOscillatorOptions {\n\tharmonicity: Positive;\n\tmodulationIndex: Positive;\n\tmodulationType: AllNonCustomOscillatorType;\n}\n\n/**\n * AMOscillator Interface\n */\ninterface AMBaseOscillatorOptions extends BaseOscillatorOptions {\n\tharmonicity: Positive;\n\tmodulationType: AllNonCustomOscillatorType;\n}\n\ninterface AMCustomOscillatorOptions extends AMBaseOscillatorOptions {\n\ttype: \"custom\";\n\tpartials: number[];\n}\n\ninterface AMTypeOscillatorOptions extends AMBaseOscillatorOptions {\n\ttype: NonCustomOscillatorType;\n\tpartialsCount?: number;\n}\n\ninterface AMPartialsOscillatorOptions extends AMBaseOscillatorOptions {\n\ttype: TypeWithPartials;\n}\n\nexport type AMConstructorOptions = AMCustomOscillatorOptions | AMTypeOscillatorOptions | AMPartialsOscillatorOptions;\n\nexport interface AMOscillatorOptions extends ToneOscillatorOptions {\n\tharmonicity: Positive;\n\tmodulationType: AllNonCustomOscillatorType;\n}\n/**\n * FatOscillator\n */\ninterface FatBaseOscillatorOptions extends BaseOscillatorOptions {\n\tspread: Cents;\n\tcount: Positive;\n}\n\ninterface FatCustomOscillatorOptions extends FatBaseOscillatorOptions {\n\ttype: \"custom\";\n\tpartials: number[];\n}\n\ninterface FatTypeOscillatorOptions extends FatBaseOscillatorOptions {\n\ttype: NonCustomOscillatorType;\n\tpartialCount?: number;\n}\n\ninterface FatPartialsOscillatorOptions extends FatBaseOscillatorOptions {\n\ttype: TypeWithPartials;\n}\n\nexport type FatConstructorOptions = FatCustomOscillatorOptions | FatTypeOscillatorOptions | FatPartialsOscillatorOptions;\n\nexport interface FatOscillatorOptions extends ToneOscillatorOptions {\n\tspread: Cents;\n\tcount: Positive;\n}\n\n/**\n * Pulse Oscillator\n */\nexport interface PulseOscillatorOptions extends BaseOscillatorOptions {\n\ttype: \"pulse\";\n\twidth: AudioRange;\n}\n\n/**\n * PWM Oscillator\n */\nexport interface PWMOscillatorOptions extends BaseOscillatorOptions {\n\ttype: \"pwm\";\n\tmodulationFrequency: Frequency;\n}\n\n/**\n * OMNI OSCILLATOR\n */\n\n/**\n * FM Oscillators with partials\n */\ntype FMSineWithPartials =\n\t\"fmsine1\" | \"fmsine2\" | \"fmsine3\" | \"fmsine4\" | \"fmsine5\" | \"fmsine6\" | \"fmsine7\" | \"fmsine8\" | \"fmsine9\" |\n\t\"fmsine10\" | \"fmsine11\" | \"fmsine12\" | \"fmsine13\" | \"fmsine14\" | \"fmsine15\" | \"fmsine16\" | \"fmsine17\" | \"fmsine18\" | \"fmsine19\" |\n\t\"fmsine20\" | \"fmsine21\" | \"fmsine22\" | \"fmsine23\" | \"fmsine24\" | \"fmsine25\" | \"fmsine26\" | \"fmsine27\" | \"fmsine28\" | \"fmsine29\" |\n\t\"fmsine30\" | \"fmsine31\" | \"fmsine32\";\n\ntype FMSquareWithPartials =\n\t\"fmsquare1\" | \"fmsquare2\" | \"fmsquare3\" | \"fmsquare4\" | \"fmsquare5\" | \"fmsquare6\" | \"fmsquare7\" | \"fmsquare8\" | \"fmsquare9\" |\n\t\"fmsquare10\" | \"fmsquare11\" | \"fmsquare12\" | \"fmsquare13\" | \"fmsquare14\" | \"fmsquare15\" | \"fmsquare16\" | \"fmsquare17\" | \"fmsquare18\" | \"fmsquare19\" |\n\t\"fmsquare20\" | \"fmsquare21\" | \"fmsquare22\" | \"fmsquare23\" | \"fmsquare24\" | \"fmsquare25\" | \"fmsquare26\" | \"fmsquare27\" | \"fmsquare28\" | \"fmsquare29\" |\n\t\"fmsquare30\" | \"fmsquare31\" | \"fmsquare32\";\n\ntype FMSawtoothWithPartials =\n\t\"fmsawtooth1\" | \"fmsawtooth2\" | \"fmsawtooth3\" | \"fmsawtooth4\" | \"fmsawtooth5\" | \"fmsawtooth6\" | \"fmsawtooth7\" | \"fmsawtooth8\" | \"fmsawtooth9\" |\n\t\"fmsawtooth10\" | \"fmsawtooth11\" | \"fmsawtooth12\" | \"fmsawtooth13\" | \"fmsawtooth14\" | \"fmsawtooth15\" | \"fmsawtooth16\" | \"fmsawtooth17\" | \"fmsawtooth18\" | \"fmsawtooth19\" |\n\t\"fmsawtooth20\" | \"fmsawtooth21\" | \"fmsawtooth22\" | \"fmsawtooth23\" | \"fmsawtooth24\" | \"fmsawtooth25\" | \"fmsawtooth26\" | \"fmsawtooth27\" | \"fmsawtooth28\" | \"fmsawtooth29\" |\n\t\"fmsawtooth30\" | \"fmsawtooth31\" | \"fmsawtooth32\";\n\ntype FMTriangleWithPartials =\n\t\"fmtriangle1\" | \"fmtriangle2\" | \"fmtriangle3\" | \"fmtriangle4\" | \"fmtriangle5\" | \"fmtriangle6\" | \"fmtriangle7\" | \"fmtriangle8\" | \"fmtriangle9\" |\n\t\"fmtriangle10\" | \"fmtriangle11\" | \"fmtriangle12\" | \"fmtriangle13\" | \"fmtriangle14\" | \"fmtriangle15\" | \"fmtriangle16\" | \"fmtriangle17\" | \"fmtriangle18\" | \"fmtriangle19\" |\n\t\"fmtriangle20\" | \"fmtriangle21\" | \"fmtriangle22\" | \"fmtriangle23\" | \"fmtriangle24\" | \"fmtriangle25\" | \"fmtriangle26\" | \"fmtriangle27\" | \"fmtriangle28\" | \"fmtriangle29\" |\n\t\"fmtriangle30\" | \"fmtriangle31\" | \"fmtriangle32\";\n\ntype FMTypeWithPartials = FMSineWithPartials | FMSquareWithPartials | FMSawtoothWithPartials | FMTriangleWithPartials;\n\n/**\n * AM Oscillators with partials\n */\ntype AMSineWithPartials =\n\t\"amsine1\" | \"amsine2\" | \"amsine3\" | \"amsine4\" | \"amsine5\" | \"amsine6\" | \"amsine7\" | \"amsine8\" | \"amsine9\" |\n\t\"amsine10\" | \"amsine11\" | \"amsine12\" | \"amsine13\" | \"amsine14\" | \"amsine15\" | \"amsine16\" | \"amsine17\" | \"amsine18\" | \"amsine19\" |\n\t\"amsine20\" | \"amsine21\" | \"amsine22\" | \"amsine23\" | \"amsine24\" | \"amsine25\" | \"amsine26\" | \"amsine27\" | \"amsine28\" | \"amsine29\" |\n\t\"amsine30\" | \"amsine31\" | \"amsine32\";\n\ntype AMSquareWithPartials =\n\t\"amsquare1\" | \"amsquare2\" | \"amsquare3\" | \"amsquare4\" | \"amsquare5\" | \"amsquare6\" | \"amsquare7\" | \"amsquare8\" | \"amsquare9\" |\n\t\"amsquare10\" | \"amsquare11\" | \"amsquare12\" | \"amsquare13\" | \"amsquare14\" | \"amsquare15\" | \"amsquare16\" | \"amsquare17\" | \"amsquare18\" | \"amsquare19\" |\n\t\"amsquare20\" | \"amsquare21\" | \"amsquare22\" | \"amsquare23\" | \"amsquare24\" | \"amsquare25\" | \"amsquare26\" | \"amsquare27\" | \"amsquare28\" | \"amsquare29\" |\n\t\"amsquare30\" | \"amsquare31\" | \"amsquare32\";\n\ntype AMSawtoothWithPartials =\n\t\"amsawtooth1\" | \"amsawtooth2\" | \"amsawtooth3\" | \"amsawtooth4\" | \"amsawtooth5\" | \"amsawtooth6\" | \"amsawtooth7\" | \"amsawtooth8\" | \"amsawtooth9\" |\n\t\"amsawtooth10\" | \"amsawtooth11\" | \"amsawtooth12\" | \"amsawtooth13\" | \"amsawtooth14\" | \"amsawtooth15\" | \"amsawtooth16\" | \"amsawtooth17\" | \"amsawtooth18\" | \"amsawtooth19\" |\n\t\"amsawtooth20\" | \"amsawtooth21\" | \"amsawtooth22\" | \"amsawtooth23\" | \"amsawtooth24\" | \"amsawtooth25\" | \"amsawtooth26\" | \"amsawtooth27\" | \"amsawtooth28\" | \"amsawtooth29\" |\n\t\"amsawtooth30\" | \"amsawtooth31\" | \"amsawtooth32\";\n\ntype AMTriangleWithPartials =\n\t\"amtriangle1\" | \"amtriangle2\" | \"amtriangle3\" | \"amtriangle4\" | \"amtriangle5\" | \"amtriangle6\" | \"amtriangle7\" | \"amtriangle8\" | \"amtriangle9\" |\n\t\"amtriangle10\" | \"amtriangle11\" | \"amtriangle12\" | \"amtriangle13\" | \"amtriangle14\" | \"amtriangle15\" | \"amtriangle16\" | \"amtriangle17\" | \"amtriangle18\" | \"amtriangle19\" |\n\t\"amtriangle20\" | \"amtriangle21\" | \"amtriangle22\" | \"amtriangle23\" | \"amtriangle24\" | \"amtriangle25\" | \"amtriangle26\" | \"amtriangle27\" | \"amtriangle28\" | \"amtriangle29\" |\n\t\"amtriangle30\" | \"amtriangle31\" | \"amtriangle32\";\n\ntype AMTypeWithPartials = AMSineWithPartials | AMSquareWithPartials | AMSawtoothWithPartials | AMTriangleWithPartials;\n\n/**\n * Fat Oscillators with partials\n */\ntype FatSineWithPartials =\n\t\"fatsine1\" | \"fatsine2\" | \"fatsine3\" | \"fatsine4\" | \"fatsine5\" | \"fatsine6\" | \"fatsine7\" | \"fatsine8\" | \"fatsine9\" |\n\t\"fatsine10\" | \"fatsine11\" | \"fatsine12\" | \"fatsine13\" | \"fatsine14\" | \"fatsine15\" | \"fatsine16\" | \"fatsine17\" | \"fatsine18\" | \"fatsine19\" |\n\t\"fatsine20\" | \"fatsine21\" | \"fatsine22\" | \"fatsine23\" | \"fatsine24\" | \"fatsine25\" | \"fatsine26\" | \"fatsine27\" | \"fatsine28\" | \"fatsine29\" |\n\t\"fatsine30\" | \"fatsine31\" | \"fatsine32\";\n\ntype FatSquareWithPartials =\n\t\"fatsquare1\" | \"fatsquare2\" | \"fatsquare3\" | \"fatsquare4\" | \"fatsquare5\" | \"fatsquare6\" | \"fatsquare7\" | \"fatsquare8\" | \"fatsquare9\" |\n\t\"fatsquare10\" | \"fatsquare11\" | \"fatsquare12\" | \"fatsquare13\" | \"fatsquare14\" | \"fatsquare15\" | \"fatsquare16\" | \"fatsquare17\" | \"fatsquare18\" | \"fatsquare19\" |\n\t\"fatsquare20\" | \"fatsquare21\" | \"fatsquare22\" | \"fatsquare23\" | \"fatsquare24\" | \"fatsquare25\" | \"fatsquare26\" | \"fatsquare27\" | \"fatsquare28\" | \"fatsquare29\" |\n\t\"fatsquare30\" | \"fatsquare31\" | \"fatsquare32\";\n\ntype FatSawtoothWithPartials =\n\t\"fatsawtooth1\" | \"fatsawtooth2\" | \"fatsawtooth3\" | \"fatsawtooth4\" | \"fatsawtooth5\" | \"fatsawtooth6\" | \"fatsawtooth7\" | \"fatsawtooth8\" | \"fatsawtooth9\" |\n\t\"fatsawtooth10\" | \"fatsawtooth11\" | \"fatsawtooth12\" | \"fatsawtooth13\" | \"fatsawtooth14\" | \"fatsawtooth15\" | \"fatsawtooth16\" | \"fatsawtooth17\" | \"fatsawtooth18\" | \"fatsawtooth19\" |\n\t\"fatsawtooth20\" | \"fatsawtooth21\" | \"fatsawtooth22\" | \"fatsawtooth23\" | \"fatsawtooth24\" | \"fatsawtooth25\" | \"fatsawtooth26\" | \"fatsawtooth27\" | \"fatsawtooth28\" | \"fatsawtooth29\" |\n\t\"fatsawtooth30\" | \"fatsawtooth31\" | \"fatsawtooth32\";\n\ntype FatTriangleWithPartials =\n\t\"fattriangle1\" | \"fattriangle2\" | \"fattriangle3\" | \"fattriangle4\" | \"fattriangle5\" | \"fattriangle6\" | \"fattriangle7\" | \"fattriangle8\" | \"fattriangle9\" |\n\t\"fattriangle10\" | \"fattriangle11\" | \"fattriangle12\" | \"fattriangle13\" | \"fattriangle14\" | \"fattriangle15\" | \"fattriangle16\" | \"fattriangle17\" | \"fattriangle18\" | \"fattriangle19\" |\n\t\"fattriangle20\" | \"fattriangle21\" | \"fattriangle22\" | \"fattriangle23\" | \"fattriangle24\" | \"fattriangle25\" | \"fattriangle26\" | \"fattriangle27\" | \"fattriangle28\" | \"fattriangle29\" |\n\t\"fattriangle30\" | \"fattriangle31\" | \"fattriangle32\";\n\ntype FatTypeWithPartials = FatSineWithPartials | FatSquareWithPartials | FatSawtoothWithPartials | FatTriangleWithPartials;\n\n/**\n * Omni FM\n */\ninterface OmniFMCustomOscillatorOptions extends FMBaseOscillatorOptions {\n\ttype: \"fmcustom\";\n\tpartials: number[];\n}\n\ninterface OmniFMTypeOscillatorOptions extends FMBaseOscillatorOptions {\n\ttype: \"fmsine\" | \"fmsquare\" | \"fmsawtooth\" | \"fmtriangle\";\n\tpartialsCount?: number;\n}\n\ninterface OmniFMPartialsOscillatorOptions extends FMBaseOscillatorOptions {\n\ttype: FMTypeWithPartials;\n}\n\n/**\n * Omni AM\n */\ninterface OmniAMCustomOscillatorOptions extends AMBaseOscillatorOptions {\n\ttype: \"amcustom\";\n\tpartials: number[];\n}\n\ninterface OmniAMTypeOscillatorOptions extends AMBaseOscillatorOptions {\n\ttype: \"amsine\" | \"amsquare\" | \"amsawtooth\" | \"amtriangle\";\n\tpartialsCount?: number;\n}\n\ninterface OmniAMPartialsOscillatorOptions extends AMBaseOscillatorOptions {\n\ttype: AMTypeWithPartials;\n}\n\n/**\n * Omni Fat\n */\ninterface OmniFatCustomOscillatorOptions extends FatBaseOscillatorOptions {\n\ttype: \"fatcustom\";\n\tpartials: number[];\n}\n\ninterface OmniFatTypeOscillatorOptions extends FatBaseOscillatorOptions {\n\ttype: \"fatsine\" | \"fatsquare\" | \"fatsawtooth\" | \"fattriangle\";\n\tpartialsCount?: number;\n}\n\ninterface OmniFatPartialsOscillatorOptions extends FatBaseOscillatorOptions {\n\ttype: FatTypeWithPartials;\n}\n\nexport type OmniOscillatorType =\n\t\"fatsine\" | \"fatsquare\" | \"fatsawtooth\" | \"fattriangle\" | \"fatcustom\" | FatTypeWithPartials |\n\t\"fmsine\" | \"fmsquare\" | \"fmsawtooth\" | \"fmtriangle\" | \"fmcustom\" | FMTypeWithPartials |\n\t\"amsine\" | \"amsquare\" | \"amsawtooth\" | \"amtriangle\" | \"amcustom\" | AMTypeWithPartials |\n\tTypeWithPartials | OscillatorType | \"pulse\" | \"pwm\";\n\nexport type OmniOscillatorOptions =\n\tPulseOscillatorOptions | PWMOscillatorOptions |\n\tOmniFatCustomOscillatorOptions | OmniFatTypeOscillatorOptions | OmniFatPartialsOscillatorOptions |\n\tOmniFMCustomOscillatorOptions | OmniFMTypeOscillatorOptions | OmniFMPartialsOscillatorOptions |\n\tOmniAMCustomOscillatorOptions | OmniAMTypeOscillatorOptions | OmniAMPartialsOscillatorOptions |\n\tToneOscillatorConstructorOptions;\n\ntype OmitSourceOptions<T extends BaseOscillatorOptions> = Omit<T, \"frequency\" | \"detune\" | \"context\">;\n\n/**\n * The settable options for the omni oscillator inside of the source which excludes certain attributes that are defined by the parent class\n */\nexport type OmniOscillatorSynthOptions =\n\tOmitSourceOptions<PulseOscillatorOptions> | OmitSourceOptions<PWMOscillatorOptions> |\n\tOmitSourceOptions<OmniFatCustomOscillatorOptions> | OmitSourceOptions<OmniFatTypeOscillatorOptions> | OmitSourceOptions<OmniFatPartialsOscillatorOptions> |\n\tOmitSourceOptions<OmniFMCustomOscillatorOptions> | OmitSourceOptions<OmniFMTypeOscillatorOptions> | OmitSourceOptions<OmniFMPartialsOscillatorOptions> |\n\tOmitSourceOptions<OmniAMCustomOscillatorOptions> | OmitSourceOptions<OmniAMTypeOscillatorOptions> | OmitSourceOptions<OmniAMPartialsOscillatorOptions> |\n\tOmitSourceOptions<ToneCustomOscillatorOptions> | OmitSourceOptions<ToneTypeOscillatorOptions> | OmitSourceOptions<TonePartialOscillatorOptions>\n", "import { connect } from \"../../core/context/ToneAudioNode\";\nimport { Param } from \"../../core/context/Param\";\nimport { Cents, Frequency, Seconds, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { OneShotSource, OneShotSourceOptions } from \"../OneShotSource\";\nimport { readOnly } from \"../../core/util/Interface\";\n\nexport interface ToneOscillatorNodeOptions extends OneShotSourceOptions {\n\tfrequency: Frequency;\n\tdetune: Cents;\n\ttype: OscillatorType;\n}\n\n/**\n * Wrapper around the native fire-and-forget OscillatorNode.\n * Adds the ability to reschedule the stop method.\n * ***[[Oscillator]] is better for most use-cases***\n * @category Source\n */\nexport class ToneOscillatorNode extends OneShotSource<ToneOscillatorNodeOptions> {\n\n\treadonly name: string = \"ToneOscillatorNode\";\n\n\t/**\n\t * The oscillator\n\t */\n\tprivate _oscillator = this.context.createOscillator();\n\tprotected _internalChannels = [this._oscillator];\n\n\t/**\n\t * The frequency of the oscillator\n\t */\n\treadonly frequency: Param<\"frequency\">;\n\n\t/**\n\t * The detune of the oscillator\n\t */\n\treadonly detune: Param<\"cents\">;\n\n\t/**\n\t * @param  frequency   The frequency value\n\t * @param  type  The basic oscillator type\n\t */\n\tconstructor(\n\t\tfrequency: Frequency,\n\t\ttype: OscillatorType,\n\t);\n\tconstructor(options?: Partial<ToneOscillatorNodeOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(ToneOscillatorNode.getDefaults(), arguments, [\"frequency\", \"type\"]));\n\t\tconst options = optionsFromArguments(ToneOscillatorNode.getDefaults(), arguments, [\"frequency\", \"type\"]);\n\n\t\tconnect(this._oscillator, this._gainNode);\n\n\t\tthis.type = options.type;\n\n\t\tthis.frequency = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._oscillator.frequency,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\n\t\tthis.detune = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._oscillator.detune,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t});\n\n\t\treadOnly(this, [\"frequency\", \"detune\"]);\n\t}\n\n\tstatic getDefaults(): ToneOscillatorNodeOptions {\n\t\treturn Object.assign(OneShotSource.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\ttype: \"sine\" as OscillatorType,\n\t\t});\n\t}\n\n\t/**\n\t * Start the oscillator node at the given time\n\t * @param  time When to start the oscillator\n\t */\n\tstart(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis.log(\"start\", computedTime);\n\t\tthis._startGain(computedTime);\n\t\tthis._oscillator.start(computedTime);\n\t\treturn this;\n\t}\n\n\tprotected _stopSource(time?: Seconds): void {\n\t\tthis._oscillator.stop(time);\n\t}\n\n\t/**\n\t * Sets an arbitrary custom periodic waveform given a PeriodicWave.\n\t * @param  periodicWave PeriodicWave should be created with context.createPeriodicWave\n\t */\n\tsetPeriodicWave(periodicWave: PeriodicWave): this {\n\t\tthis._oscillator.setPeriodicWave(periodicWave);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The oscillator type. Either 'sine', 'sawtooth', 'square', or 'triangle'\n\t */\n\tget type(): OscillatorType {\n\t\treturn this._oscillator.type;\n\t}\n\tset type(type: OscillatorType) {\n\t\tthis._oscillator.type = type;\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this.state === \"started\") {\n\t\t\tthis.stop();\n\t\t}\n\t\tthis._oscillator.disconnect();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\treturn this;\n\t}\n}\n", "import { AudioRange, Degrees, Frequency, Radians, Time } from \"../../core/type/Units\";\nimport { deepEquals, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { isDefined } from \"../../core/util/TypeCheck\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport {\n\tgenerateWaveform, ToneOscillatorConstructorOptions, ToneOscillatorInterface,\n\tToneOscillatorOptions, ToneOscillatorType\n} from \"./OscillatorInterface\";\nimport { ToneOscillatorNode } from \"./ToneOscillatorNode\";\nimport { assertRange } from \"../../core/util/Debug\";\nimport { clamp } from \"../../core/util/Math\";\nexport { ToneOscillatorOptions, ToneOscillatorType } from \"./OscillatorInterface\";\n/**\n * Oscillator supports a number of features including\n * phase rotation, multiple oscillator types (see Oscillator.type),\n * and Transport syncing (see Oscillator.syncFrequency).\n *\n * @example\n * // make and start a 440hz sine tone\n * const osc = new Tone.Oscillator(440, \"sine\").toDestination().start();\n * @category Source\n */\nexport class Oscillator extends Source<ToneOscillatorOptions> implements ToneOscillatorInterface {\n\n\treadonly name: string = \"Oscillator\";\n\n\t/**\n\t * the main oscillator\n\t */\n\tprivate _oscillator: ToneOscillatorNode | null = null;\n\n\t/**\n\t * The frequency control.\n\t */\n\tfrequency: Signal<\"frequency\">;\n\n\t/**\n\t * The detune control signal.\n\t */\n\tdetune: Signal<\"cents\">;\n\n\t/**\n\t * the periodic wave\n\t */\n\tprivate _wave?: PeriodicWave;\n\n\t/**\n\t * The partials of the oscillator\n\t */\n\tprivate _partials: number[];\n\n\t/**\n\t * The number of partials to limit or extend the periodic wave by\n\t */\n\tprivate _partialCount: number;\n\n\t/**\n\t * the phase of the oscillator between 0 - 360\n\t */\n\tprivate _phase!: Radians;\n\n\t/**\n\t * the type of the oscillator\n\t */\n\tprivate _type: ToneOscillatorType;\n\n\t/**\n\t * @param frequency Starting frequency\n\t * @param type The oscillator type. Read more about type below.\n\t */\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType);\n\tconstructor(options?: Partial<ToneOscillatorConstructorOptions>)\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Oscillator.getDefaults(), arguments, [\"frequency\", \"type\"]));\n\t\tconst options = optionsFromArguments(Oscillator.getDefaults(), arguments, [\"frequency\", \"type\"]);\n\n\t\tthis.frequency = new Signal<\"frequency\">({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\t\treadOnly(this, \"frequency\");\n\n\t\tthis.detune = new Signal<\"cents\">({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t});\n\t\treadOnly(this, \"detune\");\n\n\t\tthis._partials = options.partials;\n\t\tthis._partialCount = options.partialCount;\n\t\tthis._type = options.type;\n\n\t\tif (options.partialCount && options.type !== \"custom\") {\n\t\t\tthis._type = this.baseType + options.partialCount.toString() as ToneOscillatorType;\n\t\t}\n\t\tthis.phase = options.phase;\n\t}\n\n\tstatic getDefaults(): ToneOscillatorOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\tpartialCount: 0,\n\t\t\tpartials: [],\n\t\t\tphase: 0,\n\t\t\ttype: \"sine\" as const,\n\t\t});\n\t}\n\n\t/**\n\t * start the oscillator\n\t */\n\tprotected _start(time?: Time): void {\n\t\tconst computedTime = this.toSeconds(time);\n\t\t// new oscillator with previous values\n\t\tconst oscillator = new ToneOscillatorNode({\n\t\t\tcontext: this.context,\n\t\t\tonended: () => this.onstop(this),\n\t\t});\n\t\tthis._oscillator = oscillator;\n\t\tif (this._wave) {\n\t\t\tthis._oscillator.setPeriodicWave(this._wave);\n\t\t} else {\n\t\t\tthis._oscillator.type = this._type as OscillatorType;\n\t\t}\n\t\t// connect the control signal to the oscillator frequency & detune\n\t\tthis._oscillator.connect(this.output);\n\t\tthis.frequency.connect(this._oscillator.frequency);\n\t\tthis.detune.connect(this._oscillator.detune);\n\n\t\t// start the oscillator\n\t\tthis._oscillator.start(computedTime);\n\t}\n\n\t/**\n\t * stop the oscillator\n\t */\n\tprotected _stop(time?: Time): void {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (this._oscillator) {\n\t\t\tthis._oscillator.stop(computedTime);\n\t\t}\n\t}\n\n\t/**\n\t * Restart the oscillator. Does not stop the oscillator, but instead\n\t * just cancels any scheduled 'stop' from being invoked.\n\t */\n\tprotected _restart(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis.log(\"restart\", computedTime);\n\t\tif (this._oscillator) {\n\t\t\tthis._oscillator.cancelStop();\n\t\t}\n\t\tthis._state.cancel(computedTime);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sync the signal to the Transport's bpm. Any changes to the transports bpm,\n\t * will also affect the oscillators frequency.\n\t * @example\n\t * const osc = new Tone.Oscillator().toDestination().start();\n\t * osc.frequency.value = 440;\n\t * // the ratio between the bpm and the frequency will be maintained\n\t * osc.syncFrequency();\n\t * // double the tempo\n\t * Tone.Transport.bpm.value *= 2;\n\t * // the frequency of the oscillator is doubled to 880\n\t */\n\tsyncFrequency(): this {\n\t\tthis.context.transport.syncSignal(this.frequency);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unsync the oscillator's frequency from the Transport.\n\t * See Oscillator.syncFrequency\n\t */\n\tunsyncFrequency(): this {\n\t\tthis.context.transport.unsyncSignal(this.frequency);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Cache the periodic waves to avoid having to redo computations\n\t */\n\tprivate static _periodicWaveCache: Array<{\n\t\tpartials: number[];\n\t\tphase: number;\n\t\ttype: string;\n\t\tpartialCount: number;\n\t\treal: Float32Array;\n\t\timag: Float32Array;\n\t\twave: PeriodicWave;\n\t}> = [];\n\n\t/**\n\t * Get a cached periodic wave. Avoids having to recompute\n\t * the oscillator values when they have already been computed\n\t * with the same values.\n\t */\n\tprivate _getCachedPeriodicWave(): { real: Float32Array; imag: Float32Array; partials: number[]; wave: PeriodicWave } | undefined {\n\t\tif (this._type === \"custom\") {\n\t\t\tconst oscProps = Oscillator._periodicWaveCache.find(description => {\n\t\t\t\treturn description.phase === this._phase &&\n\t\t\t\t\tdeepEquals(description.partials, this._partials);\n\t\t\t});\n\t\t\treturn oscProps;\n\t\t} else {\n\t\t\tconst oscProps = Oscillator._periodicWaveCache.find(description => {\n\t\t\t\treturn description.type === this._type &&\n\t\t\t\t\tdescription.phase === this._phase;\n\t\t\t});\n\t\t\tthis._partialCount = oscProps ? oscProps.partialCount : this._partialCount;\n\t\t\treturn oscProps;\n\t\t}\n\t}\n\n\tget type(): ToneOscillatorType {\n\t\treturn this._type;\n\t}\n\tset type(type) {\n\t\tthis._type = type;\n\t\tconst isBasicType = [\"sine\", \"square\", \"sawtooth\", \"triangle\"].indexOf(type) !== -1;\n\t\tif (this._phase === 0 && isBasicType) {\n\t\t\tthis._wave = undefined;\n\t\t\tthis._partialCount = 0;\n\t\t\t// just go with the basic approach\n\t\t\tif (this._oscillator !== null) {\n\t\t\t\t// already tested that it's a basic type\n\t\t\t\tthis._oscillator.type = type as OscillatorType;\n\t\t\t}\n\t\t} else {\n\t\t\t// first check if the value is cached\n\t\t\tconst cache = this._getCachedPeriodicWave();\n\t\t\tif (isDefined(cache)) {\n\t\t\t\tconst { partials, wave } = cache;\n\t\t\t\tthis._wave = wave;\n\t\t\t\tthis._partials = partials;\n\t\t\t\tif (this._oscillator !== null) {\n\t\t\t\t\tthis._oscillator.setPeriodicWave(this._wave);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst [real, imag] = this._getRealImaginary(type, this._phase);\n\t\t\t\tconst periodicWave = this.context.createPeriodicWave(real, imag);\n\t\t\t\tthis._wave = periodicWave;\n\t\t\t\tif (this._oscillator !== null) {\n\t\t\t\t\tthis._oscillator.setPeriodicWave(this._wave);\n\t\t\t\t}\n\t\t\t\t// set the cache\n\t\t\t\tOscillator._periodicWaveCache.push({\n\t\t\t\t\timag,\n\t\t\t\t\tpartialCount: this._partialCount,\n\t\t\t\t\tpartials: this._partials,\n\t\t\t\t\tphase: this._phase,\n\t\t\t\t\treal,\n\t\t\t\t\ttype: this._type,\n\t\t\t\t\twave: this._wave,\n\t\t\t\t});\n\t\t\t\tif (Oscillator._periodicWaveCache.length > 100) {\n\t\t\t\t\tOscillator._periodicWaveCache.shift();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tget baseType(): OscillatorType {\n\t\treturn (this._type as string).replace(this.partialCount.toString(), \"\") as OscillatorType;\n\t}\n\tset baseType(baseType) {\n\t\tif (this.partialCount && this._type !== \"custom\" && baseType !== \"custom\") {\n\t\t\tthis.type = baseType + this.partialCount as ToneOscillatorType;\n\t\t} else {\n\t\t\tthis.type = baseType;\n\t\t}\n\t}\n\n\tget partialCount(): number {\n\t\treturn this._partialCount;\n\t}\n\tset partialCount(p) {\n\t\tassertRange(p, 0);\n\t\tlet type = this._type;\n\t\tconst partial = /^(sine|triangle|square|sawtooth)(\\d+)$/.exec(this._type);\n\t\tif (partial) {\n\t\t\ttype = partial[1] as OscillatorType;\n\t\t}\n\t\tif (this._type !== \"custom\") {\n\t\t\tif (p === 0) {\n\t\t\t\tthis.type = type;\n\t\t\t} else {\n\t\t\t\tthis.type = type + p.toString() as ToneOscillatorType;\n\t\t\t}\n\t\t} else {\n\t\t\t// extend or shorten the partials array\n\t\t\tconst fullPartials = new Float32Array(p);\n\t\t\t// copy over the partials array\n\t\t\tthis._partials.forEach((v, i) => fullPartials[i] = v);\n\t\t\tthis._partials = Array.from(fullPartials);\n\t\t\tthis.type = this._type;\n\t\t}\n\t}\n\n\t/**\n\t * Returns the real and imaginary components based\n\t * on the oscillator type.\n\t * @returns [real: Float32Array, imaginary: Float32Array]\n\t */\n\tprivate _getRealImaginary(type: ToneOscillatorType, phase: Radians): Float32Array[] {\n\t\tconst fftSize = 4096;\n\t\tlet periodicWaveSize = fftSize / 2;\n\n\t\tconst real = new Float32Array(periodicWaveSize);\n\t\tconst imag = new Float32Array(periodicWaveSize);\n\n\t\tlet partialCount = 1;\n\t\tif (type === \"custom\") {\n\t\t\tpartialCount = this._partials.length + 1;\n\t\t\tthis._partialCount = this._partials.length;\n\t\t\tperiodicWaveSize = partialCount;\n\t\t\t// if the partial count is 0, don't bother doing any computation\n\t\t\tif (this._partials.length === 0) {\n\t\t\t\treturn [real, imag];\n\t\t\t}\n\t\t} else {\n\t\t\tconst partial = /^(sine|triangle|square|sawtooth)(\\d+)$/.exec(type);\n\t\t\tif (partial) {\n\t\t\t\tpartialCount = parseInt(partial[2], 10) + 1;\n\t\t\t\tthis._partialCount = parseInt(partial[2], 10);\n\t\t\t\ttype = partial[1] as ToneOscillatorType;\n\t\t\t\tpartialCount = Math.max(partialCount, 2);\n\t\t\t\tperiodicWaveSize = partialCount;\n\t\t\t} else {\n\t\t\t\tthis._partialCount = 0;\n\t\t\t}\n\t\t\tthis._partials = [];\n\t\t}\n\n\t\tfor (let n = 1; n < periodicWaveSize; ++n) {\n\t\t\tconst piFactor = 2 / (n * Math.PI);\n\t\t\tlet b;\n\t\t\tswitch (type) {\n\t\t\t\tcase \"sine\":\n\t\t\t\t\tb = (n <= partialCount) ? 1 : 0;\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"square\":\n\t\t\t\t\tb = (n & 1) ? 2 * piFactor : 0;\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"sawtooth\":\n\t\t\t\t\tb = piFactor * ((n & 1) ? 1 : -1);\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"triangle\":\n\t\t\t\t\tif (n & 1) {\n\t\t\t\t\t\tb = 2 * (piFactor * piFactor) * ((((n - 1) >> 1) & 1) ? -1 : 1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tb = 0;\n\t\t\t\t\t}\n\t\t\t\t\tthis._partials[n - 1] = b;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"custom\":\n\t\t\t\t\tb = this._partials[n - 1];\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new TypeError(\"Oscillator: invalid type: \" + type);\n\t\t\t}\n\t\t\tif (b !== 0) {\n\t\t\t\treal[n] = -b * Math.sin(phase * n);\n\t\t\t\timag[n] = b * Math.cos(phase * n);\n\t\t\t} else {\n\t\t\t\treal[n] = 0;\n\t\t\t\timag[n] = 0;\n\t\t\t}\n\t\t}\n\t\treturn [real, imag];\n\t}\n\n\t/**\n\t * Compute the inverse FFT for a given phase.\n\t */\n\tprivate _inverseFFT(real: Float32Array, imag: Float32Array, phase: Radians): number {\n\t\tlet sum = 0;\n\t\tconst len = real.length;\n\t\tfor (let i = 0; i < len; i++) {\n\t\t\tsum += real[i] * Math.cos(i * phase) + imag[i] * Math.sin(i * phase);\n\t\t}\n\t\treturn sum;\n\t}\n\n\t/**\n\t * Returns the initial value of the oscillator when stopped.\n\t * E.g. a \"sine\" oscillator with phase = 90 would return an initial value of -1.\n\t */\n\tgetInitialValue(): AudioRange {\n\t\tconst [real, imag] = this._getRealImaginary(this._type, 0);\n\t\tlet maxValue = 0;\n\t\tconst twoPi = Math.PI * 2;\n\t\tconst testPositions = 32;\n\t\t// check for peaks in 16 places\n\t\tfor (let i = 0; i < testPositions; i++) {\n\t\t\tmaxValue = Math.max(this._inverseFFT(real, imag, (i / testPositions) * twoPi), maxValue);\n\t\t}\n\t\treturn clamp(-this._inverseFFT(real, imag, this._phase) / maxValue, -1, 1);\n\t}\n\n\tget partials(): number[] {\n\t\treturn this._partials.slice(0, this.partialCount);\n\t}\n\tset partials(partials) {\n\t\tthis._partials = partials;\n\t\tthis._partialCount = this._partials.length;\n\t\tif (partials.length) {\n\t\t\tthis.type = \"custom\";\n\t\t}\n\t}\n\n\tget phase(): Degrees {\n\t\treturn this._phase * (180 / Math.PI);\n\t}\n\tset phase(phase) {\n\t\tthis._phase = phase * Math.PI / 180;\n\t\t// reset the type\n\t\tthis.type = this._type;\n\t}\n\n\tasync asArray(length = 1024): Promise<Float32Array> {\n\t\treturn generateWaveform(this, length);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tif (this._oscillator !== null) {\n\t\t\tthis._oscillator.dispose();\n\t\t}\n\t\tthis._wave = undefined;\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\treturn this;\n\t}\n}\n", "import { optionsFromArguments } from \"../core/util/Defaults\";\nimport { InputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { connectSignal } from \"./Signal\";\n\nexport type SignalOperatorOptions = ToneAudioNodeOptions;\n\n/**\n * A signal operator has an input and output and modifies the signal.\n */\nexport abstract class SignalOperator<Options extends SignalOperatorOptions> extends ToneAudioNode<Options> {\n\n\tconstructor(options?: Partial<Options>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(SignalOperator.getDefaults(), arguments, [\"context\"])));\n\t}\n\n\tconnect(destination: InputNode, outputNum = 0, inputNum = 0): this {\n\t\tconnectSignal(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n}\n", "import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { isArray, isFunction } from \"../core/util/TypeCheck\";\nimport { assert } from \"../core/util/Debug\";\nimport { Signal } from \"./Signal\";\nimport { SignalOperator } from \"./SignalOperator\";\n\nexport type WaveShaperMappingFn = (value: number, index?: number) => number;\n\ntype WaveShaperMapping = WaveShaperMappingFn | number[] | Float32Array;\n\ninterface WaveShaperOptions extends ToneAudioNodeOptions {\n\tmapping?: WaveShaperMapping;\n\tlength: number;\n\tcurve?: number[] | Float32Array;\n}\n\n/**\n * Wraps the native Web Audio API\n * [WaveShaperNode](http://webaudio.github.io/web-audio-api/#the-waveshapernode-interface).\n *\n * @example\n * const osc = new Tone.Oscillator().toDestination().start();\n * // multiply the output of the signal by 2 using the waveshaper's function\n * const timesTwo = new Tone.WaveShaper((val) => val * 2, 2048).connect(osc.frequency);\n * const signal = new Tone.Signal(440).connect(timesTwo);\n * @category Signal\n */\nexport class WaveShaper extends SignalOperator<WaveShaperOptions> {\n\n\treadonly name: string = \"WaveShaper\";\n\n\t/**\n\t * the waveshaper node\n\t */\n\tprivate _shaper: WaveShaperNode = this.context.createWaveShaper();\n\n\t/**\n\t * The input to the waveshaper node.\n\t */\n\tinput = this._shaper;\n\n\t/**\n\t * The output from the waveshaper node\n\t */\n\toutput = this._shaper;\n\n\t/**\n\t * @param mapping The function used to define the values.\n\t *                The mapping function should take two arguments:\n\t *                the first is the value at the current position\n\t *                and the second is the array position.\n\t *                If the argument is an array, that array will be\n\t *                set as the wave shaping function. The input\n\t *                signal is an AudioRange [-1, 1] value and the output\n\t *                signal can take on any numerical values.\n\t *\n\t * @param bufferLen The length of the WaveShaperNode buffer.\n\t */\n\tconstructor(mapping?: WaveShaperMapping, length?: number);\n\tconstructor(options?: Partial<WaveShaperOptions>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(WaveShaper.getDefaults(), arguments, [\"mapping\", \"length\"])));\n\t\tconst options = optionsFromArguments(WaveShaper.getDefaults(), arguments, [\"mapping\", \"length\"]);\n\n\t\tif (isArray(options.mapping) || options.mapping instanceof Float32Array) {\n\t\t\tthis.curve = Float32Array.from(options.mapping);\n\t\t} else if (isFunction(options.mapping)) {\n\t\t\tthis.setMap(options.mapping, options.length);\n\t\t}\n\t}\n\n\tstatic getDefaults(): WaveShaperOptions {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tlength: 1024,\n\t\t});\n\t}\n\n\t/**\n\t * Uses a mapping function to set the value of the curve.\n\t * @param mapping The function used to define the values.\n\t *                The mapping function take two arguments:\n\t *                the first is the value at the current position\n\t *                which goes from -1 to 1 over the number of elements\n\t *                in the curve array. The second argument is the array position.\n\t * @example\n\t * const shaper = new Tone.WaveShaper();\n\t * // map the input signal from [-1, 1] to [0, 10]\n\t * shaper.setMap((val, index) => (val + 1) * 5);\n\t */\n\tsetMap(mapping: WaveShaperMappingFn, length = 1024): this {\n\t\tconst array = new Float32Array(length);\n\t\tfor (let i = 0, len = length; i < len; i++) {\n\t\t\tconst normalized = (i / (len - 1)) * 2 - 1;\n\t\t\tarray[i] = mapping(normalized, i);\n\t\t}\n\t\tthis.curve = array;\n\t\treturn this;\n\t}\n\n\t/**\n\t * The array to set as the waveshaper curve. For linear curves\n\t * array length does not make much difference, but for complex curves\n\t * longer arrays will provide smoother interpolation.\n\t */\n\tget curve(): Float32Array | null {\n\t\treturn this._shaper.curve;\n\t}\n\n\tset curve(mapping: Float32Array | null) {\n\t\tthis._shaper.curve = mapping;\n\t}\n\n\t/**\n\t * Specifies what type of oversampling (if any) should be used when\n\t * applying the shaping curve. Can either be \"none\", \"2x\" or \"4x\".\n\t */\n\tget oversample(): OverSampleType {\n\t\treturn this._shaper.oversample;\n\t}\n\n\tset oversample(oversampling: OverSampleType) {\n\t\tconst isOverSampleType = [\"none\", \"2x\", \"4x\"].some(str => str.includes(oversampling));\n\t\tassert(isOverSampleType, \"oversampling must be either 'none', '2x', or '4x'\");\n\t\tthis._shaper.oversample = oversampling;\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._shaper.disconnect();\n\t\treturn this;\n\t}\n}\n", "import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { SignalOperator } from \"./SignalOperator\";\nimport { WaveShaper } from \"./WaveShaper\";\n\n/**\n * AudioToGain converts an input in AudioRange [-1,1] to NormalRange [0,1].\n * See [[GainToAudio]].\n * @category Signal\n */\nexport class AudioToGain extends SignalOperator<ToneAudioNodeOptions> {\n\n\treadonly name: string = \"AudioToGain\";\n\n\t/**\n\t * The node which converts the audio ranges\n\t */\n\tprivate _norm = new WaveShaper({\n\t\tcontext: this.context,\n\t\tmapping: x => (x + 1) / 2,\n\t});\n\n\t/**\n\t * The AudioRange input [-1, 1]\n\t */\n\tinput = this._norm;\n\n\t/**\n\t * The GainRange output [0, 1]\n\t */\n\toutput = this._norm;\n\n\t/**\n\t * clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._norm.dispose();\n\t\treturn this;\n\t}\n}\n", "import { Gain } from \"../core/context/Gain\";\nimport { Param } from \"../core/context/Param\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Signal, SignalOptions } from \"./Signal\";\nimport { InputNode, OutputNode } from \"../core/context/ToneAudioNode\";\n\n/**\n * Multiply two incoming signals. Or, if a number is given in the constructor,\n * multiplies the incoming signal by that value.\n *\n * @example\n * // multiply two signals\n * const mult = new Tone.Multiply();\n * const sigA = new Tone.Signal(3);\n * const sigB = new Tone.Signal(4);\n * sigA.connect(mult);\n * sigB.connect(mult.factor);\n * // output of mult is 12.\n * @example\n * // multiply a signal and a number\n * const mult = new Tone.Multiply(10);\n * const sig = new Tone.Signal(2).connect(mult);\n * // the output of mult is 20.\n * @category Signal\n */\nexport class Multiply<TypeName extends \"number\" | \"positive\" = \"number\"> extends Signal<TypeName> {\n\n\treadonly name: string = \"Multiply\";\n\n\t/**\n\t * Indicates if the value should be overridden on connection\n\t */\n\treadonly override = false;\n\n\t/**\n\t * the input gain node\n\t */\n\tprivate _mult: Gain;\n\n\t/**\n\t * The multiplicand input.\n\t */\n\tinput: InputNode;\n\n\t/**\n\t * The product of the input and [[factor]]\n\t */\n\toutput: OutputNode;\n\n\t/**\n\t * The multiplication factor. Can be set directly or a signal can be connected to it.\n\t */\n\tfactor: Param<TypeName>;\n\n\t/**\n\t * @param value Constant value to multiple\n\t */\n\tconstructor(value?: number);\n\tconstructor(options?: Partial<SignalOptions<TypeName>>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Multiply.getDefaults(), arguments, [\"value\"])));\n\t\tconst options = optionsFromArguments(Multiply.getDefaults(), arguments, [\"value\"]);\n\n\t\tthis._mult = this.input = this.output = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tminValue: options.minValue,\n\t\t\tmaxValue: options.maxValue,\n\t\t});\n\n\t\tthis.factor = this._param = this._mult.gain as unknown as Param<TypeName>;\n\t\tthis.factor.setValueAtTime(options.value, 0);\n\t}\n\n\tstatic getDefaults(): SignalOptions<any> {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tvalue: 0,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._mult.dispose();\n\t\treturn this;\n\t}\n}\n", "import { Gain } from \"../../core/context/Gain\";\nimport { Degrees, Frequency, Seconds } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { AudioToGain } from \"../../signal/AudioToGain\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport {\n\tAMConstructorOptions, AMOscillatorOptions,\n\tgenerateWaveform, NonCustomOscillatorType,\n\tToneOscillatorInterface,\n\tToneOscillatorType\n} from \"./OscillatorInterface\";\n\nexport { AMOscillatorOptions } from \"./OscillatorInterface\";\n\n/**\n * An amplitude modulated oscillator node. It is implemented with\n * two oscillators, one which modulators the other's amplitude\n * through a gain node.\n * ```\n *    +-------------+       +----------+\n *    | Carrier Osc +>------> GainNode |\n *    +-------------+       |          +--->Output\n *                      +---> gain     |\n * +---------------+    |   +----------+\n * | Modulator Osc +>---+\n * +---------------+\n * ```\n * @example\n * return Tone.Offline(() => {\n * \tconst amOsc = new Tone.AMOscillator(30, \"sine\", \"square\").toDestination().start();\n * }, 0.2, 1);\n * @category Source\n */\nexport class AMOscillator extends Source<AMOscillatorOptions> implements ToneOscillatorInterface {\n\n\treadonly name: string = \"AMOscillator\";\n\n\t/**\n\t * The carrier oscillator\n\t */\n\tprivate _carrier: Oscillator;\n\n\treadonly frequency: Signal<\"frequency\">;\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * The modulating oscillator\n\t */\n\tprivate _modulator: Oscillator;\n\n\t/**\n\t * convert the -1,1 output to 0,1\n\t */\n\tprivate _modulationScale = new AudioToGain({ context: this.context });\n\n\t/**\n\t * Harmonicity is the frequency ratio between the carrier and the modulator oscillators.\n\t * A harmonicity of 1 gives both oscillators the same frequency.\n\t * Harmonicity = 2 means a change of an octave.\n\t * @example\n\t * const amOsc = new Tone.AMOscillator(\"D2\").toDestination().start();\n\t * Tone.Transport.scheduleRepeat(time => {\n\t * \tamOsc.harmonicity.setValueAtTime(1, time);\n\t * \tamOsc.harmonicity.setValueAtTime(0.5, time + 0.5);\n\t * \tamOsc.harmonicity.setValueAtTime(1.5, time + 1);\n\t * \tamOsc.harmonicity.setValueAtTime(1, time + 2);\n\t * \tamOsc.harmonicity.linearRampToValueAtTime(2, time + 4);\n\t * }, 4);\n\t * Tone.Transport.start();\n\t */\n\treadonly harmonicity: Signal<\"positive\">;\n\n\t/**\n\t * the node where the modulation happens\n\t */\n\tprivate _modulationNode = new Gain({\n\t\tcontext: this.context,\n\t});\n\n\t/**\n\t * @param frequency The starting frequency of the oscillator.\n\t * @param type The type of the carrier oscillator.\n\t * @param modulationType The type of the modulator oscillator.\n\t */\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType, modulationType?: ToneOscillatorType);\n\tconstructor(options?: Partial<AMConstructorOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(AMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]));\n\t\tconst options = optionsFromArguments(AMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]);\n\n\t\tthis._carrier = new Oscillator({\n\t\t\tcontext: this.context,\n\t\t\tdetune: options.detune,\n\t\t\tfrequency: options.frequency,\n\t\t\tonstop: () => this.onstop(this),\n\t\t\tphase: options.phase,\n\t\t\ttype: options.type,\n\t\t} as OscillatorOptions);\n\t\tthis.frequency = this._carrier.frequency,\n\t\tthis.detune = this._carrier.detune;\n\n\t\tthis._modulator = new Oscillator({\n\t\t\tcontext: this.context,\n\t\t\tphase: options.phase,\n\t\t\ttype: options.modulationType,\n\t\t} as OscillatorOptions);\n\n\t\tthis.harmonicity = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.harmonicity,\n\t\t});\n\n\t\t// connections\n\t\tthis.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t\tthis._modulator.chain(this._modulationScale, this._modulationNode.gain);\n\t\tthis._carrier.chain(this._modulationNode, this.output);\n\n\t\treadOnly(this, [\"frequency\", \"detune\", \"harmonicity\"]);\n\t}\n\n\tstatic getDefaults(): AMOscillatorOptions {\n\t\treturn Object.assign(Oscillator.getDefaults(), {\n\t\t\tharmonicity: 1,\n\t\t\tmodulationType: \"square\" as NonCustomOscillatorType,\n\t\t});\n\t}\n\n\t/**\n\t * start the oscillator\n\t */\n\tprotected _start(time: Seconds): void {\n\t\tthis._modulator.start(time);\n\t\tthis._carrier.start(time);\n\t}\n\n\t/**\n\t * stop the oscillator\n\t */\n\tprotected _stop(time: Seconds): void {\n\t\tthis._modulator.stop(time);\n\t\tthis._carrier.stop(time);\n\t}\n\n\tprotected _restart(time: Seconds): void {\n\t\tthis._modulator.restart(time);\n\t\tthis._carrier.restart(time);\n\t}\n\n\t/**\n\t * The type of the carrier oscillator\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._carrier.type;\n\t}\n\tset type(type: ToneOscillatorType) {\n\t\tthis._carrier.type = type;\n\t}\n\n\tget baseType(): OscillatorType {\n\t\treturn this._carrier.baseType;\n\t}\n\tset baseType(baseType: OscillatorType) {\n\t\tthis._carrier.baseType = baseType;\n\t}\n\n\tget partialCount(): number {\n\t\treturn this._carrier.partialCount;\n\t}\n\tset partialCount(partialCount: number) {\n\t\tthis._carrier.partialCount = partialCount;\n\t}\n\n\t/**\n\t * The type of the modulator oscillator\n\t */\n\tget modulationType(): ToneOscillatorType {\n\t\treturn this._modulator.type;\n\t}\n\tset modulationType(type: ToneOscillatorType) {\n\t\tthis._modulator.type = type;\n\t}\n\n\tget phase(): Degrees {\n\t\treturn this._carrier.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._carrier.phase = phase;\n\t\tthis._modulator.phase = phase;\n\t}\n\n\tget partials(): number[] {\n\t\treturn this._carrier.partials;\n\t}\n\tset partials(partials: number[]) {\n\t\tthis._carrier.partials = partials;\n\t}\n\n\tasync asArray(length = 1024): Promise<Float32Array> {\n\t\treturn generateWaveform(this, length);\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\tthis.harmonicity.dispose();\n\t\tthis._carrier.dispose();\n\t\tthis._modulator.dispose();\n\t\tthis._modulationNode.dispose();\n\t\tthis._modulationScale.dispose();\n\t\treturn this;\n\t}\n}\n", "import { Gain } from \"../../core/context/Gain\";\nimport { Degrees, Frequency, Seconds, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport {\n\tFMConstructorOptions, FMOscillatorOptions,\n\tgenerateWaveform, NonCustomOscillatorType, ToneOscillatorInterface, ToneOscillatorType\n} from \"./OscillatorInterface\";\n\nexport { FMOscillatorOptions } from \"./OscillatorInterface\";\n/**\n * FMOscillator implements a frequency modulation synthesis\n * ```\n *                                              +-------------+\n * +---------------+        +-------------+     | Carrier Osc |\n * | Modulator Osc +>-------> GainNode    |     |             +--->Output\n * +---------------+        |             +>----> frequency   |\n *                       +--> gain        |     +-------------+\n *                       |  +-------------+\n * +-----------------+   |\n * | modulationIndex +>--+\n * +-----------------+\n * ```\n *\n * @example\n * return Tone.Offline(() => {\n * \tconst fmOsc = new Tone.FMOscillator({\n * \t\tfrequency: 200,\n * \t\ttype: \"square\",\n * \t\tmodulationType: \"triangle\",\n * \t\tharmonicity: 0.2,\n * \t\tmodulationIndex: 3\n * \t}).toDestination().start();\n * }, 0.1, 1);\n * @category Source\n */\nexport class FMOscillator extends Source<FMOscillatorOptions> implements ToneOscillatorInterface {\n\n\treadonly name: string = \"FMOscillator\";\n\n\t/**\n\t * The carrier oscillator\n\t */\n\tprivate _carrier: Oscillator;\n\n\treadonly frequency: Signal<\"frequency\">;\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * The modulating oscillator\n\t */\n\tprivate _modulator: Oscillator;\n\n\t/**\n\t * Harmonicity is the frequency ratio between the carrier and the modulator oscillators.\n\t * A harmonicity of 1 gives both oscillators the same frequency.\n\t * Harmonicity = 2 means a change of an octave.\n\t * @example\n\t * const fmOsc = new Tone.FMOscillator(\"D2\").toDestination().start();\n\t * // pitch the modulator an octave below carrier\n\t * fmOsc.harmonicity.value = 0.5;\n\t */\n\treadonly harmonicity: Signal<\"positive\">;\n\n\t/**\n\t * The modulation index which is in essence the depth or amount of the modulation. In other terms it is the\n\t * ratio of the frequency of the modulating signal (mf) to the amplitude of the\n\t * modulating signal (ma) -- as in ma/mf.\n\t */\n\treadonly modulationIndex: Signal<\"positive\">;\n\n\t/**\n\t * the node where the modulation happens\n\t */\n\tprivate _modulationNode: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\n\t/**\n\t * @param frequency The starting frequency of the oscillator.\n\t * @param type The type of the carrier oscillator.\n\t * @param modulationType The type of the modulator oscillator.\n\t */\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType, modulationType?: ToneOscillatorType);\n\tconstructor(options?: Partial<FMConstructorOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(FMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]));\n\t\tconst options = optionsFromArguments(FMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]);\n\n\t\tthis._carrier = new Oscillator({\n\t\t\tcontext: this.context,\n\t\t\tdetune: options.detune,\n\t\t\tfrequency: 0,\n\t\t\tonstop: () => this.onstop(this),\n\t\t\tphase: options.phase,\n\t\t\ttype: options.type,\n\t\t} as OscillatorOptions);\n\n\t\tthis.detune = this._carrier.detune;\n\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\n\t\tthis._modulator = new Oscillator({\n\t\t\tcontext: this.context,\n\t\t\tphase: options.phase,\n\t\t\ttype: options.modulationType,\n\t\t} as OscillatorOptions);\n\n\t\tthis.harmonicity = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.harmonicity,\n\t\t});\n\n\t\tthis.modulationIndex = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.modulationIndex,\n\t\t});\n\n\t\t// connections\n\t\tthis.frequency.connect(this._carrier.frequency);\n\t\tthis.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t\tthis.frequency.chain(this.modulationIndex, this._modulationNode);\n\t\tthis._modulator.connect(this._modulationNode.gain);\n\t\tthis._modulationNode.connect(this._carrier.frequency);\n\t\tthis._carrier.connect(this.output);\n\t\tthis.detune.connect(this._modulator.detune);\n\n\t\treadOnly(this, [\"modulationIndex\", \"frequency\", \"detune\", \"harmonicity\"]);\n\t}\n\n\tstatic getDefaults(): FMOscillatorOptions {\n\t\treturn Object.assign(Oscillator.getDefaults(), {\n\t\t\tharmonicity: 1,\n\t\t\tmodulationIndex: 2,\n\t\t\tmodulationType: \"square\" as NonCustomOscillatorType,\n\t\t});\n\t}\n\n\t/**\n\t * start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\tthis._modulator.start(time);\n\t\tthis._carrier.start(time);\n\t}\n\n\t/**\n\t * stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\tthis._modulator.stop(time);\n\t\tthis._carrier.stop(time);\n\t}\n\n\tprotected _restart(time: Seconds): this {\n\t\tthis._modulator.restart(time);\n\t\tthis._carrier.restart(time);\n\t\treturn this;\n\t}\n\n\tget type(): ToneOscillatorType {\n\t\treturn this._carrier.type;\n\t}\n\tset type(type: ToneOscillatorType) {\n\t\tthis._carrier.type = type;\n\t}\n\n\tget baseType(): OscillatorType {\n\t\treturn this._carrier.baseType;\n\t}\n\tset baseType(baseType: OscillatorType) {\n\t\tthis._carrier.baseType = baseType;\n\t}\n\n\tget partialCount(): number {\n\t\treturn this._carrier.partialCount;\n\t}\n\tset partialCount(partialCount: number) {\n\t\tthis._carrier.partialCount = partialCount;\n\t}\n\n\t/**\n\t * The type of the modulator oscillator\n\t */\n\tget modulationType(): ToneOscillatorType {\n\t\treturn this._modulator.type;\n\t}\n\tset modulationType(type: ToneOscillatorType) {\n\t\tthis._modulator.type = type;\n\t}\n\n\tget phase(): Degrees {\n\t\treturn this._carrier.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._carrier.phase = phase;\n\t\tthis._modulator.phase = phase;\n\t}\n\n\tget partials(): number[] {\n\t\treturn this._carrier.partials;\n\t}\n\tset partials(partials: number[]) {\n\t\tthis._carrier.partials = partials;\n\t}\n\n\tasync asArray(length = 1024): Promise<Float32Array> {\n\t\treturn generateWaveform(this, length);\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.harmonicity.dispose();\n\t\tthis._carrier.dispose();\n\t\tthis._modulator.dispose();\n\t\tthis._modulationNode.dispose();\n\t\tthis.modulationIndex.dispose();\n\t\treturn this;\n\t}\n}\n", "import { Gain } from \"../../core/context/Gain\";\nimport { AudioRange, Degrees, Frequency, Seconds, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { WaveShaper } from \"../../signal/WaveShaper\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform, PulseOscillatorOptions, ToneOscillatorInterface } from \"./OscillatorInterface\";\n\nexport { PulseOscillatorOptions } from \"./OscillatorInterface\";\n\n/**\n * PulseOscillator is an oscillator with control over pulse width,\n * also known as the duty cycle. At 50% duty cycle (width = 0) the wave is\n * a square wave.\n * [Read more](https://wigglewave.wordpress.com/2014/08/16/pulse-waveforms-and-harmonics/).\n * ```\n *    width = -0.25        width = 0.0          width = 0.25\n *\n *   +-----+            +-------+       +    +-------+     +-+\n *   |     |            |       |       |            |     |\n *   |     |            |       |       |            |     |\n * +-+     +-------+    +       +-------+            +-----+\n *\n *\n *    width = -0.5                              width = 0.5\n *\n *     +---+                                 +-------+   +---+\n *     |   |                                         |   |\n *     |   |                                         |   |\n * +---+   +-------+                                 +---+\n *\n *\n *    width = -0.75                             width = 0.75\n *\n *       +-+                                 +-------+ +-----+\n *       | |                                         | |\n *       | |                                         | |\n * +-----+ +-------+                                 +-+\n * ```\n * @example\n * return Tone.Offline(() => {\n * \tconst pulse = new Tone.PulseOscillator(50, 0.4).toDestination().start();\n * }, 0.1, 1);\n * @category Source\n */\nexport class PulseOscillator extends Source<PulseOscillatorOptions> implements ToneOscillatorInterface {\n\n\treadonly name: string = \"PulseOscillator\";\n\n\t/**\n\t * The width of the pulse.\n\t * @example\n\t * return Tone.Offline(() => {\n\t * \tconst pulse = new Tone.PulseOscillator(20, 0.8).toDestination().start();\n\t * }, 0.1, 1);\n\t */\n\treadonly width: Signal<\"audioRange\">;\n\n\t/**\n\t * gate the width amount\n\t */\n\tprivate _widthGate: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\n\t/**\n\t * the sawtooth oscillator\n\t */\n\tprivate _triangle: Oscillator;\n\n\t/**\n\t * The frequency control.\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * The detune in cents.\n\t */\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * Threshold the signal to turn it into a square\n\t */\n\tprivate _thresh = new WaveShaper({\n\t\tcontext: this.context,\n\t\tmapping: val => val <= 0 ? -1 : 1,\n\t});\n\n\t/**\n\t * @param frequency The frequency of the oscillator\n\t * @param width The width of the pulse\n\t */\n\tconstructor(frequency?: Frequency, width?: AudioRange);\n\tconstructor(options?: Partial<PulseOscillatorOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(PulseOscillator.getDefaults(), arguments, [\"frequency\", \"width\"]));\n\t\tconst options = optionsFromArguments(PulseOscillator.getDefaults(), arguments, [\"frequency\", \"width\"]);\n\n\t\tthis.width = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"audioRange\",\n\t\t\tvalue: options.width,\n\t\t});\n\n\t\tthis._triangle = new Oscillator({\n\t\t\tcontext: this.context,\n\t\t\tdetune: options.detune,\n\t\t\tfrequency: options.frequency,\n\t\t\tonstop: () => this.onstop(this),\n\t\t\tphase: options.phase,\n\t\t\ttype: \"triangle\",\n\t\t});\n\t\tthis.frequency = this._triangle.frequency;\n\t\tthis.detune = this._triangle.detune;\n\n\t\t// connections\n\t\tthis._triangle.chain(this._thresh, this.output);\n\t\tthis.width.chain(this._widthGate, this._thresh);\n\t\treadOnly(this, [\"width\", \"frequency\", \"detune\"]);\n\t}\n\n\tstatic getDefaults(): PulseOscillatorOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\tphase: 0,\n\t\t\ttype: \"pulse\" as \"pulse\",\n\t\t\twidth: 0.2,\n\t\t});\n\t}\n\n\t/**\n\t * start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._triangle.start(time);\n\t\tthis._widthGate.gain.setValueAtTime(1, time);\n\t}\n\n\t/**\n\t * stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._triangle.stop(time);\n\t\t// the width is still connected to the output.\n\t\t// that needs to be stopped also\n\t\tthis._widthGate.gain.cancelScheduledValues(time);\n\t\tthis._widthGate.gain.setValueAtTime(0, time);\n\t}\n\n\tprotected _restart(time: Seconds): void {\n\t\tthis._triangle.restart(time);\n\t\tthis._widthGate.gain.cancelScheduledValues(time);\n\t\tthis._widthGate.gain.setValueAtTime(1, time);\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._triangle.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._triangle.phase = phase;\n\t}\n\n\t/**\n\t * The type of the oscillator. Always returns \"pulse\".\n\t */\n\tget type(): \"pulse\" {\n\t\treturn \"pulse\";\n\t}\n\n\t/**\n\t * The baseType of the oscillator. Always returns \"pulse\".\n\t */\n\tget baseType(): \"pulse\" {\n\t\treturn \"pulse\";\n\t}\n\n\t/**\n\t * The partials of the waveform. Cannot set partials for this waveform type\n\t */\n\tget partials(): number[] {\n\t\treturn [];\n\t}\n\n\t/**\n\t * No partials for this waveform type.\n\t */\n\tget partialCount(): number {\n\t\treturn 0;\n\t}\n\n\t/**\n\t * *Internal use* The carrier oscillator type is fed through the \n\t * waveshaper node to create the pulse. Using different carrier oscillators\n\t * changes oscillator's behavior. \n\t */\n\tset carrierType(type: \"triangle\" | \"sine\") {\n\t\tthis._triangle.type = type;\n\t}\n\n\tasync asArray(length = 1024): Promise<Float32Array> {\n\t\treturn generateWaveform(this, length);\n\t}\n\n\t/**\n\t * Clean up method.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._triangle.dispose();\n\t\tthis.width.dispose();\n\t\tthis._widthGate.dispose();\n\t\tthis._thresh.dispose();\n\t\treturn this;\n\t}\n}\n", "import { Cents, Degrees, Frequency, Seconds, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp, readOnly } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport {\n\tFatConstructorOptions, FatOscillatorOptions,\n\tgenerateWaveform, NonCustomOscillatorType, ToneOscillatorInterface, ToneOscillatorType\n} from \"./OscillatorInterface\";\nimport { assertRange } from \"../../core/util/Debug\";\n\nexport { FatOscillatorOptions } from \"./OscillatorInterface\";\n\n/**\n * FatOscillator is an array of oscillators with detune spread between the oscillators\n * @example\n * const fatOsc = new Tone.FatOscillator(\"Ab3\", \"sawtooth\", 40).toDestination().start();\n * @category Source\n */\nexport class FatOscillator extends Source<FatOscillatorOptions> implements ToneOscillatorInterface {\n\n\treadonly name: string = \"FatOscillator\";\n\n\treadonly frequency: Signal<\"frequency\">;\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * The array of oscillators\n\t */\n\tprivate _oscillators: Oscillator[] = [];\n\n\t/**\n\t * The total spread of the oscillators\n\t */\n\tprivate _spread: Cents;\n\n\t/**\n\t * The type of the oscillator\n\t */\n\tprivate _type: ToneOscillatorType;\n\n\t/**\n\t * The phase of the oscillators\n\t */\n\tprivate _phase: Degrees;\n\n\t/**\n\t * The partials array\n\t */\n\tprivate _partials: number[];\n\n\t/**\n\t * The number of partials to use\n\t */\n\tprivate _partialCount: number;\n\n\t/**\n\t * @param frequency The oscillator's frequency.\n\t * @param type The type of the oscillator.\n\t * @param spread The detune spread between the oscillators.\n\t */\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType, spread?: Cents);\n\tconstructor(options?: Partial<FatConstructorOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(FatOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"spread\"]));\n\t\tconst options = optionsFromArguments(FatOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"spread\"]);\n\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\t\tthis.detune = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t});\n\n\t\tthis._spread = options.spread;\n\t\tthis._type = options.type;\n\t\tthis._phase = options.phase;\n\t\tthis._partials = options.partials;\n\t\tthis._partialCount = options.partialCount;\n\n\t\t// set the count initially\n\t\tthis.count = options.count;\n\n\t\treadOnly(this, [\"frequency\", \"detune\"]);\n\t}\n\n\tstatic getDefaults(): FatOscillatorOptions {\n\t\treturn Object.assign(Oscillator.getDefaults(), {\n\t\t\tcount: 3,\n\t\t\tspread: 20,\n\t\t\ttype: \"sawtooth\",\n\t\t});\n\t}\n\n\t/**\n\t * start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._forEach(osc => osc.start(time));\n\t}\n\n\t/**\n\t * stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._forEach(osc => osc.stop(time));\n\t}\n\n\tprotected _restart(time: Seconds): void {\n\t\tthis._forEach(osc => osc.restart(time));\n\t}\n\n\t/**\n\t * Iterate over all of the oscillators\n\t */\n\tprivate _forEach(iterator: (osc: Oscillator, index: number) => void): void {\n\t\tfor (let i = 0; i < this._oscillators.length; i++) {\n\t\t\titerator(this._oscillators[i], i);\n\t\t}\n\t}\n\n\t/**\n\t * The type of the oscillator\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._type;\n\t}\n\tset type(type: ToneOscillatorType) {\n\t\tthis._type = type;\n\t\tthis._forEach(osc => osc.type = type);\n\t}\n\n\t/**\n\t * The detune spread between the oscillators. If \"count\" is\n\t * set to 3 oscillators and the \"spread\" is set to 40,\n\t * the three oscillators would be detuned like this: [-20, 0, 20]\n\t * for a total detune spread of 40 cents.\n\t * @example\n\t * const fatOsc = new Tone.FatOscillator().toDestination().start();\n\t * fatOsc.spread = 70;\n\t */\n\tget spread(): Cents {\n\t\treturn this._spread;\n\t}\n\tset spread(spread: Cents) {\n\t\tthis._spread = spread;\n\t\tif (this._oscillators.length > 1) {\n\t\t\tconst start = -spread / 2;\n\t\t\tconst step = spread / (this._oscillators.length - 1);\n\t\t\tthis._forEach((osc, i) => osc.detune.value = start + step * i);\n\t\t}\n\t}\n\n\t/**\n\t * The number of detuned oscillators. Must be an integer greater than 1.\n\t * @example\n\t * const fatOsc = new Tone.FatOscillator(\"C#3\", \"sawtooth\").toDestination().start();\n\t * // use 4 sawtooth oscillators\n\t * fatOsc.count = 4;\n\t */\n\tget count(): number {\n\t\treturn this._oscillators.length;\n\t}\n\tset count(count: number) {\n\t\tassertRange(count, 1);\n\t\tif (this._oscillators.length !== count) {\n\t\t\t// dispose the previous oscillators\n\t\t\tthis._forEach(osc => osc.dispose());\n\t\t\tthis._oscillators = [];\n\t\t\tfor (let i = 0; i < count; i++) {\n\t\t\t\tconst osc = new Oscillator({\n\t\t\t\t\tcontext: this.context,\n\t\t\t\t\tvolume: -6 - count * 1.1,\n\t\t\t\t\ttype: this._type as NonCustomOscillatorType,\n\t\t\t\t\tphase: this._phase + (i / count) * 360,\n\t\t\t\t\tpartialCount: this._partialCount,\n\t\t\t\t\tonstop: i === 0 ? () => this.onstop(this) : noOp,\n\t\t\t\t});\n\t\t\t\tif (this.type === \"custom\") {\n\t\t\t\t\tosc.partials = this._partials;\n\t\t\t\t}\n\t\t\t\tthis.frequency.connect(osc.frequency);\n\t\t\t\tthis.detune.connect(osc.detune);\n\t\t\t\tosc.detune.overridden = false;\n\t\t\t\tosc.connect(this.output);\n\t\t\t\tthis._oscillators[i] = osc;\n\t\t\t}\n\t\t\t// set the spread\n\t\t\tthis.spread = this._spread;\n\t\t\tif (this.state === \"started\") {\n\t\t\t\tthis._forEach(osc => osc.start());\n\t\t\t}\n\t\t}\n\t}\n\n\tget phase(): Degrees {\n\t\treturn this._phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._phase = phase;\n\t\tthis._forEach((osc, i) => osc.phase = this._phase + (i / this.count) * 360);\n\t}\n\n\tget baseType(): OscillatorType {\n\t\treturn this._oscillators[0].baseType;\n\t}\n\tset baseType(baseType: OscillatorType) {\n\t\tthis._forEach(osc => osc.baseType = baseType);\n\t\tthis._type = this._oscillators[0].type;\n\t}\n\n\tget partials(): number[] {\n\t\treturn this._oscillators[0].partials;\n\t}\n\tset partials(partials: number[]) {\n\t\tthis._partials = partials;\n\t\tthis._partialCount = this._partials.length;\n\t\tif (partials.length) {\n\t\t\tthis._type = \"custom\";\n\t\t\tthis._forEach(osc => osc.partials = partials);\n\t\t}\n\t}\n\n\tget partialCount(): number {\n\t\treturn this._oscillators[0].partialCount;\n\t}\n\tset partialCount(partialCount: number) {\n\t\tthis._partialCount = partialCount;\n\t\tthis._forEach(osc => osc.partialCount = partialCount);\n\t\tthis._type = this._oscillators[0].type;\n\t}\n\n\tasync asArray(length = 1024): Promise<Float32Array> {\n\t\treturn generateWaveform(this, length);\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\tthis._forEach(osc => osc.dispose());\n\t\treturn this;\n\t}\n}\n", "import { Degrees, Frequency, Seconds, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform, PWMOscillatorOptions, ToneOscillatorInterface } from \"./OscillatorInterface\";\nimport { PulseOscillator } from \"./PulseOscillator\";\n\nexport { PWMOscillatorOptions } from \"./OscillatorInterface\";\n\n/**\n * PWMOscillator modulates the width of a Tone.PulseOscillator\n * at the modulationFrequency. This has the effect of continuously\n * changing the timbre of the oscillator by altering the harmonics\n * generated.\n * @example\n * return Tone.Offline(() => {\n * \tconst pwm = new Tone.PWMOscillator(60, 0.3).toDestination().start();\n * }, 0.1, 1);\n * @category Source\n */\nexport class PWMOscillator extends Source<PWMOscillatorOptions> implements ToneOscillatorInterface {\n\n\treadonly name: string = \"PWMOscillator\";\n\n\treadonly sourceType = \"pwm\";\n\n\t/**\n\t * the pulse oscillator\n\t */\n\tprivate _pulse: PulseOscillator;\n\t/**\n\t * the modulator\n\t */\n\tprivate _modulator: Oscillator;\n\n\t/**\n\t * Scale the oscillator so it doesn't go silent\n\t * at the extreme values.\n\t */\n\tprivate _scale: Multiply = new Multiply({\n\t\tcontext: this.context,\n\t\tvalue: 2,\n\t});\n\n\t/**\n\t * The frequency control.\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * The detune of the oscillator.\n\t */\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * The width modulation rate of the oscillator.\n\t * @example\n\t * return Tone.Offline(() => {\n\t * \tconst osc = new Tone.PWMOscillator(20, 2).toDestination().start();\n\t * }, 0.1, 1);\n\t */\n\treadonly modulationFrequency: Signal<\"frequency\">;\n\n\t/**\n\t * @param {Frequency} frequency The starting frequency of the oscillator.\n\t * @param {Frequency} modulationFrequency The modulation frequency of the width of the pulse.\n\t */\n\tconstructor(frequency?: Frequency, modulationFrequency?: Frequency);\n\tconstructor(options?: Partial<PWMOscillatorOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(PWMOscillator.getDefaults(), arguments, [\"frequency\", \"modulationFrequency\"]));\n\t\tconst options = optionsFromArguments(PWMOscillator.getDefaults(), arguments, [\"frequency\", \"modulationFrequency\"]);\n\n\t\tthis._pulse = new PulseOscillator({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.modulationFrequency,\n\t\t});\n\t\t// change the pulse oscillator type\n\t\tthis._pulse.carrierType = \"sine\";\n\n\t\tthis.modulationFrequency = this._pulse.frequency;\n\n\t\tthis._modulator = new Oscillator({\n\t\t\tcontext: this.context,\n\t\t\tdetune: options.detune,\n\t\t\tfrequency: options.frequency,\n\t\t\tonstop: () => this.onstop(this),\n\t\t\tphase: options.phase,\n\t\t});\n\n\t\tthis.frequency = this._modulator.frequency;\n\t\tthis.detune = this._modulator.detune;\n\n\t\t// connections\n\t\tthis._modulator.chain(this._scale, this._pulse.width);\n\t\tthis._pulse.connect(this.output);\n\t\treadOnly(this, [\"modulationFrequency\", \"frequency\", \"detune\"]);\n\t}\n\n\tstatic getDefaults(): PWMOscillatorOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\tmodulationFrequency: 0.4,\n\t\t\tphase: 0,\n\t\t\ttype: \"pwm\" as \"pwm\",\n\t\t});\n\t}\n\t/**\n\t * start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._modulator.start(time);\n\t\tthis._pulse.start(time);\n\t}\n\n\t/**\n\t * stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._modulator.stop(time);\n\t\tthis._pulse.stop(time);\n\t}\n\n\t/**\n\t * restart the oscillator\n\t */\n\tprotected _restart(time: Seconds): void {\n\t\tthis._modulator.restart(time);\n\t\tthis._pulse.restart(time);\n\t}\n\n\t/**\n\t * The type of the oscillator. Always returns \"pwm\".\n\t */\n\tget type(): \"pwm\" {\n\t\treturn \"pwm\";\n\t}\n\n\t/**\n\t * The baseType of the oscillator. Always returns \"pwm\".\n\t */\n\tget baseType(): \"pwm\" {\n\t\treturn \"pwm\";\n\t}\n\n\t/**\n\t * The partials of the waveform. Cannot set partials for this waveform type\n\t */\n\tget partials(): number[] {\n\t\treturn [];\n\t}\n\n\t/**\n\t * No partials for this waveform type.\n\t */\n\tget partialCount(): number {\n\t\treturn 0;\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._modulator.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._modulator.phase = phase;\n\t}\n\n\tasync asArray(length = 1024): Promise<Float32Array> {\n\t\treturn generateWaveform(this, length);\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._pulse.dispose();\n\t\tthis._scale.dispose();\n\t\tthis._modulator.dispose();\n\t\treturn this;\n\t}\n}\n", "import { Cents, Degrees, Frequency, Seconds, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { isNumber, isString } from \"../../core/util/TypeCheck\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { AMOscillator } from \"./AMOscillator\";\nimport { FatOscillator } from \"./FatOscillator\";\nimport { FMOscillator } from \"./FMOscillator\";\nimport { Oscillator } from \"./Oscillator\";\nimport {\n\tgenerateWaveform,\n\tOmniOscillatorOptions, \n\tOmniOscillatorType, ToneOscillatorInterface, ToneOscillatorType\n} from \"./OscillatorInterface\";\nimport { PulseOscillator } from \"./PulseOscillator\";\nimport { PWMOscillator } from \"./PWMOscillator\";\n\nexport { OmniOscillatorOptions } from \"./OscillatorInterface\";\n\n/**\n * All of the oscillator types that OmniOscillator can take on\n */\ntype AnyOscillator = Oscillator | PWMOscillator | PulseOscillator | FatOscillator | AMOscillator | FMOscillator;\n\n/**\n * All of the Oscillator constructor types mapped to their name.\n */\ninterface OmniOscillatorSource {\n\t\"fm\": FMOscillator;\n\t\"am\": AMOscillator;\n\t\"pwm\": PWMOscillator;\n\t\"pulse\": PulseOscillator;\n\t\"oscillator\": Oscillator;\n\t\"fat\": FatOscillator;\n}\n\n/**\n * The available oscillator types.\n */\nexport type OmniOscSourceType = keyof OmniOscillatorSource;\n\n// Conditional Types\ntype IsAmOrFmOscillator<Osc, Ret> = Osc extends AMOscillator ? Ret : Osc extends FMOscillator ? Ret : undefined;\ntype IsFatOscillator<Osc, Ret> = Osc extends FatOscillator ? Ret : undefined;\ntype IsPWMOscillator<Osc, Ret> = Osc extends PWMOscillator ? Ret : undefined;\ntype IsPulseOscillator<Osc, Ret> = Osc extends PulseOscillator ? Ret : undefined;\ntype IsFMOscillator<Osc, Ret> = Osc extends FMOscillator ? Ret : undefined;\n\ntype AnyOscillatorConstructor = new (...args: any[]) => AnyOscillator;\n\nconst OmniOscillatorSourceMap: {\n\t[key in OmniOscSourceType]: AnyOscillatorConstructor\n} = {\n\tam: AMOscillator,\n\tfat: FatOscillator,\n\tfm: FMOscillator,\n\toscillator: Oscillator,\n\tpulse: PulseOscillator,\n\tpwm: PWMOscillator,\n};\n\n/**\n * OmniOscillator aggregates all of the oscillator types into one. \n * @example\n * return Tone.Offline(() => {\n * \tconst omniOsc = new Tone.OmniOscillator(\"C#4\", \"pwm\").toDestination().start();\n * }, 0.1, 1);\n * @category Source\n */\nexport class OmniOscillator<OscType extends AnyOscillator>\n\textends Source<OmniOscillatorOptions>\n\timplements Omit<ToneOscillatorInterface, \"type\"> {\n\n\treadonly name: string = \"OmniOscillator\";\n\n\treadonly frequency: Signal<\"frequency\">;\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * The oscillator that can switch types\n\t */\n\tprivate _oscillator!: AnyOscillator;\n\n\t/**\n\t * the type of the oscillator source\n\t */\n\tprivate _sourceType!: OmniOscSourceType;\n\n\t/**\n\t * @param frequency The initial frequency of the oscillator.\n\t * @param type The type of the oscillator.\n\t */\n\tconstructor(frequency?: Frequency, type?: OmniOscillatorType);\n\tconstructor(options?: Partial<OmniOscillatorOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(OmniOscillator.getDefaults(), arguments, [\"frequency\", \"type\"]));\n\t\tconst options = optionsFromArguments(OmniOscillator.getDefaults(), arguments, [\"frequency\", \"type\"]);\n\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\t\tthis.detune = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t});\n\t\treadOnly(this, [\"frequency\", \"detune\"]);\n\n\t\t// set the options\n\t\tthis.set(options);\n\t}\n\n\tstatic getDefaults(): OmniOscillatorOptions {\n\t\treturn Object.assign(\n\t\t\tOscillator.getDefaults(),\n\t\t\tFMOscillator.getDefaults(),\n\t\t\tAMOscillator.getDefaults(),\n\t\t\tFatOscillator.getDefaults(),\n\t\t\tPulseOscillator.getDefaults(),\n\t\t\tPWMOscillator.getDefaults(),\n\t\t);\n\t}\n\n\t/**\n\t * start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\tthis._oscillator.start(time);\n\t}\n\n\t/**\n\t * start the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\tthis._oscillator.stop(time);\n\t}\n\n\tprotected _restart(time: Seconds): this {\n\t\tthis._oscillator.restart(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The type of the oscillator. Can be any of the basic types: sine, square, triangle, sawtooth. Or\n\t * prefix the basic types with \"fm\", \"am\", or \"fat\" to use the FMOscillator, AMOscillator or FatOscillator\n\t * types. The oscillator could also be set to \"pwm\" or \"pulse\". All of the parameters of the\n\t * oscillator's class are accessible when the oscillator is set to that type, but throws an error\n\t * when it's not. \n\t * @example\n\t * const omniOsc = new Tone.OmniOscillator().toDestination().start();\n\t * omniOsc.type = \"pwm\";\n\t * // modulationFrequency is parameter which is available\n\t * // only when the type is \"pwm\".\n\t * omniOsc.modulationFrequency.value = 0.5;\n\t */\n\tget type(): OmniOscillatorType {\n\t\tlet prefix = \"\";\n\t\tif ([\"am\", \"fm\", \"fat\"].some(p => this._sourceType === p)) {\n\t\t\tprefix = this._sourceType;\n\t\t}\n\t\treturn prefix + this._oscillator.type as OmniOscillatorType;\n\t}\n\tset type(type) {\n\t\tif (type.substr(0, 2) === \"fm\") {\n\t\t\tthis._createNewOscillator(\"fm\");\n\t\t\tthis._oscillator = this._oscillator as FMOscillator;\n\t\t\tthis._oscillator.type = type.substr(2) as ToneOscillatorType;\n\t\t} else if (type.substr(0, 2) === \"am\") {\n\t\t\tthis._createNewOscillator(\"am\");\n\t\t\tthis._oscillator = this._oscillator as AMOscillator;\n\t\t\tthis._oscillator.type = type.substr(2) as ToneOscillatorType;\n\t\t} else if (type.substr(0, 3) === \"fat\") {\n\t\t\tthis._createNewOscillator(\"fat\");\n\t\t\tthis._oscillator = this._oscillator as FatOscillator;\n\t\t\tthis._oscillator.type = type.substr(3) as ToneOscillatorType;\n\t\t} else if (type === \"pwm\") {\n\t\t\tthis._createNewOscillator(\"pwm\");\n\t\t\tthis._oscillator = this._oscillator as PWMOscillator;\n\t\t} else if (type === \"pulse\") {\n\t\t\tthis._createNewOscillator(\"pulse\");\n\t\t} else {\n\t\t\tthis._createNewOscillator(\"oscillator\");\n\t\t\tthis._oscillator = this._oscillator as Oscillator;\n\t\t\tthis._oscillator.type = (type as ToneOscillatorType);\n\t\t}\n\t}\n\n\t/**\n\t * The value is an empty array when the type is not \"custom\".\n\t * This is not available on \"pwm\" and \"pulse\" oscillator types.\n\t * See [[Oscillator.partials]]\n\t */\n\tget partials(): number[] {\n\t\treturn this._oscillator.partials;\n\t}\n\tset partials(partials) {\n\t\tif (!this._getOscType(this._oscillator, \"pulse\") && !this._getOscType(this._oscillator, \"pwm\")) {\n\t\t\tthis._oscillator.partials = partials;\n\t\t}\n\t}\n\n\tget partialCount(): number {\n\t\treturn this._oscillator.partialCount;\n\t}\n\tset partialCount(partialCount) {\n\t\tif (!this._getOscType(this._oscillator, \"pulse\") && !this._getOscType(this._oscillator, \"pwm\")) {\n\t\t\tthis._oscillator.partialCount = partialCount;\n\t\t}\n\t}\n\n\tset(props: Partial<OmniOscillatorOptions>): this {\n\t\t// make sure the type is set first\n\t\tif (Reflect.has(props, \"type\") && props.type) {\n\t\t\tthis.type = props.type;\n\t\t}\n\t\t// then set the rest\n\t\tsuper.set(props);\n\t\treturn this;\n\t}\n\n\t/**\n\t * connect the oscillator to the frequency and detune signals\n\t */\n\tprivate _createNewOscillator(oscType: OmniOscSourceType): void {\n\t\tif (oscType !== this._sourceType) {\n\t\t\tthis._sourceType = oscType;\n\t\t\tconst OscConstructor = OmniOscillatorSourceMap[oscType];\n\t\t\t// short delay to avoid clicks on the change\n\t\t\tconst now = this.now();\n\t\t\tif (this._oscillator) {\n\t\t\t\tconst oldOsc = this._oscillator;\n\t\t\t\toldOsc.stop(now);\n\t\t\t\t// dispose the old one\n\t\t\t\tthis.context.setTimeout(() => oldOsc.dispose(), this.blockTime);\n\t\t\t}\n\t\t\tthis._oscillator = new OscConstructor({\n\t\t\t\tcontext: this.context,\n\t\t\t});\n\t\t\tthis.frequency.connect(this._oscillator.frequency);\n\t\t\tthis.detune.connect(this._oscillator.detune);\n\t\t\tthis._oscillator.connect(this.output);\n\t\t\tthis._oscillator.onstop = () => this.onstop(this);\n\t\t\tif (this.state === \"started\") {\n\t\t\t\tthis._oscillator.start(now);\n\t\t\t}\n\t\t}\n\t}\n\n\tget phase(): Degrees {\n\t\treturn this._oscillator.phase;\n\t}\n\tset phase(phase) {\n\t\tthis._oscillator.phase = phase;\n\t}\n\n\t/**\n\t * The source type of the oscillator.\n\t * @example\n\t * const omniOsc = new Tone.OmniOscillator(440, \"fmsquare\");\n\t * console.log(omniOsc.sourceType); // 'fm'\n\t */\n\tget sourceType(): OmniOscSourceType {\n\t\treturn this._sourceType;\n\t}\n\tset sourceType(sType) {\n\t\t// the basetype defaults to sine\n\t\tlet baseType = \"sine\";\n\t\tif (this._oscillator.type !== \"pwm\" && this._oscillator.type !== \"pulse\") {\n\t\t\tbaseType = this._oscillator.type;\n\t\t}\n\n\t\t// set the type\n\t\tif (sType === \"fm\") {\n\t\t\tthis.type = \"fm\" + baseType as OmniOscillatorType;\n\t\t} else if (sType === \"am\") {\n\t\t\tthis.type = \"am\" + baseType as OmniOscillatorType;\n\t\t} else if (sType === \"fat\") {\n\t\t\tthis.type = \"fat\" + baseType as OmniOscillatorType;\n\t\t} else if (sType === \"oscillator\") {\n\t\t\tthis.type = baseType as OmniOscillatorType;\n\t\t} else if (sType === \"pulse\") {\n\t\t\tthis.type = \"pulse\";\n\t\t} else if (sType === \"pwm\") {\n\t\t\tthis.type = \"pwm\";\n\t\t}\n\t}\n\n\tprivate _getOscType<SourceType extends OmniOscSourceType>(\n\t\tosc: AnyOscillator,\n\t\tsourceType: SourceType,\n\t): osc is OmniOscillatorSource[SourceType] {\n\t\treturn osc instanceof OmniOscillatorSourceMap[sourceType];\n\t}\n\n\t/**\n\t * The base type of the oscillator. See [[Oscillator.baseType]]\n\t * @example\n\t * const omniOsc = new Tone.OmniOscillator(440, \"fmsquare4\");\n\t * console.log(omniOsc.sourceType, omniOsc.baseType, omniOsc.partialCount);\n\t */\n\tget baseType(): OscillatorType | \"pwm\" | \"pulse\" {\n\t\treturn this._oscillator.baseType;\n\t}\n\tset baseType(baseType) {\n\t\tif (!this._getOscType(this._oscillator, \"pulse\") &&\n\t\t\t!this._getOscType(this._oscillator, \"pwm\") &&\n\t\t\tbaseType !== \"pulse\" && baseType !== \"pwm\") {\n\t\t\tthis._oscillator.baseType = baseType;\n\t\t}\n\t}\n\n\t/**\n\t * The width of the oscillator when sourceType === \"pulse\".\n\t * See [[PWMOscillator.width]]\n\t */\n\tget width(): IsPulseOscillator<OscType, Signal<\"audioRange\">> {\n\t\tif (this._getOscType(this._oscillator, \"pulse\")) {\n\t\t\treturn this._oscillator.width as IsPulseOscillator<OscType, Signal<\"audioRange\">>;\n\t\t} else {\n\t\t\treturn undefined as IsPulseOscillator<OscType, Signal<\"audioRange\">>;\n\t\t}\n\t}\n\n\t/**\n\t * The number of detuned oscillators when sourceType === \"fat\".\n\t * See [[FatOscillator.count]]\n\t */\n\tget count(): IsFatOscillator<OscType, number> {\n\t\tif (this._getOscType(this._oscillator, \"fat\")) {\n\t\t\treturn this._oscillator.count as IsFatOscillator<OscType, number>;\n\t\t} else {\n\t\t\treturn undefined as IsFatOscillator<OscType, number>;\n\t\t}\n\t}\n\tset count(count) {\n\t\tif (this._getOscType(this._oscillator, \"fat\") && isNumber(count)) {\n\t\t\tthis._oscillator.count = count;\n\t\t}\n\t}\n\n\t/**\n\t * The detune spread between the oscillators when sourceType === \"fat\".\n\t * See [[FatOscillator.count]]\n\t */\n\tget spread(): IsFatOscillator<OscType, Cents> {\n\t\tif (this._getOscType(this._oscillator, \"fat\")) {\n\t\t\treturn this._oscillator.spread as IsFatOscillator<OscType, Cents>;\n\t\t} else {\n\t\t\treturn undefined as IsFatOscillator<OscType, Cents>;\n\t\t}\n\t}\n\tset spread(spread) {\n\t\tif (this._getOscType(this._oscillator, \"fat\") && isNumber(spread)) {\n\t\t\tthis._oscillator.spread = spread;\n\t\t}\n\t}\n\n\t/**\n\t * The type of the modulator oscillator. Only if the oscillator is set to \"am\" or \"fm\" types. \n\t * See [[AMOscillator]] or [[FMOscillator]]\n\t */\n\tget modulationType(): IsAmOrFmOscillator<OscType, ToneOscillatorType> {\n\t\tif (this._getOscType(this._oscillator, \"fm\") || this._getOscType(this._oscillator, \"am\")) {\n\t\t\treturn this._oscillator.modulationType as IsAmOrFmOscillator<OscType, ToneOscillatorType>;\n\t\t} else {\n\t\t\treturn undefined as IsAmOrFmOscillator<OscType, ToneOscillatorType>;\n\t\t}\n\t}\n\tset modulationType(mType) {\n\t\tif ((this._getOscType(this._oscillator, \"fm\") || this._getOscType(this._oscillator, \"am\")) && isString(mType)) {\n\t\t\tthis._oscillator.modulationType = mType;\n\t\t}\n\t}\n\n\t/**\n\t * The modulation index when the sourceType === \"fm\"\n\t * See [[FMOscillator]].\n\t */\n\tget modulationIndex(): IsFMOscillator<OscType, Signal<\"positive\">> {\n\t\tif (this._getOscType(this._oscillator, \"fm\")) {\n\t\t\treturn this._oscillator.modulationIndex as IsFMOscillator<OscType, Signal<\"positive\">>;\n\t\t} else {\n\t\t\treturn undefined as IsFMOscillator<OscType, Signal<\"positive\">>;\n\t\t}\n\t}\n\n\t/**\n\t * Harmonicity is the frequency ratio between the carrier and the modulator oscillators.\n\t * See [[AMOscillator]] or [[FMOscillator]]\n\t */\n\tget harmonicity(): IsAmOrFmOscillator<OscType, Signal<\"positive\">> {\n\t\tif (this._getOscType(this._oscillator, \"fm\") || this._getOscType(this._oscillator, \"am\")) {\n\t\t\treturn this._oscillator.harmonicity as IsAmOrFmOscillator<OscType, Signal<\"positive\">>;\n\t\t} else {\n\t\t\treturn undefined as IsAmOrFmOscillator<OscType, Signal<\"positive\">>;\n\t\t}\n\t}\n\n\t/**\n\t * The modulationFrequency Signal of the oscillator when sourceType === \"pwm\"\n\t * see [[PWMOscillator]]\n\t * @min 0.1\n\t * @max 5\n\t */\n\tget modulationFrequency(): IsPWMOscillator<OscType, Signal<\"frequency\">> {\n\t\tif (this._getOscType(this._oscillator, \"pwm\")) {\n\t\t\treturn this._oscillator.modulationFrequency as IsPWMOscillator<OscType, Signal<\"frequency\">>;\n\t\t} else {\n\t\t\treturn undefined as IsPWMOscillator<OscType, Signal<\"frequency\">>;\n\t\t}\n\t}\n\n\tasync asArray(length = 1024): Promise<Float32Array> {\n\t\treturn generateWaveform(this, length);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.detune.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis._oscillator.dispose();\n\t\treturn this;\n\t}\n}\n", "import { connectSeries } from \"../core/context/ToneAudioNode\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Param } from \"../core/context/Param\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Signal, SignalOptions } from \"./Signal\";\n\n/**\n * Add a signal and a number or two signals. When no value is\n * passed into the constructor, Tone.Add will sum input and `addend`\n * If a value is passed into the constructor, the it will be added to the input.\n *\n * @example\n * return Tone.Offline(() => {\n * \tconst add = new Tone.Add(2).toDestination();\n * \tadd.addend.setValueAtTime(1, 0.2);\n * \tconst signal = new Tone.Signal(2);\n * \t// add a signal and a scalar\n * \tsignal.connect(add);\n * \tsignal.setValueAtTime(1, 0.1);\n * }, 0.5, 1);\n * @category Signal\n */\nexport class Add extends Signal {\n\n\toverride = false;\n\n\treadonly name: string = \"Add\";\n\n\t/**\n\t * the summing node\n\t */\n\tprivate _sum: Gain = new Gain({ context: this.context });\n\treadonly input = this._sum;\n\treadonly output = this._sum;\n\n\t/**\n\t * The value which is added to the input signal\n\t */\n\treadonly addend: Param<\"number\"> = this._param;\n\n\t/**\n\t * @param value If no value is provided, will sum the input and [[addend]].\n\t */\n\tconstructor(value?: number);\n\tconstructor(options?: Partial<SignalOptions<\"number\">>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Add.getDefaults(), arguments, [\"value\"])));\n\n\t\tconnectSeries(this._constantSource, this._sum);\n\t}\n\n\tstatic getDefaults(): SignalOptions<\"number\"> {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tvalue: 0,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._sum.dispose();\n\t\treturn this;\n\t}\n}\n", "import { InputNode, OutputNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Add } from \"./Add\";\nimport { Multiply } from \"./Multiply\";\nimport { SignalOperator } from \"./SignalOperator\";\n\nexport interface ScaleOptions extends ToneAudioNodeOptions {\n\tmin: number;\n\tmax: number;\n}\n\n/**\n * Performs a linear scaling on an input signal.\n * Scales a NormalRange input to between\n * outputMin and outputMax.\n *\n * @example\n * const scale = new Tone.Scale(50, 100);\n * const signal = new Tone.Signal(0.5).connect(scale);\n * // the output of scale equals 75\n * @category Signal\n */\nexport class Scale<Options extends ScaleOptions = ScaleOptions> extends SignalOperator<Options> {\n\n\treadonly name: string = \"Scale\";\n\n\tinput: InputNode;\n\toutput: OutputNode;\n\n\t/**\n\t * Hold the multiple\n\t */\n\tprotected _mult: Multiply;\n\n\t/**\n\t * Hold the adder\n\t */\n\tprotected _add: Add;\n\n\t/**\n\t * Private reference to the min value\n\t */\n\tprivate _min: number;\n\n\t/**\n\t * Private reference to the max value\n\t */\n\tprivate _max: number;\n\n\t/**\n\t * @param min The output value when the input is 0.\n\t * @param max The output value when the input is 1.\n\t */\n\tconstructor(min?: number, max?: number);\n\tconstructor(options?: Partial<ScaleOptions>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Scale.getDefaults(), arguments, [\"min\", \"max\"])));\n\t\tconst options = optionsFromArguments(Scale.getDefaults(), arguments, [\"min\", \"max\"]);\n\n\t\tthis._mult = this.input = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.max - options.min,\n\t\t});\n\n\t\tthis._add = this.output = new Add({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.min,\n\t\t});\n\n\t\tthis._min = options.min;\n\t\tthis._max = options.max;\n\n\t\tthis.input.connect(this.output);\n\t}\n\n\tstatic getDefaults(): ScaleOptions {\n\t\treturn Object.assign(SignalOperator.getDefaults(), {\n\t\t\tmax: 1,\n\t\t\tmin: 0,\n\t\t});\n\t}\n\n\t/**\n\t * The minimum output value. This number is output when the value input value is 0.\n\t */\n\tget min(): number {\n\t\treturn this._min;\n\t}\n\tset min(min) {\n\t\tthis._min = min;\n\t\tthis._setRange();\n\t}\n\n\t/**\n\t * The maximum output value. This number is output when the value input value is 1.\n\t */\n\tget max(): number {\n\t\treturn this._max;\n\t}\n\tset max(max) {\n\t\tthis._max = max;\n\t\tthis._setRange();\n\t}\n\n\t/**\n\t * set the values\n\t */\n\tprivate _setRange(): void {\n\t\tthis._add.value = this._min;\n\t\tthis._mult.value = this._max - this._min;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._add.dispose();\n\t\tthis._mult.dispose();\n\t\treturn this;\n\t}\n}\n", "import { Gain } from \"../core/context/Gain\";\nimport { connect, disconnect, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { SignalOperator } from \"./SignalOperator\";\n\n/**\n * Tone.Zero outputs 0's at audio-rate. The reason this has to be\n * it's own class is that many browsers optimize out Tone.Signal\n * with a value of 0 and will not process nodes further down the graph.\n * @category Signal\n */\nexport class Zero extends SignalOperator<ToneAudioNodeOptions> {\n\n\treadonly name: string = \"Zero\";\n\n\t/**\n\t * The gain node which connects the constant source to the output\n\t */\n\tprivate _gain = new Gain({ context: this.context });\n\n\t/**\n\t * Only outputs 0\n\t */\n\toutput = this._gain;\n\n\t/**\n\t * no input node\n\t */\n\tinput = undefined;\n\n\tconstructor(options?: Partial<ToneAudioNodeOptions>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Zero.getDefaults(), arguments)));\n\t\tconnect(this.context.getConstant(0), this._gain);\n\t}\n\n\t/**\n\t * clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tdisconnect(this.context.getConstant(0), this._gain);\n\t\treturn this;\n\t}\n}\n", "import { Gain } from \"../../core/context/Gain\";\nimport { Param } from \"../../core/context/Param\";\nimport { InputNode, OutputNode, ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { Degrees, Frequency, NormalRange, Time, UnitName } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { BasicPlaybackState } from \"../../core/util/StateTimeline\";\nimport { AudioToGain } from \"../../signal/AudioToGain\";\nimport { Scale } from \"../../signal/Scale\";\nimport { connectSignal, Signal } from \"../../signal/Signal\";\nimport { Zero } from \"../../signal/Zero\";\nimport { Oscillator, ToneOscillatorType } from \"./Oscillator\";\nimport { ToneOscillatorConstructorOptions, ToneOscillatorOptions } from \"./OscillatorInterface\";\n\nexport type LFOOptions = {\n\tmin: number;\n\tmax: number;\n\tamplitude: NormalRange;\n\tunits: UnitName;\n} & ToneOscillatorOptions;\n\n/**\n * LFO stands for low frequency oscillator. LFO produces an output signal\n * which can be attached to an AudioParam or Tone.Signal\n * in order to modulate that parameter with an oscillator. The LFO can\n * also be synced to the transport to start/stop and change when the tempo changes.\n * @example\n * return Tone.Offline(() => {\n * \tconst lfo = new Tone.LFO(\"4n\", 400, 4000).start().toDestination();\n * }, 0.5, 1);\n * @category Source\n */\nexport class LFO extends ToneAudioNode<LFOOptions> {\n\n\treadonly name: string = \"LFO\";\n\n\t/**\n\t * The oscillator.\n\t */\n\tprivate _oscillator: Oscillator;\n\n\t/**\n\t * The gain of the output\n\t */\n\tprivate _amplitudeGain: Gain<\"normalRange\">;\n\n\t/**\n\t * The amplitude of the LFO, which controls the output range between\n\t * the min and max output. For example if the min is -10 and the max\n\t * is 10, setting the amplitude to 0.5 would make the LFO modulate\n\t * between -5 and 5.\n\t */\n\treadonly amplitude: Param<\"normalRange\">;\n\n\t/**\n\t * The signal which is output when the LFO is stopped\n\t */\n\tprivate _stoppedSignal: Signal<\"audioRange\">;\n\n\t/**\n\t * Just outputs zeros. This is used so that scaled signal is not\n\t * optimized to silence.\n\t */\n\tprivate _zeros: Zero;\n\n\t/**\n\t * The value that the LFO outputs when it's stopped\n\t */\n\tprivate _stoppedValue = 0;\n\n\t/**\n\t * Convert the oscillators audio range to an output between 0-1 so it can be scaled\n\t */\n\tprivate _a2g: AudioToGain;\n\n\t/**\n\t * Scales the final output to the min and max value\n\t */\n\tprivate _scaler: Scale;\n\n\t/**\n\t * The output of the LFO\n\t */\n\treadonly output: OutputNode;\n\n\t/**\n\t * There is no input node\n\t */\n\treadonly input: undefined;\n\n\t/**\n\t * A private placeholder for the units\n\t */\n\tprivate _units: UnitName = \"number\";\n\n\t/**\n\t * If the input value is converted using the [[units]]\n\t */\n\tconvert = true;\n\n\t/**\n\t * The frequency value of the LFO\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * @param frequency The frequency of the oscillation.\n\t * Typically, LFOs will be in the frequency range of 0.1 to 10 hertz.\n\t * @param min The minimum output value of the LFO.\n\t * @param max The maximum value of the LFO.\n\t */\n\tconstructor(frequency?: Frequency, min?: number, max?: number);\n\tconstructor(options?: Partial<LFOOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(LFO.getDefaults(), arguments, [\"frequency\", \"min\", \"max\"]));\n\t\tconst options = optionsFromArguments(LFO.getDefaults(), arguments, [\"frequency\", \"min\", \"max\"]);\n\n\t\tthis._oscillator = new Oscillator(options as ToneOscillatorConstructorOptions);\n\n\t\tthis.frequency = this._oscillator.frequency;\n\n\t\tthis._amplitudeGain = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.amplitude,\n\t\t\tunits: \"normalRange\",\n\t\t});\n\t\tthis.amplitude = this._amplitudeGain.gain;\n\t\tthis._stoppedSignal = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"audioRange\",\n\t\t\tvalue: 0,\n\t\t});\n\t\tthis._zeros = new Zero({ context: this.context });\n\t\tthis._a2g = new AudioToGain({ context: this.context });\n\t\tthis._scaler = this.output = new Scale({\n\t\t\tcontext: this.context,\n\t\t\tmax: options.max,\n\t\t\tmin: options.min,\n\t\t});\n\n\t\tthis.units = options.units;\n\t\tthis.min = options.min;\n\t\tthis.max = options.max;\n\n\t\t// connect it up\n\t\tthis._oscillator.chain(this._amplitudeGain, this._a2g, this._scaler);\n\t\tthis._zeros.connect(this._a2g);\n\t\tthis._stoppedSignal.connect(this._a2g);\n\t\treadOnly(this, [\"amplitude\", \"frequency\"]);\n\t\tthis.phase = options.phase;\n\t}\n\n\tstatic getDefaults(): LFOOptions {\n\t\treturn Object.assign(Oscillator.getDefaults(), {\n\t\t\tamplitude: 1,\n\t\t\tfrequency: \"4n\",\n\t\t\tmax: 1,\n\t\t\tmin: 0,\n\t\t\ttype: \"sine\",\n\t\t\tunits: \"number\" as UnitName,\n\t\t});\n\t}\n\n\t/**\n\t * Start the LFO.\n\t * @param time The time the LFO will start\n\t */\n\tstart(time?: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis._stoppedSignal.setValueAtTime(0, time);\n\t\tthis._oscillator.start(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the LFO.\n\t * @param  time The time the LFO will stop\n\t */\n\tstop(time?: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis._stoppedSignal.setValueAtTime(this._stoppedValue, time);\n\t\tthis._oscillator.stop(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sync the start/stop/pause to the transport\n\t * and the frequency to the bpm of the transport\n\t * @example\n\t * const lfo = new Tone.LFO(\"8n\");\n\t * lfo.sync().start(0);\n\t * // the rate of the LFO will always be an eighth note, even as the tempo changes\n\t */\n\tsync(): this {\n\t\tthis._oscillator.sync();\n\t\tthis._oscillator.syncFrequency();\n\t\treturn this;\n\t}\n\n\t/**\n\t * unsync the LFO from transport control\n\t */\n\tunsync(): this {\n\t\tthis._oscillator.unsync();\n\t\tthis._oscillator.unsyncFrequency();\n\t\treturn this;\n\t}\n\n\t/**\n\t * After the oscillator waveform is updated, reset the `_stoppedSignal` value to match the updated waveform\n\t */\n\tprivate _setStoppedValue() {\n\t\tthis._stoppedValue = this._oscillator.getInitialValue();\n\t\tthis._stoppedSignal.value = this._stoppedValue;\n\t}\n\n\t/**\n\t * The minimum output of the LFO.\n\t */\n\tget min(): number {\n\t\treturn this._toType(this._scaler.min);\n\t}\n\tset min(min) {\n\t\tmin = this._fromType(min);\n\t\tthis._scaler.min = min;\n\t}\n\n\t/**\n\t * The maximum output of the LFO.\n\t */\n\tget max(): number {\n\t\treturn this._toType(this._scaler.max);\n\t}\n\tset max(max) {\n\t\tmax = this._fromType(max);\n\t\tthis._scaler.max = max;\n\t}\n\n\t/**\n\t * The type of the oscillator: See [[Oscillator.type]]\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._oscillator.type;\n\t}\n\tset type(type) {\n\t\tthis._oscillator.type = type;\n\t\tthis._setStoppedValue();\n\t}\n\n\t/**\n\t * The oscillator's partials array: See [[Oscillator.partials]]\n\t */\n\tget partials(): number[] {\n\t\treturn this._oscillator.partials;\n\t}\n\tset partials(partials) {\n\t\tthis._oscillator.partials = partials;\n\t\tthis._setStoppedValue();\n\t}\n\n\t/**\n\t * The phase of the LFO.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._oscillator.phase;\n\t}\n\tset phase(phase) {\n\t\tthis._oscillator.phase = phase;\n\t\tthis._setStoppedValue();\n\t}\n\n\t/**\n\t * The output units of the LFO.\n\t */\n\tget units(): UnitName {\n\t\treturn this._units;\n\t}\n\tset units(val) {\n\t\tconst currentMin = this.min;\n\t\tconst currentMax = this.max;\n\t\t// convert the min and the max\n\t\tthis._units = val;\n\t\tthis.min = currentMin;\n\t\tthis.max = currentMax;\n\t}\n\n\t/**\n\t * Returns the playback state of the source, either \"started\" or \"stopped\".\n\t */\n\tget state(): BasicPlaybackState {\n\t\treturn this._oscillator.state;\n\t}\n\n\t/**\n\t * @param node the destination to connect to\n\t * @param outputNum the optional output number\n\t * @param inputNum the input number\n\t */\n\tconnect(node: InputNode, outputNum?: number, inputNum?: number): this {\n\t\tif (node instanceof Param || node instanceof Signal) {\n\t\t\tthis.convert = node.convert;\n\t\t\tthis.units = node.units;\n\t\t}\n\t\tconnectSignal(this, node, outputNum, inputNum);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Private methods borrowed from Param\n\t */\n\t// @ts-ignore\n\tprivate _fromType = Param.prototype._fromType;\n\t// @ts-ignore\n\tprivate _toType = Param.prototype._toType;\n\t// @ts-ignore\n\tprivate _is = Param.prototype._is;\n\t// @ts-ignore\n\tprivate _clampValue = Param.prototype._clampValue;\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._oscillator.dispose();\n\t\tthis._stoppedSignal.dispose();\n\t\tthis._zeros.dispose();\n\t\tthis._scaler.dispose();\n\t\tthis._a2g.dispose();\n\t\tthis._amplitudeGain.dispose();\n\t\tthis.amplitude.dispose();\n\t\treturn this;\n\t}\n}\n", "import { assertRange } from \"./Debug\";\nimport { Time } from \"../type/Units\";\n\n/**\n * Assert that the number is in the given range.\n */\nexport function range(min: number, max = Infinity) {\n\tconst valueMap: WeakMap<any, number> = new WeakMap();\n\treturn function(target: any, propertyKey: string | symbol) {\n\t\tReflect.defineProperty(\n\t\t\ttarget,\n\t\t\tpropertyKey,\n\t\t\t{\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tget: function() {\n\t\t\t\t\treturn valueMap.get(this);\n\t\t\t\t},\n\t\t\t\tset: function(newValue: number) {\n\t\t\t\t\tassertRange(newValue, min, max);\n\t\t\t\t\tvalueMap.set(this, newValue);\n\t\t\t\t}\n\t\t\t},\n\t\t);\n\t};\n}\n\n/**\n * Convert the time to seconds and assert that the time is in between the two\n * values when being set.\n */\nexport function timeRange(min: number, max = Infinity) {\n\tconst valueMap: WeakMap<any, Time> = new WeakMap();\n\treturn function(target: any, propertyKey: string) {\n\t\tReflect.defineProperty(\n\t\t\ttarget,\n\t\t\tpropertyKey,\n\t\t\t{\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tget: function() {\n\t\t\t\t\treturn valueMap.get(this);\n\t\t\t\t},\n\t\t\t\tset: function(newValue: Time) {\n\t\t\t\t\tassertRange(this.toSeconds(newValue), min, max);\n\t\t\t\t\tvalueMap.set(this, newValue);\n\t\t\t\t}\n\t\t\t},\n\t\t);\n\t};\n}\n", "import { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { Positive, Seconds, Time } from \"../../core/type/Units\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp } from \"../../core/util/Interface\";\nimport { isUndef } from \"../../core/util/TypeCheck\";\nimport { Source, SourceOptions } from \"../Source\";\nimport { ToneBufferSource } from \"./ToneBufferSource\";\nimport { assertRange } from \"../../core/util/Debug\";\nimport { timeRange } from \"../../core/util/Decorator\";\n\nexport interface PlayerOptions extends SourceOptions {\n\tonload: () => void;\n\tonerror: (error: Error) => void;\n\tplaybackRate: Positive;\n\tloop: boolean;\n\tautostart: boolean;\n\tloopStart: Time;\n\tloopEnd: Time;\n\treverse: boolean;\n\tfadeIn: Time;\n\tfadeOut: Time;\n\turl?: ToneAudioBuffer | string | AudioBuffer;\n}\n\n/**\n * Player is an audio file player with start, loop, and stop functions.\n * @example\n * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/gong_1.mp3\").toDestination();\n * // play as soon as the buffer is loaded\n * player.autostart = true;\n * @category Source\n */\nexport class Player extends Source<PlayerOptions> {\n\n\treadonly name: string = \"Player\";\n\n\t/**\n\t * If the file should play as soon\n\t * as the buffer is loaded.\n\t */\n\tautostart: boolean;\n\n\t/**\n\t * The buffer\n\t */\n\tprivate _buffer: ToneAudioBuffer;\n\n\t/**\n\t * if the buffer should loop once it's over\n\t */\n\tprivate _loop: boolean;\n\n\t/**\n\t * if 'loop' is true, the loop will start at this position\n\t */\n\tprivate _loopStart: Time;\n\n\t/**\n\t * if 'loop' is true, the loop will end at this position\n\t */\n\tprivate _loopEnd: Time;\n\n\t/**\n\t * the playback rate\n\t */\n\tprivate _playbackRate: Positive;\n\n\t/**\n\t * All of the active buffer source nodes\n\t */\n\tprivate _activeSources: Set<ToneBufferSource> = new Set();\n\n\t/**\n\t * The fadeIn time of the amplitude envelope.\n\t */\n\t@timeRange(0)\n\tfadeIn: Time;\n\n\t/**\n\t * The fadeOut time of the amplitude envelope.\n\t */\n\t@timeRange(0)\n\tfadeOut: Time;\n\n\t/**\n\t * @param url Either the AudioBuffer or the url from which to load the AudioBuffer\n\t * @param onload The function to invoke when the buffer is loaded.\n\t */\n\tconstructor(url?: string | AudioBuffer | ToneAudioBuffer, onload?: () => void);\n\tconstructor(options?: Partial<PlayerOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Player.getDefaults(), arguments, [\"url\", \"onload\"]));\n\t\tconst options = optionsFromArguments(Player.getDefaults(), arguments, [\"url\", \"onload\"]);\n\n\t\tthis._buffer = new ToneAudioBuffer({\n\t\t\tonload: this._onload.bind(this, options.onload),\n\t\t\tonerror: options.onerror,\n\t\t\treverse: options.reverse,\n\t\t\turl: options.url,\n\t\t});\n\t\tthis.autostart = options.autostart;\n\t\tthis._loop = options.loop;\n\t\tthis._loopStart = options.loopStart;\n\t\tthis._loopEnd = options.loopEnd;\n\t\tthis._playbackRate = options.playbackRate;\n\t\tthis.fadeIn = options.fadeIn;\n\t\tthis.fadeOut = options.fadeOut;\n\t}\n\n\tstatic getDefaults(): PlayerOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tautostart: false,\n\t\t\tfadeIn: 0,\n\t\t\tfadeOut: 0,\n\t\t\tloop: false,\n\t\t\tloopEnd: 0,\n\t\t\tloopStart: 0,\n\t\t\tonload: noOp,\n\t\t\tonerror: noOp,\n\t\t\tplaybackRate: 1,\n\t\t\treverse: false,\n\t\t});\n\t}\n\n\t/**\n\t * Load the audio file as an audio buffer.\n\t * Decodes the audio asynchronously and invokes\n\t * the callback once the audio buffer loads.\n\t * Note: this does not need to be called if a url\n\t * was passed in to the constructor. Only use this\n\t * if you want to manually load a new url.\n\t * @param url The url of the buffer to load. Filetype support depends on the browser.\n\t */\n\tasync load(url: string): Promise<this> {\n\t\tawait this._buffer.load(url);\n\t\tthis._onload();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Internal callback when the buffer is loaded.\n\t */\n\tprivate _onload(callback: () => void = noOp): void {\n\t\tcallback();\n\t\tif (this.autostart) {\n\t\t\tthis.start();\n\t\t}\n\t}\n\n\t/**\n\t * Internal callback when the buffer is done playing.\n\t */\n\tprivate _onSourceEnd(source: ToneBufferSource): void {\n\t\t// invoke the onstop function\n\t\tthis.onstop(this);\n\n\t\t// delete the source from the active sources\n\t\tthis._activeSources.delete(source);\n\t\tif (this._activeSources.size === 0 && !this._synced &&\n\t\t\tthis._state.getValueAtTime(this.now()) === \"started\") {\n\t\t\t// remove the 'implicitEnd' event and replace with an explicit end\n\t\t\tthis._state.cancel(this.now());\n\t\t\tthis._state.setStateAtTime(\"stopped\", this.now());\n\t\t}\n\t}\n\n\t/**\n\t * Play the buffer at the given startTime. Optionally add an offset\n\t * and/or duration which will play the buffer from a position\n\t * within the buffer for the given duration.\n\t *\n\t * @param  time When the player should start.\n\t * @param  offset The offset from the beginning of the sample to start at.\n\t * @param  duration How long the sample should play. If no duration is given, it will default to the full length of the sample (minus any offset)\n\t */\n\tstart(time?: Time, offset?: Time, duration?: Time): this {\n\t\tsuper.start(time, offset, duration);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Internal start method\n\t */\n\tprotected _start(startTime?: Time, offset?: Time, duration?: Time): void {\n\t\t// if it's a loop the default offset is the loopStart point\n\t\tif (this._loop) {\n\t\t\toffset = defaultArg(offset, this._loopStart);\n\t\t} else {\n\t\t\t// otherwise the default offset is 0\n\t\t\toffset = defaultArg(offset, 0);\n\t\t}\n\n\t\t// compute the values in seconds\n\t\tconst computedOffset = this.toSeconds(offset);\n\n\t\t// compute the duration which is either the passed in duration of the buffer.duration - offset\n\t\tconst origDuration = duration;\n\t\tduration = defaultArg(duration, Math.max(this._buffer.duration - computedOffset, 0));\n\t\tlet computedDuration = this.toSeconds(duration);\n\n\t\t// scale it by the playback rate\n\t\tcomputedDuration = computedDuration / this._playbackRate;\n\n\t\t// get the start time\n\t\tstartTime = this.toSeconds(startTime);\n\n\t\t// make the source\n\t\tconst source = new ToneBufferSource({\n\t\t\turl: this._buffer,\n\t\t\tcontext: this.context,\n\t\t\tfadeIn: this.fadeIn,\n\t\t\tfadeOut: this.fadeOut,\n\t\t\tloop: this._loop,\n\t\t\tloopEnd: this._loopEnd,\n\t\t\tloopStart: this._loopStart,\n\t\t\tonended: this._onSourceEnd.bind(this),\n\t\t\tplaybackRate: this._playbackRate,\n\t\t}).connect(this.output);\n\n\t\t// set the looping properties\n\t\tif (!this._loop && !this._synced) {\n\t\t\t// cancel the previous stop\n\t\t\tthis._state.cancel(startTime + computedDuration);\n\t\t\t// if it's not looping, set the state change at the end of the sample\n\t\t\tthis._state.setStateAtTime(\"stopped\", startTime + computedDuration, {\n\t\t\t\timplicitEnd: true,\n\t\t\t});\n\t\t}\n\n\t\t// add it to the array of active sources\n\t\tthis._activeSources.add(source);\n\n\t\t// start it\n\t\tif (this._loop && isUndef(origDuration)) {\n\t\t\tsource.start(startTime, computedOffset);\n\t\t} else {\n\t\t\t// subtract the fade out time\n\t\t\tsource.start(startTime, computedOffset, computedDuration - this.toSeconds(this.fadeOut));\n\t\t}\n\t}\n\n\t/**\n\t * Stop playback.\n\t */\n\tprotected _stop(time?: Time): void {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._activeSources.forEach(source => source.stop(computedTime));\n\t}\n\n\t/**\n\t * Stop and then restart the player from the beginning (or offset)\n\t * @param  time When the player should start.\n\t * @param  offset The offset from the beginning of the sample to start at.\n\t * @param  duration How long the sample should play. If no duration is given, \n\t * \t\t\t\t\tit will default to the full length of the sample (minus any offset)\n\t */\n\trestart(time?: Seconds, offset?: Time, duration?: Time): this {\n\t\tsuper.restart(time, offset, duration);\n\t\treturn this;\n\t}\n\n\tprotected _restart(time?: Seconds, offset?: Time, duration?: Time): void {\n\t\tthis._stop(time);\n\t\tthis._start(time, offset, duration);\n\t}\n\n\t/**\n\t * Seek to a specific time in the player's buffer. If the\n\t * source is no longer playing at that time, it will stop.\n\t * @param offset The time to seek to.\n\t * @param when The time for the seek event to occur.\n\t * @example\n\t * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/gurgling_theremin_1.mp3\", () => {\n\t * \tplayer.start();\n\t * \t// seek to the offset in 1 second from now\n\t * \tplayer.seek(0.4, \"+1\");\n\t * }).toDestination();\n\t */\n\tseek(offset: Time, when?: Time): this {\n\t\tconst computedTime = this.toSeconds(when);\n\t\tif (this._state.getValueAtTime(computedTime) === \"started\") {\n\t\t\tconst computedOffset = this.toSeconds(offset);\n\t\t\t// if it's currently playing, stop it\n\t\t\tthis._stop(computedTime);\n\t\t\t// restart it at the given time\n\t\t\tthis._start(computedTime, computedOffset);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the loop start and end. Will only loop if loop is set to true.\n\t * @param loopStart The loop start time\n\t * @param loopEnd The loop end time\n\t * @example\n\t * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/malevoices_aa2_F3.mp3\").toDestination();\n\t * // loop between the given points\n\t * player.setLoopPoints(0.2, 0.3);\n\t * player.loop = true;\n\t * player.autostart = true;\n\t */\n\tsetLoopPoints(loopStart: Time, loopEnd: Time): this {\n\t\tthis.loopStart = loopStart;\n\t\tthis.loopEnd = loopEnd;\n\t\treturn this;\n\t}\n\n\t/**\n\t * If loop is true, the loop will start at this position.\n\t */\n\tget loopStart(): Time {\n\t\treturn this._loopStart;\n\t}\n\tset loopStart(loopStart) {\n\t\tthis._loopStart = loopStart;\n\t\tif (this.buffer.loaded) {\n\t\t\tassertRange(this.toSeconds(loopStart), 0, this.buffer.duration);\n\t\t}\n\t\t// get the current source\n\t\tthis._activeSources.forEach(source => {\n\t\t\tsource.loopStart = loopStart;\n\t\t});\n\t}\n\n\t/**\n\t * If loop is true, the loop will end at this position.\n\t */\n\tget loopEnd(): Time {\n\t\treturn this._loopEnd;\n\t}\n\tset loopEnd(loopEnd) {\n\t\tthis._loopEnd = loopEnd;\n\t\tif (this.buffer.loaded) {\n\t\t\tassertRange(this.toSeconds(loopEnd), 0, this.buffer.duration);\n\t\t}\n\t\t// get the current source\n\t\tthis._activeSources.forEach(source => {\n\t\t\tsource.loopEnd = loopEnd;\n\t\t});\n\t}\n\n\t/**\n\t * The audio buffer belonging to the player.\n\t */\n\tget buffer(): ToneAudioBuffer {\n\t\treturn this._buffer;\n\t}\n\tset buffer(buffer) {\n\t\tthis._buffer.set(buffer);\n\t}\n\n\t/**\n\t * If the buffer should loop once it's over.\n\t * @example\n\t * const player = new Tone.Player(\"https://tonejs.github.io/audio/drum-samples/breakbeat.mp3\").toDestination();\n\t * player.loop = true;\n\t * player.autostart = true;\n\t */\n\tget loop(): boolean {\n\t\treturn this._loop;\n\t}\n\tset loop(loop) {\n\t\t// if no change, do nothing\n\t\tif (this._loop === loop) {\n\t\t\treturn;\n\t\t}\n\t\tthis._loop = loop;\n\t\t// set the loop of all of the sources\n\t\tthis._activeSources.forEach(source => {\n\t\t\tsource.loop = loop;\n\t\t});\n\t\tif (loop) {\n\t\t\t// remove the next stopEvent\n\t\t\tconst stopEvent = this._state.getNextState(\"stopped\", this.now());\n\t\t\tif (stopEvent) {\n\t\t\t\tthis._state.cancel(stopEvent.time);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Normal speed is 1. The pitch will change with the playback rate.\n\t * @example\n\t * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/femalevoices_aa2_A5.mp3\").toDestination();\n\t * // play at 1/4 speed\n\t * player.playbackRate = 0.25;\n\t * // play as soon as the buffer is loaded\n\t * player.autostart = true;\n\t */\n\tget playbackRate(): Positive {\n\t\treturn this._playbackRate;\n\t}\n\tset playbackRate(rate) {\n\t\tthis._playbackRate = rate;\n\t\tconst now = this.now();\n\n\t\t// cancel the stop event since it's at a different time now\n\t\tconst stopEvent = this._state.getNextState(\"stopped\", now);\n\t\tif (stopEvent && stopEvent.implicitEnd) {\n\t\t\tthis._state.cancel(stopEvent.time);\n\t\t\tthis._activeSources.forEach(source => source.cancelStop());\n\t\t}\n\n\t\t// set all the sources\n\t\tthis._activeSources.forEach(source => {\n\t\t\tsource.playbackRate.setValueAtTime(rate, now);\n\t\t});\n\t}\n\n\t/**\n\t * If the buffer should be reversed\n\t * @example\n\t * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/chime_1.mp3\").toDestination();\n\t * player.autostart = true;\n\t * player.reverse = true;\n\t */\n\tget reverse(): boolean {\n\t\treturn this._buffer.reverse;\n\t}\n\tset reverse(rev) {\n\t\tthis._buffer.reverse = rev;\n\t}\n\n\t/**\n\t * If the buffer is loaded\n\t */\n\tget loaded(): boolean {\n\t\treturn this._buffer.loaded;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\t// disconnect all of the players\n\t\tthis._activeSources.forEach(source => source.dispose());\n\t\tthis._activeSources.clear();\n\t\tthis._buffer.dispose();\n\t\treturn this;\n\t}\n}\n", "import { Volume } from \"../../component/channel/Volume\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { ToneAudioBuffers, ToneAudioBuffersUrlMap } from \"../../core/context/ToneAudioBuffers\";\nimport { OutputNode, ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { Decibels, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { assert } from \"../../core/util/Debug\";\nimport { noOp, readOnly } from \"../../core/util/Interface\";\nimport { BasicPlaybackState } from \"../../core/util/StateTimeline\";\nimport { Source, SourceOptions } from \"../Source\";\nimport { Player } from \"./Player\";\n\nexport interface PlayersOptions extends SourceOptions {\n\turls: ToneAudioBuffersUrlMap;\n\tvolume: Decibels;\n\tmute: boolean;\n\tonload: () => void;\n\tonerror: (error: Error) => void;\n\tbaseUrl: string;\n\tfadeIn: Time;\n\tfadeOut: Time;\n}\n\n/**\n * Players combines multiple [[Player]] objects.\n * @category Source\n */\nexport class Players extends ToneAudioNode<PlayersOptions> {\n\n\treadonly name: string = \"Players\";\n\n\t/**\n\t * The output volume node\n\t */\n\tprivate _volume: Volume;\n\n\t/**\n\t * The volume of the output in decibels.\n\t */\n\treadonly volume: Param<\"decibels\">;\n\n\t/**\n\t * The combined output of all of the players\n\t */\n\treadonly output: OutputNode;\n\n\t/**\n\t * Players has no input.\n\t */\n\treadonly input = undefined;\n\n\t/**\n\t * The container of all of the players\n\t */\n\tprivate _players: Map<string, Player> = new Map();\n\n\t/**\n\t * The container of all the buffers\n\t */\n\tprivate _buffers: ToneAudioBuffers;\n\n\t/**\n\t * private holder of the fadeIn time\n\t */\n\tprivate _fadeIn: Time;\n\n\t/**\n\t * private holder of the fadeOut time\n\t */\n\tprivate _fadeOut: Time;\n\n\t/**\n\t * @param urls An object mapping a name to a url.\n\t * @param onload The function to invoke when all buffers are loaded.\n\t */\n\tconstructor(urls?: ToneAudioBuffersUrlMap, onload?: () => void);\n\t/**\n\t * @param urls An object mapping a name to a url.\n\t * @param options The remaining options associated with the players\n\t */\n\tconstructor(urls?: ToneAudioBuffersUrlMap, options?: Partial<Omit<PlayersOptions, \"urls\">>);\n\tconstructor(options?: Partial<PlayersOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Players.getDefaults(), arguments, [\"urls\", \"onload\"], \"urls\"));\n\t\tconst options = optionsFromArguments(Players.getDefaults(), arguments, [\"urls\", \"onload\"], \"urls\");\n\n\t\t/**\n\t\t * The output volume node\n\t\t */\n\t\tthis._volume = this.output = new Volume({\n\t\t\tcontext: this.context,\n\t\t\tvolume: options.volume,\n\t\t});\n\n\t\tthis.volume = this._volume.volume;\n\t\treadOnly(this, \"volume\");\n\t\tthis._buffers = new ToneAudioBuffers({\n\t\t\turls: options.urls, \n\t\t\tonload: options.onload, \n\t\t\tbaseUrl: options.baseUrl,\n\t\t\tonerror: options.onerror\n\t\t});\n\t\t// mute initially\n\t\tthis.mute = options.mute;\n\t\tthis._fadeIn = options.fadeIn;\n\t\tthis._fadeOut = options.fadeOut;\n\t}\n\n\tstatic getDefaults(): PlayersOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tbaseUrl: \"\",\n\t\t\tfadeIn: 0,\n\t\t\tfadeOut: 0,\n\t\t\tmute: false,\n\t\t\tonload: noOp,\n\t\t\tonerror: noOp,\n\t\t\turls: {},\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Mute the output.\n\t */\n\tget mute(): boolean {\n\t\treturn this._volume.mute;\n\t}\n\tset mute(mute) {\n\t\tthis._volume.mute = mute;\n\t}\n\n\t/**\n\t * The fadeIn time of the envelope applied to the source.\n\t */\n\tget fadeIn(): Time {\n\t\treturn this._fadeIn;\n\t}\n\tset fadeIn(fadeIn) {\n\t\tthis._fadeIn = fadeIn;\n\t\tthis._players.forEach(player => {\n\t\t\tplayer.fadeIn = fadeIn;\n\t\t});\n\t}\n\n\t/**\n\t * The fadeOut time of the each of the sources.\n\t */\n\tget fadeOut(): Time {\n\t\treturn this._fadeOut;\n\t}\n\tset fadeOut(fadeOut) {\n\t\tthis._fadeOut = fadeOut;\n\t\tthis._players.forEach(player => {\n\t\t\tplayer.fadeOut = fadeOut;\n\t\t});\n\t}\n\n\t/**\n\t * The state of the players object. Returns \"started\" if any of the players are playing.\n\t */\n\tget state(): BasicPlaybackState {\n\t\tconst playing = Array.from(this._players).some(([_, player]) => player.state === \"started\");\n\t\treturn playing ? \"started\" : \"stopped\";\n\t}\n\n\t/**\n\t * True if the buffers object has a buffer by that name.\n\t * @param name  The key or index of the buffer.\n\t */\n\thas(name: string): boolean {\n\t\treturn this._buffers.has(name);\n\t}\n\n\t/**\n\t * Get a player by name.\n\t * @param  name  The players name as defined in the constructor object or `add` method.\n\t */\n\tplayer(name: string): Player {\n\t\tassert(this.has(name), `No Player with the name ${name} exists on this object`);\n\t\tif (!this._players.has(name)) {\n\t\t\tconst player = new Player({\n\t\t\t\tcontext: this.context,\n\t\t\t\tfadeIn: this._fadeIn,\n\t\t\t\tfadeOut: this._fadeOut,\n\t\t\t\turl: this._buffers.get(name),\n\t\t\t}).connect(this.output);\n\t\t\tthis._players.set(name, player);\n\t\t}\n\t\treturn this._players.get(name) as Player;\n\t}\n\n\t/**\n\t * If all the buffers are loaded or not\n\t */\n\tget loaded(): boolean {\n\t\treturn this._buffers.loaded;\n\t}\n\n\t/**\n\t * Add a player by name and url to the Players\n\t * @param  name A unique name to give the player\n\t * @param  url  Either the url of the bufer or a buffer which will be added with the given name.\n\t * @param callback  The callback to invoke when the url is loaded.\n\t */\n\tadd(name: string, url: string | ToneAudioBuffer | AudioBuffer, callback?: () => void): this {\n\t\tassert(!this._buffers.has(name), \"A buffer with that name already exists on this object\");\n\t\tthis._buffers.add(name, url, callback);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop all of the players at the given time\n\t * @param time The time to stop all of the players.\n\t */\n\tstopAll(time?: Time): this {\n\t\tthis._players.forEach(player => player.stop(time));\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._volume.dispose();\n\t\tthis.volume.dispose();\n\t\tthis._players.forEach(player => player.dispose());\n\t\tthis._buffers.dispose();\n\t\treturn this;\n\t}\n}\n", "import { Source, SourceOptions } from \"../Source\";\nimport { noOp } from \"../../core/util/Interface\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Clock } from \"../../core/clock/Clock\";\nimport { Cents, Positive, Seconds, Time } from \"../../core/type/Units\";\nimport { ToneBufferSource } from \"./ToneBufferSource\";\nimport { intervalToFrequencyRatio } from \"../../core/type/Conversions\";\nimport { assertRange } from \"../../core/util/Debug\";\n\ninterface GrainPlayerOptions extends SourceOptions {\n\tonload: () => void;\n\tonerror: (error: Error) => void;\n\treverse: boolean;\n\turl?: ToneAudioBuffer | string | AudioBuffer;\n\toverlap: Seconds;\n\tgrainSize: Seconds;\n\tplaybackRate: Positive;\n\tdetune: Cents;\n\tloop: boolean;\n\tloopStart: Time;\n\tloopEnd: Time;\n}\n\n/**\n * GrainPlayer implements [granular synthesis](https://en.wikipedia.org/wiki/Granular_synthesis).\n * Granular Synthesis enables you to adjust pitch and playback rate independently. The grainSize is the\n * amount of time each small chunk of audio is played for and the overlap is the\n * amount of crossfading transition time between successive grains.\n * @category Source\n */\nexport class GrainPlayer extends Source<GrainPlayerOptions> {\n\n\treadonly name: string = \"GrainPlayer\";\n\n\t/**\n\t * The audio buffer belonging to the player.\n\t */\n\tbuffer: ToneAudioBuffer;\n\n\t/**\n\t * Create a repeating tick to schedule the grains.\n\t */\n\tprivate _clock: Clock;\n\n\t/**\n\t * Internal loopStart value\n\t */\n\tprivate _loopStart = 0;\n\n\t/**\n\t * Internal loopStart value\n\t */\n\tprivate _loopEnd = 0;\n\n\t/**\n\t * All of the currently playing BufferSources\n\t */\n\tprivate _activeSources: ToneBufferSource[] = [];\n\n\t/**\n\t * Internal reference to the playback rate\n\t */\n\tprivate _playbackRate: Positive;\n\n\t/**\n\t * Internal grain size reference;\n\t */\n\tprivate _grainSize: Seconds;\n\n\t/**\n\t * Internal overlap reference;\n\t */\n\tprivate _overlap: Seconds;\n\n\t/**\n\t * Adjust the pitch independently of the playbackRate.\n\t */\n\tdetune: Cents;\n\n\t/**\n\t * If the buffer should loop back to the loopStart when completed\n\t */\n\tloop: boolean;\n\n\t/**\n\t * @param url Either the AudioBuffer or the url from which to load the AudioBuffer\n\t * @param onload The function to invoke when the buffer is loaded.\n\t */\n\tconstructor(url?: string | AudioBuffer | ToneAudioBuffer, onload?: () => void);\n\tconstructor(options?: Partial<GrainPlayerOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(GrainPlayer.getDefaults(), arguments, [\"url\", \"onload\"]));\n\t\tconst options = optionsFromArguments(GrainPlayer.getDefaults(), arguments, [\"url\", \"onload\"]);\n\n\t\tthis.buffer = new ToneAudioBuffer({\n\t\t\tonload: options.onload,\n\t\t\tonerror: options.onerror,\n\t\t\treverse: options.reverse,\n\t\t\turl: options.url,\n\t\t});\n\t\tthis._clock = new Clock({\n\t\t\tcontext: this.context,\n\t\t\tcallback: this._tick.bind(this),\n\t\t\tfrequency: 1 / options.grainSize\n\t\t});\n\t\tthis._playbackRate = options.playbackRate;\n\t\tthis._grainSize = options.grainSize;\n\t\tthis._overlap = options.overlap;\n\t\tthis.detune = options.detune;\n\n\t\t// setup\n\t\tthis.overlap = options.overlap;\n\t\tthis.loop = options.loop;\n\t\tthis.playbackRate = options.playbackRate;\n\t\tthis.grainSize = options.grainSize;\n\t\tthis.loopStart = options.loopStart;\n\t\tthis.loopEnd = options.loopEnd;\n\t\tthis.reverse = options.reverse;\n\t\tthis._clock.on(\"stop\", this._onstop.bind(this));\n\t}\n\n\tstatic getDefaults(): GrainPlayerOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tonload: noOp,\n\t\t\tonerror: noOp,\n\t\t\toverlap: 0.1,\n\t\t\tgrainSize: 0.2,\n\t\t\tplaybackRate: 1,\n\t\t\tdetune: 0,\n\t\t\tloop: false,\n\t\t\tloopStart: 0,\n\t\t\tloopEnd: 0,\n\t\t\treverse: false\n\t\t});\n\t}\n\n\t/**\n\t * Internal start method\n\t */\n\tprotected _start(time?: Time, offset?: Time, duration?: Time): void {\n\t\toffset = defaultArg(offset, 0);\n\t\toffset = this.toSeconds(offset);\n\t\ttime = this.toSeconds(time);\n\n\t\tconst grainSize = 1 / this._clock.frequency.getValueAtTime(time);\n\t\tthis._clock.start(time, offset / grainSize);\n\n\t\tif (duration) {\n\t\t\tthis.stop(time + this.toSeconds(duration));\n\t\t}\n\t}\n\n\t/**\n\t * Stop and then restart the player from the beginning (or offset)\n\t * @param  time When the player should start.\n\t * @param  offset The offset from the beginning of the sample to start at.\n\t * @param  duration How long the sample should play. If no duration is given, \n\t * \t\t\t\t\tit will default to the full length of the sample (minus any offset)\n\t */\n\trestart(time?: Seconds, offset?: Time, duration?: Time): this {\n\t\tsuper.restart(time, offset, duration);\n\t\treturn this;\n\t}\n\n\tprotected _restart(time?: Seconds, offset?: Time, duration?: Time): void {\n\t\tthis._stop(time);\n\t\tthis._start(time, offset, duration);\n\t}\n\n\t/**\n\t * Internal stop method\n\t */\n\tprotected _stop(time?: Time): void {\n\t\tthis._clock.stop(time);\n\t}\n\n\t/**\n\t * Invoked when the clock is stopped\n\t */\n\tprivate _onstop(time: Seconds): void {\n\t\t// stop the players\n\t\tthis._activeSources.forEach((source) => {\n\t\t\tsource.fadeOut = 0;\n\t\t\tsource.stop(time);\n\t\t});\n\t\tthis.onstop(this);\n\t}\n\n\t/**\n\t * Invoked on each clock tick. scheduled a new grain at this time.\n\t */\n\tprivate _tick(time: Seconds): void {\n\t\t// check if it should stop looping\n\t\tconst ticks = this._clock.getTicksAtTime(time);\n\t\tconst offset = ticks * this._grainSize;\n\t\tthis.log(\"offset\", offset);\n\n\t\tif (!this.loop && offset > this.buffer.duration) {\n\t\t\tthis.stop(time);\n\t\t\treturn;\n\t\t}\n\n\t\t// at the beginning of the file, the fade in should be 0\n\t\tconst fadeIn = offset < this._overlap ? 0 : this._overlap;\n\n\t\t// create a buffer source\n\t\tconst source = new ToneBufferSource({\n\t\t\tcontext: this.context,\n\t\t\turl: this.buffer,\n\t\t\tfadeIn: fadeIn,\n\t\t\tfadeOut: this._overlap,\n\t\t\tloop: this.loop,\n\t\t\tloopStart: this._loopStart,\n\t\t\tloopEnd: this._loopEnd,\n\t\t\t// compute the playbackRate based on the detune\n\t\t\tplaybackRate: intervalToFrequencyRatio(this.detune / 100)\n\t\t}).connect(this.output);\n\n\t\tsource.start(time, this._grainSize * ticks);\n\t\tsource.stop(time + this._grainSize / this.playbackRate);\n\n\t\t// add it to the active sources\n\t\tthis._activeSources.push(source);\n\t\t// remove it when it's done\n\t\tsource.onended = () => {\n\t\t\tconst index = this._activeSources.indexOf(source);\n\t\t\tif (index !== -1) {\n\t\t\t\tthis._activeSources.splice(index, 1);\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * The playback rate of the sample\n\t */\n\tget playbackRate(): Positive {\n\t\treturn this._playbackRate;\n\t}\n\tset playbackRate(rate) {\n\t\tassertRange(rate, 0.001);\n\t\tthis._playbackRate = rate;\n\t\tthis.grainSize = this._grainSize;\n\t}\n\n\t/**\n\t * The loop start time.\n\t */\n\tget loopStart(): Time {\n\t\treturn this._loopStart;\n\t}\n\tset loopStart(time) {\n\t\tif (this.buffer.loaded) {\n\t\t\tassertRange(this.toSeconds(time), 0, this.buffer.duration);\n\t\t}\n\t\tthis._loopStart = this.toSeconds(time);\n\t}\n\n\t/**\n\t * The loop end time.\n\t */\n\tget loopEnd(): Time {\n\t\treturn this._loopEnd;\n\t}\n\tset loopEnd(time) {\n\t\tif (this.buffer.loaded) {\n\t\t\tassertRange(this.toSeconds(time), 0, this.buffer.duration);\n\t\t}\n\t\tthis._loopEnd = this.toSeconds(time);\n\t}\n\n\t/**\n\t * The direction the buffer should play in\n\t */\n\tget reverse() {\n\t\treturn this.buffer.reverse;\n\t}\n\n\tset reverse(rev) {\n\t\tthis.buffer.reverse = rev;\n\t}\n\n\t/**\n\t * The size of each chunk of audio that the\n\t * buffer is chopped into and played back at.\n\t */\n\tget grainSize(): Time {\n\t\treturn this._grainSize;\n\t}\n\tset grainSize(size) {\n\t\tthis._grainSize = this.toSeconds(size);\n\t\tthis._clock.frequency.setValueAtTime(this._playbackRate / this._grainSize, this.now());\n\t}\n\n\t/**\n\t * The duration of the cross-fade between successive grains.\n\t */\n\tget overlap(): Time {\n\t\treturn this._overlap;\n\t}\n\tset overlap(time) {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tassertRange(computedTime, 0);\n\t\tthis._overlap = computedTime;\n\t}\n\n\t/**\n\t * If all the buffer is loaded\n\t */\n\tget loaded(): boolean {\n\t\treturn this.buffer.loaded;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.buffer.dispose();\n\t\tthis._clock.dispose();\n\t\tthis._activeSources.forEach((source) => source.dispose());\n\t\treturn this;\n\t}\n}\n", "import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { SignalOperator } from \"./SignalOperator\";\nimport { WaveShaper } from \"./WaveShaper\";\n\n/**\n * Return the absolute value of an incoming signal.\n *\n * @example\n * return Tone.Offline(() => {\n * \tconst abs = new Tone.Abs().toDestination();\n * \tconst signal = new Tone.Signal(1);\n * \tsignal.rampTo(-1, 0.5);\n * \tsignal.connect(abs);\n * }, 0.5, 1);\n * @category Signal\n */\nexport class Abs extends SignalOperator<ToneAudioNodeOptions> {\n\n\treadonly name: string = \"Abs\";\n\n\t/**\n\t * The node which converts the audio ranges\n\t */\n\tprivate _abs = new WaveShaper({\n\t\tcontext: this.context,\n\t\tmapping: val => {\n\t\t\tif (Math.abs(val) < 0.001) {\n\t\t\t\treturn 0;\n\t\t\t} else {\n\t\t\t\treturn Math.abs(val);\n\t\t\t}\n\t\t},\n\t});\n\n\t/**\n\t * The AudioRange input [-1, 1]\n\t */\n\tinput = this._abs;\n\n\t/**\n\t * The output range [0, 1]\n\t */\n\toutput = this._abs;\n\n\t/**\n\t * clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._abs.dispose();\n\t\treturn this;\n\t}\n}\n", "import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { SignalOperator } from \"./SignalOperator\";\nimport { WaveShaper } from \"./WaveShaper\";\n\n/**\n * GainToAudio converts an input in NormalRange [0,1] to AudioRange [-1,1].\n * See [[AudioToGain]].\n * @category Signal\n */\nexport class GainToAudio extends SignalOperator<ToneAudioNodeOptions> {\n\n\treadonly name: string = \"GainToAudio\";\n\n\t/**\n\t * The node which converts the audio ranges\n\t */\n\tprivate _norm = new WaveShaper({\n\t\tcontext: this.context,\n\t\tmapping: x => Math.abs(x) * 2 - 1,\n\t});\n\n\t/**\n\t * The NormalRange input [0, 1]\n\t */\n\tinput = this._norm;\n\n\t/**\n\t * The AudioRange output [-1, 1]\n\t */\n\toutput = this._norm;\n\n\t/**\n\t * clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._norm.dispose();\n\t\treturn this;\n\t}\n}\n", "import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { Multiply } from \"./Multiply\";\nimport { SignalOperator } from \"./SignalOperator\";\n\n/**\n * Negate the incoming signal. i.e. an input signal of 10 will output -10\n *\n * @example\n * const neg = new Tone.Negate();\n * const sig = new Tone.Signal(-2).connect(neg);\n * // output of neg is positive 2.\n * @category Signal\n */\nexport class Negate extends SignalOperator<ToneAudioNodeOptions> {\n\n\treadonly name: string = \"Negate\";\n\n\t/**\n\t * negation is done by multiplying by -1\n\t */\n\tprivate _multiply: Multiply = new Multiply({\n\t\tcontext: this.context,\n\t\tvalue: -1,\n\t});\n\n\t/**\n\t * The input and output are equal to the multiply node\n\t */\n\tinput = this._multiply;\n\toutput = this._multiply;\n\n\t/**\n\t * clean up\n\t * @returns {Negate} this\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._multiply.dispose();\n\t\treturn this;\n\t}\n}\n", "import { connectSeries } from \"../core/context/ToneAudioNode\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Param } from \"../core/context/Param\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Negate } from \"../signal/Negate\";\nimport { Signal, SignalOptions } from \"../signal/Signal\";\n\n/**\n * Subtract the signal connected to the input is subtracted from the signal connected\n * The subtrahend.\n *\n * @example\n * // subtract a scalar from a signal\n * const sub = new Tone.Subtract(1);\n * const sig = new Tone.Signal(4).connect(sub);\n * // the output of sub is 3.\n * @example\n * // subtract two signals\n * const sub = new Tone.Subtract();\n * const sigA = new Tone.Signal(10);\n * const sigB = new Tone.Signal(2.5);\n * sigA.connect(sub);\n * sigB.connect(sub.subtrahend);\n * // output of sub is 7.5\n * @category Signal\n */\nexport class Subtract extends Signal {\n\n\toverride = false;\n\n\treadonly name: string = \"Subtract\";\n\n\t/**\n\t * the summing node\n\t */\n\tprivate _sum: Gain = new Gain({ context: this.context });\n\treadonly input: Gain = this._sum;\n\treadonly output: Gain = this._sum;\n\n\t/**\n\t * Negate the input of the second input before connecting it to the summing node.\n\t */\n\tprivate _neg: Negate = new Negate({ context: this.context });\n\n\t/**\n\t * The value which is subtracted from the main signal\n\t */\n\tsubtrahend: Param<\"number\"> = this._param;\n\n\t/**\n\t * @param value The value to subtract from the incoming signal. If the value\n\t *             is omitted, it will subtract the second signal from the first.\n\t */\n\tconstructor(value?: number);\n\tconstructor(options?: Partial<SignalOptions<\"number\">>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Subtract.getDefaults(), arguments, [\"value\"])));\n\n\t\tconnectSeries(this._constantSource, this._neg, this._sum);\n\t}\n\n\tstatic getDefaults(): SignalOptions<\"number\"> {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tvalue: 0,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._neg.dispose();\n\t\tthis._sum.dispose();\n\t\treturn this;\n\t}\n}\n", "import { SignalOperator, SignalOperatorOptions } from \"./SignalOperator\";\nimport { Multiply } from \"./Multiply\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { WaveShaper } from \"./WaveShaper\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\n\nexport type GreaterThanZeroOptions = SignalOperatorOptions\n\n/**\n * GreaterThanZero outputs 1 when the input is strictly greater than zero\n * @example\n * return Tone.Offline(() => {\n * \tconst gt0 = new Tone.GreaterThanZero().toDestination();\n * \tconst sig = new Tone.Signal(0.5).connect(gt0);\n * \tsig.setValueAtTime(-1, 0.05);\n * }, 0.1, 1);\n * @category Signal\n */\nexport class GreaterThanZero extends SignalOperator<GreaterThanZeroOptions> {\n\n\treadonly name: string = \"GreaterThanZero\";\n\n\t/**\n\t * The waveshaper\n\t */\n\tprivate _thresh: WaveShaper;\n\n\t/**\n\t * Scale the first thresholded signal by a large value.\n\t * this will help with values which are very close to 0\n\t */\n\tprivate _scale: Multiply;\n\n\treadonly output: ToneAudioNode;\n\treadonly input: ToneAudioNode;\n\n\tconstructor(options?: Partial<GreaterThanZeroOptions>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(GreaterThanZero.getDefaults(), arguments)));\n\n\t\tthis._thresh = this.output = new WaveShaper({\n\t\t\tcontext: this.context,\n\t\t\tlength: 127,\n\t\t\tmapping: (val) => {\n\t\t\t\tif (val <= 0) {\n\t\t\t\t\treturn 0;\n\t\t\t\t} else {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t},\n\t\t});\n\t\tthis._scale = this.input = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tvalue: 10000\n\t\t});\n\n\t\t// connections\n\t\tthis._scale.connect(this._thresh);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._scale.dispose();\n\t\tthis._thresh.dispose();\n\t\treturn this;\n\t}\n}\n", "import { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Subtract } from \"./Subtract\";\nimport { Signal, SignalOptions } from \"./Signal\";\nimport { GreaterThanZero } from \"./GreaterThanZero\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Param } from \"../core/context/Param\";\n\nexport type GreaterThanOptions = SignalOptions<\"number\">;\n\n/**\n * Output 1 if the signal is greater than the value, otherwise outputs 0.\n * can compare two signals or a signal and a number.\n * \n * @example\n * return Tone.Offline(() => {\n * \tconst gt = new Tone.GreaterThan(2).toDestination();\n * \tconst sig = new Tone.Signal(4).connect(gt);\n * }, 0.1, 1);\n * @category Signal\n */\nexport class GreaterThan extends Signal<\"number\"> {\n\n\treadonly name: string = \"GreaterThan\"\n\n\treadonly override: boolean = false;\n\n\treadonly input: ToneAudioNode;\n\treadonly output: ToneAudioNode;\n\n\t/**\n\t * compare that amount to zero after subtracting\n\t */\n\tprivate _gtz: GreaterThanZero;\n\n\t/**\n\t * Subtract the value from the input node\n\t */\n\tprivate _subtract: Subtract;\n\n\t/**\n\t * The signal to compare to the incoming signal against.\n\t * @example\n\t * return Tone.Offline(() => {\n\t * \t// change the comparison value\n\t * \tconst gt = new Tone.GreaterThan(1.5).toDestination();\n\t * \tconst signal = new Tone.Signal(1).connect(gt);\n\t * \tgt.comparator.setValueAtTime(0.5, 0.1);\n\t * }, 0.5, 1);\n\t */\n\treadonly comparator: Param<\"number\">\n\n\t/**\n\t * @param value The value to compare to\n\t */\n\tconstructor(value?: number);\n\tconstructor(options?: Partial<GreaterThanOptions>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(GreaterThan.getDefaults(), arguments, [\"value\"])));\n\t\tconst options = optionsFromArguments(GreaterThan.getDefaults(), arguments, [\"value\"]);\n\n\t\tthis._subtract = this.input = new Subtract({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.value\n\t\t});\n\t\tthis._gtz = this.output = new GreaterThanZero({ context: this.context });\n\n\t\tthis.comparator = this._param = this._subtract.subtrahend;\n\t\treadOnly(this, \"comparator\");\n\n\t\t// connect\n\t\tthis._subtract.connect(this._gtz);\n\t}\n\n\tstatic getDefaults(): GreaterThanOptions {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tvalue: 0,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._gtz.dispose();\n\t\tthis._subtract.dispose();\n\t\tthis.comparator.dispose();\n\t\treturn this;\n\t}\n}\n", "import { WaveShaper, WaveShaperMappingFn } from \"./WaveShaper\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { SignalOperator } from \"./SignalOperator\";\nimport { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\n\nexport interface PowOptions extends ToneAudioNodeOptions {\n\tvalue: number;\n}\n\n/**\n * Pow applies an exponent to the incoming signal. The incoming signal must be AudioRange [-1, 1]\n *\n * @example\n * const pow = new Tone.Pow(2);\n * const sig = new Tone.Signal(0.5).connect(pow);\n * // output of pow is 0.25. \n * @category Signal\n */\nexport class Pow extends SignalOperator<PowOptions> {\n\n\treadonly name: string = \"Pow\";\n\n\tprivate _exponent: number;\n\n\tprivate _exponentScaler: WaveShaper;\n\n\tinput: WaveShaper;\n\n\toutput: WaveShaper;\n\n\t/**\n\t * @param value Constant exponent value to use\n\t */\n\tconstructor(value?: number);\n\tconstructor(options?: Partial<PowOptions>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Pow.getDefaults(), arguments, [\"value\"])));\n\t\tconst options = optionsFromArguments(Pow.getDefaults(), arguments, [\"value\"]);\n\n\t\tthis._exponentScaler = this.input = this.output = new WaveShaper({\n\t\t\tcontext: this.context,\n\t\t\tmapping: this._expFunc(options.value),\n\t\t\tlength: 8192,\n\t\t});\n\n\t\tthis._exponent = options.value;\n\t}\n\n\tstatic getDefaults(): PowOptions {\n\t\treturn Object.assign(SignalOperator.getDefaults(), {\n\t\t\tvalue: 1,\n\t\t});\n\t}\n\n\t/**\n\t * the function which maps the waveshaper\n\t * @param exponent exponent value\n\t */\n\tprivate _expFunc(exponent: number): WaveShaperMappingFn {\n\t\treturn (val: number) => {\n\t\t\treturn Math.pow(Math.abs(val), exponent);\n\t\t};\n\t}\n\n\t/**\n\t * The value of the exponent.\n\t */\n\tget value(): number {\n\t\treturn this._exponent;\n\t}\n\tset value(exponent: number) {\n\t\tthis._exponent = exponent;\n\t\tthis._exponentScaler.setMap(this._expFunc(this._exponent));\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._exponentScaler.dispose();\n\t\treturn this;\n\t}\n}\n", "import { Scale, ScaleOptions } from \"./Scale\";\nimport { Positive } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Pow } from \"./Pow\";\n\nexport interface ScaleExpOptions extends ScaleOptions {\n\texponent: Positive;\n}\n\n/**\n * Performs an exponential scaling on an input signal.\n * Scales a NormalRange value [0,1] exponentially\n * to the output range of outputMin to outputMax.\n * @example\n * const scaleExp = new Tone.ScaleExp(0, 100, 2);\n * const signal = new Tone.Signal(0.5).connect(scaleExp);\n * @category Signal\n */\nexport class ScaleExp extends Scale<ScaleExpOptions> {\n\n\treadonly name: string = \"ScaleExp\";\n\n\t/**\n\t * The exponent scaler\n\t */\n\tprivate _exp: Pow;\n\n\t/**\n\t * @param min The output value when the input is 0.\n\t * @param max The output value when the input is 1.\n\t * @param exponent The exponent which scales the incoming signal.\n\t */\n\tconstructor(min?: number, max?: number, exponent?: number);\n\tconstructor(options?: Partial<ScaleExpOptions>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(ScaleExp.getDefaults(), arguments, [\"min\", \"max\", \"exponent\"])));\n\t\tconst options = optionsFromArguments(ScaleExp.getDefaults(), arguments, [\"min\", \"max\", \"exponent\"]);\n\n\t\tthis.input = this._exp = new Pow({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.exponent,\n\t\t});\n\t\tthis._exp.connect(this._mult);\n\t}\n\n\tstatic getDefaults(): ScaleExpOptions {\n\t\treturn Object.assign(Scale.getDefaults(), {\n\t\t\texponent: 1,\n\t\t});\n\t}\n\n\t/**\n\t * Instead of interpolating linearly between the [[min]] and\n\t * [[max]] values, setting the exponent will interpolate between\n\t * the two values with an exponential curve.\n\t */\n\tget exponent(): Positive {\n\t\treturn this._exp.value;\n\t}\n\tset exponent(exp) {\n\t\tthis._exp.value = exp;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._exp.dispose();\n\t\treturn this;\n\t}\n}\n", "import { Signal, SignalOptions } from \"./Signal\";\nimport { NormalRange, Seconds, Time, TransportTime, UnitMap, UnitName } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { TransportTimeClass } from \"../core/type/TransportTime\";\nimport { ToneConstantSource } from \"./ToneConstantSource\";\nimport { OutputNode } from \"../core/context/ToneAudioNode\";\n\n/**\n * Adds the ability to synchronize the signal to the [[Transport]]\n */\nexport class SyncedSignal<TypeName extends UnitName = \"number\"> extends Signal<TypeName> {\n\n\treadonly name: string = \"SyncedSignal\";\n\t\n\t/**\n\t * Don't override when something is connected to the input\n\t */\n\treadonly override = false;\n\n\treadonly output: OutputNode;\n\n\t/**\n\t * Keep track of the last value as an optimization.\n\t */\n\tprivate _lastVal: UnitMap[TypeName];\n\n\t/**\n\t * The ID returned from scheduleRepeat\n\t */\n\tprivate _synced: number;\n\n\t/**\n\t * Remember the callback value\n\t */\n\tprivate _syncedCallback: () => void;\n\n\t/**\n\t * @param value Initial value of the signal\n\t * @param units The unit name, e.g. \"frequency\"\n\t */\n\tconstructor(value?: UnitMap[TypeName], units?: TypeName);\n\tconstructor(options?: Partial<SignalOptions<TypeName>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]));\n\t\tconst options = optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]) as SignalOptions<TypeName>;\n\n\t\tthis._lastVal = options.value;\n\t\tthis._synced = this.context.transport.scheduleRepeat(this._onTick.bind(this), \"1i\");\n\n\t\tthis._syncedCallback = this._anchorValue.bind(this);\n\t\tthis.context.transport.on(\"start\", this._syncedCallback);\n\t\tthis.context.transport.on(\"pause\", this._syncedCallback);\n\t\tthis.context.transport.on(\"stop\", this._syncedCallback);\n\n\t\t// disconnect the constant source from the output and replace it with another one\n\t\tthis._constantSource.disconnect();\n\t\tthis._constantSource.stop(0);\n\n\t\t// create a new one\n\t\tthis._constantSource = this.output = new ToneConstantSource<TypeName>({ \n\t\t\tcontext: this.context,\n\t\t\toffset: options.value,\n\t\t\tunits: options.units,\n\t\t}).start(0);\n\t\tthis.setValueAtTime(options.value, 0);\n\t}\n\n\t/**\n\t * Callback which is invoked every tick.\n\t */\n\tprivate _onTick(time: Seconds): void {\n\t\tconst val = super.getValueAtTime(this.context.transport.seconds);\n\t\t// approximate ramp curves with linear ramps\n\t\tif (this._lastVal !== val) {\n\t\t\tthis._lastVal = val;\n\t\t\tthis._constantSource.offset.setValueAtTime(val, time);\n\t\t}\n\t}\n\n\t/**\n\t * Anchor the value at the start and stop of the Transport\n\t */\n\tprivate _anchorValue(time: Seconds): void {\n\t\tconst val = super.getValueAtTime(this.context.transport.seconds);\n\t\tthis._lastVal = val;\n\t\tthis._constantSource.offset.cancelAndHoldAtTime(time);\n\t\tthis._constantSource.offset.setValueAtTime(val, time);\n\t}\n\n\tgetValueAtTime(time: TransportTime): UnitMap[TypeName] {\n\t\tconst computedTime = new TransportTimeClass(this.context, time).toSeconds();\n\t\treturn super.getValueAtTime(computedTime);\n\t}\n\t\n\tsetValueAtTime(value: UnitMap[TypeName], time: TransportTime) {\n\t\tconst computedTime = new TransportTimeClass(this.context, time).toSeconds();\n\t\tsuper.setValueAtTime(value, computedTime);\n\t\treturn this;\n\t}\n\n\tlinearRampToValueAtTime(value: UnitMap[TypeName], time: TransportTime) {\n\t\tconst computedTime = new TransportTimeClass(this.context, time).toSeconds();\n\t\tsuper.linearRampToValueAtTime(value, computedTime);\n\t\treturn this;\n\t}\n\n\texponentialRampToValueAtTime(value: UnitMap[TypeName], time: TransportTime) {\n\t\tconst computedTime = new TransportTimeClass(this.context, time).toSeconds();\n\t\tsuper.exponentialRampToValueAtTime(value, computedTime);\n\t\treturn this;\n\t}\n\n\tsetTargetAtTime(value, startTime: TransportTime, timeConstant: number): this {\n\t\tconst computedTime = new TransportTimeClass(this.context, startTime).toSeconds();\n\t\tsuper.setTargetAtTime(value, computedTime, timeConstant);\n\t\treturn this;\n\t}\n\n\tcancelScheduledValues(startTime: TransportTime): this {\n\t\tconst computedTime = new TransportTimeClass(this.context, startTime).toSeconds();\n\t\tsuper.cancelScheduledValues(computedTime);\n\t\treturn this;\n\t}\n\n\tsetValueCurveAtTime(values: UnitMap[TypeName][], startTime: TransportTime, duration: Time, scaling: NormalRange): this {\n\t\tconst computedTime = new TransportTimeClass(this.context, startTime).toSeconds();\n\t\tduration = this.toSeconds(duration);\n\t\tsuper.setValueCurveAtTime(values, computedTime, duration, scaling);\n\t\treturn this;\n\t}\n\n\tcancelAndHoldAtTime(time: TransportTime): this {\n\t\tconst computedTime = new TransportTimeClass(this.context, time).toSeconds();\n\t\tsuper.cancelAndHoldAtTime(computedTime);\n\t\treturn this;\n\t}\n\t\n\tsetRampPoint(time: TransportTime): this {\n\t\tconst computedTime = new TransportTimeClass(this.context, time).toSeconds();\n\t\tsuper.setRampPoint(computedTime);\n\t\treturn this;\n\t}\n\t\n\texponentialRampTo(value: UnitMap[TypeName], rampTime: Time, startTime?: TransportTime): this {\n\t\tconst computedTime = new TransportTimeClass(this.context, startTime).toSeconds();\n\t\tsuper.exponentialRampTo(value, rampTime, computedTime);\n\t\treturn this;\n\t}\n\t\n\tlinearRampTo(value: UnitMap[TypeName], rampTime: Time, startTime?: TransportTime): this {\n\t\tconst computedTime = new TransportTimeClass(this.context, startTime).toSeconds();\n\t\tsuper.linearRampTo(value, rampTime, computedTime);\n\t\treturn this;\n\t}\n\n\ttargetRampTo(value: UnitMap[TypeName], rampTime: Time, startTime?: TransportTime): this {\n\t\tconst computedTime = new TransportTimeClass(this.context, startTime).toSeconds();\n\t\tsuper.targetRampTo(value, rampTime, computedTime);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.context.transport.clear(this._synced);\n\t\tthis.context.transport.off(\"start\", this._syncedCallback);\n\t\tthis.context.transport.off(\"pause\", this._syncedCallback);\n\t\tthis.context.transport.off(\"stop\", this._syncedCallback);\n\t\tthis._constantSource.dispose();\n\t\treturn this;\n\t}\n}\n", "import { InputNode, OutputNode } from \"../../core/context/ToneAudioNode\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { NormalRange, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { isArray, isObject, isString } from \"../../core/util/TypeCheck\";\nimport { connectSignal, Signal } from \"../../signal/Signal\";\nimport { OfflineContext } from \"../../core/context/OfflineContext\";\nimport { assert } from \"../../core/util/Debug\";\nimport { range, timeRange } from \"../../core/util/Decorator\";\n\ntype BasicEnvelopeCurve = \"linear\" | \"exponential\";\ntype InternalEnvelopeCurve = BasicEnvelopeCurve | number[];\nexport type EnvelopeCurve = EnvelopeCurveName | number[];\n\nexport interface EnvelopeOptions extends ToneAudioNodeOptions {\n\tattack: Time;\n\tdecay: Time;\n\tsustain: NormalRange;\n\trelease: Time;\n\tattackCurve: EnvelopeCurve;\n\treleaseCurve: EnvelopeCurve;\n\tdecayCurve: BasicEnvelopeCurve;\n}\n\n/**\n * Envelope is an [ADSR](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope)\n * envelope generator. Envelope outputs a signal which\n * can be connected to an AudioParam or Tone.Signal.\n * ```\n *           /\\\n *          /  \\\n *         /    \\\n *        /      \\\n *       /        \\___________\n *      /                     \\\n *     /                       \\\n *    /                         \\\n *   /                           \\\n * ```\n * @example\n * return Tone.Offline(() => {\n * \tconst env = new Tone.Envelope({\n * \t\tattack: 0.1,\n * \t\tdecay: 0.2,\n * \t\tsustain: 0.5,\n * \t\trelease: 0.8,\n * \t}).toDestination();\n * \tenv.triggerAttackRelease(0.5);\n * }, 1.5, 1);\n * @category Component\n */\nexport class Envelope extends ToneAudioNode<EnvelopeOptions> {\n\n\treadonly name: string = \"Envelope\";\n\n\t/**\n\t * When triggerAttack is called, the attack time is the amount of\n\t * time it takes for the envelope to reach it's maximum value.\n\t * ```\n\t *           /\\\n\t *          /X \\\n\t *         /XX  \\\n\t *        /XXX   \\\n\t *       /XXXX    \\___________\n\t *      /XXXXX                \\\n\t *     /XXXXXX                 \\\n\t *    /XXXXXXX                  \\\n\t *   /XXXXXXXX                   \\\n\t * ```\n\t * @min 0\n\t * @max 2\n\t */\n\t@timeRange(0)\n\tattack: Time;\n\n\t/**\n\t * After the attack portion of the envelope, the value will fall\n\t * over the duration of the decay time to it's sustain value.\n\t * ```\n\t *           /\\\n\t *          / X\\\n\t *         /  XX\\\n\t *        /   XXX\\\n\t *       /    XXXX\\___________\n\t *      /     XXXXX           \\\n\t *     /      XXXXX            \\\n\t *    /       XXXXX             \\\n\t *   /        XXXXX              \\\n\t * ```\n\t * @min 0\n\t * @max 2\n\t */\n\t@timeRange(0)\n\tdecay: Time;\n\n\t/**\n\t * The sustain value is the value\n\t * which the envelope rests at after triggerAttack is\n\t * called, but before triggerRelease is invoked.\n\t * ```\n\t *           /\\\n\t *          /  \\\n\t *         /    \\\n\t *        /      \\\n\t *       /        \\___________\n\t *      /          XXXXXXXXXXX\\\n\t *     /           XXXXXXXXXXX \\\n\t *    /            XXXXXXXXXXX  \\\n\t *   /             XXXXXXXXXXX   \\\n\t * ```\n\t */\n\t@range(0, 1)\n\tsustain: NormalRange;\n\n\t/**\n\t * After triggerRelease is called, the envelope's\n\t * value will fall to it's miminum value over the\n\t * duration of the release time.\n\t * ```\n\t *           /\\\n\t *          /  \\\n\t *         /    \\\n\t *        /      \\\n\t *       /        \\___________\n\t *      /                    X\\\n\t *     /                     XX\\\n\t *    /                      XXX\\\n\t *   /                       XXXX\\\n\t * ```\n\t * @min 0\n\t * @max 5\n\t */\n\t@timeRange(0)\n\trelease: Time;\n\n\t/**\n\t * The automation curve type for the attack\n\t */\n\tprivate _attackCurve!: InternalEnvelopeCurve;\n\n\t/**\n\t * The automation curve type for the decay\n\t */\n\tprivate _decayCurve!: BasicEnvelopeCurve;\n\n\t/**\n\t * The automation curve type for the release\n\t */\n\tprivate _releaseCurve!: InternalEnvelopeCurve;\n\n\t/**\n\t * the signal which is output.\n\t */\n\tprotected _sig: Signal<\"normalRange\"> = new Signal({\n\t\tcontext: this.context,\n\t\tvalue: 0,\n\t});\n\n\t/**\n\t * The output signal of the envelope\n\t */\n\toutput: OutputNode = this._sig;\n\n\t/**\n\t * Envelope has no input\n\t */\n\tinput: InputNode | undefined = undefined;\n\n\t/**\n\t * @param attack The amount of time it takes for the envelope to go from\n\t *                        0 to it's maximum value.\n\t * @param decay\tThe period of time after the attack that it takes for the envelope\n\t *                      \tto fall to the sustain value. Value must be greater than 0.\n\t * @param sustain\tThe percent of the maximum value that the envelope rests at until\n\t *                               \tthe release is triggered.\n\t * @param release\tThe amount of time after the release is triggered it takes to reach 0.\n\t *                        \tValue must be greater than 0.\n\t */\n\tconstructor(attack?: Time, decay?: Time, sustain?: NormalRange, release?: Time);\n\tconstructor(options?: Partial<EnvelopeOptions>)\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Envelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]));\n\t\tconst options = optionsFromArguments(Envelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]);\n\n\t\tthis.attack = options.attack;\n\t\tthis.decay = options.decay;\n\t\tthis.sustain = options.sustain;\n\t\tthis.release = options.release;\n\t\tthis.attackCurve = options.attackCurve;\n\t\tthis.releaseCurve = options.releaseCurve;\n\t\tthis.decayCurve = options.decayCurve;\n\t}\n\n\tstatic getDefaults(): EnvelopeOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tattack: 0.01,\n\t\t\tattackCurve: \"linear\" as EnvelopeCurveName,\n\t\t\tdecay: 0.1,\n\t\t\tdecayCurve: \"exponential\" as BasicEnvelopeCurve,\n\t\t\trelease: 1,\n\t\t\treleaseCurve: \"exponential\" as EnvelopeCurveName,\n\t\t\tsustain: 0.5,\n\t\t});\n\t}\n\n\t/**\n\t * Read the current value of the envelope. Useful for\n\t * synchronizing visual output to the envelope.\n\t */\n\tget value(): NormalRange {\n\t\treturn this.getValueAtTime(this.now());\n\t}\n\n\t/**\n\t * Get the curve\n\t * @param  curve\n\t * @param  direction  In/Out\n\t * @return The curve name\n\t */\n\tprivate _getCurve(curve: InternalEnvelopeCurve, direction: EnvelopeDirection): EnvelopeCurve {\n\t\tif (isString(curve)) {\n\t\t\treturn curve;\n\t\t} else {\n\t\t\t// look up the name in the curves array\n\t\t\tlet curveName: EnvelopeCurveName;\n\t\t\tfor (curveName in EnvelopeCurves) {\n\t\t\t\tif (EnvelopeCurves[curveName][direction] === curve) {\n\t\t\t\t\treturn curveName;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// return the custom curve\n\t\t\treturn curve;\n\t\t}\n\t}\n\n\t/**\n\t * Assign a the curve to the given name using the direction\n\t * @param  name\n\t * @param  direction In/Out\n\t * @param  curve\n\t */\n\tprivate _setCurve(\n\t\tname: \"_attackCurve\" | \"_decayCurve\" | \"_releaseCurve\",\n\t\tdirection: EnvelopeDirection,\n\t\tcurve: EnvelopeCurve,\n\t): void {\n\t\t// check if it's a valid type\n\t\tif (isString(curve) && Reflect.has(EnvelopeCurves, curve)) {\n\t\t\tconst curveDef = EnvelopeCurves[curve];\n\t\t\tif (isObject(curveDef)) {\n\t\t\t\tif (name !== \"_decayCurve\") {\n\t\t\t\t\tthis[name] = curveDef[direction];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis[name] = curveDef;\n\t\t\t}\n\t\t} else if (isArray(curve) && name !== \"_decayCurve\") {\n\t\t\tthis[name] = curve;\n\t\t} else {\n\t\t\tthrow new Error(\"Envelope: invalid curve: \" + curve);\n\t\t}\n\t}\n\n\t/**\n\t * The shape of the attack.\n\t * Can be any of these strings:\n\t * * \"linear\"\n\t * * \"exponential\"\n\t * * \"sine\"\n\t * * \"cosine\"\n\t * * \"bounce\"\n\t * * \"ripple\"\n\t * * \"step\"\n\t *\n\t * Can also be an array which describes the curve. Values\n\t * in the array are evenly subdivided and linearly\n\t * interpolated over the duration of the attack.\n\t * @example\n\t * return Tone.Offline(() => {\n\t * \tconst env = new Tone.Envelope(0.4).toDestination();\n\t * \tenv.attackCurve = \"linear\";\n\t * \tenv.triggerAttack();\n\t * }, 1, 1);\n\t */\n\tget attackCurve(): EnvelopeCurve {\n\t\treturn this._getCurve(this._attackCurve, \"In\");\n\t}\n\tset attackCurve(curve) {\n\t\tthis._setCurve(\"_attackCurve\", \"In\", curve);\n\t}\n\n\t/**\n\t * The shape of the release. See the attack curve types.\n\t * @example\n\t * return Tone.Offline(() => {\n\t * \tconst env = new Tone.Envelope({\n\t * \t\trelease: 0.8\n\t * \t}).toDestination();\n\t * \tenv.triggerAttack();\n\t * \t// release curve could also be defined by an array\n\t * \tenv.releaseCurve = [1, 0.3, 0.4, 0.2, 0.7, 0];\n\t * \tenv.triggerRelease(0.2);\n\t * }, 1, 1);\n\t */\n\tget releaseCurve(): EnvelopeCurve {\n\t\treturn this._getCurve(this._releaseCurve, \"Out\");\n\t}\n\tset releaseCurve(curve) {\n\t\tthis._setCurve(\"_releaseCurve\", \"Out\", curve);\n\t}\n\n\t/**\n\t * The shape of the decay either \"linear\" or \"exponential\"\n\t * @example\n\t * return Tone.Offline(() => {\n\t * \tconst env = new Tone.Envelope({\n\t * \t\tsustain: 0.1,\n\t * \t\tdecay: 0.5\n\t * \t}).toDestination();\n\t * \tenv.decayCurve = \"linear\";\n\t * \tenv.triggerAttack();\n\t * }, 1, 1);\n\t */\n\tget decayCurve(): BasicEnvelopeCurve {\n\t\treturn this._decayCurve;\n\t}\n\tset decayCurve(curve) {\n\t\tassert([\"linear\", \"exponential\"].some(c => c === curve), `Invalid envelope curve: ${curve}`);\n\t\tthis._decayCurve = curve;\n\t}\n\n\t/**\n\t * Trigger the attack/decay portion of the ADSR envelope.\n\t * @param  time When the attack should start.\n\t * @param velocity The velocity of the envelope scales the vales.\n\t *                             number between 0-1\n\t * @example\n\t * const env = new Tone.AmplitudeEnvelope().toDestination();\n\t * const osc = new Tone.Oscillator().connect(env).start();\n\t * // trigger the attack 0.5 seconds from now with a velocity of 0.2\n\t * env.triggerAttack(\"+0.5\", 0.2);\n\t */\n\ttriggerAttack(time?: Time, velocity: NormalRange = 1): this {\n\t\tthis.log(\"triggerAttack\", time, velocity);\n\t\ttime = this.toSeconds(time);\n\t\tconst originalAttack = this.toSeconds(this.attack);\n\t\tlet attack = originalAttack;\n\t\tconst decay = this.toSeconds(this.decay);\n\t\t// check if it's not a complete attack\n\t\tconst currentValue = this.getValueAtTime(time);\n\t\tif (currentValue > 0) {\n\t\t\t// subtract the current value from the attack time\n\t\t\tconst attackRate = 1 / attack;\n\t\t\tconst remainingDistance = 1 - currentValue;\n\t\t\t// the attack is now the remaining time\n\t\t\tattack = remainingDistance / attackRate;\n\t\t}\n\t\t// attack\n\t\tif (attack < this.sampleTime) {\n\t\t\tthis._sig.cancelScheduledValues(time);\n\t\t\t// case where the attack time is 0 should set instantly\n\t\t\tthis._sig.setValueAtTime(velocity, time);\n\t\t} else if (this._attackCurve === \"linear\") {\n\t\t\tthis._sig.linearRampTo(velocity, attack, time);\n\t\t} else if (this._attackCurve === \"exponential\") {\n\t\t\tthis._sig.targetRampTo(velocity, attack, time);\n\t\t} else {\n\t\t\tthis._sig.cancelAndHoldAtTime(time);\n\t\t\tlet curve = this._attackCurve;\n\t\t\t// find the starting position in the curve\n\t\t\tfor (let i = 1; i < curve.length; i++) {\n\t\t\t\t// the starting index is between the two values\n\t\t\t\tif (curve[i - 1] <= currentValue && currentValue <= curve[i]) {\n\t\t\t\t\tcurve = this._attackCurve.slice(i);\n\t\t\t\t\t// the first index is the current value\n\t\t\t\t\tcurve[0] = currentValue;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._sig.setValueCurveAtTime(curve, time, attack, velocity);\n\t\t}\n\t\t// decay\n\t\tif (decay && this.sustain < 1) {\n\t\t\tconst decayValue = velocity * this.sustain;\n\t\t\tconst decayStart = time + attack;\n\t\t\tthis.log(\"decay\", decayStart);\n\t\t\tif (this._decayCurve === \"linear\") {\n\t\t\t\tthis._sig.linearRampToValueAtTime(decayValue, decay + decayStart);\n\t\t\t} else {\n\t\t\t\tthis._sig.exponentialApproachValueAtTime(decayValue, decayStart, decay);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Triggers the release of the envelope.\n\t * @param  time When the release portion of the envelope should start.\n\t * @example\n\t * const env = new Tone.AmplitudeEnvelope().toDestination();\n\t * const osc = new Tone.Oscillator({\n\t * \ttype: \"sawtooth\"\n\t * }).connect(env).start();\n\t * env.triggerAttack();\n\t * // trigger the release half a second after the attack\n\t * env.triggerRelease(\"+0.5\");\n\t */\n\ttriggerRelease(time?: Time): this {\n\t\tthis.log(\"triggerRelease\", time);\n\t\ttime = this.toSeconds(time);\n\t\tconst currentValue = this.getValueAtTime(time);\n\t\tif (currentValue > 0) {\n\t\t\tconst release = this.toSeconds(this.release);\n\t\t\tif (release < this.sampleTime) {\n\t\t\t\tthis._sig.setValueAtTime(0, time);\n\t\t\t} else if (this._releaseCurve === \"linear\") {\n\t\t\t\tthis._sig.linearRampTo(0, release, time);\n\t\t\t} else if (this._releaseCurve === \"exponential\") {\n\t\t\t\tthis._sig.targetRampTo(0, release, time);\n\t\t\t} else {\n\t\t\t\tassert(isArray(this._releaseCurve), \"releaseCurve must be either 'linear', 'exponential' or an array\");\n\t\t\t\tthis._sig.cancelAndHoldAtTime(time);\n\t\t\t\tthis._sig.setValueCurveAtTime(this._releaseCurve, time, release, currentValue);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the scheduled value at the given time. This will\n\t * return the unconverted (raw) value.\n\t * @example\n\t * const env = new Tone.Envelope(0.5, 1, 0.4, 2);\n\t * env.triggerAttackRelease(2);\n\t * setInterval(() => console.log(env.getValueAtTime(Tone.now())), 100);\n\t */\n\tgetValueAtTime(time: Time): NormalRange {\n\t\treturn this._sig.getValueAtTime(time);\n\t}\n\n\t/**\n\t * triggerAttackRelease is shorthand for triggerAttack, then waiting\n\t * some duration, then triggerRelease.\n\t * @param duration The duration of the sustain.\n\t * @param time When the attack should be triggered.\n\t * @param velocity The velocity of the envelope.\n\t * @example\n\t * const env = new Tone.AmplitudeEnvelope().toDestination();\n\t * const osc = new Tone.Oscillator().connect(env).start();\n\t * // trigger the release 0.5 seconds after the attack\n\t * env.triggerAttackRelease(0.5);\n\t */\n\ttriggerAttackRelease(duration: Time, time?: Time, velocity: NormalRange = 1): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis.triggerAttack(time, velocity);\n\t\tthis.triggerRelease(time + this.toSeconds(duration));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Cancels all scheduled envelope changes after the given time.\n\t */\n\tcancel(after?: Time): this {\n\t\tthis._sig.cancelScheduledValues(this.toSeconds(after));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Connect the envelope to a destination node.\n\t */\n\tconnect(destination: InputNode, outputNumber = 0, inputNumber = 0): this {\n\t\tconnectSignal(this, destination, outputNumber, inputNumber);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Render the envelope curve to an array of the given length. \n\t * Good for visualizing the envelope curve. Rescales the duration of the\n\t * envelope to fit the length.\n\t */\n\tasync asArray(length = 1024): Promise<Float32Array> {\n\t\tconst duration = length / this.context.sampleRate;\n\t\tconst context = new OfflineContext(1, duration, this.context.sampleRate);\n\t\t// normalize the ADSR for the given duration with 20% sustain time\n\t\tconst attackPortion = this.toSeconds(this.attack) + this.toSeconds(this.decay);\n\t\tconst envelopeDuration = attackPortion + this.toSeconds(this.release);\n\t\tconst sustainTime = envelopeDuration * 0.1;\n\t\tconst totalDuration = envelopeDuration + sustainTime;\n\t\t// @ts-ignore\n\t\tconst clone = new this.constructor(Object.assign(this.get(), {\n\t\t\tattack: duration * this.toSeconds(this.attack) / totalDuration,\n\t\t\tdecay: duration * this.toSeconds(this.decay) / totalDuration,\n\t\t\trelease: duration * this.toSeconds(this.release) / totalDuration,\n\t\t\tcontext\n\t\t})) as Envelope;\n\t\tclone._sig.toDestination();\n\t\tclone.triggerAttackRelease(duration * (attackPortion + sustainTime) / totalDuration, 0);\n\t\tconst buffer = await context.render();\n\t\treturn buffer.getChannelData(0);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._sig.dispose();\n\t\treturn this;\n\t}\n}\n\ninterface EnvelopeCurveObject {\n\tIn: number[];\n\tOut: number[];\n}\n\ntype EnvelopeDirection = keyof EnvelopeCurveObject;\n\ninterface EnvelopeCurveMap {\n\tlinear: \"linear\";\n\texponential: \"exponential\";\n\tbounce: EnvelopeCurveObject;\n\tcosine: EnvelopeCurveObject;\n\tsine: EnvelopeCurveObject;\n\tripple: EnvelopeCurveObject;\n\tstep: EnvelopeCurveObject;\n}\n\ntype EnvelopeCurveName = keyof EnvelopeCurveMap;\n\n/**\n * Generate some complex envelope curves.\n */\nconst EnvelopeCurves: EnvelopeCurveMap = (() => {\n\n\tconst curveLen = 128;\n\n\tlet i: number;\n\tlet k: number;\n\n\t// cosine curve\n\tconst cosineCurve: number[] = [];\n\tfor (i = 0; i < curveLen; i++) {\n\t\tcosineCurve[i] = Math.sin((i / (curveLen - 1)) * (Math.PI / 2));\n\t}\n\n\t// ripple curve\n\tconst rippleCurve: number[] = [];\n\tconst rippleCurveFreq = 6.4;\n\tfor (i = 0; i < curveLen - 1; i++) {\n\t\tk = (i / (curveLen - 1));\n\t\tconst sineWave = Math.sin(k * (Math.PI * 2) * rippleCurveFreq - Math.PI / 2) + 1;\n\t\trippleCurve[i] = sineWave / 10 + k * 0.83;\n\t}\n\trippleCurve[curveLen - 1] = 1;\n\n\t// stairs curve\n\tconst stairsCurve: number[] = [];\n\tconst steps = 5;\n\tfor (i = 0; i < curveLen; i++) {\n\t\tstairsCurve[i] = Math.ceil((i / (curveLen - 1)) * steps) / steps;\n\t}\n\n\t// in-out easing curve\n\tconst sineCurve: number[] = [];\n\tfor (i = 0; i < curveLen; i++) {\n\t\tk = i / (curveLen - 1);\n\t\tsineCurve[i] = 0.5 * (1 - Math.cos(Math.PI * k));\n\t}\n\n\t// a bounce curve\n\tconst bounceCurve: number[] = [];\n\tfor (i = 0; i < curveLen; i++) {\n\t\tk = i / (curveLen - 1);\n\t\tconst freq = Math.pow(k, 3) * 4 + 0.2;\n\t\tconst val = Math.cos(freq * Math.PI * 2 * k);\n\t\tbounceCurve[i] = Math.abs(val * (1 - k));\n\t}\n\n\t/**\n\t * Invert a value curve to make it work for the release\n\t */\n\tfunction invertCurve(curve: number[]): number[] {\n\t\tconst out = new Array(curve.length);\n\t\tfor (let j = 0; j < curve.length; j++) {\n\t\t\tout[j] = 1 - curve[j];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t * reverse the curve\n\t */\n\tfunction reverseCurve(curve: number[]): number[] {\n\t\treturn curve.slice(0).reverse();\n\t}\n\n\t/**\n\t * attack and release curve arrays\n\t */\n\treturn {\n\t\tbounce: {\n\t\t\tIn: invertCurve(bounceCurve),\n\t\t\tOut: bounceCurve,\n\t\t},\n\t\tcosine: {\n\t\t\tIn: cosineCurve,\n\t\t\tOut: reverseCurve(cosineCurve),\n\t\t},\n\t\texponential: \"exponential\" as \"exponential\",\n\t\tlinear: \"linear\" as \"linear\",\n\t\tripple: {\n\t\t\tIn: rippleCurve,\n\t\t\tOut: invertCurve(rippleCurve),\n\t\t},\n\t\tsine: {\n\t\t\tIn: sineCurve,\n\t\t\tOut: invertCurve(sineCurve),\n\t\t},\n\t\tstep: {\n\t\t\tIn: stairsCurve,\n\t\t\tOut: invertCurve(stairsCurve),\n\t\t},\n\t};\n})();\n", "import { FrequencyClass } from \"../core/type/Frequency\";\nimport { Cents, Frequency, NormalRange, Seconds, Time } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { Instrument, InstrumentOptions } from \"../instrument/Instrument\";\nimport { Signal } from \"../signal/Signal\";\nimport { timeRange } from \"../core/util/Decorator\";\n\ntype onSilenceCallback = (instrument: Monophonic<any>) => void;\n\nexport interface MonophonicOptions extends InstrumentOptions {\n\tportamento: Seconds;\n\tonsilence: onSilenceCallback;\n\tdetune: Cents;\n}\n\n/**\n * Abstract base class for other monophonic instruments to extend.\n */\nexport abstract class Monophonic<Options extends MonophonicOptions> extends Instrument<Options> {\n\n\t/**\n\t * The glide time between notes.\n\t */\n\t@timeRange(0)\n\tportamento: Seconds;\n\n\t/**\n\t * Invoked when the release has finished and the output is silent.\n\t */\n\tonsilence: onSilenceCallback;\n\n\t/**\n\t * The instrument's frequency signal.\n\t */\n\tabstract readonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * The instrument's detune control signal.\n\t */\n\tabstract readonly detune: Signal<\"cents\">;\n\n\tconstructor(options?: Partial<MonophonicOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Monophonic.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Monophonic.getDefaults(), arguments);\n\n\t\tthis.portamento = options.portamento;\n\t\tthis.onsilence = options.onsilence;\n\t}\n\n\tstatic getDefaults(): MonophonicOptions {\n\t\treturn Object.assign(Instrument.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tonsilence: noOp,\n\t\t\tportamento: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Trigger the attack of the note optionally with a given velocity.\n\t * @param  note The note to trigger.\n\t * @param  time When the note should start.\n\t * @param  velocity The velocity scaler determines how \"loud\" the note will be triggered.\n\t * @example\n\t * const synth = new Tone.Synth().toDestination();\n\t * // trigger the note a half second from now at half velocity\n\t * synth.triggerAttack(\"C4\", \"+0.5\", 0.5);\n\t */\n\ttriggerAttack(note: Frequency | FrequencyClass, time?: Time, velocity: NormalRange = 1): this {\n\t\tthis.log(\"triggerAttack\", note, time, velocity);\n\t\tconst seconds = this.toSeconds(time);\n\t\tthis._triggerEnvelopeAttack(seconds, velocity);\n\t\tthis.setNote(note, seconds);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Trigger the release portion of the envelope\n\t * @param  time If no time is given, the release happens immediatly\n\t * @example\n\t * const synth = new Tone.Synth().toDestination();\n\t * synth.triggerAttack(\"C4\");\n\t * // trigger the release a second from now\n\t * synth.triggerRelease(\"+1\");\n\t */\n\ttriggerRelease(time?: Time): this {\n\t\tthis.log(\"triggerRelease\", time);\n\t\tconst seconds = this.toSeconds(time);\n\t\tthis._triggerEnvelopeRelease(seconds);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Internal method which starts the envelope attack\n\t */\n\tprotected abstract _triggerEnvelopeAttack(time: Seconds, velocity: NormalRange): void;\n\n\t/**\n\t * Internal method which starts the envelope release\n\t */\n\tprotected abstract _triggerEnvelopeRelease(time: Seconds): void;\n\n\t/**\n\t * Get the level of the output at the given time. Measures\n\t * the envelope(s) value at the time.\n\t * @param time The time to query the envelope value\n\t * @return The output level between 0-1\n\t */\n\tabstract getLevelAtTime(time: Time): NormalRange;\n\n\t/**\n\t * Set the note at the given time. If no time is given, the note\n\t * will set immediately.\n\t * @param note The note to change to.\n\t * @param  time The time when the note should be set.\n\t * @example\n\t * const synth = new Tone.Synth().toDestination();\n\t * synth.triggerAttack(\"C4\");\n\t * // change to F#6 in one quarter note from now.\n\t * synth.setNote(\"F#6\", \"+4n\");\n\t */\n\tsetNote(note: Frequency | FrequencyClass, time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst computedFrequency = note instanceof FrequencyClass ? note.toFrequency() : note;\n\t\tif (this.portamento > 0 && this.getLevelAtTime(computedTime) > 0.05) {\n\t\t\tconst portTime = this.toSeconds(this.portamento);\n\t\t\tthis.frequency.exponentialRampTo(computedFrequency, portTime, computedTime);\n\t\t} else {\n\t\t\tthis.frequency.setValueAtTime(computedFrequency, computedTime);\n\t\t}\n\t\treturn this;\n\t}\n}\n", "import { Gain } from \"../../core/context/Gain\";\nimport { NormalRange, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Envelope, EnvelopeOptions } from \"./Envelope\";\n\n/**\n * AmplitudeEnvelope is a Tone.Envelope connected to a gain node.\n * Unlike Tone.Envelope, which outputs the envelope's value, AmplitudeEnvelope accepts\n * an audio signal as the input and will apply the envelope to the amplitude\n * of the signal.\n * Read more about ADSR Envelopes on [Wikipedia](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope).\n *\n * @example\n * return Tone.Offline(() => {\n * \tconst ampEnv = new Tone.AmplitudeEnvelope({\n * \t\tattack: 0.1,\n * \t\tdecay: 0.2,\n * \t\tsustain: 1.0,\n * \t\trelease: 0.8\n * \t}).toDestination();\n * \t// create an oscillator and connect it\n * \tconst osc = new Tone.Oscillator().connect(ampEnv).start();\n * \t// trigger the envelopes attack and release \"8t\" apart\n * \tampEnv.triggerAttackRelease(\"8t\");\n * }, 1.5, 1);\n * @category Component\n */\nexport class AmplitudeEnvelope extends Envelope {\n\n\treadonly name: string = \"AmplitudeEnvelope\";\n\n\tprivate _gainNode: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\toutput: Gain = this._gainNode;\n\tinput: Gain = this._gainNode;\n\n\t/**\n\t * @param attack The amount of time it takes for the envelope to go from 0 to it's maximum value.\n\t * @param decay\tThe period of time after the attack that it takes for the envelope\n\t *                      \tto fall to the sustain value. Value must be greater than 0.\n\t * @param sustain\tThe percent of the maximum value that the envelope rests at until\n\t *                               \tthe release is triggered.\n\t * @param release\tThe amount of time after the release is triggered it takes to reach 0.\n\t *                        \tValue must be greater than 0.\n\t */\n\tconstructor(attack?: Time, decay?: Time, sustain?: NormalRange, release?: Time);\n\tconstructor(options?: Partial<EnvelopeOptions>)\n\tconstructor() {\n\t\tsuper(optionsFromArguments(AmplitudeEnvelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]));\n\t\tthis._sig.connect(this._gainNode.gain);\n\t\tthis.output = this._gainNode;\n\t\tthis.input = this._gainNode;\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._gainNode.dispose();\n\t\treturn this;\n\t}\n}\n", "import { AmplitudeEnvelope } from \"../component/envelope/AmplitudeEnvelope\";\nimport { Envelope, EnvelopeOptions } from \"../component/envelope/Envelope\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { NormalRange, Seconds, Time } from \"../core/type/Units\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { RecursivePartial } from \"../core/util/Interface\";\nimport { Signal } from \"../signal/Signal\";\nimport { OmniOscillator } from \"../source/oscillator/OmniOscillator\";\nimport { OmniOscillatorOptions, OmniOscillatorSynthOptions } from \"../source/oscillator/OscillatorInterface\";\nimport { Source } from \"../source/Source\";\nimport { Monophonic, MonophonicOptions } from \"./Monophonic\";\n\nexport interface SynthOptions extends MonophonicOptions {\n\toscillator: OmniOscillatorSynthOptions;\n\tenvelope: Omit<EnvelopeOptions, keyof ToneAudioNodeOptions>;\n}\n\n/**\n * Synth is composed simply of a [[OmniOscillator]] routed through an [[AmplitudeEnvelope]].\n * ```\n * +----------------+   +-------------------+\n * | OmniOscillator +>--> AmplitudeEnvelope +>--> Output\n * +----------------+   +-------------------+\n * ```\n * @example\n * const synth = new Tone.Synth().toDestination();\n * synth.triggerAttackRelease(\"C4\", \"8n\");\n * @category Instrument\n */\nexport class Synth<Options extends SynthOptions = SynthOptions> extends Monophonic<Options> {\n\n\treadonly name: string = \"Synth\";\n\n\t/**\n\t * The oscillator.\n\t */\n\treadonly oscillator: OmniOscillator<any>;\n\n\t/**\n\t * The frequency signal\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * The detune signal\n\t */\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * The envelope\n\t */\n\treadonly envelope: AmplitudeEnvelope;\n\n\t/**\n\t * @param options the options available for the synth.\n\t */\n\tconstructor(options?: RecursivePartial<SynthOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Synth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Synth.getDefaults(), arguments);\n\n\t\tthis.oscillator = new OmniOscillator(Object.assign({\n\t\t\tcontext: this.context,\n\t\t\tdetune: options.detune,\n\t\t\tonstop: () => this.onsilence(this),\n\t\t}, options.oscillator));\n\n\t\tthis.frequency = this.oscillator.frequency;\n\t\tthis.detune = this.oscillator.detune;\n\n\t\tthis.envelope = new AmplitudeEnvelope(Object.assign({\n\t\t\tcontext: this.context,\n\t\t}, options.envelope));\n\n\t\t// connect the oscillators to the output\n\t\tthis.oscillator.chain(this.envelope, this.output);\n\t\treadOnly(this, [\"oscillator\", \"frequency\", \"detune\", \"envelope\"]);\n\t}\n\n\tstatic getDefaults(): SynthOptions {\n\t\treturn Object.assign(Monophonic.getDefaults(), {\n\t\t\tenvelope: Object.assign(\n\t\t\t\tomitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())),\n\t\t\t\t{\n\t\t\t\t\tattack: 0.005,\n\t\t\t\t\tdecay: 0.1,\n\t\t\t\t\trelease: 1,\n\t\t\t\t\tsustain: 0.3,\n\t\t\t\t},\n\t\t\t),\n\t\t\toscillator: Object.assign(\n\t\t\t\tomitFromObject(OmniOscillator.getDefaults(), [...Object.keys(Source.getDefaults()), \"frequency\", \"detune\"]),\n\t\t\t\t{\n\t\t\t\t\ttype: \"triangle\",\n\t\t\t\t},\n\t\t\t) as OmniOscillatorOptions,\n\t\t});\n\t}\n\n\t/**\n\t * start the attack portion of the envelope\n\t * @param time the time the attack should start\n\t * @param velocity the velocity of the note (0-1)\n\t */\n\tprotected _triggerEnvelopeAttack(time: Seconds, velocity: number): void {\n\t\t// the envelopes\n\t\tthis.envelope.triggerAttack(time, velocity);\n\t\tthis.oscillator.start(time);\n\t\t// if there is no release portion, stop the oscillator\n\t\tif (this.envelope.sustain === 0) {\n\t\t\tconst computedAttack = this.toSeconds(this.envelope.attack);\n\t\t\tconst computedDecay = this.toSeconds(this.envelope.decay);\n\t\t\tthis.oscillator.stop(time + computedAttack + computedDecay);\n\t\t}\n\t}\n\n\t/**\n\t * start the release portion of the envelope\n\t * @param time the time the release should start\n\t */\n\tprotected _triggerEnvelopeRelease(time: Seconds): void {\n\t\tthis.envelope.triggerRelease(time);\n\t\tthis.oscillator.stop(time + this.toSeconds(this.envelope.release));\n\t}\n\n\tgetLevelAtTime(time: Time): NormalRange {\n\t\ttime = this.toSeconds(time);\n\t\treturn this.envelope.getValueAtTime(time);\n\t}\n\n\t/**\n\t * clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.oscillator.dispose();\n\t\tthis.envelope.dispose();\n\t\treturn this;\n\t}\n}\n", "import { Signal } from \"../signal/Signal\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Gain } from \"../core/context/Gain\";\nimport { NormalRange, Positive, Seconds, Time } from \"../core/type/Units\";\nimport { Envelope, EnvelopeOptions } from \"../component/envelope/Envelope\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { Monophonic } from \"./Monophonic\";\nimport { OmniOscillator } from \"../source/oscillator/OmniOscillator\";\nimport { OmniOscillatorSynthOptions } from \"../source/oscillator/OscillatorInterface\";\nimport { Source } from \"../source/Source\";\nimport { Synth, SynthOptions } from \"./Synth\";\nimport { AmplitudeEnvelope } from \"../component/envelope/AmplitudeEnvelope\";\nimport { readOnly, RecursivePartial } from \"../core/util/Interface\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\n\nexport interface ModulationSynthOptions extends SynthOptions {\n\tharmonicity: Positive;\n\tmodulationEnvelope: Omit<EnvelopeOptions, keyof ToneAudioNodeOptions>;\n\tmodulation: OmniOscillatorSynthOptions;\n}\n/**\n * Base class for both AM and FM synths\n */\nexport abstract class ModulationSynth<Options extends ModulationSynthOptions> extends Monophonic<Options> {\n\n\treadonly name: string = \"ModulationSynth\";\n\n\t/**\n\t * The carrier voice.\n\t */\n\tprotected _carrier: Synth;\n\n\t/**\n\t * The modulator voice.\n\t */\n\n\tprotected _modulator: Synth;\n\n\t/**\n\t * The carrier's oscillator\n\t */\n\treadonly oscillator: OmniOscillator<any>;\n\n\t/**\n\t * The carrier's envelope\n\t */\n\treadonly envelope: AmplitudeEnvelope;\n\n\t/**\n\t * The modulator's oscillator which is applied to the amplitude of the oscillator\n\t */\n\treadonly modulation: OmniOscillator<any>;\n\n\t/**\n\t * The modulator's envelope\n\t */\n\treadonly modulationEnvelope: AmplitudeEnvelope;\n\n\t/**\n\t * The frequency control\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * The detune in cents\n\t */\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * Harmonicity is the ratio between the two voices. A harmonicity of\n\t * 1 is no change. Harmonicity = 2 means a change of an octave.\n\t * @example\n\t * const amSynth = new Tone.AMSynth().toDestination();\n\t * // pitch the modulator an octave below oscillator\n\t * amSynth.harmonicity.value = 0.5;\n\t * amSynth.triggerAttackRelease(\"C5\", \"4n\");\n\t */\n\treadonly harmonicity: Multiply;\n\n\t/**\n\t * The node where the modulation happens\n\t */\n\tprotected _modulationNode: Gain;\n\n\tconstructor(options?: RecursivePartial<ModulationSynthOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(ModulationSynth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(ModulationSynth.getDefaults(), arguments);\n\n\t\tthis._carrier = new Synth({\n\t\t\tcontext: this.context,\n\t\t\toscillator: options.oscillator,\n\t\t\tenvelope: options.envelope,\n\t\t\tonsilence: () => this.onsilence(this),\n\t\t\tvolume: -10,\n\t\t});\n\t\tthis._modulator = new Synth({\n\t\t\tcontext: this.context,\n\t\t\toscillator: options.modulation,\n\t\t\tenvelope: options.modulationEnvelope,\n\t\t\tvolume: -10,\n\t\t});\n\n\t\tthis.oscillator = this._carrier.oscillator;\n\t\tthis.envelope = this._carrier.envelope;\n\t\tthis.modulation = this._modulator.oscillator;\n\t\tthis.modulationEnvelope = this._modulator.envelope;\n\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t});\n\t\tthis.detune = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.detune,\n\t\t\tunits: \"cents\"\n\t\t});\n\t\tthis.harmonicity = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.harmonicity,\n\t\t\tminValue: 0,\n\t\t});\n\t\tthis._modulationNode = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: 0,\n\t\t});\n\n\t\treadOnly(this, [\"frequency\", \"harmonicity\", \"oscillator\", \"envelope\", \"modulation\", \"modulationEnvelope\", \"detune\"]);\n\t}\n\n\tstatic getDefaults(): ModulationSynthOptions {\n\t\treturn Object.assign(Monophonic.getDefaults(), {\n\t\t\tharmonicity: 3,\n\t\t\toscillator: Object.assign(\n\t\t\t\tomitFromObject(OmniOscillator.getDefaults(), [\n\t\t\t\t\t...Object.keys(Source.getDefaults()),\n\t\t\t\t\t\"frequency\",\n\t\t\t\t\t\"detune\"\n\t\t\t\t]),\n\t\t\t\t{\n\t\t\t\t\ttype: \"sine\"\n\t\t\t\t}\n\t\t\t) as OmniOscillatorSynthOptions,\n\t\t\tenvelope: Object.assign(\n\t\t\t\tomitFromObject(\n\t\t\t\t\tEnvelope.getDefaults(),\n\t\t\t\t\tObject.keys(ToneAudioNode.getDefaults())\n\t\t\t\t),\n\t\t\t\t{\n\t\t\t\t\tattack: 0.01,\n\t\t\t\t\tdecay: 0.01,\n\t\t\t\t\tsustain: 1,\n\t\t\t\t\trelease: 0.5\n\t\t\t\t}\n\t\t\t),\n\t\t\tmodulation: Object.assign(\n\t\t\t\tomitFromObject(OmniOscillator.getDefaults(), [\n\t\t\t\t\t...Object.keys(Source.getDefaults()),\n\t\t\t\t\t\"frequency\",\n\t\t\t\t\t\"detune\"\n\t\t\t\t]),\n\t\t\t\t{\n\t\t\t\t\ttype: \"square\"\n\t\t\t\t}\n\t\t\t) as OmniOscillatorSynthOptions,\n\t\t\tmodulationEnvelope: Object.assign(\n\t\t\t\tomitFromObject(\n\t\t\t\t\tEnvelope.getDefaults(),\n\t\t\t\t\tObject.keys(ToneAudioNode.getDefaults())\n\t\t\t\t),\n\t\t\t\t{\n\t\t\t\t\tattack: 0.5,\n\t\t\t\t\tdecay: 0.0,\n\t\t\t\t\tsustain: 1,\n\t\t\t\t\trelease: 0.5\n\t\t\t\t}\n\t\t\t)\n\t\t});\n\t}\n\n\t/**\n\t * Trigger the attack portion of the note\n\t */\n\tprotected _triggerEnvelopeAttack(time: Seconds, velocity: number): void {\n\t\t// @ts-ignore\n\t\tthis._carrier._triggerEnvelopeAttack(time, velocity);\n\t\t// @ts-ignore\n\t\tthis._modulator._triggerEnvelopeAttack(time, velocity);\n\t}\n\n\t/**\n\t * Trigger the release portion of the note\n\t */\n\tprotected _triggerEnvelopeRelease(time: Seconds) {\n\t\t// @ts-ignore\n\t\tthis._carrier._triggerEnvelopeRelease(time);\n\t\t// @ts-ignore\n\t\tthis._modulator._triggerEnvelopeRelease(time);\n\t\treturn this;\n\t}\n\n\tgetLevelAtTime(time: Time): NormalRange {\n\t\ttime = this.toSeconds(time);\n\t\treturn this.envelope.getValueAtTime(time);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._carrier.dispose();\n\t\tthis._modulator.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\tthis.harmonicity.dispose();\n\t\tthis._modulationNode.dispose();\n\t\treturn this;\n\t}\n}\n", "import { AudioToGain } from \"../signal/AudioToGain\";\nimport { RecursivePartial } from \"../core/util/Interface\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { ModulationSynth, ModulationSynthOptions } from \"./ModulationSynth\";\n\nexport type AMSynthOptions = ModulationSynthOptions;\n\n/**\n * AMSynth uses the output of one Tone.Synth to modulate the\n * amplitude of another Tone.Synth. The harmonicity (the ratio between\n * the two signals) affects the timbre of the output signal greatly.\n * Read more about Amplitude Modulation Synthesis on\n * [SoundOnSound](https://web.archive.org/web/20160404103653/http://www.soundonsound.com:80/sos/mar00/articles/synthsecrets.htm).\n *\n * @example\n * const synth = new Tone.AMSynth().toDestination();\n * synth.triggerAttackRelease(\"C4\", \"4n\");\n * \n * @category Instrument\n */\nexport class AMSynth extends ModulationSynth<AMSynthOptions> {\n\n\treadonly name: string = \"AMSynth\";\n\n\t/**\n\t * Scale the oscillator from -1,1 to 0-1\n\t */\n\tprivate _modulationScale: AudioToGain;\n\n\tconstructor(options?: RecursivePartial<AMSynthOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(AMSynth.getDefaults(), arguments));\n\n\t\tthis._modulationScale = new AudioToGain({\n\t\t\tcontext: this.context,\n\t\t});\n\n\t\t// control the two voices frequency\n\t\tthis.frequency.connect(this._carrier.frequency);\n\t\tthis.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t\tthis.detune.fan(this._carrier.detune, this._modulator.detune);\n\t\tthis._modulator.chain(this._modulationScale, this._modulationNode.gain);\n\t\tthis._carrier.chain(this._modulationNode, this.output);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._modulationScale.dispose();\n\t\treturn this;\n\t}\n}\n", "import { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Cents, Frequency, GainFactor } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Param } from \"../../core/context/Param\";\nimport { assert } from \"../../core/util/Debug\";\n\nexport interface BiquadFilterOptions extends ToneAudioNodeOptions {\n\tfrequency: Frequency;\n\tdetune: Cents;\n\tQ: number;\n\ttype: BiquadFilterType;\n\tgain: GainFactor;\n}\n\n/**\n * Thin wrapper around the native Web Audio [BiquadFilterNode](https://webaudio.github.io/web-audio-api/#biquadfilternode). \n * BiquadFilter is similar to [[Filter]] but doesn't have the option to set the \"rolloff\" value. \n * @category Component\n */\nexport class BiquadFilter extends ToneAudioNode<BiquadFilterOptions> {\n\treadonly name: string = \"BiquadFilter\";\n\n\treadonly input: BiquadFilterNode;\n\treadonly output: BiquadFilterNode;\n\n\t/**\n\t * The frequency of the filter\n\t */\n\treadonly frequency: Param<\"frequency\">;\n\n\t/**\n\t * A detune value, in cents, for the frequency.\n\t */\n\treadonly detune: Param<\"cents\">;\n\t\n\t/**\n\t * The Q factor of the filter.\n\t * For lowpass and highpass filters the Q value is interpreted to be in dB. \n\t * For these filters the nominal range is [−𝑄𝑙𝑖𝑚,𝑄𝑙𝑖𝑚] where 𝑄𝑙𝑖𝑚 is the largest value for which 10𝑄/20 does not overflow. This is approximately 770.63678.\n\t * For the bandpass, notch, allpass, and peaking filters, this value is a linear value. \n\t * The value is related to the bandwidth of the filter and hence should be a positive value. The nominal range is \n\t * [0,3.4028235𝑒38], the upper limit being the most-positive-single-float.\n\t * This is not used for the lowshelf and highshelf filters.\n\t */\n\treadonly Q: Param<\"number\">;\n\n\t/**\n\t * The gain of the filter. Its value is in dB units. The gain is only used for lowshelf, highshelf, and peaking filters.\n\t */\n\treadonly gain: Param<\"decibels\">;\n\n\tprivate readonly _filter: BiquadFilterNode;\n\n\t/**\n\t * @param frequency The cutoff frequency of the filter.\n\t * @param type The type of filter.\n\t */\n\tconstructor(frequency?: Frequency, type?: BiquadFilterType);\n\tconstructor(options?: Partial<BiquadFilterOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(BiquadFilter.getDefaults(), arguments, [\"frequency\", \"type\"]));\n\t\tconst options = optionsFromArguments(BiquadFilter.getDefaults(), arguments, [\"frequency\", \"type\"]);\n\n\t\tthis._filter = this.context.createBiquadFilter();\n\t\tthis.input = this.output = this._filter;\n\n\t\tthis.Q = new Param({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"number\",\n\t\t\tvalue: options.Q,\n\t\t\tparam: this._filter.Q,\n\t\t});\n\t\t\n\t\tthis.frequency = new Param({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t\tparam: this._filter.frequency,\n\t\t});\n\t\t\n\t\tthis.detune = new Param({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t\tparam: this._filter.detune,\n\t\t});\n\t\t\n\t\tthis.gain = new Param({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"decibels\",\n\t\t\tconvert: false,\n\t\t\tvalue: options.gain,\n\t\t\tparam: this._filter.gain,\n\t\t});\n\n\t\tthis.type = options.type;\n\t}\n\n\tstatic getDefaults(): BiquadFilterOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tQ: 1,\n\t\t\ttype: \"lowpass\" as const,\n\t\t\tfrequency: 350,\n\t\t\tdetune: 0,\n\t\t\tgain: 0,\n\t\t});\n\t}\n\n\t/**\n\t * The type of this BiquadFilterNode. For a complete list of types and their attributes, see the\n\t * [Web Audio API](https://webaudio.github.io/web-audio-api/#dom-biquadfiltertype-lowpass)\n\t */\n\tget type(): BiquadFilterType {\n\t\treturn this._filter.type;\n\t}\n\tset type(type) {\n\t\tconst types: BiquadFilterType[] = [\"lowpass\", \"highpass\", \"bandpass\",\n\t\t\t\"lowshelf\", \"highshelf\", \"notch\", \"allpass\", \"peaking\"];\n\t\tassert(types.indexOf(type) !== -1, `Invalid filter type: ${type}`);\n\t\tthis._filter.type = type;\n\t}\n\n\t/**\n\t * Get the frequency response curve. This curve represents how the filter\n\t * responses to frequencies between 20hz-20khz.\n\t * @param  len The number of values to return\n\t * @return The frequency response curve between 20-20kHz\n\t */\n\tgetFrequencyResponse(len = 128): Float32Array {\n\t\t// start with all 1s\n\t\tconst freqValues = new Float32Array(len);\n\t\tfor (let i = 0; i < len; i++) {\n\t\t\tconst norm = Math.pow(i / len, 2);\n\t\t\tconst freq = norm * (20000 - 20) + 20;\n\t\t\tfreqValues[i] = freq;\n\t\t}\n\t\tconst magValues = new Float32Array(len);\n\t\tconst phaseValues = new Float32Array(len);\n\t\t// clone the filter to remove any connections which may be changing the value\n\t\tconst filterClone = this.context.createBiquadFilter();\n\t\tfilterClone.type = this.type;\n\t\tfilterClone.Q.value = this.Q.value;\n\t\tfilterClone.frequency.value = this.frequency.value as number;\n\t\tfilterClone.gain.value = this.gain.value as number;\n\t\tfilterClone.getFrequencyResponse(freqValues, magValues, phaseValues);\n\t\treturn magValues;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._filter.disconnect();\n\t\tthis.Q.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.gain.dispose();\n\t\tthis.detune.dispose();\n\t\treturn this;\n\t}\n}\n", "import { Gain } from \"../../core/context/Gain\";\nimport { connectSeries, ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { Frequency } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { isNumber } from \"../../core/util/TypeCheck\";\nimport { Signal } from \"../../signal/Signal\";\nimport { assert } from \"../../core/util/Debug\";\nimport { BiquadFilter, BiquadFilterOptions } from \"./BiquadFilter\";\n\nexport type FilterRollOff = -12 | -24 | -48 | -96;\n\nexport type FilterOptions = BiquadFilterOptions & {\n\trolloff: FilterRollOff;\n}\n\n/**\n * Tone.Filter is a filter which allows for all of the same native methods\n * as the [BiquadFilterNode](http://webaudio.github.io/web-audio-api/#the-biquadfilternode-interface).\n * Tone.Filter has the added ability to set the filter rolloff at -12\n * (default), -24 and -48.\n * @example\n * const filter = new Tone.Filter(1500, \"highpass\").toDestination();\n * filter.frequency.rampTo(20000, 10);\n * const noise = new Tone.Noise().connect(filter).start();\n * @category Component\n */\nexport class Filter extends ToneAudioNode<FilterOptions> {\n\n\treadonly name: string = \"Filter\";\n\n\treadonly input = new Gain({ context: this.context });\n\treadonly output = new Gain({ context: this.context });\n\tprivate _filters: BiquadFilter[] = [];\n\n\t/**\n\t * the rolloff value of the filter\n\t */\n\tprivate _rolloff!: FilterRollOff;\n\tprivate _type: BiquadFilterType;\n\n\t/**\n\t * The Q or Quality of the filter\n\t */\n\treadonly Q: Signal<\"positive\">;\n\n\t/**\n\t * The cutoff frequency of the filter.\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * The detune parameter\n\t */\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * The gain of the filter, only used in certain filter types\n\t */\n\treadonly gain: Signal<\"decibels\">;\n\n\t/**\n\t * @param frequency The cutoff frequency of the filter.\n\t * @param type The type of filter.\n\t * @param rolloff The drop in decibels per octave after the cutoff frequency\n\t */\n\tconstructor(frequency?: Frequency, type?: BiquadFilterType, rolloff?: FilterRollOff);\n\tconstructor(options?: Partial<FilterOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Filter.getDefaults(), arguments, [\"frequency\", \"type\", \"rolloff\"]));\n\t\tconst options = optionsFromArguments(Filter.getDefaults(), arguments, [\"frequency\", \"type\", \"rolloff\"]);\n\n\t\tthis._filters = [];\n\n\t\tthis.Q = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.Q,\n\t\t});\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t});\n\t\tthis.detune = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t});\n\t\tthis.gain = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"decibels\",\n\t\t\tconvert: false,\n\t\t\tvalue: options.gain,\n\t\t});\n\t\tthis._type = options.type;\n\t\tthis.rolloff = options.rolloff;\n\t\treadOnly(this, [\"detune\", \"frequency\", \"gain\", \"Q\"]);\n\t}\n\n\tstatic getDefaults(): FilterOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tQ: 1,\n\t\t\tdetune: 0,\n\t\t\tfrequency: 350,\n\t\t\tgain: 0,\n\t\t\trolloff: -12 as FilterRollOff,\n\t\t\ttype: \"lowpass\" as BiquadFilterType,\n\t\t});\n\t}\n\n\t/**\n\t * The type of the filter. Types: \"lowpass\", \"highpass\",\n\t * \"bandpass\", \"lowshelf\", \"highshelf\", \"notch\", \"allpass\", or \"peaking\".\n\t */\n\tget type(): BiquadFilterType {\n\t\treturn this._type;\n\t}\n\tset type(type: BiquadFilterType) {\n\t\tconst types: BiquadFilterType[] = [\"lowpass\", \"highpass\", \"bandpass\",\n\t\t\t\"lowshelf\", \"highshelf\", \"notch\", \"allpass\", \"peaking\"];\n\t\tassert(types.indexOf(type) !== -1, `Invalid filter type: ${type}`);\n\t\tthis._type = type;\n\t\tthis._filters.forEach(filter => filter.type = type);\n\t}\n\n\t/**\n\t * The rolloff of the filter which is the drop in db\n\t * per octave. Implemented internally by cascading filters.\n\t * Only accepts the values -12, -24, -48 and -96.\n\t */\n\tget rolloff(): FilterRollOff {\n\t\treturn this._rolloff;\n\t}\n\tset rolloff(rolloff) {\n\t\tconst rolloffNum = isNumber(rolloff) ? rolloff : parseInt(rolloff, 10) as FilterRollOff;\n\t\tconst possibilities = [-12, -24, -48, -96];\n\t\tlet cascadingCount = possibilities.indexOf(rolloffNum);\n\t\t// check the rolloff is valid\n\t\tassert(cascadingCount !== -1, `rolloff can only be ${possibilities.join(\", \")}`);\n\t\tcascadingCount += 1;\n\n\t\tthis._rolloff = rolloffNum;\n\t\tthis.input.disconnect();\n\t\tthis._filters.forEach(filter => filter.disconnect());\n\n\t\tthis._filters = new Array(cascadingCount);\n\t\tfor (let count = 0; count < cascadingCount; count++) {\n\t\t\tconst filter = new BiquadFilter({\n\t\t\t\tcontext: this.context,\n\t\t\t});\n\t\t\tfilter.type = this._type;\n\t\t\tthis.frequency.connect(filter.frequency);\n\t\t\tthis.detune.connect(filter.detune);\n\t\t\tthis.Q.connect(filter.Q);\n\t\t\tthis.gain.connect(filter.gain);\n\t\t\tthis._filters[count] = filter;\n\t\t}\n\t\tthis._internalChannels = this._filters;\n\t\tconnectSeries(this.input, ...this._internalChannels, this.output);\n\t}\n\n\t/**\n\t * Get the frequency response curve. This curve represents how the filter\n\t * responses to frequencies between 20hz-20khz.\n\t * @param  len The number of values to return\n\t * @return The frequency response curve between 20-20kHz\n\t */\n\tgetFrequencyResponse(len = 128): Float32Array {\n\t\tconst filterClone = new BiquadFilter({\n\t\t\tfrequency: this.frequency.value,\n\t\t\tgain: this.gain.value,\n\t\t\tQ: this.Q.value,\n\t\t\ttype: this._type,\n\t\t\tdetune: this.detune.value,\n\t\t});\n\t\t// start with all 1s\n\t\tconst totalResponse = new Float32Array(len).map(() => 1);\n\t\tthis._filters.forEach(() => {\n\t\t\tconst response = filterClone.getFrequencyResponse(len);\n\t\t\tresponse.forEach((val, i) => totalResponse[i] *= val);\n\t\t});\n\t\tfilterClone.dispose();\n\t\treturn totalResponse;\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._filters.forEach(filter => {\n\t\t\tfilter.dispose();\n\t\t});\n\t\twritable(this, [\"detune\", \"frequency\", \"gain\", \"Q\"]);\n\t\tthis.frequency.dispose();\n\t\tthis.Q.dispose();\n\t\tthis.detune.dispose();\n\t\tthis.gain.dispose();\n\t\treturn this;\n\t}\n}\n", "import { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Frequency, Hertz, NormalRange, Time } from \"../../core/type/Units\";\nimport { Envelope, EnvelopeOptions } from \"./Envelope\";\nimport { Scale } from \"../../signal/Scale\";\nimport { Pow } from \"../../signal/Pow\";\nimport { assertRange } from \"../../core/util/Debug\";\n\nexport interface FrequencyEnvelopeOptions extends EnvelopeOptions {\n\tbaseFrequency: Frequency;\n\toctaves: number;\n\texponent: number;\n}\n/**\n * FrequencyEnvelope is an [[Envelope]] which ramps between [[baseFrequency]]\n * and [[octaves]]. It can also have an optional [[exponent]] to adjust the curve\n * which it ramps. \n * @example\n * const oscillator = new Tone.Oscillator().toDestination().start();\n * const freqEnv = new Tone.FrequencyEnvelope({\n * \tattack: 0.2,\n * \tbaseFrequency: \"C2\",\n * \toctaves: 4\n * });\n * freqEnv.connect(oscillator.frequency);\n * freqEnv.triggerAttack();\n * @category Component\n */\nexport class FrequencyEnvelope extends Envelope {\n\n\treadonly name: string = \"FrequencyEnvelope\";\n\n\t/**\n\t * Private reference to the base frequency as a number\n\t */\n\tprivate _baseFrequency: Hertz;\n\n\t/**\n\t * The number of octaves\n\t */\n\tprivate _octaves: number;\n\n\t/**\n\t * Internal scaler from 0-1 to the final output range\n\t */\n\tprivate _scale: Scale;\n\n\t/**\n\t * Apply a power curve to the output\n\t */\n\tprivate _exponent: Pow;\n\n\t/**\n\t * @param attack\tthe attack time in seconds\n\t * @param decay\t\tthe decay time in seconds\n\t * @param sustain \ta percentage (0-1) of the full amplitude\n\t * @param release\tthe release time in seconds\n\t */\n\tconstructor(attack?: Time, decay?: Time, sustain?: NormalRange, release?: Time);\n\tconstructor(options?: Partial<FrequencyEnvelopeOptions>)\n\tconstructor() {\n\t\tsuper(optionsFromArguments(FrequencyEnvelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]));\n\t\tconst options = optionsFromArguments(FrequencyEnvelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]);\n\n\t\tthis._octaves = options.octaves;\n\t\tthis._baseFrequency = this.toFrequency(options.baseFrequency);\n\n\t\tthis._exponent = this.input = new Pow({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.exponent\n\t\t});\n\t\tthis._scale = this.output = new Scale({\n\t\t\tcontext: this.context,\n\t\t\tmin: this._baseFrequency,\n\t\t\tmax: this._baseFrequency * Math.pow(2, this._octaves),\n\t\t});\n\t\tthis._sig.chain(this._exponent, this._scale);\n\t}\n\n\tstatic getDefaults(): FrequencyEnvelopeOptions {\n\t\treturn Object.assign(Envelope.getDefaults(), {\n\t\t\tbaseFrequency: 200,\n\t\t\texponent: 1,\n\t\t\toctaves: 4,\n\t\t});\n\t}\n\n\t/**\n\t * The envelope's minimum output value. This is the value which it\n\t * starts at.\n\t */\n\tget baseFrequency(): Frequency {\n\t\treturn this._baseFrequency;\n\t}\n\tset baseFrequency(min) {\n\t\tconst freq = this.toFrequency(min);\n\t\tassertRange(freq, 0);\n\t\tthis._baseFrequency = freq;\n\t\tthis._scale.min = this._baseFrequency;\n\t\t// update the max value when the min changes\n\t\tthis.octaves = this._octaves;\n\t}\n\n\t/**\n\t * The number of octaves above the baseFrequency that the\n\t * envelope will scale to.\n\t */\n\tget octaves(): number {\n\t\treturn this._octaves;\n\t}\n\tset octaves(octaves: number) {\n\t\tthis._octaves = octaves;\n\t\tthis._scale.max = this._baseFrequency * Math.pow(2, octaves);\n\t}\n\n\t/**\n\t * The envelope's exponent value.\n\t */\n\tget exponent(): number {\n\t\treturn this._exponent.value;\n\t}\n\tset exponent(exponent) {\n\t\tthis._exponent.value = exponent;\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._exponent.dispose();\n\t\tthis._scale.dispose();\n\t\treturn this;\n\t}\n}\n", "import { AmplitudeEnvelope } from \"../component/envelope/AmplitudeEnvelope\";\nimport { Envelope, EnvelopeOptions } from \"../component/envelope/Envelope\";\nimport { Filter, FilterOptions } from \"../component/filter/Filter\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly, RecursivePartial } from \"../core/util/Interface\";\nimport { Monophonic, MonophonicOptions } from \"../instrument/Monophonic\";\nimport { OmniOscillator } from \"../source/oscillator/OmniOscillator\";\nimport { Source } from \"../source/Source\";\nimport { FrequencyEnvelope, FrequencyEnvelopeOptions } from \"../component/envelope/FrequencyEnvelope\";\nimport { NormalRange, Seconds, Time } from \"../core/type/Units\";\nimport { Signal } from \"../signal/Signal\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { OmniOscillatorSynthOptions } from \"../source/oscillator/OscillatorInterface\";\n\nexport interface MonoSynthOptions extends MonophonicOptions {\n\toscillator: OmniOscillatorSynthOptions;\n\tenvelope: Omit<EnvelopeOptions, keyof ToneAudioNodeOptions>;\n\tfilterEnvelope: Omit<FrequencyEnvelopeOptions, keyof ToneAudioNodeOptions>;\n\tfilter: Omit<FilterOptions, keyof ToneAudioNodeOptions>;\n}\n\n/**\n * MonoSynth is composed of one `oscillator`, one `filter`, and two `envelopes`.\n * The amplitude of the Oscillator and the cutoff frequency of the\n * Filter are controlled by Envelopes.\n * <img src=\"https://docs.google.com/drawings/d/1gaY1DF9_Hzkodqf8JI1Cg2VZfwSElpFQfI94IQwad38/pub?w=924&h=240\">\n * @example\n * const synth = new Tone.MonoSynth({\n * \toscillator: {\n * \t\ttype: \"square\"\n * \t},\n * \tenvelope: {\n * \t\tattack: 0.1\n * \t}\n * }).toDestination();\n * synth.triggerAttackRelease(\"C4\", \"8n\");\n * @category Instrument\n */\nexport class MonoSynth extends Monophonic<MonoSynthOptions> {\n\n\treadonly name = \"MonoSynth\";\n\n\t/**\n\t * The oscillator.\n\t */\n\treadonly oscillator: OmniOscillator<any>;\n\n\t/**\n\t * The frequency control.\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * The detune control.\n\t */\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * The filter.\n\t */\n\treadonly filter: Filter;\n\n\t/**\n\t * The filter envelope.\n\t */\n\treadonly filterEnvelope: FrequencyEnvelope;\n\n\t/**\n\t * The amplitude envelope.\n\t */\n\treadonly envelope: AmplitudeEnvelope;\n\n\tconstructor(options?: RecursivePartial<MonoSynthOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(MonoSynth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(MonoSynth.getDefaults(), arguments);\n\n\t\tthis.oscillator = new OmniOscillator(Object.assign(options.oscillator, {\n\t\t\tcontext: this.context,\n\t\t\tdetune: options.detune,\n\t\t\tonstop: () => this.onsilence(this),\n\t\t}));\n\t\tthis.frequency = this.oscillator.frequency;\n\t\tthis.detune = this.oscillator.detune;\n\t\tthis.filter = new Filter(Object.assign(options.filter, { context: this.context }));\n\t\tthis.filterEnvelope = new FrequencyEnvelope(Object.assign(options.filterEnvelope, { context: this.context }));\n\t\tthis.envelope = new AmplitudeEnvelope(Object.assign(options.envelope, { context: this.context }));\n\n\t\t// connect the oscillators to the output\n\t\tthis.oscillator.chain(this.filter, this.envelope, this.output);\n\n\t\t// connect the filter envelope\n\t\tthis.filterEnvelope.connect(this.filter.frequency);\n\n\t\treadOnly(this, [\"oscillator\", \"frequency\", \"detune\", \"filter\", \"filterEnvelope\", \"envelope\"]);\n\t}\n\n\tstatic getDefaults(): MonoSynthOptions {\n\t\treturn Object.assign(Monophonic.getDefaults(), {\n\t\t\tenvelope: Object.assign(\n\t\t\t\tomitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())),\n\t\t\t\t{\n\t\t\t\t\tattack: 0.005,\n\t\t\t\t\tdecay: 0.1,\n\t\t\t\t\trelease: 1,\n\t\t\t\t\tsustain: 0.9,\n\t\t\t\t},\n\t\t\t),\n\t\t\tfilter: Object.assign(\n\t\t\t\tomitFromObject(Filter.getDefaults(), Object.keys(ToneAudioNode.getDefaults())),\n\t\t\t\t{\n\t\t\t\t\tQ: 1,\n\t\t\t\t\trolloff: -12,\n\t\t\t\t\ttype: \"lowpass\",\n\t\t\t\t},\n\t\t\t),\n\t\t\tfilterEnvelope: Object.assign(\n\t\t\t\tomitFromObject(FrequencyEnvelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())),\n\t\t\t\t{\n\t\t\t\t\tattack: 0.6,\n\t\t\t\t\tbaseFrequency: 200,\n\t\t\t\t\tdecay: 0.2,\n\t\t\t\t\texponent: 2,\n\t\t\t\t\toctaves: 3,\n\t\t\t\t\trelease: 2,\n\t\t\t\t\tsustain: 0.5,\n\t\t\t\t}\n\t\t\t),\n\t\t\toscillator: Object.assign(\n\t\t\t\tomitFromObject(OmniOscillator.getDefaults(), Object.keys(Source.getDefaults())),\n\t\t\t\t{\n\t\t\t\t\ttype: \"sawtooth\",\n\t\t\t\t},\n\t\t\t) as OmniOscillatorSynthOptions,\n\t\t});\n\t}\n\n\t/**\n\t * start the attack portion of the envelope\n\t * @param time the time the attack should start\n\t * @param velocity the velocity of the note (0-1)\n\t */\n\tprotected _triggerEnvelopeAttack(time: Seconds, velocity = 1): void {\n\t\tthis.envelope.triggerAttack(time, velocity);\n\t\tthis.filterEnvelope.triggerAttack(time);\n\t\tthis.oscillator.start(time);\n\t\tif (this.envelope.sustain === 0) {\n\t\t\tconst computedAttack = this.toSeconds(this.envelope.attack);\n\t\t\tconst computedDecay = this.toSeconds(this.envelope.decay);\n\t\t\tthis.oscillator.stop(time + computedAttack + computedDecay);\n\t\t}\n\t}\n\n\t/**\n\t * start the release portion of the envelope\n\t * @param time the time the release should start\n\t */\n\tprotected _triggerEnvelopeRelease(time: Seconds): void {\n\t\tthis.envelope.triggerRelease(time);\n\t\tthis.filterEnvelope.triggerRelease(time);\n\t\tthis.oscillator.stop(time + this.toSeconds(this.envelope.release));\n\t}\n\n\tgetLevelAtTime(time: Time): NormalRange {\n\t\ttime = this.toSeconds(time);\n\t\treturn this.envelope.getValueAtTime(time);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.oscillator.dispose();\n\t\tthis.envelope.dispose();\n\t\tthis.filterEnvelope.dispose();\n\t\tthis.filter.dispose();\n\t\treturn this;\n\t}\n}\n", "import { Monophonic, MonophonicOptions } from \"./Monophonic\";\nimport { MonoSynth, MonoSynthOptions } from \"./MonoSynth\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly, RecursivePartial } from \"../core/util/Interface\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Gain, } from \"../core/context/Gain\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Frequency, NormalRange, Positive, Seconds, Time } from \"../core/type/Units\";\nimport { deepMerge, omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { Param } from \"../core/context/Param\";\n\nexport interface DuoSynthOptions extends MonophonicOptions {\n\tvoice0: Omit<MonoSynthOptions, keyof MonophonicOptions>;\n\tvoice1: Omit<MonoSynthOptions, keyof MonophonicOptions>;\n\tharmonicity: Positive;\n\tvibratoRate: Frequency;\n\tvibratoAmount: Positive;\n}\n\n/**\n * DuoSynth is a monophonic synth composed of two [[MonoSynths]] run in parallel with control over the\n * frequency ratio between the two voices and vibrato effect.\n * @example\n * const duoSynth = new Tone.DuoSynth().toDestination();\n * duoSynth.triggerAttackRelease(\"C4\", \"2n\");\n * @category Instrument\n */\nexport class DuoSynth extends Monophonic<DuoSynthOptions> {\n\n\treadonly name: string = \"DuoSynth\";\n\n\treadonly frequency: Signal<\"frequency\">;\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * the first voice\n\t */\n\treadonly voice0: MonoSynth;\n\n\t/**\n\t * the second voice\n\t */\n\treadonly voice1: MonoSynth;\n\n\t/**\n\t * The amount of vibrato\n\t */\n\tpublic vibratoAmount: Param<\"normalRange\">;\n\n\t/**\n\t * the vibrato frequency\n\t */\n\tpublic vibratoRate: Signal<\"frequency\">;\n\n\t/**\n\t * Harmonicity is the ratio between the two voices. A harmonicity of\n\t * 1 is no change. Harmonicity = 2 means a change of an octave.\n\t * @example\n\t * const duoSynth = new Tone.DuoSynth().toDestination();\n\t * duoSynth.triggerAttackRelease(\"C4\", \"2n\");\n\t * // pitch voice1 an octave below voice0\n\t * duoSynth.harmonicity.value = 0.5;\n\t */\n\tpublic harmonicity: Signal<\"positive\">;\n\n\t/**\n\t * The vibrato LFO.\n\t */\n\tprivate _vibrato: LFO;\n\n\t/**\n\t * the vibrato gain\n\t */\n\tprivate _vibratoGain: Gain<\"normalRange\">;\n\n\tconstructor(options?: RecursivePartial<DuoSynthOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(DuoSynth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(DuoSynth.getDefaults(), arguments);\n\n\t\tthis.voice0 = new MonoSynth(Object.assign(options.voice0, {\n\t\t\tcontext: this.context,\n\t\t\tonsilence: () => this.onsilence(this)\n\t\t}));\n\t\tthis.voice1 = new MonoSynth(Object.assign(options.voice1, {\n\t\t\tcontext: this.context,\n\t\t}));\n\n\t\tthis.harmonicity = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.harmonicity,\n\t\t});\n\n\t\tthis._vibrato = new LFO({\n\t\t\tfrequency: options.vibratoRate,\n\t\t\tcontext: this.context,\n\t\t\tmin: -50,\n\t\t\tmax: 50\n\t\t});\n\t\t// start the vibrato immediately\n\t\tthis._vibrato.start();\n\t\tthis.vibratoRate = this._vibrato.frequency;\n\t\tthis._vibratoGain = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"normalRange\",\n\t\t\tgain: options.vibratoAmount\n\t\t});\n\t\tthis.vibratoAmount = this._vibratoGain.gain;\n\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: 440\n\t\t});\n\t\tthis.detune = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune\n\t\t});\n\n\t\t// control the two voices frequency\n\t\tthis.frequency.connect(this.voice0.frequency);\n\t\tthis.frequency.chain(this.harmonicity, this.voice1.frequency);\n\n\t\tthis._vibrato.connect(this._vibratoGain);\n\t\tthis._vibratoGain.fan(this.voice0.detune, this.voice1.detune);\n\n\t\tthis.detune.fan(this.voice0.detune, this.voice1.detune);\n\n\t\tthis.voice0.connect(this.output);\n\t\tthis.voice1.connect(this.output);\n\n\t\treadOnly(this, [\"voice0\", \"voice1\", \"frequency\", \"vibratoAmount\", \"vibratoRate\"]);\n\t}\n\n\tgetLevelAtTime(time: Time): NormalRange {\n\t\ttime = this.toSeconds(time);\n\t\treturn this.voice0.envelope.getValueAtTime(time) + this.voice1.envelope.getValueAtTime(time);\n\t}\n\n\tstatic getDefaults(): DuoSynthOptions {\n\t\treturn deepMerge(Monophonic.getDefaults(), {\n\t\t\tvibratoAmount: 0.5,\n\t\t\tvibratoRate: 5,\n\t\t\tharmonicity: 1.5,\n\t\t\tvoice0: deepMerge(\n\t\t\t\tomitFromObject(MonoSynth.getDefaults(), Object.keys(Monophonic.getDefaults())),\n\t\t\t\t{\n\t\t\t\t\tfilterEnvelope: {\n\t\t\t\t\t\tattack: 0.01,\n\t\t\t\t\t\tdecay: 0.0,\n\t\t\t\t\t\tsustain: 1,\n\t\t\t\t\t\trelease: 0.5\n\t\t\t\t\t},\n\t\t\t\t\tenvelope: {\n\t\t\t\t\t\tattack: 0.01,\n\t\t\t\t\t\tdecay: 0.0,\n\t\t\t\t\t\tsustain: 1,\n\t\t\t\t\t\trelease: 0.5\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\tvoice1: deepMerge(\n\t\t\t\tomitFromObject(MonoSynth.getDefaults(), Object.keys(Monophonic.getDefaults())),\n\t\t\t\t{\n\n\t\t\t\t\tfilterEnvelope: {\n\t\t\t\t\t\tattack: 0.01,\n\t\t\t\t\t\tdecay: 0.0,\n\t\t\t\t\t\tsustain: 1,\n\t\t\t\t\t\trelease: 0.5\n\t\t\t\t\t},\n\t\t\t\t\tenvelope: {\n\t\t\t\t\t\tattack: 0.01,\n\t\t\t\t\t\tdecay: 0.0,\n\t\t\t\t\t\tsustain: 1,\n\t\t\t\t\t\trelease: 0.5\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t}) as DuoSynthOptions;\n\t}\n\t/**\n\t * Trigger the attack portion of the note\n\t */\n\tprotected _triggerEnvelopeAttack(time: Seconds, velocity: number): void {\n\t\t// @ts-ignore\n\t\tthis.voice0._triggerEnvelopeAttack(time, velocity);\n\t\t// @ts-ignore\n\t\tthis.voice1._triggerEnvelopeAttack(time, velocity);\n\t}\n\n\t/**\n\t * Trigger the release portion of the note\n\t */\n\tprotected _triggerEnvelopeRelease(time: Seconds) {\n\t\t// @ts-ignore\n\t\tthis.voice0._triggerEnvelopeRelease(time);\n\t\t// @ts-ignore\n\t\tthis.voice1._triggerEnvelopeRelease(time);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.voice0.dispose();\n\t\tthis.voice1.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\tthis._vibrato.dispose();\n\t\tthis.vibratoRate.dispose();\n\t\tthis._vibratoGain.dispose();\n\t\tthis.harmonicity.dispose();\n\t\treturn this;\n\t}\n}\n\n", "import { Positive } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { RecursivePartial } from \"../core/util/Interface\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { ModulationSynth, ModulationSynthOptions } from \"./ModulationSynth\";\n\nexport interface FMSynthOptions extends ModulationSynthOptions {\n\tmodulationIndex: Positive;\n}\n\n/**\n * FMSynth is composed of two Tone.Synths where one Tone.Synth modulates\n * the frequency of a second Tone.Synth. A lot of spectral content\n * can be explored using the modulationIndex parameter. Read more about\n * frequency modulation synthesis on Sound On Sound: [Part 1](https://web.archive.org/web/20160403123704/http://www.soundonsound.com/sos/apr00/articles/synthsecrets.htm), [Part 2](https://web.archive.org/web/20160403115835/http://www.soundonsound.com/sos/may00/articles/synth.htm).\n *\n * @example\n * const fmSynth = new Tone.FMSynth().toDestination();\n * fmSynth.triggerAttackRelease(\"C5\", \"4n\");\n * \n * @category Instrument\n */\n\nexport class FMSynth extends ModulationSynth<FMSynthOptions> {\n\treadonly name: string = \"FMSynth\";\n\n\t/**\n\t * The modulation index which essentially the depth or amount of the modulation. It is the\n\t * ratio of the frequency of the modulating signal (mf) to the amplitude of the\n\t * modulating signal (ma) -- as in ma/mf.\n\t */\n\treadonly modulationIndex: Multiply;\n\n\tconstructor(options?: RecursivePartial<FMSynthOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(FMSynth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(FMSynth.getDefaults(), arguments);\n\n\t\tthis.modulationIndex = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.modulationIndex,\n\t\t});\n\n\t\t// control the two voices frequency\n\t\tthis.frequency.connect(this._carrier.frequency);\n\t\tthis.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t\tthis.frequency.chain(this.modulationIndex, this._modulationNode);\n\t\tthis.detune.fan(this._carrier.detune, this._modulator.detune);\n\t\tthis._modulator.connect(this._modulationNode.gain);\n\t\tthis._modulationNode.connect(this._carrier.frequency);\n\t\tthis._carrier.connect(this.output);\n\t}\n\n\tstatic getDefaults(): FMSynthOptions {\n\t\treturn Object.assign(ModulationSynth.getDefaults(), {\n\t\t\tmodulationIndex: 10,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.modulationIndex.dispose();\n\t\treturn this;\n\t}\n}\n", "import { Envelope, EnvelopeOptions } from \"../component/envelope/Envelope\";\nimport { Filter } from \"../component/filter/Filter\";\nimport { Gain } from \"../core/context/Gain\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { Frequency, NormalRange, Positive, Seconds, Time } from \"../core/type/Units\";\nimport { deepMerge, omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp, RecursivePartial } from \"../core/util/Interface\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Scale } from \"../signal/Scale\";\nimport { Signal } from \"../signal/Signal\";\nimport { FMOscillator } from \"../source/oscillator/FMOscillator\";\nimport { Monophonic, MonophonicOptions } from \"./Monophonic\";\n\nexport interface MetalSynthOptions extends MonophonicOptions {\n\tharmonicity: Positive;\n\tmodulationIndex: Positive;\n\toctaves: number;\n\tresonance: Frequency;\n\tenvelope: Omit<EnvelopeOptions, keyof ToneAudioNodeOptions>;\n}\n\n/**\n * Inharmonic ratio of frequencies based on the Roland TR-808\n * Taken from https://ccrma.stanford.edu/papers/tr-808-cymbal-physically-informed-circuit-bendable-digital-model\n */\nconst inharmRatios: number[] = [1.0, 1.483, 1.932, 2.546, 2.630, 3.897];\n\n/**\n * A highly inharmonic and spectrally complex source with a highpass filter\n * and amplitude envelope which is good for making metallophone sounds.\n * Based on CymbalSynth by [@polyrhythmatic](https://github.com/polyrhythmatic).\n * Inspiration from [Sound on Sound](https://shorturl.at/rSZ12).\n * @category Instrument\n */\nexport class MetalSynth extends Monophonic<MetalSynthOptions> {\n\n\treadonly name: string = \"MetalSynth\";\n\n\t/**\n\t * The frequency of the cymbal\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * The detune applied to the oscillators\n\t */\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * The array of FMOscillators\n\t */\n\tprivate _oscillators: FMOscillator[] = [];\n\n\t/**\n\t * The frequency multipliers\n\t */\n\tprivate _freqMultipliers: Multiply[] = [];\n\n\t/**\n\t * The gain node for the envelope.\n\t */\n\tprivate _amplitude: Gain;\n\n\t/**\n\t * Highpass the output\n\t */\n\tprivate _highpass: Filter;\n\n\t/**\n\t * The number of octaves the highpass\n\t * filter frequency ramps\n\t */\n\tprivate _octaves: number;\n\n\t/**\n\t * Scale the body envelope for the highpass filter\n\t */\n\tprivate _filterFreqScaler: Scale;\n\n\t/**\n\t * The envelope which is connected both to the\n\t * amplitude and a highpass filter's cutoff frequency.\n\t * The lower-limit of the filter is controlled by the [[resonance]]\n\t */\n\treadonly envelope: Envelope;\n\n\tconstructor(options?: RecursivePartial<MetalSynthOptions>)\n\tconstructor() {\n\t\tsuper(optionsFromArguments(MetalSynth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(MetalSynth.getDefaults(), arguments);\n\n\t\tthis.detune = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t});\n\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t});\n\n\t\tthis._amplitude = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: 0,\n\t\t}).connect(this.output);\n\n\t\tthis._highpass = new Filter({\n\t\t\t// Q: -3.0102999566398125,\n\t\t\tQ: 0,\n\t\t\tcontext: this.context,\n\t\t\ttype: \"highpass\",\n\t\t}).connect(this._amplitude);\n\n\t\tfor (let i = 0; i < inharmRatios.length; i++) {\n\t\t\tconst osc = new FMOscillator({\n\t\t\t\tcontext: this.context,\n\t\t\t\tharmonicity: options.harmonicity,\n\t\t\t\tmodulationIndex: options.modulationIndex,\n\t\t\t\tmodulationType: \"square\",\n\t\t\t\tonstop: i === 0 ? () => this.onsilence(this) : noOp,\n\t\t\t\ttype: \"square\",\n\t\t\t});\n\t\t\tosc.connect(this._highpass);\n\t\t\tthis._oscillators[i] = osc;\n\n\t\t\tconst mult = new Multiply({\n\t\t\t\tcontext: this.context,\n\t\t\t\tvalue: inharmRatios[i],\n\t\t\t});\n\t\t\tthis._freqMultipliers[i] = mult;\n\t\t\tthis.frequency.chain(mult, osc.frequency);\n\t\t\tthis.detune.connect(osc.detune);\n\t\t}\n\n\t\tthis._filterFreqScaler = new Scale({\n\t\t\tcontext: this.context,\n\t\t\tmax: 7000,\n\t\t\tmin: this.toFrequency(options.resonance),\n\t\t});\n\n\t\tthis.envelope = new Envelope({\n\t\t\tattack: options.envelope.attack,\n\t\t\tattackCurve: \"linear\",\n\t\t\tcontext: this.context,\n\t\t\tdecay: options.envelope.decay,\n\t\t\trelease: options.envelope.release,\n\t\t\tsustain: 0,\n\t\t});\n\n\t\tthis.envelope.chain(this._filterFreqScaler, this._highpass.frequency);\n\t\tthis.envelope.connect(this._amplitude.gain);\n\t\t// set the octaves\n\t\tthis._octaves = options.octaves;\n\t\tthis.octaves = options.octaves;\n\t}\n\n\tstatic getDefaults(): MetalSynthOptions {\n\t\treturn deepMerge(Monophonic.getDefaults(), {\n\t\t\tenvelope: Object.assign(\n\t\t\t\tomitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())),\n\t\t\t\t{\n\t\t\t\t\tattack: 0.001,\n\t\t\t\t\tdecay: 1.4,\n\t\t\t\t\trelease: 0.2,\n\t\t\t\t},\n\t\t\t),\n\t\t\tharmonicity: 5.1,\n\t\t\tmodulationIndex: 32,\n\t\t\toctaves: 1.5,\n\t\t\tresonance: 4000,\n\t\t});\n\t}\n\n\t/**\n\t * Trigger the attack.\n\t * @param time When the attack should be triggered.\n\t * @param velocity The velocity that the envelope should be triggered at.\n\t */\n\tprotected _triggerEnvelopeAttack(time: Seconds, velocity: NormalRange = 1): this {\n\t\tthis.envelope.triggerAttack(time, velocity);\n\t\tthis._oscillators.forEach(osc => osc.start(time));\n\t\tif (this.envelope.sustain === 0) {\n\t\t\tthis._oscillators.forEach(osc => {\n\t\t\t\tosc.stop(time + this.toSeconds(this.envelope.attack) + this.toSeconds(this.envelope.decay));\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\t\n\t/**\n\t * Trigger the release of the envelope.\n\t * @param time When the release should be triggered.\n\t */\n\tprotected _triggerEnvelopeRelease(time: Seconds): this {\n\t\tthis.envelope.triggerRelease(time);\n\t\tthis._oscillators.forEach(osc => osc.stop(time + this.toSeconds(this.envelope.release)));\n\t\treturn this;\n\t}\n\n\tgetLevelAtTime(time: Time): NormalRange {\n\t\ttime = this.toSeconds(time);\n\t\treturn this.envelope.getValueAtTime(time);\n\t}\n\n\t/**\n\t * The modulationIndex of the oscillators which make up the source.\n\t * see [[FMOscillator.modulationIndex]]\n\t * @min 1\n\t * @max 100\n\t */\n\tget modulationIndex(): number {\n\t\treturn this._oscillators[0].modulationIndex.value;\n\t}\n\tset modulationIndex(val) {\n\t\tthis._oscillators.forEach(osc => (osc.modulationIndex.value = val));\n\t}\n\n\t/**\n\t * The harmonicity of the oscillators which make up the source.\n\t * see Tone.FMOscillator.harmonicity\n\t * @min 0.1\n\t * @max 10\n\t */\n\tget harmonicity(): number {\n\t\treturn this._oscillators[0].harmonicity.value;\n\t}\n\tset harmonicity(val) {\n\t\tthis._oscillators.forEach(osc => (osc.harmonicity.value = val));\n\t}\n\n\t/**\n\t * The lower level of the highpass filter which is attached to the envelope.\n\t * This value should be between [0, 7000]\n\t * @min 0\n\t * @max 7000\n\t */\n\tget resonance(): Frequency {\n\t\treturn this._filterFreqScaler.min;\n\t}\n\tset resonance(val) {\n\t\tthis._filterFreqScaler.min = this.toFrequency(val);\n\t\tthis.octaves = this._octaves;\n\t}\n\n\t/**\n\t * The number of octaves above the \"resonance\" frequency\n\t * that the filter ramps during the attack/decay envelope\n\t * @min 0\n\t * @max 8\n\t */\n\tget octaves(): number {\n\t\treturn this._octaves;\n\t}\n\tset octaves(val) {\n\t\tthis._octaves = val;\n\t\tthis._filterFreqScaler.max = this._filterFreqScaler.min * Math.pow(2, val);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._oscillators.forEach(osc => osc.dispose());\n\t\tthis._freqMultipliers.forEach(freqMult => freqMult.dispose());\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\tthis._filterFreqScaler.dispose();\n\t\tthis._amplitude.dispose();\n\t\tthis.envelope.dispose();\n\t\tthis._highpass.dispose();\n\t\treturn this;\n\t}\n}\n", "import { FrequencyClass } from \"../core/type/Frequency\";\nimport { Frequency, Positive, Time } from \"../core/type/Units\";\nimport { deepMerge, optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly, RecursivePartial } from \"../core/util/Interface\";\nimport { Monophonic } from \"./Monophonic\";\nimport { Synth, SynthOptions } from \"./Synth\";\nimport { range, timeRange } from \"../core/util/Decorator\";\n\nexport interface MembraneSynthOptions extends SynthOptions {\n\tpitchDecay: Time;\n\toctaves: Positive;\n}\n\n/**\n * MembraneSynth makes kick and tom sounds using a single oscillator\n * with an amplitude envelope and frequency ramp. A Tone.OmniOscillator\n * is routed through a Tone.AmplitudeEnvelope to the output. The drum\n * quality of the sound comes from the frequency envelope applied\n * during MembraneSynth.triggerAttack(note). The frequency envelope\n * starts at <code>note * .octaves</code> and ramps to <code>note</code>\n * over the duration of <code>.pitchDecay</code>.\n * @example\n * const synth = new Tone.MembraneSynth().toDestination();\n * synth.triggerAttackRelease(\"C2\", \"8n\");\n * @category Instrument\n */\nexport class MembraneSynth extends Synth<MembraneSynthOptions> {\n\n\treadonly name: string = \"MembraneSynth\";\n\n\t/**\n\t * The number of octaves the pitch envelope ramps.\n\t * @min 0.5\n\t * @max 8\n\t */\n\t@range(0)\n\toctaves: Positive;\n\n\t/**\n\t * The amount of time the frequency envelope takes.\n\t * @min 0\n\t * @max 0.5\n\t */\n\t@timeRange(0)\n\tpitchDecay: Time;\n\n\t/**\n\t * Portamento is ignored in this synth. use pitch decay instead.\n\t */\n\treadonly portamento = 0;\n\n\t/**\n\t * @param options the options available for the synth see defaults\n\t */\n\tconstructor(options?: RecursivePartial<MembraneSynthOptions>)\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(MembraneSynth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(MembraneSynth.getDefaults(), arguments);\n\n\t\tthis.pitchDecay = options.pitchDecay;\n\t\tthis.octaves = options.octaves;\n\t\treadOnly(this, [\"oscillator\", \"envelope\"]);\n\t}\n\n\tstatic getDefaults(): MembraneSynthOptions {\n\t\treturn deepMerge(Monophonic.getDefaults(), Synth.getDefaults(), {\n\t\t\tenvelope: {\n\t\t\t\tattack: 0.001,\n\t\t\t\tattackCurve: \"exponential\",\n\t\t\t\tdecay: 0.4,\n\t\t\t\trelease: 1.4,\n\t\t\t\tsustain: 0.01,\n\t\t\t},\n\t\t\toctaves: 10,\n\t\t\toscillator: {\n\t\t\t\ttype: \"sine\",\n\t\t\t},\n\t\t\tpitchDecay: 0.05,\n\t\t});\n\t}\n\n\tsetNote(note: Frequency | FrequencyClass, time?: Time): this {\n\t\tconst seconds = this.toSeconds(time);\n\t\tconst hertz = this.toFrequency(note instanceof FrequencyClass ? note.toFrequency() : note);\n\t\tconst maxNote = hertz * this.octaves;\n\t\tthis.oscillator.frequency.setValueAtTime(maxNote, seconds);\n\t\tthis.oscillator.frequency.exponentialRampToValueAtTime(hertz, seconds + this.toSeconds(this.pitchDecay));\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\treturn this;\n\t}\n}\n", "import { AmplitudeEnvelope } from \"../component/envelope/AmplitudeEnvelope\";\nimport { NormalRange, Time } from \"../core/type/Units\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { RecursivePartial } from \"../core/util/Interface\";\nimport { Noise, NoiseOptions } from \"../source/Noise\";\nimport { Instrument, InstrumentOptions } from \"./Instrument\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { Envelope, EnvelopeOptions } from \"../component/envelope/Envelope\";\nimport { Source } from \"../source/Source\";\n\nexport interface NoiseSynthOptions extends InstrumentOptions {\n\tenvelope: Omit<EnvelopeOptions, keyof ToneAudioNodeOptions>;\n\tnoise: Omit<NoiseOptions, keyof ToneAudioNodeOptions>;\n}\n\n/**\n * Tone.NoiseSynth is composed of [[Noise]] through an [[AmplitudeEnvelope]]. \n * ```\n * +-------+   +-------------------+\n * | Noise +>--> AmplitudeEnvelope +>--> Output\n * +-------+   +-------------------+\n * ```\n * @example\n * const noiseSynth = new Tone.NoiseSynth().toDestination();\n * noiseSynth.triggerAttackRelease(\"8n\", 0.05);\n * @category Instrument\n */\nexport class NoiseSynth extends Instrument<NoiseSynthOptions> {\n\n\treadonly name = \"NoiseSynth\";\n\n\t/**\n\t * The noise source.\n\t */\n\treadonly noise: Noise;\n\n\t/**\n\t * The amplitude envelope.\n\t */\n\treadonly envelope: AmplitudeEnvelope;\n\n\tconstructor(options?: RecursivePartial<NoiseSynthOptions>)\n\tconstructor() {\n\t\tsuper(optionsFromArguments(NoiseSynth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(NoiseSynth.getDefaults(), arguments);\n\t\tthis.noise = new Noise(Object.assign({\n\t\t\tcontext: this.context,\n\t\t}, options.noise));\n\n\t\tthis.envelope = new AmplitudeEnvelope(Object.assign({\n\t\t\tcontext: this.context,\n\t\t}, options.envelope));\n\n\t\t// connect the noise to the output\n\t\tthis.noise.chain(this.envelope, this.output);\n\t}\n\n\tstatic getDefaults(): NoiseSynthOptions {\n\t\treturn Object.assign(Instrument.getDefaults(), {\n\t\t\tenvelope: Object.assign(\n\t\t\t\tomitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())),\n\t\t\t\t{\n\t\t\t\t\tdecay: 0.1,\n\t\t\t\t\tsustain: 0.0,\n\t\t\t\t},\n\t\t\t),\n\t\t\tnoise: Object.assign(\n\t\t\t\tomitFromObject(Noise.getDefaults(), Object.keys(Source.getDefaults())),\n\t\t\t\t{\n\t\t\t\t\ttype: \"white\",\n\t\t\t\t},\n\t\t\t),\n\t\t});\n\t}\n\n\t/**\n\t * Start the attack portion of the envelopes. Unlike other\n\t * instruments, Tone.NoiseSynth doesn't have a note.\n\t * @example\n\t * const noiseSynth = new Tone.NoiseSynth().toDestination();\n\t * noiseSynth.triggerAttack();\n\t */\n\ttriggerAttack(time?: Time, velocity: NormalRange = 1): this {\n\t\ttime = this.toSeconds(time);\n\t\t// the envelopes\n\t\tthis.envelope.triggerAttack(time, velocity);\n\t\t// start the noise\n\t\tthis.noise.start(time);\n\t\tif (this.envelope.sustain === 0) {\n\t\t\tthis.noise.stop(time + this.toSeconds(this.envelope.attack) + this.toSeconds(this.envelope.decay));\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Start the release portion of the envelopes.\n\t */\n\ttriggerRelease(time?: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis.envelope.triggerRelease(time);\n\t\tthis.noise.stop(time + this.toSeconds(this.envelope.release));\n\t\treturn this;\n\t}\n\n\tsync(): this {\n\t\tif (this._syncState()) {\n\t\t\tthis._syncMethod(\"triggerAttack\", 0);\n\t\t\tthis._syncMethod(\"triggerRelease\", 0);\n\t\t}\n\t\treturn this;\n\t}\n\n\ttriggerAttackRelease(duration: Time, time?: Time, velocity: NormalRange = 1): this {\n\t\ttime = this.toSeconds(time);\n\t\tduration = this.toSeconds(duration);\n\t\tthis.triggerAttack(time, velocity);\n\t\tthis.triggerRelease(time + duration);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.noise.dispose();\n\t\tthis.envelope.dispose();\n\t\treturn this;\n\t}\n}\n", "/**\n * All of the classes or functions which are loaded into the AudioWorkletGlobalScope\n */\nconst workletContext: Set<string> = new Set();\n\n/**\n * Add a class to the AudioWorkletGlobalScope\n */\nexport function addToWorklet(classOrFunction: string) {\n\tworkletContext.add(classOrFunction);\n}\n\n/**\n * Register a processor in the AudioWorkletGlobalScope with the given name\n */\nexport function registerProcessor(name: string, classDesc: string) {\n\tconst processor = /* javascript */`registerProcessor(\"${name}\", ${classDesc})`;\n\tworkletContext.add(processor);\n}\n\n/**\n * Get all of the modules which have been registered to the AudioWorkletGlobalScope\n */\nexport function getWorkletGlobalScope(): string {\n\treturn Array.from(workletContext).join(\"\\n\");\n}\n", "import { ToneAudioNode, ToneAudioNodeOptions } from \"../context/ToneAudioNode\";\nimport { noOp } from \"../util/Interface\";\nimport { getWorkletGlobalScope } from \"./WorkletGlobalScope\";\n\nexport type ToneAudioWorkletOptions = ToneAudioNodeOptions;\n\nexport abstract class ToneAudioWorklet<Options extends ToneAudioWorkletOptions> extends ToneAudioNode<Options> {\n\n\treadonly name: string = \"ToneAudioWorklet\";\n\n\t/**\n\t * The processing node\n\t */\n\tprotected _worklet!: AudioWorkletNode;\n\n\t/**\n\t * A dummy gain node to create a dummy audio param from\n\t */\n\tprivate _dummyGain: GainNode;\n\n\t/**\n\t * A dummy audio param to use when creating Params\n\t */\n\tprotected _dummyParam: AudioParam;\n\n\t/**\n\t * The constructor options for the node\n\t */\n\tprotected workletOptions: Partial<AudioWorkletNodeOptions> = {};\n\n\t/**\n\t * Get the name of the audio worklet\n\t */\n\tprotected abstract _audioWorkletName(): string;\n\n\t/**\n\t * Invoked when the module is loaded and the node is created\n\t */\n\tprotected abstract onReady(node: AudioWorkletNode): void;\n\n\t/**\n\t * Callback which is invoked when there is an error in the processing\n\t */\n\tonprocessorerror: (e: string) => void = noOp;\n\n\tconstructor(options: Options) {\n\t\tsuper(options);\n\n\t\tconst blobUrl = URL.createObjectURL(new Blob([getWorkletGlobalScope()], { type: \"text/javascript\" }));\n\t\tconst name = this._audioWorkletName();\n\n\t\tthis._dummyGain = this.context.createGain();\n\t\tthis._dummyParam = this._dummyGain.gain;\n\n\t\t// Register the processor\n\t\tthis.context.addAudioWorkletModule(blobUrl, name).then(() => {\n\t\t\t// create the worklet when it's read\n\t\t\tif (!this.disposed) {\n\t\t\t\tthis._worklet = this.context.createAudioWorkletNode(name, this.workletOptions);\n\t\t\t\tthis._worklet.onprocessorerror = this.onprocessorerror.bind(this);\n\t\t\t\tthis.onReady(this._worklet);\n\t\t\t}\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._dummyGain.disconnect();\n\t\tif (this._worklet) {\n\t\t\tthis._worklet.port.postMessage(\"dispose\");\n\t\t\tthis._worklet.disconnect();\n\t\t}\n\t\treturn this;\n\t}\n\n}\n", "import { addToWorklet } from \"./WorkletGlobalScope\";\n\nconst toneAudioWorkletProcessor = /* javascript */ `\n\t/**\n\t * The base AudioWorkletProcessor for use in Tone.js. Works with the [[ToneAudioWorklet]]. \n\t */\n\tclass ToneAudioWorkletProcessor extends AudioWorkletProcessor {\n\n\t\tconstructor(options) {\n\t\t\t\n\t\t\tsuper(options);\n\t\t\t/**\n\t\t\t * If the processor was disposed or not. Keep alive until it's disposed.\n\t\t\t */\n\t\t\tthis.disposed = false;\n\t\t   \t/** \n\t\t\t * The number of samples in the processing block\n\t\t\t */\n\t\t\tthis.blockSize = 128;\n\t\t\t/**\n\t\t\t * the sample rate\n\t\t\t */\n\t\t\tthis.sampleRate = sampleRate;\n\n\t\t\tthis.port.onmessage = (event) => {\n\t\t\t\t// when it receives a dispose \n\t\t\t\tif (event.data === \"dispose\") {\n\t\t\t\t\tthis.disposed = true;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t}\n`;\n\naddToWorklet(toneAudioWorkletProcessor);\n", "import \"./ToneAudioWorkletProcessor.worklet\";\nimport { addToWorklet } from \"./WorkletGlobalScope\";\n\nexport const singleIOProcess = /* javascript */ `\n\t/**\n\t * Abstract class for a single input/output processor. \n\t * has a 'generate' function which processes one sample at a time\n\t */\n\tclass SingleIOProcessor extends ToneAudioWorkletProcessor {\n\n\t\tconstructor(options) {\n\t\t\tsuper(Object.assign(options, {\n\t\t\t\tnumberOfInputs: 1,\n\t\t\t\tnumberOfOutputs: 1\n\t\t\t}));\n\t\t\t/**\n\t\t\t * Holds the name of the parameter and a single value of that\n\t\t\t * parameter at the current sample\n\t\t\t * @type { [name: string]: number }\n\t\t\t */\n\t\t\tthis.params = {}\n\t\t}\n\n\t\t/**\n\t\t * Generate an output sample from the input sample and parameters\n\t\t * @abstract\n\t\t * @param input number\n\t\t * @param channel number\n\t\t * @param parameters { [name: string]: number }\n\t\t * @returns number\n\t\t */\n\t\tgenerate(){}\n\n\t\t/**\n\t\t * Update the private params object with the \n\t\t * values of the parameters at the given index\n\t\t * @param parameters { [name: string]: Float32Array },\n\t\t * @param index number\n\t\t */\n\t\tupdateParams(parameters, index) {\n\t\t\tfor (const paramName in parameters) {\n\t\t\t\tconst param = parameters[paramName];\n\t\t\t\tif (param.length > 1) {\n\t\t\t\t\tthis.params[paramName] = parameters[paramName][index];\n\t\t\t\t} else {\n\t\t\t\t\tthis.params[paramName] = parameters[paramName][0];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Process a single frame of the audio\n\t\t * @param inputs Float32Array[][]\n\t\t * @param outputs Float32Array[][]\n\t\t */\n\t\tprocess(inputs, outputs, parameters) {\n\t\t\tconst input = inputs[0];\n\t\t\tconst output = outputs[0];\n\t\t\t// get the parameter values\n\t\t\tconst channelCount = Math.max(input && input.length || 0, output.length);\n\t\t\tfor (let sample = 0; sample < this.blockSize; sample++) {\n\t\t\t\tthis.updateParams(parameters, sample);\n\t\t\t\tfor (let channel = 0; channel < channelCount; channel++) {\n\t\t\t\t\tconst inputSample = input && input.length ? input[channel][sample] : 0;\n\t\t\t\t\toutput[channel][sample] = this.generate(inputSample, channel, this.params);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn !this.disposed;\n\t\t}\n\t};\n`;\n\naddToWorklet(singleIOProcess);\n", "import { addToWorklet } from \"./WorkletGlobalScope\";\n\nconst delayLine = /* javascript */ `\n\t/**\n\t * A multichannel buffer for use within an AudioWorkletProcessor as a delay line\n\t */\n\tclass DelayLine {\n\t\t\n\t\tconstructor(size, channels) {\n\t\t\tthis.buffer = [];\n\t\t\tthis.writeHead = []\n\t\t\tthis.size = size;\n\n\t\t\t// create the empty channels\n\t\t\tfor (let i = 0; i < channels; i++) {\n\t\t\t\tthis.buffer[i] = new Float32Array(this.size);\n\t\t\t\tthis.writeHead[i] = 0;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Push a value onto the end\n\t\t * @param channel number\n\t\t * @param value number\n\t\t */\n\t\tpush(channel, value) {\n\t\t\tthis.writeHead[channel] += 1;\n\t\t\tif (this.writeHead[channel] > this.size) {\n\t\t\t\tthis.writeHead[channel] = 0;\n\t\t\t}\n\t\t\tthis.buffer[channel][this.writeHead[channel]] = value;\n\t\t}\n\n\t\t/**\n\t\t * Get the recorded value of the channel given the delay\n\t\t * @param channel number\n\t\t * @param delay number delay samples\n\t\t */\n\t\tget(channel, delay) {\n\t\t\tlet readHead = this.writeHead[channel] - Math.floor(delay);\n\t\t\tif (readHead < 0) {\n\t\t\t\treadHead += this.size;\n\t\t\t}\n\t\t\treturn this.buffer[channel][readHead];\n\t\t}\n\t}\n`;\n\naddToWorklet(delayLine);\n", "import \"../../core/worklet/SingleIOProcessor.worklet\";\nimport \"../../core/worklet/DelayLine.worklet\";\nimport { registerProcessor } from \"../../core/worklet/WorkletGlobalScope\";\n\nexport const workletName = \"feedback-comb-filter\";\n\nconst feedbackCombFilter = /* javascript */`\n\tclass FeedbackCombFilterWorklet extends SingleIOProcessor {\n\n\t\tconstructor(options) {\n\t\t\tsuper(options);\n\t\t\tthis.delayLine = new DelayLine(this.sampleRate, options.channelCount || 2);\n\t\t}\n\n\t\tstatic get parameterDescriptors() {\n\t\t\treturn [{\n\t\t\t\tname: \"delayTime\",\n\t\t\t\tdefaultValue: 0.1,\n\t\t\t\tminValue: 0,\n\t\t\t\tmaxValue: 1,\n\t\t\t\tautomationRate: \"k-rate\"\n\t\t\t}, {\n\t\t\t\tname: \"feedback\",\n\t\t\t\tdefaultValue: 0.5,\n\t\t\t\tminValue: 0,\n\t\t\t\tmaxValue: 0.9999,\n\t\t\t\tautomationRate: \"k-rate\"\n\t\t\t}];\n\t\t}\n\n\t\tgenerate(input, channel, parameters) {\n\t\t\tconst delayedSample = this.delayLine.get(channel, parameters.delayTime * this.sampleRate);\n\t\t\tthis.delayLine.push(channel, input + delayedSample * parameters.feedback);\n\t\t\treturn delayedSample;\n\t\t}\n\t}\n`;\n\nregisterProcessor(workletName, feedbackCombFilter);\n", "import { Gain } from \"../../core/context/Gain\";\nimport { Param } from \"../../core/context/Param\";\nimport { connectSeries, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { NormalRange, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, RecursivePartial } from \"../../core/util/Interface\";\nimport { ToneAudioWorklet } from \"../../core/worklet/ToneAudioWorklet\";\nimport { workletName } from \"./FeedbackCombFilter.worklet\";\n\nexport interface FeedbackCombFilterOptions extends ToneAudioNodeOptions {\n\tdelayTime: Time;\n\tresonance: NormalRange;\n}\n\n/**\n * Comb filters are basic building blocks for physical modeling. Read more\n * about comb filters on [CCRMA's website](https://ccrma.stanford.edu/~jos/pasp/Feedback_Comb_Filters.html).\n * \n * This comb filter is implemented with the AudioWorkletNode which allows it to have feedback delays less than the \n * Web Audio processing block of 128 samples. There is a polyfill for browsers that don't yet support the \n * AudioWorkletNode, but it will add some latency and have slower performance than the AudioWorkletNode. \n * @category Component\n */\nexport class FeedbackCombFilter extends ToneAudioWorklet<FeedbackCombFilterOptions> {\n\n\treadonly name = \"FeedbackCombFilter\";\n\n\t/**\n\t * The amount of delay of the comb filter.\n\t */\n\treadonly delayTime: Param<\"time\">;\n\n\t/**\n\t * The amount of feedback of the delayed signal.\n\t */\n\treadonly resonance: Param<\"normalRange\">;\n\n\treadonly input: Gain;\n\treadonly output: Gain;\n\n\t/**\n\t * @param delayTime The delay time of the filter.\n\t * @param resonance The amount of feedback the filter has.\n\t */\n\tconstructor(delayTime?: Time, resonance?: NormalRange);\n\tconstructor(options?: RecursivePartial<FeedbackCombFilterOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(FeedbackCombFilter.getDefaults(), arguments, [\"delayTime\", \"resonance\"]));\n\t\tconst options = optionsFromArguments(FeedbackCombFilter.getDefaults(), arguments, [\"delayTime\", \"resonance\"]);\n\n\t\tthis.input = new Gain({ context: this.context });\n\t\tthis.output = new Gain({ context: this.context });\n\n\t\tthis.delayTime = new Param<\"time\">({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.delayTime,\n\t\t\tunits: \"time\",\n\t\t\tminValue: 0,\n\t\t\tmaxValue: 1,\n\t\t\tparam: this._dummyParam,\n\t\t\tswappable: true,\n\t\t});\n\n\t\tthis.resonance = new Param<\"normalRange\">({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.resonance,\n\t\t\tunits: \"normalRange\",\n\t\t\tparam: this._dummyParam,\n\t\t\tswappable: true,\n\t\t});\n\n\t\treadOnly(this, [\"resonance\", \"delayTime\"]);\n\t}\n\n\tprotected _audioWorkletName(): string {\n\t\treturn workletName;\n\t}\n\n\t/**\n\t * The default parameters\n\t */\n\tstatic getDefaults(): FeedbackCombFilterOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tdelayTime: 0.1,\n\t\t\tresonance: 0.5,\n\t\t});\n\t}\n\n\tonReady(node: AudioWorkletNode) {\n\t\tconnectSeries(this.input, node, this.output);\n\t\tconst delayTime = node.parameters.get(\"delayTime\") as AudioParam;;\n\t\tthis.delayTime.setParam(delayTime);\n\t\tconst feedback = node.parameters.get(\"feedback\") as AudioParam;;\n\t\tthis.resonance.setParam(feedback);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.input.dispose();\n\t\tthis.output.dispose();\n\t\tthis.delayTime.dispose();\n\t\tthis.resonance.dispose();\n\t\treturn this;\n\t}\n}\n", "import { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Frequency } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Gain } from \"../../core/context/Gain\";\n\nexport type OnePoleFilterType = \"highpass\" | \"lowpass\";\n\nexport interface OnePoleFilterOptions extends ToneAudioNodeOptions {\n\tfrequency: Frequency;\n\ttype: OnePoleFilterType;\n}\n\n/**\n * A one pole filter with 6db-per-octave rolloff. Either \"highpass\" or \"lowpass\". \n * Note that changing the type or frequency may result in a discontinuity which\n * can sound like a click or pop. \n * References: \n * * http://www.earlevel.com/main/2012/12/15/a-one-pole-filter/  \n * * http://www.dspguide.com/ch19/2.htm\n * * https://github.com/vitaliy-bobrov/js-rocks/blob/master/src/app/audio/effects/one-pole-filters.ts\n * @category Component\n */\nexport class OnePoleFilter extends ToneAudioNode<OnePoleFilterOptions> {\n\t\n\treadonly name: string = \"OnePoleFilter\";\n\n\t/**\n\t * Hold the current frequency\n\t */\n\tprivate _frequency: Frequency;\n\n\t/**\n\t * the current one pole type\n\t */\n\tprivate _type: OnePoleFilterType;\n\n\t/**\n\t * the current one pole filter\n\t */\n\tprivate _filter!: IIRFilterNode;\n\n\treadonly input: Gain;\n\treadonly output: Gain;\n\n\t/**\n\t * @param frequency The frequency\n\t * @param type The  filter type, either \"lowpass\" or \"highpass\"\n\t */\n\tconstructor(frequency?: Frequency, type?: OnePoleFilterType);\n\tconstructor(options?: Partial<OnePoleFilterOptions>)\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(OnePoleFilter.getDefaults(), arguments, [\"frequency\", \"type\"]));\n\t\tconst options = optionsFromArguments(OnePoleFilter.getDefaults(), arguments, [\"frequency\", \"type\"]);\n\n\t\tthis._frequency = options.frequency;\n\t\tthis._type = options.type;\n\t\tthis.input = new Gain({ context: this.context });\n\t\tthis.output = new Gain({ context: this.context });\n\t\tthis._createFilter();\n\t}\n\n\tstatic getDefaults(): OnePoleFilterOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tfrequency: 880,\n\t\t\ttype: \"lowpass\" as OnePoleFilterType\n\t\t});\n\t}\n\n\t/**\n\t * Create a filter and dispose the old one\n\t */\n\tprivate _createFilter() {\n\t\tconst oldFilter = this._filter;\n\t\tconst freq = this.toFrequency(this._frequency);\n\t\tconst t = 1 / (2 * Math.PI * freq);\n\t\tif (this._type === \"lowpass\") {\n\t\t\tconst a0 = 1 / (t * this.context.sampleRate);\n\t\t\tconst b1 = a0 - 1;\n\t\t\tthis._filter = this.context.createIIRFilter([a0, 0], [1, b1]);\n\t\t} else {\n\t\t\tconst b1 = 1 / (t * this.context.sampleRate) - 1;\n\t\t\tthis._filter = this.context.createIIRFilter([1, -1], [1, b1]);\n\t\t}\n\t\t\n\t\tthis.input.chain(this._filter, this.output);\n\t\tif (oldFilter) {\n\t\t\t// dispose it on the next block\n\t\t\tthis.context.setTimeout(() => {\n\t\t\t\tif (!this.disposed) {\n\t\t\t\t\tthis.input.disconnect(oldFilter);\n\t\t\t\t\toldFilter.disconnect();\n\t\t\t\t}\n\t\t\t}, this.blockTime);\n\t\t}\n\t}\n\n\t/**\n\t * The frequency value. \n\t */\n\tget frequency(): Frequency {\n\t\treturn this._frequency;\n\t}\n\tset frequency(fq) {\n\t\tthis._frequency = fq;\n\t\tthis._createFilter();\n\t}\n\t\n\t/**\n\t * The OnePole Filter type, either \"highpass\" or \"lowpass\"\n\t */\n\tget type(): OnePoleFilterType {\n\t\treturn this._type;\n\t}\n\tset type(t) {\n\t\tthis._type = t;\n\t\tthis._createFilter();\n\t}\n\n\t/**\n\t * Get the frequency response curve. This curve represents how the filter\n\t * responses to frequencies between 20hz-20khz.\n\t * @param  len The number of values to return\n\t * @return The frequency response curve between 20-20kHz\n\t */\n\tgetFrequencyResponse(len = 128): Float32Array {\n\t\tconst freqValues = new Float32Array(len);\n\t\tfor (let i = 0; i < len; i++) {\n\t\t\tconst norm = Math.pow(i / len, 2);\n\t\t\tconst freq = norm * (20000 - 20) + 20;\n\t\t\tfreqValues[i] = freq;\n\t\t}\n\t\tconst magValues = new Float32Array(len);\n\t\tconst phaseValues = new Float32Array(len);\n\t\tthis._filter.getFrequencyResponse(freqValues, magValues, phaseValues);\n\t\treturn magValues;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.input.dispose();\n\t\tthis.output.dispose();\n\t\tthis._filter.disconnect();\n\t\treturn this;\n\t}\n}\n", "import { Param } from \"../../core/context/Param\";\nimport { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Frequency, NormalRange, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { RecursivePartial } from \"../../core/util/Interface\";\nimport { FeedbackCombFilter } from \"./FeedbackCombFilter\";\nimport { OnePoleFilter } from \"./OnePoleFilter\";\n\ninterface LowpassCombFilterOptions extends ToneAudioNodeOptions {\n\tdelayTime: Time;\n\tresonance: NormalRange;\n\tdampening: Frequency;\n}\n\n/**\n * A lowpass feedback comb filter. It is similar to\n * [[FeedbackCombFilter]], but includes a lowpass filter.\n * @category Component\n */\nexport class LowpassCombFilter extends ToneAudioNode<LowpassCombFilterOptions> {\n\n\treadonly name = \"LowpassCombFilter\";\n\n\t/**\n\t * The delay node\n\t */\n\tprivate _combFilter: FeedbackCombFilter;\n\n\t/**\n\t * The lowpass filter\n\t */\n\tprivate _lowpass: OnePoleFilter;\n\n\t/**\n\t * The delayTime of the comb filter.\n\t */\n\treadonly delayTime: Param<\"time\">;\n\n\t/**\n\t * The amount of feedback of the delayed signal.\n\t */\n\treadonly resonance: Param<\"normalRange\">;\n\n\treadonly input: InputNode;\n\treadonly output: OutputNode;\n\n\t/**\n\t * @param delayTime The delay time of the comb filter\n\t * @param resonance The resonance (feedback) of the comb filter\n\t * @param dampening The cutoff of the lowpass filter dampens the signal as it is fedback.\n\t */\n\tconstructor(delayTime?: Time, resonance?: NormalRange, dampening?: Frequency);\n\tconstructor(options?: RecursivePartial<LowpassCombFilterOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(LowpassCombFilter.getDefaults(), arguments, [\"delayTime\", \"resonance\", \"dampening\"]));\n\t\tconst options = optionsFromArguments(LowpassCombFilter.getDefaults(), arguments, [\"delayTime\", \"resonance\", \"dampening\"]);\n\n\t\tthis._combFilter = this.output = new FeedbackCombFilter({\n\t\t\tcontext: this.context,\n\t\t\tdelayTime: options.delayTime,\n\t\t\tresonance: options.resonance,\n\t\t});\n\t\tthis.delayTime = this._combFilter.delayTime;\n\t\tthis.resonance = this._combFilter.resonance;\n\n\t\tthis._lowpass = this.input = new OnePoleFilter({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.dampening,\n\t\t\ttype: \"lowpass\",\n\t\t});\n\n\t\t// connections\n\t\tthis._lowpass.connect(this._combFilter);\n\t}\n\n\tstatic getDefaults(): LowpassCombFilterOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tdampening: 3000,\n\t\t\tdelayTime: 0.1,\n\t\t\tresonance: 0.5,\n\t\t});\n\t}\n\t\n\t/**\n\t * The dampening control of the feedback\n\t */\n\tget dampening(): Frequency {\n\t\treturn this._lowpass.frequency;\n\t}\n\tset dampening(fq) {\n\t\tthis._lowpass.frequency = fq;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._combFilter.dispose();\n\t\tthis._lowpass.dispose();\n\t\treturn this;\n\t}\n}\n", "import { Frequency, NormalRange, Time } from \"../core/type/Units\";\nimport { LowpassCombFilter } from \"../component/filter/LowpassCombFilter\";\nimport { deepMerge } from \"../core/util/Defaults\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { RecursivePartial } from \"../core/util/Interface\";\nimport { Noise } from \"../source/Noise\";\nimport { Instrument, InstrumentOptions } from \"./Instrument\";\n\nexport interface PluckSynthOptions extends InstrumentOptions {\n\tattackNoise: number;\n\tdampening: Frequency;\n\tresonance: NormalRange;\n\trelease: Time;\n}\n\n/**\n * Karplus-String string synthesis.\n * @example\n * const plucky = new Tone.PluckSynth().toDestination();\n * plucky.triggerAttack(\"C4\", \"+0.5\");\n * plucky.triggerAttack(\"C3\", \"+1\");\n * plucky.triggerAttack(\"C2\", \"+1.5\");\n * plucky.triggerAttack(\"C1\", \"+2\");\n * @category Instrument\n */\nexport class PluckSynth extends Instrument<PluckSynthOptions> {\n\n\treadonly name = \"PluckSynth\";\n\n\t/**\n\t * Noise burst at the beginning\n\t */\n\tprivate _noise: Noise;\n\tprivate _lfcf: LowpassCombFilter;\n\n\t/**\n\t * The amount of noise at the attack.\n\t * Nominal range of [0.1, 20]\n\t * @min 0.1\n\t * @max 20\n\t */\n\tattackNoise: number;\n\n\t/**\n\t * The amount of resonance of the pluck. Also correlates to the sustain duration.\n\t */\n\tresonance: NormalRange;\n\n\t/**\n\t * The release time which corresponds to a resonance ramp down to 0\n\t */\n\trelease: Time;\n\n\tconstructor(options?: RecursivePartial<PluckSynthOptions>)\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(PluckSynth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(PluckSynth.getDefaults(), arguments);\n\n\t\tthis._noise = new Noise({\n\t\t\tcontext: this.context,\n\t\t\ttype: \"pink\"\n\t\t});\n\n\t\tthis.attackNoise = options.attackNoise;\n\n\t\tthis._lfcf = new LowpassCombFilter({\n\t\t\tcontext: this.context,\n\t\t\tdampening: options.dampening,\n\t\t\tresonance: options.resonance,\n\t\t});\n\n\t\tthis.resonance = options.resonance;\n\t\tthis.release = options.release;\n\n\t\tthis._noise.connect(this._lfcf);\n\t\tthis._lfcf.connect(this.output);\n\t}\n\n\tstatic getDefaults(): PluckSynthOptions {\n\t\treturn deepMerge(Instrument.getDefaults(), {\n\t\t\tattackNoise: 1,\n\t\t\tdampening: 4000,\n\t\t\tresonance: 0.7,\n\t\t\trelease: 1,\n\t\t});\n\t}\n\n\t/**\n\t * The dampening control. i.e. the lowpass filter frequency of the comb filter\n\t * @min 0\n\t * @max 7000\n\t */\n\tget dampening(): Frequency {\n\t\treturn this._lfcf.dampening;\n\t}\n\tset dampening(fq) {\n\t\tthis._lfcf.dampening = fq;\n\t}\n\n\ttriggerAttack(note: Frequency, time?: Time): this {\n\t\tconst freq = this.toFrequency(note);\n\t\ttime = this.toSeconds(time);\n\t\tconst delayAmount = 1 / freq;\n\t\tthis._lfcf.delayTime.setValueAtTime(delayAmount, time);\n\t\tthis._noise.start(time);\n\t\tthis._noise.stop(time + delayAmount * this.attackNoise);\n\t\tthis._lfcf.resonance.cancelScheduledValues(time);\n\t\tthis._lfcf.resonance.setValueAtTime(this.resonance, time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Ramp down the [[resonance]] to 0 over the duration of the release time.\n\t */\n\ttriggerRelease(time?: Time): this {\n\t\tthis._lfcf.resonance.linearRampTo(0, this.release, time);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._noise.dispose();\n\t\tthis._lfcf.dispose();\n\t\treturn this;\n\t}\n}\n", "import { MidiClass } from \"../core/type/Midi\";\nimport { Frequency, MidiNote, NormalRange, Seconds, Time } from \"../core/type/Units\";\nimport { deepMerge, omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { RecursivePartial } from \"../core/util/Interface\";\nimport { isArray, isNumber } from \"../core/util/TypeCheck\";\nimport { Instrument, InstrumentOptions } from \"./Instrument\";\nimport { MembraneSynth, MembraneSynthOptions } from \"./MembraneSynth\";\nimport { FMSynth, FMSynthOptions } from \"./FMSynth\";\nimport { AMSynth, AMSynthOptions } from \"./AMSynth\";\nimport { MonoSynth, MonoSynthOptions } from \"./MonoSynth\";\nimport { MetalSynth, MetalSynthOptions } from \"./MetalSynth\";\nimport { Monophonic } from \"./Monophonic\";\nimport { Synth, SynthOptions } from \"./Synth\";\nimport { assert, warn } from \"../core/util/Debug\";\n\ntype VoiceConstructor<V> = {\n\tgetDefaults: () => VoiceOptions<V>;\n} & (new (...args: any[]) => V);\n\ntype OmitMonophonicOptions<T> = Omit<T, \"context\" | \"onsilence\">;\n\ntype VoiceOptions<T> =\n\tT extends MembraneSynth ? MembraneSynthOptions :\n\t\tT extends MetalSynth ? MetalSynthOptions :\n\t\t\tT extends FMSynth ? FMSynthOptions :\n\t\t\t\tT extends MonoSynth ? MonoSynthOptions :\n\t\t\t\t\tT extends AMSynth ? AMSynthOptions :\n\t\t\t\t\t\tT extends Synth ? SynthOptions :\n\t\t\t\t\t\t\tnever;\n\n/**\n * The settable synth options. excludes monophonic options.\n */\ntype PartialVoiceOptions<T> = RecursivePartial<OmitMonophonicOptions<VoiceOptions<T>>>;\n\nexport interface PolySynthOptions<Voice> extends InstrumentOptions {\n\tmaxPolyphony: number;\n\tvoice: VoiceConstructor<Voice>;\n\toptions: PartialVoiceOptions<Voice>;\n}\n\n/**\n * PolySynth handles voice creation and allocation for any\n * instruments passed in as the second paramter. PolySynth is\n * not a synthesizer by itself, it merely manages voices of\n * one of the other types of synths, allowing any of the\n * monophonic synthesizers to be polyphonic.\n *\n * @example\n * const synth = new Tone.PolySynth().toDestination();\n * // set the attributes across all the voices using 'set'\n * synth.set({ detune: -1200 });\n * // play a chord\n * synth.triggerAttackRelease([\"C4\", \"E4\", \"A4\"], 1);\n * @category Instrument\n */\nexport class PolySynth<Voice extends Monophonic<any> = Synth> extends Instrument<VoiceOptions<Voice>> {\n\n\treadonly name: string = \"PolySynth\";\n\n\t/**\n\t * The voices which are not currently in use\n\t */\n\tprivate _availableVoices: Voice[] = [];\n\n\t/**\n\t * The currently active voices\n\t */\n\tprivate _activeVoices: Array<{ midi: MidiNote; voice: Voice; released: boolean }> = [];\n\n\t/**\n\t * All of the allocated voices for this synth.\n\t */\n\tprivate _voices: Voice[] = [];\n\n\t/**\n\t * The options that are set on the synth.\n\t */\n\tprivate options: VoiceOptions<Voice>;\n\n\t/**\n\t * The polyphony limit.\n\t */\n\tmaxPolyphony: number;\n\n\t/**\n\t * The voice constructor\n\t */\n\tprivate readonly voice: VoiceConstructor<Voice>;\n\n\t/**\n\t * A voice used for holding the get/set values\n\t */\n\tprivate _dummyVoice: Voice;\n\n\t/**\n\t * The GC timeout. Held so that it could be cancelled when the node is disposed.\n\t */\n\tprivate _gcTimeout = -1;\n\n\t/**\n\t * A moving average of the number of active voices\n\t */\n\tprivate _averageActiveVoices = 0;\n\n\t/**\n\t * @param voice The constructor of the voices\n\t * @param options\tThe options object to set the synth voice\n\t */\n\tconstructor(\n\t\tvoice?: VoiceConstructor<Voice>,\n\t\toptions?: PartialVoiceOptions<Voice>,\n\t);\n\tconstructor(options?: Partial<PolySynthOptions<Voice>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(PolySynth.getDefaults(), arguments, [\"voice\", \"options\"]));\n\t\tconst options = optionsFromArguments(PolySynth.getDefaults(), arguments, [\"voice\", \"options\"]);\n\n\t\t// check against the old API (pre 14.3.0)\n\t\tassert(!isNumber(options.voice), \"DEPRECATED: The polyphony count is no longer the first argument.\");\n\n\t\tconst defaults = options.voice.getDefaults();\n\t\tthis.options = Object.assign(defaults, options.options) as VoiceOptions<Voice>;\n\t\tthis.voice = options.voice as unknown as VoiceConstructor<Voice>;\n\t\tthis.maxPolyphony = options.maxPolyphony;\n\n\t\t// create the first voice\n\t\tthis._dummyVoice = this._getNextAvailableVoice() as Voice;\n\t\t// remove it from the voices list\n\t\tconst index = this._voices.indexOf(this._dummyVoice);\n\t\tthis._voices.splice(index, 1);\n\t\t// kick off the GC interval\n\t\tthis._gcTimeout = this.context.setInterval(this._collectGarbage.bind(this), 1);\n\t}\n\n\tstatic getDefaults(): PolySynthOptions<Synth> {\n\t\treturn Object.assign(Instrument.getDefaults(), {\n\t\t\tmaxPolyphony: 32,\n\t\t\toptions: {},\n\t\t\tvoice: Synth,\n\t\t});\n\t}\n\n\t/**\n\t * The number of active voices.\n\t */\n\tget activeVoices(): number {\n\t\treturn this._activeVoices.length;\n\t}\n\n\t/**\n\t * Invoked when the source is done making sound, so that it can be\n\t * readded to the pool of available voices\n\t */\n\tprivate _makeVoiceAvailable(voice: Voice): void {\n\t\tthis._availableVoices.push(voice);\n\t\t// remove the midi note from 'active voices'\n\t\tconst activeVoiceIndex = this._activeVoices.findIndex((e) => e.voice === voice);\n\t\tthis._activeVoices.splice(activeVoiceIndex, 1);\n\t}\n\n\t/**\n\t * Get an available voice from the pool of available voices.\n\t * If one is not available and the maxPolyphony limit is reached,\n\t * steal a voice, otherwise return null.\n\t */\n\tprivate _getNextAvailableVoice(): Voice | undefined {\n\t\t// if there are available voices, return the first one\n\t\tif (this._availableVoices.length) {\n\t\t\treturn this._availableVoices.shift();\n\t\t} else if (this._voices.length < this.maxPolyphony) {\n\t\t\t// otherwise if there is still more maxPolyphony, make a new voice\n\t\t\tconst voice = new this.voice(Object.assign(this.options, {\n\t\t\t\tcontext: this.context,\n\t\t\t\tonsilence: this._makeVoiceAvailable.bind(this),\n\t\t\t}));\n\t\t\tvoice.connect(this.output);\n\t\t\tthis._voices.push(voice);\n\t\t\treturn voice;\n\t\t} else {\n\t\t\twarn(\"Max polyphony exceeded. Note dropped.\");\n\t\t}\n\t}\n\n\t/**\n\t * Occasionally check if there are any allocated voices which can be cleaned up.\n\t */\n\tprivate _collectGarbage(): void {\n\t\tthis._averageActiveVoices = Math.max(this._averageActiveVoices * 0.95, this.activeVoices);\n\t\tif (this._availableVoices.length && this._voices.length > Math.ceil(this._averageActiveVoices + 1)) {\n\t\t\t// take off an available note\n\t\t\tconst firstAvail = this._availableVoices.shift() as Voice;\n\t\t\tconst index = this._voices.indexOf(firstAvail);\n\t\t\tthis._voices.splice(index, 1);\n\t\t\tif (!this.context.isOffline) {\n\t\t\t\tfirstAvail.dispose();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Internal method which triggers the attack\n\t */\n\tprivate _triggerAttack(notes: Frequency[], time: Seconds, velocity?: NormalRange): void {\n\t\tnotes.forEach(note => {\n\t\t\tconst midiNote = new MidiClass(this.context, note).toMidi();\n\t\t\tconst voice = this._getNextAvailableVoice();\n\t\t\tif (voice) {\n\t\t\t\tvoice.triggerAttack(note, time, velocity);\n\t\t\t\tthis._activeVoices.push({\n\t\t\t\t\tmidi: midiNote, voice, released: false,\n\t\t\t\t});\n\t\t\t\tthis.log(\"triggerAttack\", note, time);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Internal method which triggers the release\n\t */\n\tprivate _triggerRelease(notes: Frequency[], time: Seconds): void {\n\t\tnotes.forEach(note => {\n\t\t\tconst midiNote = new MidiClass(this.context, note).toMidi();\n\t\t\tconst event = this._activeVoices.find(({ midi, released }) => midi === midiNote && !released);\n\t\t\tif (event) {\n\t\t\t\t// trigger release on that note\n\t\t\t\tevent.voice.triggerRelease(time);\n\t\t\t\t// mark it as released\n\t\t\t\tevent.released = true;\n\t\t\t\tthis.log(\"triggerRelease\", note, time);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Schedule the attack/release events. If the time is in the future, then it should set a timeout\n\t * to wait for just-in-time scheduling\n\t */\n\tprivate _scheduleEvent(type: \"attack\" | \"release\", notes: Frequency[], time: Seconds, velocity?: NormalRange): void {\n\t\tassert(!this.disposed, \"Synth was already disposed\");\n\t\t// if the notes are greater than this amount of time in the future, they should be scheduled with setTimeout\n\t\tif (time <= this.now()) {\n\t\t\t// do it immediately\n\t\t\tif (type === \"attack\") {\n\t\t\t\tthis._triggerAttack(notes, time, velocity);\n\t\t\t} else {\n\t\t\t\tthis._triggerRelease(notes, time);\n\t\t\t}\n\t\t} else {\n\t\t\t// schedule it to start in the future\n\t\t\tthis.context.setTimeout(() => {\n\t\t\t\tthis._scheduleEvent(type, notes, time, velocity);\n\t\t\t}, time - this.now());\n\t\t}\n\t}\n\n\t/**\n\t * Trigger the attack portion of the note\n\t * @param  notes The notes to play. Accepts a single Frequency or an array of frequencies.\n\t * @param  time  The start time of the note.\n\t * @param velocity The velocity of the note.\n\t * @example\n\t * const synth = new Tone.PolySynth(Tone.FMSynth).toDestination();\n\t * // trigger a chord immediately with a velocity of 0.2\n\t * synth.triggerAttack([\"Ab3\", \"C4\", \"F5\"], Tone.now(), 0.2);\n\t */\n\ttriggerAttack(notes: Frequency | Frequency[], time?: Time, velocity?: NormalRange): this {\n\n\t\tif (!Array.isArray(notes)) {\n\t\t\tnotes = [notes];\n\t\t}\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._scheduleEvent(\"attack\", notes, computedTime, velocity);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Trigger the release of the note. Unlike monophonic instruments,\n\t * a note (or array of notes) needs to be passed in as the first argument.\n\t * @param  notes The notes to play. Accepts a single Frequency or an array of frequencies.\n\t * @param  time  When the release will be triggered.\n\t * @example\n\t * @example\n\t * const poly = new Tone.PolySynth(Tone.AMSynth).toDestination();\n\t * poly.triggerAttack([\"Ab3\", \"C4\", \"F5\"]);\n\t * // trigger the release of the given notes. \n\t * poly.triggerRelease([\"Ab3\", \"C4\"], \"+1\");\n\t * poly.triggerRelease(\"F5\", \"+3\");\n\t */\n\ttriggerRelease(notes: Frequency | Frequency[], time?: Time): this {\n\t\tif (!Array.isArray(notes)) {\n\t\t\tnotes = [notes];\n\t\t}\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._scheduleEvent(\"release\", notes, computedTime);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Trigger the attack and release after the specified duration\n\t * @param  notes The notes to play. Accepts a single  Frequency or an array of frequencies.\n\t * @param  duration the duration of the note\n\t * @param  time  if no time is given, defaults to now\n\t * @param  velocity the velocity of the attack (0-1)\n\t * @example\n\t * const poly = new Tone.PolySynth(Tone.AMSynth).toDestination();\n\t * // can pass in an array of durations as well\n\t * poly.triggerAttackRelease([\"Eb3\", \"G4\", \"Bb4\", \"D5\"], [4, 3, 2, 1]);\n\t */\n\ttriggerAttackRelease(\n\t\tnotes: Frequency | Frequency[],\n\t\tduration: Time | Time[],\n\t\ttime?: Time,\n\t\tvelocity?: NormalRange,\n\t): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis.triggerAttack(notes, computedTime, velocity);\n\t\tif (isArray(duration)) {\n\t\t\tassert(isArray(notes), \"If the duration is an array, the notes must also be an array\");\n\t\t\tnotes = notes as Frequency[];\n\t\t\tfor (let i = 0; i < notes.length; i++) {\n\t\t\t\tconst d = duration[Math.min(i, duration.length - 1)];\n\t\t\t\tconst durationSeconds = this.toSeconds(d);\n\t\t\t\tassert(durationSeconds > 0, \"The duration must be greater than 0\");\n\t\t\t\tthis.triggerRelease(notes[i], computedTime + durationSeconds);\n\t\t\t}\n\t\t} else {\n\t\t\tconst durationSeconds = this.toSeconds(duration);\n\t\t\tassert(durationSeconds > 0, \"The duration must be greater than 0\");\n\t\t\tthis.triggerRelease(notes, computedTime + durationSeconds);\n\t\t}\n\t\treturn this;\n\t}\n\n\tsync(): this {\n\t\tif (this._syncState()) {\n\t\t\tthis._syncMethod(\"triggerAttack\", 1);\n\t\t\tthis._syncMethod(\"triggerRelease\", 1);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set a member/attribute of the voices\n\t * @example\n\t * const poly = new Tone.PolySynth().toDestination();\n\t * // set all of the voices using an options object for the synth type\n\t * poly.set({\n\t * \tenvelope: {\n\t * \t\tattack: 0.25\n\t * \t}\n\t * });\n\t * poly.triggerAttackRelease(\"Bb3\", 0.2);\n\t */\n\tset(options: RecursivePartial<VoiceOptions<Voice>>): this {\n\t\t// remove options which are controlled by the PolySynth\n\t\tconst sanitizedOptions = omitFromObject(options, [\"onsilence\", \"context\"]);\n\t\t// store all of the options\n\t\tthis.options = deepMerge(this.options, sanitizedOptions);\n\t\tthis._voices.forEach(voice => voice.set(sanitizedOptions));\n\t\tthis._dummyVoice.set(sanitizedOptions);\n\t\treturn this;\n\t}\n\n\tget(): VoiceOptions<Voice> {\n\t\treturn this._dummyVoice.get();\n\t}\n\n\t/**\n\t * Trigger the release portion of all the currently active voices immediately.\n\t * Useful for silencing the synth.\n\t */\n\treleaseAll(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._activeVoices.forEach(({ voice }) => {\n\t\t\tvoice.triggerRelease(computedTime);\n\t\t});\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._dummyVoice.dispose();\n\t\tthis._voices.forEach(v => v.dispose());\n\t\tthis._activeVoices = [];\n\t\tthis._availableVoices = [];\n\t\tthis.context.clearInterval(this._gcTimeout);\n\t\treturn this;\n\t}\n}\n", "import { ToneAudioBuffer } from \"../core/context/ToneAudioBuffer\";\nimport { ToneAudioBuffers } from \"../core/context/ToneAudioBuffers\";\nimport { ftomf, intervalToFrequencyRatio } from \"../core/type/Conversions\";\nimport { FrequencyClass } from \"../core/type/Frequency\";\nimport { Frequency, Interval, MidiNote, NormalRange, Note, Time } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { isArray, isNote, isNumber } from \"../core/util/TypeCheck\";\nimport { Instrument, InstrumentOptions } from \"../instrument/Instrument\";\nimport { ToneBufferSource, ToneBufferSourceCurve } from \"../source/buffer/ToneBufferSource\";\nimport { timeRange } from \"../core/util/Decorator\";\nimport { assert } from \"../core/util/Debug\";\n\ninterface SamplesMap {\n\t[note: string]: ToneAudioBuffer | AudioBuffer | string;\n\t[midi: number]: ToneAudioBuffer | AudioBuffer | string;\n}\n\nexport interface SamplerOptions extends InstrumentOptions {\n\tattack: Time;\n\trelease: Time;\n\tonload: () => void;\n\tonerror: (error: Error) => void;\n\tbaseUrl: string;\n\tcurve: ToneBufferSourceCurve;\n\turls: SamplesMap;\n}\n\n/**\n * Pass in an object which maps the note's pitch or midi value to the url,\n * then you can trigger the attack and release of that note like other instruments.\n * By automatically repitching the samples, it is possible to play pitches which\n * were not explicitly included which can save loading time.\n *\n * For sample or buffer playback where repitching is not necessary,\n * use [[Player]].\n * @example\n * const sampler = new Tone.Sampler({\n * \turls: {\n * \t\tA1: \"A1.mp3\",\n * \t\tA2: \"A2.mp3\",\n * \t},\n * \tbaseUrl: \"https://tonejs.github.io/audio/casio/\",\n * \tonload: () => {\n * \t\tsampler.triggerAttackRelease([\"C1\", \"E1\", \"G1\", \"B1\"], 0.5);\n * \t}\n * }).toDestination();\n * @category Instrument\n */\nexport class Sampler extends Instrument<SamplerOptions> {\n\n\treadonly name: string = \"Sampler\";\n\n\t/**\n\t * The stored and loaded buffers\n\t */\n\tprivate _buffers: ToneAudioBuffers;\n\n\t/**\n\t * The object of all currently playing BufferSources\n\t */\n\tprivate _activeSources: Map<MidiNote, ToneBufferSource[]> = new Map();\n\n\t/**\n\t * The envelope applied to the beginning of the sample.\n\t * @min 0\n\t * @max 1\n\t */\n\t@timeRange(0)\n\tattack: Time;\n\n\t/**\n\t * The envelope applied to the end of the envelope.\n\t * @min 0\n\t * @max 1\n\t */\n\t@timeRange(0)\n\trelease: Time;\n\n\t/**\n\t * The shape of the attack/release curve.\n\t * Either \"linear\" or \"exponential\"\n\t */\n\tcurve: ToneBufferSourceCurve;\n\n\t/**\n\t * @param samples An object of samples mapping either Midi Note Numbers or\n\t * \t\t\tScientific Pitch Notation to the url of that sample.\n\t * @param onload The callback to invoke when all of the samples are loaded.\n\t * @param baseUrl The root URL of all of the samples, which is prepended to all the URLs.\n\t */\n\tconstructor(samples?: SamplesMap, onload?: () => void, baseUrl?: string);\n\t/**\n\t * @param samples An object of samples mapping either Midi Note Numbers or\n\t * \t\t\tScientific Pitch Notation to the url of that sample.\n\t * @param options The remaining options associated with the sampler\n\t */\n\tconstructor(samples?: SamplesMap, options?: Partial<Omit<SamplerOptions, \"urls\">>);\n\tconstructor(options?: Partial<SamplerOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Sampler.getDefaults(), arguments, [\"urls\", \"onload\", \"baseUrl\"], \"urls\"));\n\t\tconst options = optionsFromArguments(Sampler.getDefaults(), arguments, [\"urls\", \"onload\", \"baseUrl\"], \"urls\");\n\n\t\tconst urlMap = {};\n\t\tObject.keys(options.urls).forEach((note) => {\n\t\t\tconst noteNumber = parseInt(note, 10);\n\t\t\tassert(isNote(note)\n\t\t\t\t|| (isNumber(noteNumber) && isFinite(noteNumber)), `url key is neither a note or midi pitch: ${note}`);\n\t\t\tif (isNote(note)) {\n\t\t\t\t// convert the note name to MIDI\n\t\t\t\tconst mid = new FrequencyClass(this.context, note).toMidi();\n\t\t\t\turlMap[mid] = options.urls[note];\n\t\t\t} else if (isNumber(noteNumber) && isFinite(noteNumber)) {\n\t\t\t\t// otherwise if it's numbers assume it's midi\n\t\t\t\turlMap[noteNumber] = options.urls[noteNumber];\n\t\t\t}\n\t\t});\n\n\t\tthis._buffers = new ToneAudioBuffers({\n\t\t\turls: urlMap,\n\t\t\tonload: options.onload,\n\t\t\tbaseUrl: options.baseUrl,\n\t\t\tonerror: options.onerror,\n\t\t});\n\t\tthis.attack = options.attack;\n\t\tthis.release = options.release;\n\t\tthis.curve = options.curve;\n\n\t\t// invoke the callback if it's already loaded\n\t\tif (this._buffers.loaded) {\n\t\t\t// invoke onload deferred\n\t\t\tPromise.resolve().then(options.onload);\n\t\t}\n\t}\n\n\tstatic getDefaults(): SamplerOptions {\n\t\treturn Object.assign(Instrument.getDefaults(), {\n\t\t\tattack: 0,\n\t\t\tbaseUrl: \"\",\n\t\t\tcurve: \"exponential\" as \"exponential\",\n\t\t\tonload: noOp,\n\t\t\tonerror: noOp,\n\t\t\trelease: 0.1,\n\t\t\turls: {},\n\t\t});\n\t}\n\n\t/**\n\t * Returns the difference in steps between the given midi note at the closets sample.\n\t */\n\tprivate _findClosest(midi: MidiNote): Interval {\n\t\t// searches within 8 octaves of the given midi note\n\t\tconst MAX_INTERVAL = 96;\n\t\tlet interval = 0;\n\t\twhile (interval < MAX_INTERVAL) {\n\t\t\t// check above and below\n\t\t\tif (this._buffers.has(midi + interval)) {\n\t\t\t\treturn -interval;\n\t\t\t} else if (this._buffers.has(midi - interval)) {\n\t\t\t\treturn interval;\n\t\t\t}\n\t\t\tinterval++;\n\t\t}\n\t\tthrow new Error(`No available buffers for note: ${midi}`);\n\t}\n\n\t/**\n\t * @param  notes\tThe note to play, or an array of notes.\n\t * @param  time     When to play the note\n\t * @param  velocity The velocity to play the sample back.\n\t */\n\ttriggerAttack(notes: Frequency | Frequency[], time?: Time, velocity: NormalRange = 1): this {\n\t\tthis.log(\"triggerAttack\", notes, time, velocity);\n\t\tif (!Array.isArray(notes)) {\n\t\t\tnotes = [notes];\n\t\t}\n\t\tnotes.forEach(note => {\n\t\t\tconst midiFloat = ftomf(new FrequencyClass(this.context, note).toFrequency());\n\t\t\tconst midi = Math.round(midiFloat) as MidiNote;\n\t\t\tconst remainder = midiFloat - midi;\n\t\t\t// find the closest note pitch\n\t\t\tconst difference = this._findClosest(midi);\n\t\t\tconst closestNote = midi - difference;\n\t\t\tconst buffer = this._buffers.get(closestNote);\n\t\t\tconst playbackRate = intervalToFrequencyRatio(difference + remainder);\n\t\t\t// play that note\n\t\t\tconst source = new ToneBufferSource({\n\t\t\t\turl: buffer,\n\t\t\t\tcontext: this.context,\n\t\t\t\tcurve: this.curve,\n\t\t\t\tfadeIn: this.attack,\n\t\t\t\tfadeOut: this.release,\n\t\t\t\tplaybackRate,\n\t\t\t}).connect(this.output);\n\t\t\tsource.start(time, 0, buffer.duration / playbackRate, velocity);\n\t\t\t// add it to the active sources\n\t\t\tif (!isArray(this._activeSources.get(midi))) {\n\t\t\t\tthis._activeSources.set(midi, []);\n\t\t\t}\n\t\t\t(this._activeSources.get(midi) as ToneBufferSource[]).push(source);\n\n\t\t\t// remove it when it's done\n\t\t\tsource.onended = () => {\n\t\t\t\tif (this._activeSources && this._activeSources.has(midi)) {\n\t\t\t\t\tconst sources = this._activeSources.get(midi) as ToneBufferSource[];\n\t\t\t\t\tconst index = sources.indexOf(source);\n\t\t\t\t\tif (index !== -1) {\n\t\t\t\t\t\tsources.splice(index, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * @param  notes\tThe note to release, or an array of notes.\n\t * @param  time     \tWhen to release the note.\n\t */\n\ttriggerRelease(notes: Frequency | Frequency[], time?: Time): this {\n\t\tthis.log(\"triggerRelease\", notes, time);\n\t\tif (!Array.isArray(notes)) {\n\t\t\tnotes = [notes];\n\t\t}\n\t\tnotes.forEach(note => {\n\t\t\tconst midi = new FrequencyClass(this.context, note).toMidi();\n\t\t\t// find the note\n\t\t\tif (this._activeSources.has(midi) && (this._activeSources.get(midi) as ToneBufferSource[]).length) {\n\t\t\t\tconst sources = this._activeSources.get(midi) as ToneBufferSource[];\n\t\t\t\ttime = this.toSeconds(time);\n\t\t\t\tsources.forEach(source => {\n\t\t\t\t\tsource.stop(time);\n\t\t\t\t});\n\t\t\t\tthis._activeSources.set(midi, []);\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Release all currently active notes.\n\t * @param  time     \tWhen to release the notes.\n\t */\n\treleaseAll(time?: Time): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._activeSources.forEach(sources => {\n\t\t\twhile (sources.length) {\n\t\t\t\tconst source = sources.shift() as ToneBufferSource;\n\t\t\t\tsource.stop(computedTime);\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\tsync(): this {\n\t\tif (this._syncState()) {\n\t\t\tthis._syncMethod(\"triggerAttack\", 1);\n\t\t\tthis._syncMethod(\"triggerRelease\", 1);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Invoke the attack phase, then after the duration, invoke the release.\n\t * @param  notes\tThe note to play and release, or an array of notes.\n\t * @param  duration The time the note should be held\n\t * @param  time     When to start the attack\n\t * @param  velocity The velocity of the attack\n\t */\n\ttriggerAttackRelease(\n\t\tnotes: Frequency[] | Frequency,\n\t\tduration: Time | Time[],\n\t\ttime?: Time,\n\t\tvelocity: NormalRange = 1,\n\t): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis.triggerAttack(notes, computedTime, velocity);\n\t\tif (isArray(duration)) {\n\t\t\tassert(isArray(notes), \"notes must be an array when duration is array\");\n\t\t\t(notes as Frequency[]).forEach((note, index) => {\n\t\t\t\tconst d = duration[Math.min(index, duration.length - 1)];\n\t\t\t\tthis.triggerRelease(note, computedTime + this.toSeconds(d));\n\t\t\t});\n\t\t} else {\n\t\t\tthis.triggerRelease(notes, computedTime + this.toSeconds(duration));\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Add a note to the sampler.\n\t * @param  note      The buffer's pitch.\n\t * @param  url  Either the url of the buffer, or a buffer which will be added with the given name.\n\t * @param  callback  The callback to invoke when the url is loaded.\n\t */\n\tadd(note: Note | MidiNote, url: string | ToneAudioBuffer | AudioBuffer, callback?: () => void): this {\n\t\tassert(isNote(note) || isFinite(note), `note must be a pitch or midi: ${note}`);\n\t\tif (isNote(note)) {\n\t\t\t// convert the note name to MIDI\n\t\t\tconst mid = new FrequencyClass(this.context, note).toMidi();\n\t\t\tthis._buffers.add(mid, url, callback);\n\t\t} else {\n\t\t\t// otherwise if it's numbers assume it's midi\n\t\t\tthis._buffers.add(note, url, callback);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * If the buffers are loaded or not\n\t */\n\tget loaded(): boolean {\n\t\treturn this._buffers.loaded;\n\t}\n\n\t/**\n\t * Clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._buffers.dispose();\n\t\tthis._activeSources.forEach(sources => {\n\t\t\tsources.forEach(source => source.dispose());\n\t\t});\n\t\tthis._activeSources.clear();\n\t\treturn this;\n\t}\n}\n", "import \"../core/clock/Transport\";\nimport { ToneWithContext, ToneWithContextOptions } from \"../core/context/ToneWithContext\";\nimport { TicksClass } from \"../core/type/Ticks\";\nimport { TransportTimeClass } from \"../core/type/TransportTime\";\nimport { NormalRange, Positive, Seconds, Ticks, Time, TransportTime } from \"../core/type/Units\";\nimport { defaultArg, optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { BasicPlaybackState, StateTimeline } from \"../core/util/StateTimeline\";\nimport { isBoolean, isNumber } from \"../core/util/TypeCheck\";\n\nexport type ToneEventCallback<T> = (time: Seconds, value: T) => void;\n\nexport interface ToneEventOptions<T> extends ToneWithContextOptions {\n\tcallback: ToneEventCallback<T>;\n\tloop: boolean | number;\n\tloopEnd: Time;\n\tloopStart: Time;\n\tplaybackRate: Positive;\n\tvalue?: T;\n\tprobability: NormalRange;\n\tmute: boolean;\n\thumanize: boolean | Time;\n}\n\n/**\n * ToneEvent abstracts away this.context.transport.schedule and provides a schedulable\n * callback for a single or repeatable events along the timeline.\n *\n * @example\n * const synth = new Tone.PolySynth().toDestination();\n * const chordEvent = new Tone.ToneEvent(((time, chord) => {\n * \t// the chord as well as the exact time of the event\n * \t// are passed in as arguments to the callback function\n * \tsynth.triggerAttackRelease(chord, 0.5, time);\n * }), [\"D4\", \"E4\", \"F4\"]);\n * // start the chord at the beginning of the transport timeline\n * chordEvent.start();\n * // loop it every measure for 8 measures\n * chordEvent.loop = 8;\n * chordEvent.loopEnd = \"1m\";\n * @category Event\n */\nexport class ToneEvent<ValueType = any> extends ToneWithContext<ToneEventOptions<ValueType>> {\n\n\treadonly name: string = \"ToneEvent\";\n\n\t/**\n\t * Loop value\n\t */\n\tprotected _loop: boolean | number;\n\n\t/**\n\t * The callback to invoke.\n\t */\n\tcallback: ToneEventCallback<ValueType>;\n\n\t/**\n\t * The value which is passed to the\n\t * callback function.\n\t */\n\tvalue: ValueType;\n\n\t/**\n\t * When the note is scheduled to start.\n\t */\n\tprotected _loopStart: Ticks;\n\n\t/**\n\t * When the note is scheduled to start.\n\t */\n\tprotected _loopEnd: Ticks;\n\n\t/**\n\t * Tracks the scheduled events\n\t */\n\tprotected _state: StateTimeline<{\n\t\tid: number;\n\t}> = new StateTimeline(\"stopped\");\n\n\t/**\n\t * The playback speed of the note. A speed of 1\n\t * is no change.\n\t */\n\tprotected _playbackRate: Positive;\n\n\t/**\n\t * A delay time from when the event is scheduled to start\n\t */\n\tprotected _startOffset: Ticks = 0;\n\n\t/**\n\t * private holder of probability value\n\t */\n\tprotected _probability: NormalRange;\n\n\t/**\n\t * the amount of variation from the given time.\n\t */\n\tprotected _humanize: boolean | Time;\n\n\t/**\n\t * If mute is true, the callback won't be invoked.\n\t */\n\tmute: boolean;\n\n\t/**\n\t * @param callback The callback to invoke at the time.\n\t * @param value The value or values which should be passed to the callback function on invocation.\n\t */\n\tconstructor(callback?: ToneEventCallback<ValueType>, value?: ValueType);\n\tconstructor(options?: Partial<ToneEventOptions<ValueType>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(ToneEvent.getDefaults(), arguments, [\"callback\", \"value\"]));\n\t\tconst options = optionsFromArguments(ToneEvent.getDefaults(), arguments, [\"callback\", \"value\"]);\n\n\t\tthis._loop = options.loop;\n\t\tthis.callback = options.callback;\n\t\tthis.value = options.value;\n\t\tthis._loopStart = this.toTicks(options.loopStart);\n\t\tthis._loopEnd = this.toTicks(options.loopEnd);\n\t\tthis._playbackRate = options.playbackRate;\n\t\tthis._probability = options.probability;\n\t\tthis._humanize = options.humanize;\n\t\tthis.mute = options.mute;\n\t\tthis._playbackRate = options.playbackRate;\n\t\tthis._state.increasing = true;\n\t\t// schedule the events for the first time\n\t\tthis._rescheduleEvents();\n\t}\n\n\tstatic getDefaults(): ToneEventOptions<any> {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tcallback: noOp,\n\t\t\thumanize: false,\n\t\t\tloop: false,\n\t\t\tloopEnd: \"1m\",\n\t\t\tloopStart: 0,\n\t\t\tmute: false,\n\t\t\tplaybackRate: 1,\n\t\t\tprobability: 1,\n\t\t\tvalue: null,\n\t\t});\n\t}\n\n\t/**\n\t * Reschedule all of the events along the timeline\n\t * with the updated values.\n\t * @param after Only reschedules events after the given time.\n\t */\n\tprivate _rescheduleEvents(after: Ticks = -1): void {\n\t\t// if no argument is given, schedules all of the events\n\t\tthis._state.forEachFrom(after, event => {\n\t\t\tlet duration;\n\t\t\tif (event.state === \"started\") {\n\t\t\t\tif (event.id !== -1) {\n\t\t\t\t\tthis.context.transport.clear(event.id);\n\t\t\t\t}\n\t\t\t\tconst startTick = event.time + Math.round(this.startOffset / this._playbackRate);\n\t\t\t\tif (this._loop === true || isNumber(this._loop) && this._loop > 1) {\n\t\t\t\t\tduration = Infinity;\n\t\t\t\t\tif (isNumber(this._loop)) {\n\t\t\t\t\t\tduration = (this._loop) * this._getLoopDuration();\n\t\t\t\t\t}\n\t\t\t\t\tconst nextEvent = this._state.getAfter(startTick);\n\t\t\t\t\tif (nextEvent !== null) {\n\t\t\t\t\t\tduration = Math.min(duration, nextEvent.time - startTick);\n\t\t\t\t\t}\n\t\t\t\t\tif (duration !== Infinity) {\n\t\t\t\t\t\t// schedule a stop since it's finite duration\n\t\t\t\t\t\tthis._state.setStateAtTime(\"stopped\", startTick + duration + 1, { id: -1 });\n\t\t\t\t\t\tduration = new TicksClass(this.context, duration);\n\t\t\t\t\t}\n\t\t\t\t\tconst interval = new TicksClass(this.context, this._getLoopDuration());\n\t\t\t\t\tevent.id = this.context.transport.scheduleRepeat(\n\t\t\t\t\t\tthis._tick.bind(this), interval, new TicksClass(this.context, startTick), duration);\n\t\t\t\t} else {\n\t\t\t\t\tevent.id = this.context.transport.schedule(this._tick.bind(this), new TicksClass(this.context, startTick));\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Returns the playback state of the note, either \"started\" or \"stopped\".\n\t */\n\tget state(): BasicPlaybackState {\n\t\treturn this._state.getValueAtTime(this.context.transport.ticks) as BasicPlaybackState;\n\t}\n\n\t/**\n\t * The start from the scheduled start time.\n\t */\n\tget startOffset(): Ticks {\n\t\treturn this._startOffset;\n\t}\n\tset startOffset(offset) {\n\t\tthis._startOffset = offset;\n\t}\n\n\t/**\n\t * The probability of the notes being triggered.\n\t */\n\tget probability(): NormalRange {\n\t\treturn this._probability;\n\t}\n\tset probability(prob) {\n\t\tthis._probability = prob;\n\t}\n\n\t/**\n\t * If set to true, will apply small random variation\n\t * to the callback time. If the value is given as a time, it will randomize\n\t * by that amount.\n\t * @example\n\t * const event = new Tone.ToneEvent();\n\t * event.humanize = true;\n\t */\n\tget humanize(): Time | boolean {\n\t\treturn this._humanize;\n\t}\n\n\tset humanize(variation) {\n\t\tthis._humanize = variation;\n\t}\n\n\t/**\n\t * Start the note at the given time.\n\t * @param  time  When the event should start.\n\t */\n\tstart(time?: TransportTime | TransportTimeClass): this {\n\t\tconst ticks = this.toTicks(time);\n\t\tif (this._state.getValueAtTime(ticks) === \"stopped\") {\n\t\t\tthis._state.add({\n\t\t\t\tid: -1,\n\t\t\t\tstate: \"started\",\n\t\t\t\ttime: ticks,\n\t\t\t});\n\t\t\tthis._rescheduleEvents(ticks);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the Event at the given time.\n\t * @param  time  When the event should stop.\n\t */\n\tstop(time?: TransportTime | TransportTimeClass): this {\n\t\tthis.cancel(time);\n\t\tconst ticks = this.toTicks(time);\n\t\tif (this._state.getValueAtTime(ticks) === \"started\") {\n\t\t\tthis._state.setStateAtTime(\"stopped\", ticks, { id: -1 });\n\t\t\tconst previousEvent = this._state.getBefore(ticks);\n\t\t\tlet reschedulTime = ticks;\n\t\t\tif (previousEvent !== null) {\n\t\t\t\treschedulTime = previousEvent.time;\n\t\t\t}\n\t\t\tthis._rescheduleEvents(reschedulTime);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Cancel all scheduled events greater than or equal to the given time\n\t * @param  time  The time after which events will be cancel.\n\t */\n\tcancel(time?: TransportTime | TransportTimeClass): this {\n\t\ttime = defaultArg(time, -Infinity);\n\t\tconst ticks = this.toTicks(time);\n\t\tthis._state.forEachFrom(ticks, event => {\n\t\t\tthis.context.transport.clear(event.id);\n\t\t});\n\t\tthis._state.cancel(ticks);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The callback function invoker. Also\n\t * checks if the Event is done playing\n\t * @param  time  The time of the event in seconds\n\t */\n\tprotected _tick(time: Seconds): void {\n\t\tconst ticks = this.context.transport.getTicksAtTime(time);\n\t\tif (!this.mute && this._state.getValueAtTime(ticks) === \"started\") {\n\t\t\tif (this.probability < 1 && Math.random() > this.probability) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (this.humanize) {\n\t\t\t\tlet variation = 0.02;\n\t\t\t\tif (!isBoolean(this.humanize)) {\n\t\t\t\t\tvariation = this.toSeconds(this.humanize);\n\t\t\t\t}\n\t\t\t\ttime += (Math.random() * 2 - 1) * variation;\n\t\t\t}\n\t\t\tthis.callback(time, this.value);\n\t\t}\n\t}\n\n\t/**\n\t * Get the duration of the loop.\n\t */\n\tprotected _getLoopDuration(): Ticks {\n\t\treturn Math.round((this._loopEnd - this._loopStart) / this._playbackRate);\n\t}\n\n\t/**\n\t * If the note should loop or not\n\t * between ToneEvent.loopStart and\n\t * ToneEvent.loopEnd. If set to true,\n\t * the event will loop indefinitely,\n\t * if set to a number greater than 1\n\t * it will play a specific number of\n\t * times, if set to false, 0 or 1, the\n\t * part will only play once.\n\t */\n\tget loop(): boolean | number {\n\t\treturn this._loop;\n\t}\n\tset loop(loop) {\n\t\tthis._loop = loop;\n\t\tthis._rescheduleEvents();\n\t}\n\n\t/**\n\t * The playback rate of the note. Defaults to 1.\n\t * @example\n\t * const note = new Tone.ToneEvent();\n\t * note.loop = true;\n\t * // repeat the note twice as fast\n\t * note.playbackRate = 2;\n\t */\n\tget playbackRate(): Positive {\n\t\treturn this._playbackRate;\n\t}\n\tset playbackRate(rate) {\n\t\tthis._playbackRate = rate;\n\t\tthis._rescheduleEvents();\n\t}\n\n\t/**\n\t * The loopEnd point is the time the event will loop\n\t * if ToneEvent.loop is true.\n\t */\n\tget loopEnd(): Time {\n\t\treturn new TicksClass(this.context, this._loopEnd).toSeconds();\n\t}\n\tset loopEnd(loopEnd) {\n\t\tthis._loopEnd = this.toTicks(loopEnd);\n\t\tif (this._loop) {\n\t\t\tthis._rescheduleEvents();\n\t\t}\n\t}\n\n\t/**\n\t * The time when the loop should start.\n\t */\n\tget loopStart(): Time {\n\t\treturn new TicksClass(this.context, this._loopStart).toSeconds();\n\t}\n\tset loopStart(loopStart) {\n\t\tthis._loopStart = this.toTicks(loopStart);\n\t\tif (this._loop) {\n\t\t\tthis._rescheduleEvents();\n\t\t}\n\t}\n\n\t/**\n\t * The current progress of the loop interval.\n\t * Returns 0 if the event is not started yet or\n\t * it is not set to loop.\n\t */\n\tget progress(): NormalRange {\n\t\tif (this._loop) {\n\t\t\tconst ticks = this.context.transport.ticks;\n\t\t\tconst lastEvent = this._state.get(ticks);\n\t\t\tif (lastEvent !== null && lastEvent.state === \"started\") {\n\t\t\t\tconst loopDuration = this._getLoopDuration();\n\t\t\t\tconst progress = (ticks - lastEvent.time) % loopDuration;\n\t\t\t\treturn progress / loopDuration;\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.cancel();\n\t\tthis._state.dispose();\n\t\treturn this;\n\t}\n}\n", "import { ToneEvent } from \"./ToneEvent\";\nimport { NormalRange, Positive, Seconds, Time, TransportTime } from \"../core/type/Units\";\nimport { ToneWithContext, ToneWithContextOptions } from \"../core/context/ToneWithContext\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { BasicPlaybackState } from \"../core/util/StateTimeline\";\n\nexport interface LoopOptions extends ToneWithContextOptions {\n\tcallback: (time: Seconds) => void;\n\tinterval: Time;\n\tplaybackRate: Positive;\n\titerations: number;\n\tprobability: NormalRange;\n\tmute: boolean;\n\thumanize: boolean | Time;\n}\n\n/**\n * Loop creates a looped callback at the \n * specified interval. The callback can be \n * started, stopped and scheduled along\n * the Transport's timeline. \n * @example\n * const loop = new Tone.Loop((time) => {\n * \t// triggered every eighth note. \n * \tconsole.log(time);\n * }, \"8n\").start(0);\n * Tone.Transport.start();\n * @category Event\n */\nexport class Loop<Options extends LoopOptions = LoopOptions> extends ToneWithContext<Options> {\n\n\treadonly name: string = \"Loop\";\n\n\t/**\n\t * The event which produces the callbacks\n\t */\n\tprivate _event: ToneEvent;\n\n\t/**\n\t * The callback to invoke with the next event in the pattern\n\t */\n\tcallback: (time: Seconds) => void\n\n\t/**\n\t * @param callback The callback to invoke at the time.\n\t * @param interval The time between successive callback calls. \n\t */\n\tconstructor(callback?: (time: Seconds) => void, interval?: Time);\n\tconstructor(options?: Partial<LoopOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Loop.getDefaults(), arguments, [\"callback\", \"interval\"]));\n\t\tconst options = optionsFromArguments(Loop.getDefaults(), arguments, [\"callback\", \"interval\"]);\n\n\t\tthis._event = new ToneEvent({\n\t\t\tcontext: this.context,\n\t\t\tcallback: this._tick.bind(this),\n\t\t\tloop: true,\n\t\t\tloopEnd: options.interval,\n\t\t\tplaybackRate: options.playbackRate,\n\t\t\tprobability: options.probability\n\t\t});\n\n\t\tthis.callback = options.callback;\n\t\t// set the iterations\n\t\tthis.iterations = options.iterations;\n\t}\n\n\tstatic getDefaults(): LoopOptions {\n\t\treturn Object.assign(ToneWithContext.getDefaults(), {\n\t\t\tinterval: \"4n\",\n\t\t\tcallback: noOp,\n\t\t\tplaybackRate: 1,\n\t\t\titerations: Infinity,\n\t\t\tprobability: 1,\n\t\t\tmute: false,\n\t\t\thumanize: false\n\t\t});\n\t}\n\n\t/**\n\t * Start the loop at the specified time along the Transport's timeline.\n\t * @param  time  When to start the Loop.\n\t */\n\tstart(time?: TransportTime): this {\n\t\tthis._event.start(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the loop at the given time.\n\t * @param  time  When to stop the Loop.\n\t */\n\tstop(time?: TransportTime): this {\n\t\tthis._event.stop(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Cancel all scheduled events greater than or equal to the given time\n\t * @param  time  The time after which events will be cancel.\n\t */\n\tcancel(time?: TransportTime): this {\n\t\tthis._event.cancel(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Internal function called when the notes should be called\n\t * @param time  The time the event occurs\n\t */\n\tprotected _tick(time: Seconds): void {\n\t\tthis.callback(time);\n\t}\n\n\t/**\n\t * The state of the Loop, either started or stopped.\n\t */\n\tget state(): BasicPlaybackState {\n\t\treturn this._event.state;\n\t}\n\n\t/**\n\t * The progress of the loop as a value between 0-1. 0, when the loop is stopped or done iterating. \n\t */\n\tget progress(): NormalRange {\n\t\treturn this._event.progress;\n\t}\n\n\t/**\n\t * The time between successive callbacks. \n\t * @example\n\t * const loop = new Tone.Loop();\n\t * loop.interval = \"8n\"; // loop every 8n\n\t */\n\tget interval(): Time {\n\t\treturn this._event.loopEnd;\n\t}\n\tset interval(interval) {\n\t\tthis._event.loopEnd = interval;\n\t}\n\n\t/**\n\t * The playback rate of the loop. The normal playback rate is 1 (no change). \n\t * A `playbackRate` of 2 would be twice as fast. \n\t */\n\tget playbackRate(): Positive {\n\t\treturn this._event.playbackRate;\n\t}\n\tset playbackRate(rate) {\n\t\tthis._event.playbackRate = rate;\n\t}\n\n\t/**\n\t * Random variation +/-0.01s to the scheduled time. \n\t * Or give it a time value which it will randomize by.\n\t */\n\tget humanize(): boolean | Time {\n\t\treturn this._event.humanize;\n\t}\n\tset humanize(variation) {\n\t\tthis._event.humanize = variation;\n\t}\n\n\t/**\n\t * The probably of the callback being invoked.\n\t */\n\tget probability(): NormalRange {\n\t\treturn this._event.probability;\n\t}\n\n\tset probability(prob) {\n\t\tthis._event.probability = prob;\n\t}\n\n\t/**\n\t * Muting the Loop means that no callbacks are invoked.\n\t */\n\tget mute(): boolean {\n\t\treturn this._event.mute;\n\t}\n\n\tset mute(mute) {\n\t\tthis._event.mute = mute;\n\t}\n\n\t/**\n\t * The number of iterations of the loop. The default value is `Infinity` (loop forever).\n\t */\n\tget iterations(): number {\n\t\tif (this._event.loop === true) {\n\t\t\treturn Infinity;\n\t\t} else {\n\t\t\treturn this._event.loop as number;\n\t\t}\n\t}\n\tset iterations(iters) {\n\t\tif (iters === Infinity) {\n\t\t\tthis._event.loop = true;\n\t\t} else {\n\t\t\tthis._event.loop = iters;\n\t\t}\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._event.dispose();\n\t\treturn this;\n\t}\n}\n", "import { TicksClass } from \"../core/type/Ticks\";\nimport { TransportTimeClass } from \"../core/type/TransportTime\";\nimport { NormalRange, Positive, Seconds, Ticks, Time, TransportTime } from \"../core/type/Units\";\nimport { defaultArg, optionsFromArguments } from \"../core/util/Defaults\";\nimport { StateTimeline } from \"../core/util/StateTimeline\";\nimport { isArray, isDefined, isObject, isUndef } from \"../core/util/TypeCheck\";\nimport { ToneEvent, ToneEventCallback, ToneEventOptions } from \"./ToneEvent\";\n\ntype CallbackType<T> =\n\tT extends {\n\t\ttime: Time;\n\t\t[key: string]: any;\n\t} ? T :\n\t\tT extends ArrayLike<any> ? T[1] :\n\t\t\tT extends Time ? null : never;\n\ninterface PartOptions<T> extends Omit<ToneEventOptions<CallbackType<T>>, \"value\"> {\n\tevents: T[];\n}\n\n/**\n * Part is a collection ToneEvents which can be started/stopped and looped as a single unit.\n *\n * @example\n * const synth = new Tone.Synth().toDestination();\n * const part = new Tone.Part(((time, note) => {\n * \t// the notes given as the second element in the array\n * \t// will be passed in as the second argument\n * \tsynth.triggerAttackRelease(note, \"8n\", time);\n * }), [[0, \"C2\"], [\"0:2\", \"C3\"], [\"0:3:2\", \"G2\"]]);\n * Tone.Transport.start();\n * @example\n * const synth = new Tone.Synth().toDestination();\n * // use an array of objects as long as the object has a \"time\" attribute\n * const part = new Tone.Part(((time, value) => {\n * \t// the value is an object which contains both the note and the velocity\n * \tsynth.triggerAttackRelease(value.note, \"8n\", time, value.velocity);\n * }), [{ time: 0, note: \"C3\", velocity: 0.9 },\n * \t{ time: \"0:2\", note: \"C4\", velocity: 0.5 }\n * ]).start(0);\n * Tone.Transport.start();\n * @category Event\n */\nexport class Part<ValueType = any> extends ToneEvent<ValueType> {\n\n\treadonly name: string = \"Part\";\n\n\t/**\n\t * Tracks the scheduled events\n\t */\n\tprotected _state: StateTimeline<{\n\t\tid: number;\n\t\toffset: number;\n\t}> = new StateTimeline(\"stopped\");\n\n\t/**\n\t * The events that belong to this part\n\t */\n\tprivate _events: Set<ToneEvent> = new Set();\n\n\t/**\n\t * @param callback The callback to invoke on each event\n\t * @param events the array of events\n\t */\n\tconstructor(callback?: ToneEventCallback<CallbackType<ValueType>>, value?: ValueType[]);\n\tconstructor(options?: Partial<PartOptions<ValueType>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Part.getDefaults(), arguments, [\"callback\", \"events\"]));\n\t\tconst options = optionsFromArguments(Part.getDefaults(), arguments, [\"callback\", \"events\"]);\n\n\t\t// make sure things are assigned in the right order\n\t\tthis._state.increasing = true;\n\n\t\t// add the events\n\t\toptions.events.forEach(event => {\n\t\t\tif (isArray(event)) {\n\t\t\t\tthis.add(event[0], event[1]);\n\t\t\t} else {\n\t\t\t\tthis.add(event);\n\t\t\t}\n\t\t});\n\t}\n\n\tstatic getDefaults(): PartOptions<any> {\n\t\treturn Object.assign(ToneEvent.getDefaults(), {\n\t\t\tevents: [],\n\t\t});\n\t}\n\n\t/**\n\t * Start the part at the given time.\n\t * @param  time    When to start the part.\n\t * @param  offset  The offset from the start of the part to begin playing at.\n\t */\n\tstart(time?: TransportTime, offset?: Time): this {\n\t\tconst ticks = this.toTicks(time);\n\t\tif (this._state.getValueAtTime(ticks) !== \"started\") {\n\t\t\toffset = defaultArg(offset, this._loop ? this._loopStart : 0);\n\t\t\tif (this._loop) {\n\t\t\t\toffset = defaultArg(offset, this._loopStart);\n\t\t\t} else {\n\t\t\t\toffset = defaultArg(offset, 0);\n\t\t\t}\n\t\t\tconst computedOffset = this.toTicks(offset);\n\t\t\tthis._state.add({\n\t\t\t\tid: -1,\n\t\t\t\toffset: computedOffset,\n\t\t\t\tstate: \"started\",\n\t\t\t\ttime: ticks,\n\t\t\t});\n\t\t\tthis._forEach(event => {\n\t\t\t\tthis._startNote(event, ticks, computedOffset);\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Start the event in the given event at the correct time given\n\t * the ticks and offset and looping.\n\t * @param  event\n\t * @param  ticks\n\t * @param  offset\n\t */\n\tprivate _startNote(event: ToneEvent, ticks: Ticks, offset: Ticks): void {\n\t\tticks -= offset;\n\t\tif (this._loop) {\n\t\t\tif (event.startOffset >= this._loopStart && event.startOffset < this._loopEnd) {\n\t\t\t\tif (event.startOffset < offset) {\n\t\t\t\t\t// start it on the next loop\n\t\t\t\t\tticks += this._getLoopDuration();\n\t\t\t\t}\n\t\t\t\tevent.start(new TicksClass(this.context, ticks));\n\t\t\t} else if (event.startOffset < this._loopStart && event.startOffset >= offset) {\n\t\t\t\tevent.loop = false;\n\t\t\t\tevent.start(new TicksClass(this.context, ticks));\n\t\t\t}\n\t\t} else if (event.startOffset >= offset) {\n\t\t\tevent.start(new TicksClass(this.context, ticks));\n\t\t}\n\t}\n\n\tget startOffset(): Ticks {\n\t\treturn this._startOffset;\n\t}\n\tset startOffset(offset) {\n\t\tthis._startOffset = offset;\n\t\tthis._forEach(event => {\n\t\t\tevent.startOffset += this._startOffset;\n\t\t});\n\t}\n\n\t/**\n\t * Stop the part at the given time.\n\t * @param  time  When to stop the part.\n\t */\n\tstop(time?: TransportTime): this {\n\t\tconst ticks = this.toTicks(time);\n\t\tthis._state.cancel(ticks);\n\t\tthis._state.setStateAtTime(\"stopped\", ticks);\n\t\tthis._forEach(event => {\n\t\t\tevent.stop(time);\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get/Set an Event's value at the given time.\n\t * If a value is passed in and no event exists at\n\t * the given time, one will be created with that value.\n\t * If two events are at the same time, the first one will\n\t * be returned.\n\t * @example\n\t * const part = new Tone.Part();\n\t * part.at(\"1m\"); // returns the part at the first measure\n\t * part.at(\"2m\", \"C2\"); // set the value at \"2m\" to C2.\n\t * // if an event didn't exist at that time, it will be created.\n\t * @param time The time of the event to get or set.\n\t * @param value If a value is passed in, the value of the event at the given time will be set to it.\n\t */\n\tat(time: Time, value?: any): ToneEvent | null {\n\t\tconst timeInTicks = new TransportTimeClass(this.context, time).toTicks();\n\t\tconst tickTime = new TicksClass(this.context, 1).toSeconds();\n\n\t\tconst iterator = this._events.values();\n\t\tlet result = iterator.next();\n\t\twhile (!result.done) {\n\t\t\tconst event = result.value;\n\t\t\tif (Math.abs(timeInTicks - event.startOffset) < tickTime) {\n\t\t\t\tif (isDefined(value)) {\n\t\t\t\t\tevent.value = value;\n\t\t\t\t}\n\t\t\t\treturn event;\n\t\t\t}\n\t\t\tresult = iterator.next();\n\t\t}\n\t\t// if there was no event at that time, create one\n\t\tif (isDefined(value)) {\n\t\t\tthis.add(time, value);\n\t\t\t// return the new event\n\t\t\treturn this.at(time);\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Add a an event to the part.\n\t * @param time The time the note should start. If an object is passed in, it should\n\t * \t\thave a 'time' attribute and the rest of the object will be used as the 'value'.\n\t * @param  value\n\t * @example\n\t * const part = new Tone.Part();\n\t * part.add(\"1m\", \"C#+11\");\n\t */\n\tadd(obj: {\n\t\ttime: Time;\n\t\t[key: string]: any;\n\t}): this;\n\tadd(time: Time, value?: any): this;\n\tadd(time: Time | object, value?: any): this {\n\t\t// extract the parameters\n\t\tif (time instanceof Object && Reflect.has(time, \"time\")) {\n\t\t\tvalue = time;\n\t\t\ttime = value.time;\n\t\t}\n\t\tconst ticks = this.toTicks(time);\n\t\tlet event: ToneEvent;\n\t\tif (value instanceof ToneEvent) {\n\t\t\tevent = value;\n\t\t\tevent.callback = this._tick.bind(this);\n\t\t} else {\n\t\t\tevent = new ToneEvent({\n\t\t\t\tcallback: this._tick.bind(this),\n\t\t\t\tcontext: this.context,\n\t\t\t\tvalue,\n\t\t\t});\n\t\t}\n\t\t// the start offset\n\t\tevent.startOffset = ticks;\n\n\t\t// initialize the values\n\t\tevent.set({\n\t\t\thumanize: this.humanize,\n\t\t\tloop: this.loop,\n\t\t\tloopEnd: this.loopEnd,\n\t\t\tloopStart: this.loopStart,\n\t\t\tplaybackRate: this.playbackRate,\n\t\t\tprobability: this.probability,\n\t\t});\n\n\t\tthis._events.add(event);\n\n\t\t// start the note if it should be played right now\n\t\tthis._restartEvent(event);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Restart the given event\n\t */\n\tprivate _restartEvent(event: ToneEvent): void {\n\t\tthis._state.forEach((stateEvent) => {\n\t\t\tif (stateEvent.state === \"started\") {\n\t\t\t\tthis._startNote(event, stateEvent.time, stateEvent.offset);\n\t\t\t} else {\n\t\t\t\t// stop the note\n\t\t\t\tevent.stop(new TicksClass(this.context, stateEvent.time));\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Remove an event from the part. If the event at that time is a Part,\n\t * it will remove the entire part.\n\t * @param time The time of the event\n\t * @param value Optionally select only a specific event value\n\t */\n\tremove(obj: {\n\t\ttime: Time;\n\t\t[key: string]: any;\n\t}): this;\n\tremove(time: Time, value?: any): this;\n\tremove(time: Time | object, value?: any): this {\n\t\t// extract the parameters\n\t\tif (isObject(time) && time.hasOwnProperty(\"time\")) {\n\t\t\tvalue = time;\n\t\t\ttime = value.time;\n\t\t}\n\t\ttime = this.toTicks(time);\n\t\tthis._events.forEach(event => {\n\t\t\tif (event.startOffset === time) {\n\t\t\t\tif (isUndef(value) || (isDefined(value) && event.value === value)) {\n\t\t\t\t\tthis._events.delete(event);\n\t\t\t\t\tevent.dispose();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Remove all of the notes from the group.\n\t */\n\tclear(): this {\n\t\tthis._forEach(event => event.dispose());\n\t\tthis._events.clear();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Cancel scheduled state change events: i.e. \"start\" and \"stop\".\n\t * @param after The time after which to cancel the scheduled events.\n\t */\n\tcancel(after?: TransportTime | TransportTimeClass): this {\n\t\tthis._forEach(event => event.cancel(after));\n\t\tthis._state.cancel(this.toTicks(after));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Iterate over all of the events\n\t */\n\tprivate _forEach(callback: (event: ToneEvent) => void): this {\n\t\tif (this._events) {\n\t\t\tthis._events.forEach(event => {\n\t\t\t\tif (event instanceof Part) {\n\t\t\t\t\tevent._forEach(callback);\n\t\t\t\t} else {\n\t\t\t\t\tcallback(event);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the attribute of all of the events\n\t * @param  attr  the attribute to set\n\t * @param  value      The value to set it to\n\t */\n\tprivate _setAll(attr: string, value: any): void {\n\t\tthis._forEach(event => {\n\t\t\tevent[attr] = value;\n\t\t});\n\t}\n\n\t/**\n\t * Internal tick method\n\t * @param  time  The time of the event in seconds\n\t */\n\tprotected _tick(time: Seconds, value?: any): void {\n\t\tif (!this.mute) {\n\t\t\tthis.callback(time, value);\n\t\t}\n\t}\n\n\t/**\n\t * Determine if the event should be currently looping\n\t * given the loop boundries of this Part.\n\t * @param  event  The event to test\n\t */\n\tprivate _testLoopBoundries(event: ToneEvent): void {\n\t\tif (this._loop && (event.startOffset < this._loopStart || event.startOffset >= this._loopEnd)) {\n\t\t\tevent.cancel(0);\n\t\t} else if (event.state === \"stopped\") {\n\t\t\t// reschedule it if it's stopped\n\t\t\tthis._restartEvent(event);\n\t\t}\n\t}\n\n\tget probability(): NormalRange {\n\t\treturn this._probability;\n\t}\n\tset probability(prob) {\n\t\tthis._probability = prob;\n\t\tthis._setAll(\"probability\", prob);\n\t}\n\n\tget humanize(): boolean | Time {\n\t\treturn this._humanize;\n\t}\n\tset humanize(variation) {\n\t\tthis._humanize = variation;\n\t\tthis._setAll(\"humanize\", variation);\n\t}\n\n\t/**\n\t * If the part should loop or not\n\t * between Part.loopStart and\n\t * Part.loopEnd. If set to true,\n\t * the part will loop indefinitely,\n\t * if set to a number greater than 1\n\t * it will play a specific number of\n\t * times, if set to false, 0 or 1, the\n\t * part will only play once.\n\t * @example\n\t * const part = new Tone.Part();\n\t * // loop the part 8 times\n\t * part.loop = 8;\n\t */\n\tget loop(): boolean | number {\n\t\treturn this._loop;\n\t}\n\tset loop(loop) {\n\t\tthis._loop = loop;\n\t\tthis._forEach(event => {\n\t\t\tevent.loopStart = this.loopStart;\n\t\t\tevent.loopEnd = this.loopEnd;\n\t\t\tevent.loop = loop;\n\t\t\tthis._testLoopBoundries(event);\n\t\t});\n\t}\n\n\t/**\n\t * The loopEnd point determines when it will\n\t * loop if Part.loop is true.\n\t */\n\tget loopEnd(): Time {\n\t\treturn new TicksClass(this.context, this._loopEnd).toSeconds();\n\t}\n\tset loopEnd(loopEnd) {\n\t\tthis._loopEnd = this.toTicks(loopEnd);\n\t\tif (this._loop) {\n\t\t\tthis._forEach(event => {\n\t\t\t\tevent.loopEnd = loopEnd;\n\t\t\t\tthis._testLoopBoundries(event);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * The loopStart point determines when it will\n\t * loop if Part.loop is true.\n\t */\n\tget loopStart(): Time {\n\t\treturn new TicksClass(this.context, this._loopStart).toSeconds();\n\t}\n\tset loopStart(loopStart) {\n\t\tthis._loopStart = this.toTicks(loopStart);\n\t\tif (this._loop) {\n\t\t\tthis._forEach(event => {\n\t\t\t\tevent.loopStart = this.loopStart;\n\t\t\t\tthis._testLoopBoundries(event);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * The playback rate of the part\n\t */\n\tget playbackRate(): Positive {\n\t\treturn this._playbackRate;\n\t}\n\tset playbackRate(rate) {\n\t\tthis._playbackRate = rate;\n\t\tthis._setAll(\"playbackRate\", rate);\n\t}\n\n\t/**\n\t * The number of scheduled notes in the part.\n\t */\n\tget length(): number {\n\t\treturn this._events.size;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.clear();\n\t\treturn this;\n\t}\n}\n", "import { assert } from \"../core/util/Debug\";\nimport { clamp } from \"../core/util/Math\";\n\n/**\n * The name of the patterns\n */\nexport type PatternName = \"up\" | \"down\" | \"upDown\" | \"downUp\" | \"alternateUp\" | \"alternateDown\" | \"random\" | \"randomOnce\" | \"randomWalk\";\n\n/**\n * Start at the first value and go up to the last\n */\nfunction* upPatternGen<T>(values: T[]): IterableIterator<T> {\n\tlet index = 0;\n\twhile (index < values.length) {\n\t\tindex = clampToArraySize(index, values);\n\t\tyield values[index];\n\t\tindex++;\n\t}\n}\n\n/**\n * Start at the last value and go down to 0\n */\nfunction* downPatternGen<T>(values: T[]): IterableIterator<T> {\n\tlet index = values.length - 1;\n\twhile (index >= 0) {\n\t\tindex = clampToArraySize(index, values);\n\t\tyield values[index];\n\t\tindex--;\n\t}\n}\n\n/**\n * Infinitely yield the generator\n */\nfunction* infiniteGen<T>(values: T[], gen: typeof upPatternGen): IterableIterator<T> {\n\twhile (true) {\n\t\tyield* gen(values);\n\t}\n}\n\n/**\n * Make sure that the index is in the given range\n */\nfunction clampToArraySize(index: number, values: any[]): number {\n\treturn clamp(index, 0, values.length - 1);\n}\n\n/**\n * Alternate between two generators\n */\nfunction* alternatingGenerator<T>(values: T[], directionUp: boolean): IterableIterator<T> {\n\tlet index = directionUp ? 0 : values.length - 1;\n\twhile (true) {\n\t\tindex = clampToArraySize(index, values);\n\t\tyield values[index];\n\t\tif (directionUp) {\n\t\t\tindex++;\n\t\t\tif (index >= values.length - 1) {\n\t\t\t\tdirectionUp = false;\n\t\t\t}\n\t\t} else {\n\t\t\tindex--;\n\t\t\tif (index <= 0) {\n\t\t\t\tdirectionUp = true;\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Starting from the bottom move up 2, down 1\n */\nfunction* jumpUp<T>(values: T[]): IterableIterator<T> {\n\tlet index = 0;\n\tlet stepIndex = 0;\n\twhile (index < values.length) {\n\t\tindex = clampToArraySize(index, values);\n\t\tyield values[index];\n\t\tstepIndex++;\n\t\tindex += (stepIndex % 2 ? 2 : -1);\n\t}\n}\n\n/**\n * Starting from the top move down 2, up 1\n */\nfunction* jumpDown<T>(values: T[]): IterableIterator<T> {\n\tlet index = values.length - 1;\n\tlet stepIndex = 0;\n\twhile (index >= 0) {\n\t\tindex = clampToArraySize(index, values);\n\t\tyield values[index];\n\t\tstepIndex++;\n\t\tindex += (stepIndex % 2 ? -2 : 1);\n\t}\n}\n\n/**\n * Choose a random index each time\n */\nfunction* randomGen<T>(values: T[]): IterableIterator<T> {\n\twhile (true) {\n\t\tconst randomIndex = Math.floor(Math.random() * values.length);\n\t\tyield values[randomIndex];\n\t}\n}\n\n/**\n * Randomly go through all of the values once before choosing a new random order\n */\nfunction* randomOnce<T>(values: T[]): IterableIterator<T> {\n\t// create an array of indices\n\tconst copy: number[] = [];\n\tfor (let i = 0; i < values.length; i++) {\n\t\tcopy.push(i);\n\t}\n\twhile (copy.length > 0) {\n\t\t// random choose an index, and then remove it so it's not chosen again\n\t\tconst randVal = copy.splice(Math.floor(copy.length * Math.random()), 1);\n\t\tconst index = clampToArraySize(randVal[0], values);\n\t\tyield values[index];\n\t}\n}\n\n/**\n * Randomly choose to walk up or down 1 index in the values array\n */\nfunction* randomWalk<T>(values: T[]): IterableIterator<T> {\n\t// randomly choose a starting index in the values array\n\tlet index = Math.floor(Math.random() * values.length);\n\twhile (true) {\n\t\tif (index === 0) {\n\t\t\tindex++; // at bottom of array, so force upward step\n\t\t} else if (index === values.length - 1) {\n\t\t\tindex--; // at top of array, so force downward step\n\t\t} else if (Math.random() < 0.5) { // else choose random downward or upward step\n\t\t\tindex--;\n\t\t} else {\n\t\t\tindex++;\n\t\t}\n\t\tyield values[index];\n\t}\n}\n\n/**\n * PatternGenerator returns a generator which will iterate over the given array\n * of values and yield the items according to the passed in pattern\n * @param values An array of values to iterate over\n * @param pattern The name of the pattern use when iterating over\n * @param index Where to start in the offset of the values array\n */\nexport function* PatternGenerator<T>(values: T[], pattern: PatternName = \"up\", index = 0): Iterator<T> {\n\t// safeguards\n\tassert(values.length > 0, \"The array must have more than one value in it\");\n\tswitch (pattern) {\n\t\tcase \"up\" :\n\t\t\tyield* infiniteGen(values, upPatternGen);\n\t\tcase \"down\" :\n\t\t\tyield* infiniteGen(values, downPatternGen);\n\t\tcase \"upDown\" :\n\t\t\tyield* alternatingGenerator(values, true);\n\t\tcase \"downUp\" :\n\t\t\tyield* alternatingGenerator(values, false);\n\t\tcase \"alternateUp\":\n\t\t\tyield* infiniteGen(values, jumpUp);\n\t\tcase \"alternateDown\":\n\t\t\tyield* infiniteGen(values, jumpDown);\n\t\tcase \"random\":\n\t\t\tyield* randomGen(values);\n\t\tcase \"randomOnce\":\n\t\t\tyield* infiniteGen(values, randomOnce);\n\t\tcase \"randomWalk\":\n\t\t\tyield* randomWalk(values);\n\t}\n}\n", "import { Loop, LoopOptions } from \"./Loop\";\nimport { PatternGenerator, PatternName } from \"./PatternGenerator\";\nimport { ToneEventCallback } from \"./ToneEvent\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Seconds } from \"../core/type/Units\";\nimport { noOp } from \"../core/util/Interface\";\n\nexport interface PatternOptions<ValueType> extends LoopOptions {\n\tpattern: PatternName;\n\tvalues: ValueType[];\n\tcallback: (time: Seconds, value?: ValueType) => void;\n}\n\n/**\n * Pattern arpeggiates between the given notes\n * in a number of patterns. \n * @example\n * const pattern = new Tone.Pattern((time, note) => {\n * \t// the order of the notes passed in depends on the pattern\n * }, [\"C2\", \"D4\", \"E5\", \"A6\"], \"upDown\");\n * @category Event\n */\nexport class Pattern<ValueType> extends Loop<PatternOptions<ValueType>> {\n\n\treadonly name: string = \"Pattern\";\n\n\t/**\n\t * The pattern generator function\n\t */\n\tprivate _pattern: Iterator<ValueType>;\n\n\t/**\n\t * The current value\n\t */\n\tprivate _value?: ValueType;\n\n\t/**\n\t * Hold the pattern type\n\t */\n\tprivate _type: PatternName;\n\n\t/**\n\t * Hold the values\n\t */\n\tprivate _values: ValueType[];\n\n\t/**\n\t * The callback to be invoked at a regular interval\n\t */\n\tcallback: (time: Seconds, value?: ValueType) => void;\n\n\t/**\n\t * @param  callback The callback to invoke with the event.\n\t * @param  values The values to arpeggiate over.\n\t * @param  pattern  The name of the pattern\n\t */\n\tconstructor(\n\t\tcallback?: ToneEventCallback<ValueType>,\n\t\tvalues?: ValueType[],\n\t\tpattern?: PatternName,\n\t);\n\tconstructor(options?: Partial<PatternOptions<ValueType>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Pattern.getDefaults(), arguments, [\"callback\", \"values\", \"pattern\"]));\n\t\tconst options = optionsFromArguments(Pattern.getDefaults(), arguments, [\"callback\", \"values\", \"pattern\"]);\n\n\t\tthis.callback = options.callback;\n\t\tthis._values = options.values;\n\t\tthis._pattern = PatternGenerator(options.values, options.pattern);\n\t\tthis._type = options.pattern;\n\t}\n\n\tstatic getDefaults(): PatternOptions<any> {\n\t\treturn Object.assign(Loop.getDefaults(), {\n\t\t\tpattern: \"up\" as \"up\",\n\t\t\tvalues: [],\n\t\t\tcallback: noOp,\n\t\t});\n\t}\n\n\t/**\n\t * Internal function called when the notes should be called\n\t */\n\tprotected _tick(time: Seconds): void {\n\t\tconst value = this._pattern.next() as IteratorResult<ValueType>;\n\t\tthis._value = value.value;\n\t\tthis.callback(time, this._value);\n\t}\n\n\t/**\n\t * The array of events.\n\t */\n\tget values(): ValueType[] {\n\t\treturn this._values;\n\t}\n\tset values(val) {\n\t\tthis._values = val;\n\t\t// reset the pattern\n\t\tthis.pattern = this._type;\n\t}\n\n\t/**\n\t * The current value of the pattern.\n\t */\n\tget value(): ValueType | undefined {\n\t\treturn this._value;\n\t}\n\n\t/**\n\t * The pattern type. See Tone.CtrlPattern for the full list of patterns.\n\t */\n\tget pattern(): PatternName {\n\t\treturn this._type;\n\t}\n\tset pattern(pattern) {\n\t\tthis._type = pattern;\n\t\tthis._pattern = PatternGenerator(this._values, this._type);\n\t}\n}\n\n", "import { TicksClass } from \"../core/type/Ticks\";\nimport { NormalRange, Positive, Seconds, Ticks, Time, TransportTime } from \"../core/type/Units\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { isArray, isString } from \"../core/util/TypeCheck\";\nimport { Part } from \"./Part\";\nimport { ToneEvent, ToneEventCallback, ToneEventOptions } from \"./ToneEvent\";\n\ntype SequenceEventDescription<T> = Array<T | Array<T | Array<T | Array<T | Array<T | T[]>>>>>;\n\ninterface SequenceOptions<T> extends Omit<ToneEventOptions<T>, \"value\"> {\n\tloopStart: number;\n\tloopEnd: number;\n\tsubdivision: Time;\n\tevents: SequenceEventDescription<T>;\n}\n\n/**\n * A sequence is an alternate notation of a part. Instead\n * of passing in an array of [time, event] pairs, pass\n * in an array of events which will be spaced at the\n * given subdivision. Sub-arrays will subdivide that beat\n * by the number of items are in the array.\n * Sequence notation inspiration from [Tidal](http://yaxu.org/tidal/)\n * @example\n * const synth = new Tone.Synth().toDestination();\n * const seq = new Tone.Sequence((time, note) => {\n * \tsynth.triggerAttackRelease(note, 0.1, time);\n * \t// subdivisions are given as subarrays\n * }, [\"C4\", [\"E4\", \"D4\", \"E4\"], \"G4\", [\"A4\", \"G4\"]]).start(0);\n * Tone.Transport.start();\n * @category Event\n */\nexport class Sequence<ValueType = any> extends ToneEvent<ValueType> {\n\n\treadonly name: string = \"Sequence\";\n\n\t/**\n\t * The subdivison of each note\n\t */\n\tprivate _subdivision: Ticks;\n\n\t/**\n\t * The object responsible for scheduling all of the events\n\t */\n\tprivate _part: Part = new Part({\n\t\tcallback: this._seqCallback.bind(this),\n\t\tcontext: this.context,\n\t});\n\n\t/**\n\t * private reference to all of the sequence proxies\n\t */\n\tprivate _events: SequenceEventDescription<ValueType> = [];\n\n\t/**\n\t * The proxied array\n\t */\n\tprivate _eventsArray: SequenceEventDescription<ValueType> = [];\n\n\t/**\n\t * @param  callback  The callback to invoke with every note\n\t * @param  sequence  The sequence\n\t * @param  subdivision  The subdivision between which events are placed.\n\t */\n\tconstructor(\n\t\tcallback?: ToneEventCallback<ValueType>,\n\t\tevents?: SequenceEventDescription<ValueType>,\n\t\tsubdivision?: Time,\n\t);\n\tconstructor(options?: Partial<SequenceOptions<ValueType>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Sequence.getDefaults(), arguments, [\"callback\", \"events\", \"subdivision\"]));\n\t\tconst options = optionsFromArguments(Sequence.getDefaults(), arguments, [\"callback\", \"events\", \"subdivision\"]);\n\n\t\tthis._subdivision = this.toTicks(options.subdivision);\n\n\t\tthis.events = options.events;\n\n\t\t// set all of the values\n\t\tthis.loop = options.loop;\n\t\tthis.loopStart = options.loopStart;\n\t\tthis.loopEnd = options.loopEnd;\n\t\tthis.playbackRate = options.playbackRate;\n\t\tthis.probability = options.probability;\n\t\tthis.humanize = options.humanize;\n\t\tthis.mute = options.mute;\n\t\tthis.playbackRate = options.playbackRate;\n\t}\n\n\tstatic getDefaults(): SequenceOptions<any> {\n\t\treturn Object.assign(omitFromObject(ToneEvent.getDefaults(), [\"value\"]), {\n\t\t\tevents: [],\n\t\t\tloop: true,\n\t\t\tloopEnd: 0,\n\t\t\tloopStart: 0,\n\t\t\tsubdivision: \"8n\",\n\t\t});\n\t}\n\n\t/**\n\t * The internal callback for when an event is invoked\n\t */\n\tprivate _seqCallback(time: Seconds, value: any): void {\n\t\tif (value !== null) {\n\t\t\tthis.callback(time, value);\n\t\t}\n\t}\n\n\t/**\n\t * The sequence\n\t */\n\tget events(): any[] {\n\t\treturn this._events;\n\t}\n\tset events(s) {\n\t\tthis.clear();\n\t\tthis._eventsArray = s;\n\t\tthis._events = this._createSequence(this._eventsArray);\n\t\tthis._eventsUpdated();\n\t}\n\n\t/**\n\t * Start the part at the given time.\n\t * @param  time    When to start the part.\n\t * @param  offset  The offset index to start at\n\t */\n\tstart(time?: TransportTime, offset?: number): this {\n\t\tthis._part.start(time, offset ? this._indexTime(offset) : offset);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the part at the given time.\n\t * @param  time  When to stop the part.\n\t */\n\tstop(time?: TransportTime): this {\n\t\tthis._part.stop(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The subdivision of the sequence. This can only be\n\t * set in the constructor. The subdivision is the\n\t * interval between successive steps.\n\t */\n\tget subdivision(): Seconds {\n\t\treturn new TicksClass(this.context, this._subdivision).toSeconds();\n\t}\n\n\t/**\n\t * Create a sequence proxy which can be monitored to create subsequences\n\t */\n\tprivate _createSequence(array: any[]): any[] {\n\t\treturn new Proxy(array, {\n\t\t\tget: (target: any[], property: PropertyKey): any => {\n\t\t\t\t// property is index in this case\n\t\t\t\treturn target[property];\n\t\t\t},\n\t\t\tset: (target: any[], property: PropertyKey, value: any): boolean => {\n\t\t\t\tif (isString(property) && isFinite(parseInt(property, 10))) {\n\t\t\t\t\tif (isArray(value)) {\n\t\t\t\t\t\ttarget[property] = this._createSequence(value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttarget[property] = value;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttarget[property] = value;\n\t\t\t\t}\n\t\t\t\tthis._eventsUpdated();\n\t\t\t\t// return true to accept the changes\n\t\t\t\treturn true;\n\t\t\t},\n\t\t});\n\t}\n\n\t/**\n\t * When the sequence has changed, all of the events need to be recreated\n\t */\n\tprivate _eventsUpdated(): void {\n\t\tthis._part.clear();\n\t\tthis._rescheduleSequence(this._eventsArray, this._subdivision, this.startOffset);\n\t\t// update the loopEnd\n\t\tthis.loopEnd = this.loopEnd;\n\t}\n\n\t/**\n\t * reschedule all of the events that need to be rescheduled\n\t */\n\tprivate _rescheduleSequence(sequence: any[], subdivision: Ticks, startOffset: Ticks): void {\n\t\tsequence.forEach((value, index) => {\n\t\t\tconst eventOffset = index * (subdivision) + startOffset;\n\t\t\tif (isArray(value)) {\n\t\t\t\tthis._rescheduleSequence(value, subdivision / value.length, eventOffset);\n\t\t\t} else {\n\t\t\t\tconst startTime = new TicksClass(this.context, eventOffset, \"i\").toSeconds();\n\t\t\t\tthis._part.add(startTime, value);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Get the time of the index given the Sequence's subdivision\n\t * @param  index\n\t * @return The time of that index\n\t */\n\tprivate _indexTime(index: number): Seconds {\n\t\treturn new TicksClass(this.context, index * (this._subdivision) + this.startOffset).toSeconds();\n\t}\n\n\t/**\n\t * Clear all of the events\n\t */\n\tclear(): this {\n\t\tthis._part.clear();\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._part.dispose();\n\t\treturn this;\n\t}\n\n\t//-------------------------------------\n\t// PROXY CALLS\n\t//-------------------------------------\n\n\tget loop(): boolean | number {\n\t\treturn this._part.loop;\n\t}\n\tset loop(l) {\n\t\tthis._part.loop = l;\n\t}\n\n\t/**\n\t * The index at which the sequence should start looping\n\t */\n\tget loopStart(): number {\n\t\treturn this._loopStart;\n\t}\n\tset loopStart(index) {\n\t\tthis._loopStart = index;\n\t\tthis._part.loopStart = this._indexTime(index);\n\t}\n\n\t/**\n\t * The index at which the sequence should end looping\n\t */\n\tget loopEnd(): number {\n\t\treturn this._loopEnd;\n\t}\n\tset loopEnd(index) {\n\t\tthis._loopEnd = index;\n\t\tif (index === 0) {\n\t\t\tthis._part.loopEnd = this._indexTime(this._eventsArray.length);\n\t\t} else {\n\t\t\tthis._part.loopEnd = this._indexTime(index);\n\t\t}\n\t}\n\n\tget startOffset(): Ticks {\n\t\treturn this._part.startOffset;\n\t}\n\tset startOffset(start) {\n\t\tthis._part.startOffset = start;\n\t}\n\n\tget playbackRate(): Positive {\n\t\treturn this._part.playbackRate;\n\t}\n\tset playbackRate(rate) {\n\t\tthis._part.playbackRate = rate;\n\t}\n\n\tget probability(): NormalRange {\n\t\treturn this._part.probability;\n\t}\n\tset probability(prob) {\n\t\tthis._part.probability = prob;\n\t}\n\n\tget progress(): NormalRange {\n\t\treturn this._part.progress;\n\t}\n\n\tget humanize(): boolean | Time {\n\t\treturn this._part.humanize;\n\t}\n\tset humanize(variation) {\n\t\tthis._part.humanize = variation;\n\t}\n\n\t/**\n\t * The number of scheduled events\n\t */\n\tget length(): number {\n\t\treturn this._part.length;\n\t}\n}\n", "import { Gain } from \"../../core/context/Gain\";\nimport { connect, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { NormalRange } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { GainToAudio } from \"../../signal/GainToAudio\";\nimport { Signal } from \"../../signal/Signal\";\n\ninterface CrossFadeOptions extends ToneAudioNodeOptions {\n\tfade: NormalRange;\n}\n\n/**\n * Tone.Crossfade provides equal power fading between two inputs.\n * More on crossfading technique [here](https://en.wikipedia.org/wiki/Fade_(audio_engineering)#Crossfading).\n * ```\n *                                             +---------+\n *                                            +> input a +>--+\n * +-----------+   +---------------------+     |         |   |\n * | 1s signal +>--> stereoPannerNode  L +>----> gain    |   |\n * +-----------+   |                     |     +---------+   |\n *               +-> pan               R +>-+                |   +--------+\n *               | +---------------------+  |                +---> output +>\n *  +------+     |                          |  +---------+   |   +--------+\n *  | fade +>----+                          | +> input b +>--+\n *  +------+                                |  |         |\n *                                          +--> gain    |\n *                                             +---------+\n * ```\n * @example\n * const crossFade = new Tone.CrossFade().toDestination();\n * // connect two inputs Tone.to a/b\n * const inputA = new Tone.Oscillator(440, \"square\").connect(crossFade.a).start();\n * const inputB = new Tone.Oscillator(440, \"sine\").connect(crossFade.b).start();\n * // use the fade to control the mix between the two\n * crossFade.fade.value = 0.5;\n * @category Component\n */\nexport class CrossFade extends ToneAudioNode<CrossFadeOptions> {\n\n\treadonly name: string = \"CrossFade\";\n\n\t/**\n\t * The crossfading is done by a StereoPannerNode\n\t */\n\tprivate _panner: StereoPannerNode = this.context.createStereoPanner();\n\n\t/**\n\t * Split the output of the panner node into two values used to control the gains.\n\t */\n\tprivate _split: ChannelSplitterNode = this.context.createChannelSplitter(2);\n\n\t/**\n\t * Convert the fade value into an audio range value so it can be connected\n\t * to the panner.pan AudioParam\n\t */\n\tprivate _g2a: GainToAudio = new GainToAudio({ context: this.context });\n\n\t/**\n\t * The input which is at full level when fade = 0\n\t */\n\treadonly a: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\n\t/**\n\t * The input which is at full level when fade = 1\n\t */\n\treadonly b: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\n\t/**\n\t * The output is a mix between `a` and `b` at the ratio of `fade`\n\t */\n\treadonly output: Gain = new Gain({ context: this.context });\n\n\t/**\n\t * CrossFade has no input, you must choose either `a` or `b`\n\t */\n\treadonly input: undefined;\n\n\t/**\n\t * The mix between the two inputs. A fade value of 0\n\t * will output 100% crossFade.a and\n\t * a value of 1 will output 100% crossFade.b.\n\t */\n\treadonly fade: Signal<\"normalRange\">;\n\n\tprotected _internalChannels = [this.a, this.b];\n\n\t/**\n\t * @param fade The initial fade value [0, 1].\n\t */\n\tconstructor(fade?: NormalRange);\n\tconstructor(options?: Partial<CrossFadeOptions>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(CrossFade.getDefaults(), arguments, [\"fade\"])));\n\t\tconst options = optionsFromArguments(CrossFade.getDefaults(), arguments, [\"fade\"]);\n\n\t\tthis.fade = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"normalRange\",\n\t\t\tvalue: options.fade,\n\t\t});\n\t\treadOnly(this, \"fade\");\n\n\t\tthis.context.getConstant(1).connect(this._panner);\n\t\tthis._panner.connect(this._split);\n\t\t// this is necessary for standardized-audio-context\n\t\t// doesn't make any difference for the native AudioContext\n\t\t// https://github.com/chrisguttandin/standardized-audio-context/issues/647\n\t\tthis._panner.channelCount = 1;\n\t\tthis._panner.channelCountMode = \"explicit\";\n\t\tconnect(this._split, this.a.gain, 0);\n\t\tconnect(this._split, this.b.gain, 1);\n\n\t\tthis.fade.chain(this._g2a, this._panner.pan);\n\n\t\tthis.a.connect(this.output);\n\t\tthis.b.connect(this.output);\n\t}\n\n\tstatic getDefaults(): CrossFadeOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tfade: 0.5,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.a.dispose();\n\t\tthis.b.dispose();\n\t\tthis.output.dispose();\n\t\tthis.fade.dispose();\n\t\tthis._g2a.dispose();\n\t\tthis._panner.disconnect();\n\t\tthis._split.disconnect();\n\t\treturn this;\n\t}\n}\n", "import { CrossFade } from \"../component/channel/CrossFade\";\nimport { Gain } from \"../core/context/Gain\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { NormalRange } from \"../core/type/Units\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Signal } from \"../signal/Signal\";\n\nexport interface EffectOptions extends ToneAudioNodeOptions {\n\twet: NormalRange;\n}\n/**\n * Effect is the base class for effects. Connect the effect between\n * the effectSend and effectReturn GainNodes, then control the amount of\n * effect which goes to the output using the wet control.\n */\nexport abstract class Effect<Options extends EffectOptions>\n\textends ToneAudioNode<Options> {\n\n\treadonly name: string = \"Effect\";\n\n\t/**\n\t * the drywet knob to control the amount of effect\n\t */\n\tprivate _dryWet: CrossFade = new CrossFade({ context: this.context });\n\n\t/**\n\t * The wet control is how much of the effected\n\t * will pass through to the output. 1 = 100% effected\n\t * signal, 0 = 100% dry signal.\n\t */\n\twet: Signal<\"normalRange\"> = this._dryWet.fade;\n\n\t/**\n\t * connect the effectSend to the input of hte effect\n\t */\n\tprotected effectSend: Gain = new Gain({ context: this.context });\n\n\t/**\n\t * connect the output of the effect to the effectReturn\n\t */\n\tprotected effectReturn: Gain = new Gain({ context: this.context });\n\n\t/**\n\t * The effect input node\n\t */\n\tinput: Gain = new Gain({ context: this.context });\n\n\t/**\n\t * The effect output\n\t */\n\toutput = this._dryWet;\n\n\tconstructor(options: EffectOptions) {\n\t\tsuper(options);\n\n\t\t// connections\n\t\tthis.input.fan(this._dryWet.a, this.effectSend);\n\t\tthis.effectReturn.connect(this._dryWet.b);\n\t\tthis.wet.setValueAtTime(options.wet, 0);\n\t\tthis._internalChannels = [this.effectReturn, this.effectSend];\n\t\treadOnly(this, \"wet\");\n\t}\n\n\tstatic getDefaults(): EffectOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\twet: 1,\n\t\t});\n\t}\n\n\t/**\n\t * chains the effect in between the effectSend and effectReturn\n\t */\n\tprotected connectEffect(effect: ToneAudioNode | AudioNode): this {\n\t\t// add it to the internal channels\n\t\tthis._internalChannels.push(effect);\n\t\tthis.effectSend.chain(effect, this.effectReturn);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._dryWet.dispose();\n\t\tthis.effectSend.dispose();\n\t\tthis.effectReturn.dispose();\n\t\tthis.wet.dispose();\n\t\treturn this;\n\t}\n}\n", "import { Effect, EffectOptions } from \"../effect/Effect\";\nimport { Frequency, NormalRange, Time } from \"../core/type/Units\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { ToneOscillatorType } from \"../source/oscillator/OscillatorInterface\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Param } from \"../core/context/Param\";\n\nexport interface LFOEffectOptions extends EffectOptions {\n\tfrequency: Frequency;\n\ttype: ToneOscillatorType;\n\tdepth: NormalRange;\n}\n\n/**\n * Base class for LFO-based effects.\n */\nexport abstract class LFOEffect<Options extends LFOEffectOptions> extends Effect<Options> {\n\n\treadonly name: string = \"LFOEffect\";\n\n\t/**\n\t * the lfo which drives the filter cutoff\n\t */\n\tprotected _lfo: LFO;\n\n\t/**\n\t * The range of the filter modulating between the min and max frequency. \n\t * 0 = no modulation. 1 = full modulation.\n\t */\n\treadonly depth: Param<\"normalRange\">;\n\n\t/**\n\t * How fast the filter modulates between min and max. \n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\tconstructor(options: LFOEffectOptions) {\n\n\t\tsuper(options);\n\n\t\tthis._lfo = new LFO({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.frequency,\n\t\t\tamplitude: options.depth,\n\t\t});\n\t\tthis.depth = this._lfo.amplitude;\n\t\tthis.frequency = this._lfo.frequency;\n\n\t\tthis.type = options.type;\n\t\treadOnly(this, [\"frequency\", \"depth\"]);\n\t}\n\n\tstatic getDefaults(): LFOEffectOptions {\n\t\treturn Object.assign(Effect.getDefaults(), {\n\t\t\tfrequency: 1,\n\t\t\ttype: \"sine\" as ToneOscillatorType,\n\t\t\tdepth: 1,\n\t\t});\n\t}\n\n\t/**\n\t * Start the effect.\n\t */\n\tstart(time?: Time): this {\n\t\tthis._lfo.start(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the lfo\n\t */\n\tstop(time?: Time): this {\n\t\tthis._lfo.stop(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sync the filter to the transport. See [[LFO.sync]]\n\t */\n\tsync(): this {\n\t\tthis._lfo.sync();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unsync the filter from the transport.\n\t */\n\tunsync(): this {\n\t\tthis._lfo.unsync();\n\t\treturn this;\n\t}\n\n\t/**\n\t * The type of the LFO's oscillator: See [[Oscillator.type]]\n\t * @example\n\t * const autoFilter = new Tone.AutoFilter().start().toDestination();\n\t * const noise = new Tone.Noise().start().connect(autoFilter);\n\t * autoFilter.type = \"square\";\n\t */\n\tget type() {\n\t\treturn this._lfo.type;\n\t}\n\tset type(type) {\n\t\tthis._lfo.type = type;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._lfo.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.depth.dispose();\n\t\treturn this;\n\t}\n}\n", "import { Frequency, Positive } from \"../core/type/Units\";\nimport { Filter, FilterOptions } from \"../component/filter/Filter\";\nimport { SourceOptions } from \"../source/Source\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFOEffect, LFOEffectOptions } from \"./LFOEffect\";\n\nexport interface AutoFilterOptions extends LFOEffectOptions {\n\tbaseFrequency: Frequency;\n\toctaves: Positive;\n\tfilter: Omit<FilterOptions, keyof SourceOptions | \"frequency\" | \"detune\" | \"gain\">;\n}\n\n/**\n * AutoFilter is a Tone.Filter with a Tone.LFO connected to the filter cutoff frequency.\n * Setting the LFO rate and depth allows for control over the filter modulation rate \n * and depth.\n *\n * @example\n * // create an autofilter and start it's LFO\n * const autoFilter = new Tone.AutoFilter(\"4n\").toDestination().start();\n * // route an oscillator through the filter and start it\n * const oscillator = new Tone.Oscillator().connect(autoFilter).start();\n * @category Effect\n */\nexport class AutoFilter extends LFOEffect<AutoFilterOptions> {\n\n\treadonly name: string = \"AutoFilter\";\n\n\t/**\n\t * The filter node\n\t */\n\treadonly filter: Filter;\n\n\t/**\n\t * The octaves placeholder\n\t */\n\tprivate _octaves!: Positive;\n\n\t/**\n\t * @param frequency The rate of the LFO.\n\t * @param baseFrequency The lower value of the LFOs oscillation\n\t * @param octaves The number of octaves above the baseFrequency\n\t */\n\tconstructor(frequency?: Frequency, baseFrequency?: Frequency, octaves?: Positive);\n\tconstructor(options?: Partial<AutoFilterOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(AutoFilter.getDefaults(), arguments, [\"frequency\", \"baseFrequency\", \"octaves\"]));\n\t\tconst options = optionsFromArguments(AutoFilter.getDefaults(), arguments, [\"frequency\", \"baseFrequency\", \"octaves\"]);\n\n\t\tthis.filter = new Filter(Object.assign(options.filter, {\n\t\t\tcontext: this.context,\n\t\t}));\n\n\t\t// connections\n\t\tthis.connectEffect(this.filter);\n\t\tthis._lfo.connect(this.filter.frequency);\n\t\tthis.octaves = options.octaves;\n\t\tthis.baseFrequency = options.baseFrequency;\n\t}\n\n\tstatic getDefaults(): AutoFilterOptions {\n\t\treturn Object.assign(LFOEffect.getDefaults(), {\n\t\t\tbaseFrequency: 200,\n\t\t\toctaves: 2.6,\n\t\t\tfilter: {\n\t\t\t\ttype: \"lowpass\" as \"lowpass\",\n\t\t\t\trolloff: -12 as -12,\n\t\t\t\tQ: 1,\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * The minimum value of the filter's cutoff frequency.\n\t */\n\tget baseFrequency(): Frequency {\n\t\treturn this._lfo.min;\n\t}\n\tset baseFrequency(freq) {\n\t\tthis._lfo.min = this.toFrequency(freq);\n\t\t// and set the max\n\t\tthis.octaves = this._octaves;\n\t}\n\n\t/**\n\t * The maximum value of the filter's cutoff frequency. \n\t */\n\tget octaves(): Positive {\n\t\treturn this._octaves;\n\t}\n\tset octaves(oct) {\n\t\tthis._octaves = oct;\n\t\tthis._lfo.max = this._lfo.min * Math.pow(2, oct);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.filter.dispose();\n\t\treturn this;\n\t}\n}\n", "import { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { AudioRange } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\n\ninterface TonePannerOptions extends ToneAudioNodeOptions {\n\tpan: AudioRange;\n\tchannelCount: number;\n}\n\n/**\n * Panner is an equal power Left/Right Panner. It is a wrapper around the StereoPannerNode.\n * @example\n * return Tone.Offline(() => {\n * // move the input signal from right to left\n * \tconst panner = new Tone.Panner(1).toDestination();\n * \tpanner.pan.rampTo(-1, 0.5);\n * \tconst osc = new Tone.Oscillator(100).connect(panner).start();\n * }, 0.5, 2);\n * @category Component\n */\nexport class Panner extends ToneAudioNode<TonePannerOptions> {\n\n\treadonly name: string = \"Panner\";\n\n\t/**\n\t * the panner node\n\t */\n\tprivate _panner: StereoPannerNode = this.context.createStereoPanner();\n\treadonly input: StereoPannerNode = this._panner;\n\treadonly output: StereoPannerNode = this._panner;\n\n\t/**\n\t * The pan control. -1 = hard left, 1 = hard right.\n\t * @min -1\n\t * @max 1\n\t * @example\n\t * return Tone.Offline(() => {\n\t * \t// pan hard right\n\t * \tconst panner = new Tone.Panner(1).toDestination();\n\t * \t// pan hard left\n\t * \tpanner.pan.setValueAtTime(-1, 0.25);\n\t * \tconst osc = new Tone.Oscillator(50, \"triangle\").connect(panner).start();\n\t * }, 0.5, 2);\n\t */\n\treadonly pan: Param<\"audioRange\">;\n\n\tconstructor(options?: Partial<TonePannerOptions>);\n\t/**\n\t * @param pan The initial panner value (Defaults to 0 = \"center\").\n\t */\n\tconstructor(pan?: AudioRange);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Panner.getDefaults(), arguments, [\"pan\"])));\n\t\tconst options = optionsFromArguments(Panner.getDefaults(), arguments, [\"pan\"]);\n\n\t\tthis.pan = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._panner.pan,\n\t\t\tvalue: options.pan,\n\t\t\tminValue: -1,\n\t\t\tmaxValue: 1,\n\t\t});\n\n\t\t// this is necessary for standardized-audio-context\n\t\t// doesn't make any difference for the native AudioContext\n\t\t// https://github.com/chrisguttandin/standardized-audio-context/issues/647\n\t\tthis._panner.channelCount = options.channelCount;\n\t\tthis._panner.channelCountMode = \"explicit\";\n\n\t\t// initial value\n\t\treadOnly(this, \"pan\");\n\t}\n\n\tstatic getDefaults(): TonePannerOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tpan: 0,\n\t\t\tchannelCount: 1,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._panner.disconnect();\n\t\tthis.pan.dispose();\n\t\treturn this;\n\t}\n}\n", "import { Panner } from \"../component/channel/Panner\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFOEffect, LFOEffectOptions } from \"./LFOEffect\";\nimport { Frequency } from \"../core/type/Units\";\n\nexport interface AutoPannerOptions extends LFOEffectOptions {\n\tchannelCount: number;\n}\n\n/**\n * AutoPanner is a [[Panner]] with an [[LFO]] connected to the pan amount. \n * [Related Reading](https://www.ableton.com/en/blog/autopan-chopper-effect-and-more-liveschool/).\n *\n * @example\n * // create an autopanner and start it\n * const autoPanner = new Tone.AutoPanner(\"4n\").toDestination().start();\n * // route an oscillator through the panner and start it\n * const oscillator = new Tone.Oscillator().connect(autoPanner).start();\n * @category Effect\n */\nexport class AutoPanner extends LFOEffect<AutoPannerOptions> {\n\n\treadonly name: string = \"AutoPanner\";\n\n\t/**\n\t * The filter node\n\t */\n\treadonly _panner: Panner;\n\n\t/**\n\t * @param frequency Rate of left-right oscillation. \n\t */\n\tconstructor(frequency?: Frequency);\n\tconstructor(options?: Partial<AutoPannerOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(AutoPanner.getDefaults(), arguments, [\"frequency\"]));\n\t\tconst options = optionsFromArguments(AutoPanner.getDefaults(), arguments, [\"frequency\"]);\n\n\t\tthis._panner = new Panner({\n\t\t\tcontext: this.context,\n\t\t\tchannelCount: options.channelCount\n\t\t});\n\t\t// connections\n\t\tthis.connectEffect(this._panner);\n\t\tthis._lfo.connect(this._panner.pan);\n\t\tthis._lfo.min = -1;\n\t\tthis._lfo.max = 1;\n\t}\n\n\tstatic getDefaults(): AutoPannerOptions {\n\t\treturn Object.assign(LFOEffect.getDefaults(), {\n\t\t\tchannelCount: 1\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._panner.dispose();\n\t\treturn this;\n\t}\n}\n\n", "import { Time } from \"../../core/type/Units\";\nimport { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { OnePoleFilter } from \"../filter/OnePoleFilter\";\nimport { Abs } from \"../../signal/Abs\";\n\nexport interface FollowerOptions extends ToneAudioNodeOptions {\n\tsmoothing: Time;\n}\n\n/**\n * Follower is a simple envelope follower. \n * It's implemented by applying a lowpass filter to the absolute value of the incoming signal. \n * ```\n *          +-----+    +---------------+\n * Input +--> Abs +----> OnePoleFilter +--> Output\n *          +-----+    +---------------+\n * ```\n * @category Component\n */\nexport class Follower extends ToneAudioNode<FollowerOptions> {\n\n\treadonly name: string = \"Follower\";\n\n\treadonly input: InputNode;\n\treadonly output: OutputNode;\n\n\t/**\n\t * Private reference to the smoothing parameter\n\t */\n\tprivate _smoothing: Time;\n\n\t/**\n\t * The lowpass filter\n\t */\n\tprivate _lowpass: OnePoleFilter;\n\n\t/**\n\t * The absolute value\n\t */\n\tprivate _abs: Abs;\n\n\t/**\n\t * @param smoothing The rate of change of the follower.\n\t */\n\tconstructor(smoothing?: Time);\n\tconstructor(options?: Partial<FollowerOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Follower.getDefaults(), arguments, [\"smoothing\"]));\n\t\tconst options = optionsFromArguments(Follower.getDefaults(), arguments, [\"smoothing\"]);\n\n\t\tthis._abs = this.input = new Abs({ context: this.context });\n\t\tthis._lowpass = this.output = new OnePoleFilter({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: 1 / this.toSeconds(options.smoothing),\n\t\t\ttype: \"lowpass\"\n\t\t});\n\t\tthis._abs.connect(this._lowpass);\n\t\tthis._smoothing = options.smoothing;\n\t}\n\n\tstatic getDefaults(): FollowerOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tsmoothing: 0.05\n\t\t});\n\t}\n\n\t/**\n\t * The amount of time it takes a value change to arrive at the updated value. \n\t */\n\tget smoothing(): Time {\n\t\treturn this._smoothing;\n\t}\n\tset smoothing(smoothing) {\n\t\tthis._smoothing = smoothing;\n\t\tthis._lowpass.frequency = 1 / this.toSeconds(this.smoothing);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._abs.dispose();\n\t\tthis._lowpass.dispose();\n\t\treturn this;\n\t}\n}\n", "import { Effect, EffectOptions } from \"./Effect\";\nimport { Filter } from \"../component/filter/Filter\";\nimport { Follower } from \"../component/analysis/Follower\";\nimport { Decibels, Frequency, GainFactor, Hertz, Positive, Time } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Gain } from \"../core/context/Gain\";\nimport { dbToGain, gainToDb } from \"../core/type/Conversions\";\nimport { ScaleExp } from \"../signal/ScaleExp\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\n\nexport interface AutoWahOptions extends EffectOptions {\n\tbaseFrequency: Frequency;\n\toctaves: Positive;\n\tsensitivity: Decibels;\n\tQ: Positive;\n\tgain: GainFactor;\n\tfollower: Time;\n}\n\n/**\n * AutoWah connects a [[Follower]] to a [[Filter]]. \n * The frequency of the filter, follows the input amplitude curve. \n * Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna).\n * \n * @example\n * const autoWah = new Tone.AutoWah(50, 6, -30).toDestination();\n * // initialize the synth and connect to autowah\n * const synth = new Tone.Synth().connect(autoWah);\n * // Q value influences the effect of the wah - default is 2\n * autoWah.Q.value = 6;\n * // more audible on higher notes\n * synth.triggerAttackRelease(\"C4\", \"8n\");\n * @category Effect\n */\nexport class AutoWah extends Effect<AutoWahOptions> {\n\n\treadonly name: string = \"AutoWah\";\n\n\t/**\n\t * The envelope follower. Set the attack/release\n\t * timing to adjust how the envelope is followed.\n\t */\n\tprivate _follower: Follower;\n\n\t/**\n\t * scales the follower value to the frequency domain\n\t */\n\tprivate _sweepRange: ScaleExp;\n\n\t/**\n\t * Hold the base frequency value\n\t */\n\tprivate _baseFrequency: Hertz;\n\n\t/**\n\t * Private holder for the octave count\n\t */\n\tprivate _octaves: Positive;\n\n\t/**\n\t * the input gain to adjust the sensitivity\n\t */\n\tprivate _inputBoost: Gain;\n\n\t/**\n\t * Private holder for the filter\n\t */\n\tprivate _bandpass: Filter;\n\n\t/**\n\t * The peaking fitler\n\t */\n\tprivate _peaking: Filter;\n\n\t/**\n\t * The gain of the filter.\n\t */\n\treadonly gain: Signal<\"decibels\">;\n\n\t/**\n\t * The quality of the filter.\n\t */\n\treadonly Q: Signal<\"positive\">;\n\n\t/**\n\t * @param baseFrequency The frequency the filter is set to at the low point of the wah\n\t * @param octaves The number of octaves above the baseFrequency the filter will sweep to when fully open. \n\t * @param sensitivity The decibel threshold sensitivity for the incoming signal. Normal range of -40 to 0.\n\t */\n\tconstructor(baseFrequency?: Frequency, octaves?: Positive, sensitivity?: Decibels);\n\tconstructor(options?: Partial<AutoWahOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(AutoWah.getDefaults(), arguments, [\"baseFrequency\", \"octaves\", \"sensitivity\"]));\n\t\tconst options = optionsFromArguments(AutoWah.getDefaults(), arguments, [\"baseFrequency\", \"octaves\", \"sensitivity\"]);\n\n\t\tthis._follower = new Follower({\n\t\t\tcontext: this.context,\n\t\t\tsmoothing: options.follower,\n\t\t});\n\t\tthis._sweepRange = new ScaleExp({\n\t\t\tcontext: this.context,\n\t\t\tmin: 0,\n\t\t\tmax: 1,\n\t\t\texponent: 0.5,\n\t\t});\n\t\tthis._baseFrequency = this.toFrequency(options.baseFrequency);\n\t\tthis._octaves = options.octaves;\n\t\tthis._inputBoost = new Gain({ context: this.context });\n\t\tthis._bandpass = new Filter({\n\t\t\tcontext: this.context,\n\t\t\trolloff: -48,\n\t\t\tfrequency: 0,\n\t\t\tQ: options.Q,\n\t\t});\n\t\tthis._peaking = new Filter({\n\t\t\tcontext: this.context,\n\t\t\ttype: \"peaking\"\n\t\t});\n\t\tthis._peaking.gain.value = options.gain;\n\t\tthis.gain = this._peaking.gain;\n\t\tthis.Q = this._bandpass.Q;\n\n\t\t// the control signal path\n\t\tthis.effectSend.chain(this._inputBoost, this._follower, this._sweepRange);\n\t\tthis._sweepRange.connect(this._bandpass.frequency);\n\t\tthis._sweepRange.connect(this._peaking.frequency);\n\t\t// the filtered path\n\t\tthis.effectSend.chain(this._bandpass, this._peaking, this.effectReturn);\n\t\t// set the initial value\n\t\tthis._setSweepRange();\n\t\tthis.sensitivity = options.sensitivity;\n\n\t\treadOnly(this, [\"gain\", \"Q\"]);\n\t}\n\n\tstatic getDefaults(): AutoWahOptions {\n\t\treturn Object.assign(Effect.getDefaults(), {\n\t\t\tbaseFrequency: 100,\n\t\t\toctaves: 6,\n\t\t\tsensitivity: 0,\n\t\t\tQ: 2,\n\t\t\tgain: 2,\n\t\t\tfollower: 0.2,\n\t\t});\n\t}\n\n\t/**\n\t * The number of octaves that the filter will sweep above the baseFrequency.\n\t */\n\tget octaves() {\n\t\treturn this._octaves;\n\t}\n\tset octaves(octaves) {\n\t\tthis._octaves = octaves;\n\t\tthis._setSweepRange();\n\t}\n\n\t/**\n\t * The follower's smoothing time\n\t */\n\tget follower(): Time {\n\t\treturn this._follower.smoothing;\n\t}\n\tset follower(follower) {\n\t\tthis._follower.smoothing = follower;\n\t}\n\n\t/**\n\t * The base frequency from which the sweep will start from.\n\t */\n\tget baseFrequency(): Frequency {\n\t\treturn this._baseFrequency;\n\t}\n\tset baseFrequency(baseFreq) {\n\t\tthis._baseFrequency = this.toFrequency(baseFreq);\n\t\tthis._setSweepRange();\n\t}\n\n\t/**\n\t * The sensitivity to control how responsive to the input signal the filter is.\n\t */\n\tget sensitivity(): Decibels {\n\t\treturn gainToDb(1 / this._inputBoost.gain.value);\n\t}\n\tset sensitivity(sensitivity) {\n\t\tthis._inputBoost.gain.value = 1 / dbToGain(sensitivity);\n\t}\n\n\t/**\n\t * sets the sweep range of the scaler\n\t */\n\tprivate _setSweepRange() {\n\t\tthis._sweepRange.min = this._baseFrequency;\n\t\tthis._sweepRange.max = Math.min(this._baseFrequency * Math.pow(2, this._octaves), this.context.sampleRate / 2);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._follower.dispose();\n\t\tthis._sweepRange.dispose();\n\t\tthis._bandpass.dispose();\n\t\tthis._peaking.dispose();\n\t\tthis._inputBoost.dispose();\n\t\treturn this;\n\t}\n}\n", "import \"../core/worklet/SingleIOProcessor.worklet\";\nimport { registerProcessor } from \"../core/worklet/WorkletGlobalScope\";\n\nexport const workletName = \"bit-crusher\";\n\nexport const bitCrusherWorklet = /* javascript */`\n\tclass BitCrusherWorklet extends SingleIOProcessor {\n\n\t\tstatic get parameterDescriptors() {\n\t\t\treturn [{\n\t\t\t\tname: \"bits\",\n\t\t\t\tdefaultValue: 12,\n\t\t\t\tminValue: 1,\n\t\t\t\tmaxValue: 16,\n\t\t\t\tautomationRate: 'k-rate'\n\t\t\t}];\n\t\t}\n\n\t\tgenerate(input, _channel, parameters) {\n\t\t\tconst step = Math.pow(0.5, parameters.bits - 1);\n\t\t\tconst val = step * Math.floor(input / step + 0.5);\n\t\t\treturn val;\n\t\t}\n\t}\n`;\n\nregisterProcessor(workletName, bitCrusherWorklet);\n", "import { ToneAudioWorklet, ToneAudioWorkletOptions } from \"../core/worklet/ToneAudioWorklet\";\nimport { Effect, EffectOptions } from \"./Effect\";\nimport { Positive } from \"../core/type/Units\";\nimport { Gain } from \"../core/context/Gain\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { connectSeries } from \"../core/context/ToneAudioNode\";\nimport { Param } from \"../core/context/Param\";\nimport { workletName } from \"./BitCrusher.worklet\";\n\nexport interface BitCrusherOptions extends EffectOptions {\n\tbits: Positive;\n}\n\n/**\n * BitCrusher down-samples the incoming signal to a different bit depth.\n * Lowering the bit depth of the signal creates distortion. Read more about BitCrushing\n * on [Wikipedia](https://en.wikipedia.org/wiki/Bitcrusher).\n * @example\n * // initialize crusher and route a synth through it\n * const crusher = new Tone.BitCrusher(4).toDestination();\n * const synth = new Tone.Synth().connect(crusher);\n * synth.triggerAttackRelease(\"C2\", 2);\n * \n * @category Effect\n */\nexport class BitCrusher extends Effect<BitCrusherOptions> {\n\n\treadonly name: string = \"BitCrusher\";\n\n\t/**\n\t * The bit depth of the effect\n\t * @min 1\n\t * @max 16\n\t */\n\treadonly bits: Param<\"positive\">;\n\n\t/**\n\t * The node which does the bit crushing effect. Runs in an AudioWorklet when possible.\n\t */\n\tprivate _bitCrusherWorklet: BitCrusherWorklet;\n\n\tconstructor(bits?: Positive);\n\tconstructor(options?: Partial<BitCrusherWorkletOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(BitCrusher.getDefaults(), arguments, [\"bits\"]));\n\t\tconst options = optionsFromArguments(BitCrusher.getDefaults(), arguments, [\"bits\"]);\n\n\t\tthis._bitCrusherWorklet = new BitCrusherWorklet({\n\t\t\tcontext: this.context,\n\t\t\tbits: options.bits,\n\t\t});\n\t\t// connect it up\n\t\tthis.connectEffect(this._bitCrusherWorklet);\n\n\t\tthis.bits = this._bitCrusherWorklet.bits;\n\t}\n\n\tstatic getDefaults(): BitCrusherOptions {\n\t\treturn Object.assign(Effect.getDefaults(), {\n\t\t\tbits: 4,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._bitCrusherWorklet.dispose();\n\t\treturn this;\n\t}\n}\n\ninterface BitCrusherWorkletOptions extends ToneAudioWorkletOptions {\n\tbits: number;\n}\n\n/**\n * Internal class which creates an AudioWorklet to do the bit crushing\n */\nclass BitCrusherWorklet extends ToneAudioWorklet<BitCrusherWorkletOptions> {\n\n\treadonly name: string = \"BitCrusherWorklet\";\n\n\treadonly input: Gain;\n\treadonly output: Gain;\n\n\treadonly bits: Param<\"positive\">;\n\n\tconstructor(options?: Partial<BitCrusherWorkletOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(BitCrusherWorklet.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(BitCrusherWorklet.getDefaults(), arguments);\n\n\t\tthis.input = new Gain({ context: this.context });\n\t\tthis.output = new Gain({ context: this.context });\n\n\t\tthis.bits = new Param<\"positive\">({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.bits,\n\t\t\tunits: \"positive\",\n\t\t\tminValue: 1,\n\t\t\tmaxValue: 16,\n\t\t\tparam: this._dummyParam,\n\t\t\tswappable: true,\n\t\t});\n\t}\n\n\tstatic getDefaults(): BitCrusherWorkletOptions {\n\t\treturn Object.assign(ToneAudioWorklet.getDefaults(), {\n\t\t\tbits: 12,\n\t\t});\n\t}\n\n\tprotected _audioWorkletName(): string {\n\t\treturn workletName;\n\t}\n\n\tonReady(node: AudioWorkletNode) {\n\t\tconnectSeries(this.input, node, this.output);\n\t\tconst bits = node.parameters.get(\"bits\") as AudioParam;\n\t\tthis.bits.setParam(bits);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.input.dispose();\n\t\tthis.output.dispose();\n\t\tthis.bits.dispose();\n\t\treturn this;\n\t}\n}\n", "import { Effect, EffectOptions } from \"./Effect\";\nimport { Positive } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { WaveShaper } from \"../signal/WaveShaper\";\n\nexport interface ChebyshevOptions extends EffectOptions {\n\torder: Positive;\n\toversample: OverSampleType;\n}\n\n/**\n * Chebyshev is a waveshaper which is good \n * for making different types of distortion sounds.\n * Note that odd orders sound very different from even ones, \n * and order = 1 is no change. \n * Read more at [music.columbia.edu](http://music.columbia.edu/cmc/musicandcomputers/chapter4/04_06.php).\n * @example\n * // create a new cheby\n * const cheby = new Tone.Chebyshev(50).toDestination();\n * // create a monosynth connected to our cheby\n * const synth = new Tone.MonoSynth().connect(cheby);\n * synth.triggerAttackRelease(\"C2\", 0.4);\n * @category Effect\n */\nexport class Chebyshev extends Effect<ChebyshevOptions> {\n\n\treadonly name: string = \"Chebyshev\";\n\n\t/**\n\t * The private waveshaper node\n\t */\n\tprivate _shaper: WaveShaper;\n\n\t/**\n\t * holds onto the order of the filter\n\t */\n\tprivate _order: number;\n\n\t/**\n\t * @param order The order of the chebyshev polynomial. Normal range between 1-100. \n\t */\n\tconstructor(order?: Positive);\n\tconstructor(options?: Partial<ChebyshevOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Chebyshev.getDefaults(), arguments, [\"order\"]));\n\t\tconst options = optionsFromArguments(Chebyshev.getDefaults(), arguments, [\"order\"]);\n\n\t\tthis._shaper = new WaveShaper({\n\t\t\tcontext: this.context,\n\t\t\tlength: 4096\n\t\t});\n\t\tthis._order = options.order;\n\n\t\tthis.connectEffect(this._shaper);\n\t\tthis.order = options.order;\n\t\tthis.oversample = options.oversample;\n\t}\n\n\tstatic getDefaults(): ChebyshevOptions {\n\t\treturn Object.assign(Effect.getDefaults(), {\n\t\t\torder: 1,\n\t\t\toversample: \"none\" as \"none\"\n\t\t});\n\t}\n\n\t/**\n\t * get the coefficient for that degree\n\t * @param  x the x value\n\t * @param  degree \n\t * @param  memo memoize the computed value. this speeds up computation greatly. \n\t */\n\tprivate _getCoefficient(x: number, degree: number, memo: Map<number, number>): number {\n\t\tif (memo.has(degree)) {\n\t\t\treturn memo.get(degree) as number;\n\t\t} else if (degree === 0) {\n\t\t\tmemo.set(degree, 0);\n\t\t} else if (degree === 1) {\n\t\t\tmemo.set(degree, x);\n\t\t} else {\n\t\t\tmemo.set(degree, 2 * x * this._getCoefficient(x, degree - 1, memo) - this._getCoefficient(x, degree - 2, memo));\n\t\t}\n\t\treturn memo.get(degree) as number;\n\t}\n\n\t/**\n\t * The order of the Chebyshev polynomial which creates the equation which is applied to the incoming \n\t * signal through a Tone.WaveShaper. The equations are in the form:\n\t * ```\n\t * order 2: 2x^2 + 1\n\t * order 3: 4x^3 + 3x \n\t * ```\n\t * @min 1\n\t * @max 100\n\t */\n\tget order(): Positive {\n\t\treturn this._order;\n\t}\n\tset order(order) {\n\t\tthis._order = order;\n\t\tthis._shaper.setMap((x => {\n\t\t\treturn this._getCoefficient(x, order, new Map());\n\t\t}));\n\t}\n\n\t/**\n\t * The oversampling of the effect. Can either be \"none\", \"2x\" or \"4x\".\n\t */\n\tget oversample(): OverSampleType {\n\t\treturn this._shaper.oversample;\n\t}\n\tset oversample(oversampling) {\n\t\tthis._shaper.oversample = oversampling;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._shaper.dispose();\n\t\treturn this;\n\t}\n}\n", "import { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n\ninterface SplitOptions extends ToneAudioNodeOptions {\n\tchannels: number;\n}\n\n/**\n * Split splits an incoming signal into the number of given channels.\n *\n * @example\n * const split = new Tone.Split();\n * // stereoSignal.connect(split);\n * @category Component\n */\nexport class Split extends ToneAudioNode<SplitOptions> {\n\treadonly name: string = \"Split\";\n\n\t/**\n\t * The splitting node\n\t */\n\tprivate _splitter: ChannelSplitterNode;\n\n\treadonly input: ChannelSplitterNode;\n\treadonly output: ChannelSplitterNode;\n\n\t/**\n\t * @param channels The number of channels to merge.\n\t */\n\tconstructor(channels?: number);\n\tconstructor(options?: Partial<SplitOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Split.getDefaults(), arguments, [\"channels\"]));\n\t\tconst options = optionsFromArguments(Split.getDefaults(), arguments, [\"channels\"]);\n\n\t\tthis._splitter = this.input = this.output = this.context.createChannelSplitter(options.channels);\n\t\tthis._internalChannels = [this._splitter];\n\t}\n\n\tstatic getDefaults(): SplitOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tchannels: 2,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._splitter.disconnect();\n\t\treturn this;\n\t}\n}\n", "import { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Positive } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n\ninterface MergeOptions extends ToneAudioNodeOptions {\n\tchannels: Positive;\n}\n\n/**\n * Merge brings multiple mono input channels into a single multichannel output channel.\n *\n * @example\n * const merge = new Tone.Merge().toDestination();\n * // routing a sine tone in the left channel\n * const osc = new Tone.Oscillator().connect(merge, 0, 0).start();\n * // and noise in the right channel\n * const noise = new Tone.Noise().connect(merge, 0, 1).start();;\n * @category Component\n */\nexport class Merge extends ToneAudioNode<MergeOptions> {\n\n\treadonly name: string = \"Merge\";\n\n\t/**\n\t * The merger node for the channels.\n\t */\n\tprivate _merger: ChannelMergerNode;\n\n\t/**\n\t * The output is the input channels combined into a single (multichannel) output\n\t */\n\treadonly output: ChannelMergerNode;\n\n\t/**\n\t * Multiple input connections combine into a single output.\n\t */\n\treadonly input: ChannelMergerNode;\n\n\t/**\n\t * @param channels The number of channels to merge.\n\t */\n\tconstructor(channels?: Positive);\n\tconstructor(options?: Partial<MergeOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Merge.getDefaults(), arguments, [\"channels\"]));\n\t\tconst options = optionsFromArguments(Merge.getDefaults(), arguments, [\"channels\"]);\n\n\t\tthis._merger = this.output = this.input = this.context.createChannelMerger(options.channels);\n\t}\n\n\tstatic getDefaults(): MergeOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tchannels: 2,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._merger.disconnect();\n\t\treturn this;\n\t}\n}\n", "import { EffectOptions } from \"./Effect\";\nimport { connect, connectSeries, OutputNode, ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { CrossFade } from \"../component/channel/CrossFade\";\nimport { Signal } from \"../signal/Signal\";\nimport { Split } from \"../component/channel/Split\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Merge } from \"../component/channel/Merge\";\nimport { readOnly } from \"../core/util/Interface\";\n\nexport type StereoEffectOptions = EffectOptions;\n\n/**\n * Base class for Stereo effects.\n */\nexport class StereoEffect<Options extends StereoEffectOptions> extends ToneAudioNode<Options> {\n\n\treadonly name: string = \"StereoEffect\";\n\n\treadonly input: Gain;\n\treadonly output: CrossFade;\n\n\t/**\n\t * the drywet knob to control the amount of effect\n\t */\n\tprivate _dryWet: CrossFade;\n\t\n\t/**\n\t * The wet control, i.e. how much of the effected\n\t * will pass through to the output.\n\t */\n\treadonly wet: Signal<\"normalRange\">;\n\t\n\t/**\n\t * Split it\n\t */\n\tprotected _split: Split;\n\t\n\t/**\n\t * the stereo effect merger\n\t */\n\tprotected _merge: Merge;\n\n\tconstructor(options: StereoEffectOptions) {\n\n\t\tsuper(options);\n\n\t\tthis.input = new Gain({ context: this.context });\n\t\t// force mono sources to be stereo\n\t\tthis.input.channelCount = 2;\n\t\tthis.input.channelCountMode = \"explicit\";\n\n\t\tthis._dryWet = this.output = new CrossFade({\n\t\t\tcontext: this.context,\n\t\t\tfade: options.wet\n\t\t});\n\t\tthis.wet = this._dryWet.fade;\n\t\tthis._split = new Split({ context: this.context, channels: 2 });\n\t\tthis._merge = new Merge({ context: this.context, channels: 2 });\n\n\t\t// connections\n\t\tthis.input.connect(this._split);\n\t\t// dry wet connections\n\t\tthis.input.connect(this._dryWet.a);\n\t\tthis._merge.connect(this._dryWet.b);\n\t\treadOnly(this, [\"wet\"]);\n\t}\n\t\n\t/**\n\t * Connect the left part of the effect\n\t */\n\tprotected connectEffectLeft(...nodes: OutputNode[]): void{\n\t\tthis._split.connect(nodes[0], 0, 0);\n\t\tconnectSeries(...nodes);\n\t\tconnect(nodes[nodes.length-1], this._merge, 0, 0);\n\t}\n\t\n\t/**\n\t * Connect the right part of the effect\n\t */\n\tprotected connectEffectRight(...nodes: OutputNode[]): void{\n\t\tthis._split.connect(nodes[0], 1, 0);\n\t\tconnectSeries(...nodes);\n\t\tconnect(nodes[nodes.length-1], this._merge, 0, 1);\n\t}\n\n\tstatic getDefaults(): StereoEffectOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\twet: 1,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._dryWet.dispose();\n\t\tthis._split.dispose();\n\t\tthis._merge.dispose();\n\t\treturn this;\n\t}\n}\n", "import { StereoEffect, StereoEffectOptions } from \"./StereoEffect\";\nimport { NormalRange } from \"../core/type/Units\";\nimport { Signal } from \"../signal/Signal\";\nimport { Gain } from \"../core/context/Gain\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Split } from \"../component/channel/Split\";\nimport { Merge } from \"../component/channel/Merge\";\n\nexport interface StereoFeedbackEffectOptions extends StereoEffectOptions {\n\tfeedback: NormalRange;\n}\n\n/**\n * Base class for stereo feedback effects where the effectReturn is fed back into the same channel.\n */\nexport class StereoFeedbackEffect<Options extends StereoFeedbackEffectOptions> extends StereoEffect<Options> {\n\t\n\t/**\n\t * The amount of feedback from the output\n\t * back into the input of the effect (routed\n\t * across left and right channels).\n\t */\n\treadonly feedback: Signal<\"normalRange\">;\n\n\t/**\n\t * the left side feedback\n\t */\n\tprotected _feedbackL: Gain;\n\n\t/**\n\t * the right side feedback\n\t */\n\tprotected _feedbackR: Gain;\n\n\t/**\n\t * Split the channels for feedback\n\t */\n\tprotected _feedbackSplit: Split;\n\n\t/**\n\t * Merge the channels for feedback\n\t */\n\tprotected _feedbackMerge: Merge;\n\n\tconstructor(options: StereoFeedbackEffectOptions) {\n\n\t\tsuper(options);\n\n\t\tthis.feedback = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.feedback, \n\t\t\tunits: \"normalRange\"\n\t\t});\n\t\tthis._feedbackL = new Gain({ context: this.context });\n\t\tthis._feedbackR = new Gain({ context: this.context });\n\n\t\tthis._feedbackSplit = new Split({ context: this.context, channels: 2 });\n\t\tthis._feedbackMerge = new Merge({ context: this.context, channels: 2 });\n\n\t\tthis._merge.connect(this._feedbackSplit);\n\t\tthis._feedbackMerge.connect(this._split);\n\t\t\n\t\t// the left output connected to the left input\n\t\tthis._feedbackSplit.connect(this._feedbackL, 0, 0);\n\t\tthis._feedbackL.connect(this._feedbackMerge, 0, 0);\n\n\t\t// the right output connected to the right input\n\t\tthis._feedbackSplit.connect(this._feedbackR, 1, 0);\n\t\tthis._feedbackR.connect(this._feedbackMerge, 0, 1);\n\t\t\n\t\t// the feedback control\n\t\tthis.feedback.fan(this._feedbackL.gain, this._feedbackR.gain);\n\t\treadOnly(this, [\"feedback\"]);\n\t}\n\n\tstatic getDefaults(): StereoFeedbackEffectOptions {\n\t\treturn Object.assign(StereoEffect.getDefaults(), {\n\t\t\tfeedback: 0.5,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.feedback.dispose();\n\t\tthis._feedbackL.dispose();\n\t\tthis._feedbackR.dispose();\n\t\tthis._feedbackSplit.dispose();\n\t\tthis._feedbackMerge.dispose();\n\t\treturn this;\n\t}\n}\n", "import { StereoFeedbackEffect, StereoFeedbackEffectOptions } from \"../effect/StereoFeedbackEffect\";\nimport { Degrees, Frequency, Milliseconds, NormalRange, Seconds, Time } from \"../core/type/Units\";\nimport { ToneOscillatorType } from \"../source/oscillator/OscillatorInterface\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Delay } from \"../core/context/Delay\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\n\nexport interface ChorusOptions extends StereoFeedbackEffectOptions {\n\tfrequency: Frequency;\n\tdelayTime: Milliseconds;\n\tdepth: NormalRange;\n\ttype: ToneOscillatorType;\n\tspread: Degrees;\n}\n\n/**\n * Chorus is a stereo chorus effect composed of a left and right delay with an [[LFO]] applied to the delayTime of each channel.\n * When [[feedback]] is set to a value larger than 0, you also get Flanger-type effects. \n * Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna/blob/master/tuna.js).\n * Read more on the chorus effect on [SoundOnSound](http://www.soundonsound.com/sos/jun04/articles/synthsecrets.htm).\n *\n * @example\n * const chorus = new Tone.Chorus(4, 2.5, 0.5).toDestination().start();\n * const synth = new Tone.PolySynth().connect(chorus);\n * synth.triggerAttackRelease([\"C3\", \"E3\", \"G3\"], \"8n\");\n * \n * @category Effect\n */\nexport class Chorus extends StereoFeedbackEffect<ChorusOptions> {\n\n\treadonly name: string = \"Chorus\";\n\n\t/**\n\t * the depth of the chorus\n\t */\n\tprivate _depth: NormalRange;\n\n\t/**\n\t * the delayTime in seconds.\n\t */\n\tprivate _delayTime: Seconds;\n\n\t/**\n\t * the lfo which controls the delayTime\n\t */\n\tprivate _lfoL: LFO\n\n\t/**\n\t * another LFO for the right side with a 180 degree phase diff\n\t */\n\tprivate _lfoR: LFO\n\n\t/**\n\t * delay for left\n\t */\n\tprivate _delayNodeL: Delay;\n\n\t/**\n\t * delay for right\n\t */\n\tprivate _delayNodeR: Delay;\n\n\t/**\n\t * The frequency of the LFO which modulates the delayTime.\n\t */\n\treadonly frequency: Signal<\"frequency\">\n\n\t/**\n\t * @param frequency The frequency of the LFO.\n\t * @param delayTime The delay of the chorus effect in ms.\n\t * @param depth The depth of the chorus.\n\t */\n\tconstructor(frequency?: Frequency, delayTime?: Milliseconds, depth?: NormalRange);\n\tconstructor(options?: Partial<ChorusOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Chorus.getDefaults(), arguments, [\"frequency\", \"delayTime\", \"depth\"]));\n\t\tconst options = optionsFromArguments(Chorus.getDefaults(), arguments, [\"frequency\", \"delayTime\", \"depth\"]);\n\n\t\tthis._depth = options.depth;\n\t\tthis._delayTime = options.delayTime / 1000;\n\t\tthis._lfoL = new LFO({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.frequency,\n\t\t\tmin: 0,\n\t\t\tmax: 1,\n\t\t});\n\t\tthis._lfoR = new LFO({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.frequency,\n\t\t\tmin: 0,\n\t\t\tmax: 1,\n\t\t\tphase: 180\n\t\t});\n\t\tthis._delayNodeL = new Delay({ context: this.context });\n\t\tthis._delayNodeR = new Delay({ context: this.context });\n\t\tthis.frequency = this._lfoL.frequency;\n\t\treadOnly(this, [\"frequency\"]);\n\t\t// have one LFO frequency control the other\n\t\tthis._lfoL.frequency.connect(this._lfoR.frequency);\n\n\t\t// connections\n\t\tthis.connectEffectLeft(this._delayNodeL);\n\t\tthis.connectEffectRight(this._delayNodeR);\n\t\t// lfo setup\n\t\tthis._lfoL.connect(this._delayNodeL.delayTime);\n\t\tthis._lfoR.connect(this._delayNodeR.delayTime);\n\t\t// set the initial values\n\t\tthis.depth = this._depth;\n\t\tthis.type = options.type;\n\t\tthis.spread = options.spread;\n\t}\n\n\tstatic getDefaults(): ChorusOptions {\n\t\treturn Object.assign(StereoFeedbackEffect.getDefaults(), {\n\t\t\tfrequency: 1.5,\n\t\t\tdelayTime: 3.5,\n\t\t\tdepth: 0.7,\n\t\t\ttype: \"sine\" as \"sine\",\n\t\t\tspread: 180,\n\t\t\tfeedback: 0,\n\t\t\twet: 0.5,\n\t\t});\n\t}\n\n\t/**\n\t * The depth of the effect. A depth of 1 makes the delayTime\n\t * modulate between 0 and 2*delayTime (centered around the delayTime).\n\t */\n\tget depth(): NormalRange {\n\t\treturn this._depth;\n\t}\n\tset depth(depth) {\n\t\tthis._depth = depth;\n\t\tconst deviation = this._delayTime * depth;\n\t\tthis._lfoL.min = Math.max(this._delayTime - deviation, 0);\n\t\tthis._lfoL.max = this._delayTime + deviation;\n\t\tthis._lfoR.min = Math.max(this._delayTime - deviation, 0);\n\t\tthis._lfoR.max = this._delayTime + deviation;\n\t}\n\n\t/**\n\t * The delayTime in milliseconds of the chorus. A larger delayTime\n\t * will give a more pronounced effect. Nominal range a delayTime\n\t * is between 2 and 20ms.\n\t */\n\tget delayTime(): Milliseconds {\n\t\treturn this._delayTime * 1000;\n\t}\n\tset delayTime(delayTime) {\n\t\tthis._delayTime = delayTime / 1000;\n\t\tthis.depth = this._depth;\n\t}\n\n\t/**\n\t * The oscillator type of the LFO.\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._lfoL.type;\n\t}\n\tset type(type) {\n\t\tthis._lfoL.type = type;\n\t\tthis._lfoR.type = type;\n\t}\n\n\t/**\n\t * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\n\t * When set to 180, LFO's will be panned hard left and right respectively.\n\t */\n\tget spread(): Degrees {\n\t\treturn this._lfoR.phase - this._lfoL.phase;\n\t}\n\tset spread(spread) {\n\t\tthis._lfoL.phase = 90 - (spread / 2);\n\t\tthis._lfoR.phase = (spread / 2) + 90;\n\t}\n\n\t/**\n\t * Start the effect.\n\t */\n\tstart(time?: Time): this {\n\t\tthis._lfoL.start(time);\n\t\tthis._lfoR.start(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the lfo\n\t */\n\tstop(time?: Time): this {\n\t\tthis._lfoL.stop(time);\n\t\tthis._lfoR.stop(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sync the filter to the transport. See [[LFO.sync]]\n\t */\n\tsync(): this {\n\t\tthis._lfoL.sync();\n\t\tthis._lfoR.sync();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unsync the filter from the transport.\n\t */\n\tunsync(): this {\n\t\tthis._lfoL.unsync();\n\t\tthis._lfoR.unsync();\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._lfoL.dispose();\n\t\tthis._lfoR.dispose();\n\t\tthis._delayNodeL.dispose();\n\t\tthis._delayNodeR.dispose();\n\t\tthis.frequency.dispose();\n\t\treturn this;\n\t}\n}\n", "import { optionsFromArguments } from \"../core/util/Defaults\";\nimport { WaveShaper } from \"../signal/WaveShaper\";\nimport { Effect, EffectOptions } from \"./Effect\";\n\nexport interface DistortionOptions extends EffectOptions {\n\tdistortion: number;\n\toversample: OverSampleType;\n}\n\n/**\n * A simple distortion effect using Tone.WaveShaper.\n * Algorithm from [this stackoverflow answer](http://stackoverflow.com/a/22313408).\n *\n * @example\n * const dist = new Tone.Distortion(0.8).toDestination();\n * const fm = new Tone.FMSynth().connect(dist);\n * fm.triggerAttackRelease(\"A1\", \"8n\");\n * @category Effect\n */\nexport class Distortion extends Effect<DistortionOptions> {\n\n\treadonly name: string = \"Distortion\";\n\n\t/**\n\t * The waveshaper which does the distortion\n\t */\n\tprivate _shaper: WaveShaper;\n\n\t/**\n\t * Stores the distortion value\n\t */\n\tprivate _distortion: number;\n\n\t/**\n\t * @param distortion The amount of distortion (nominal range of 0-1)\n\t */\n\tconstructor(distortion?: number);\n\tconstructor(options?: Partial<DistortionOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Distortion.getDefaults(), arguments, [\"distortion\"]));\n\t\tconst options = optionsFromArguments(Distortion.getDefaults(), arguments, [\"distortion\"]);\n\n\t\tthis._shaper = new WaveShaper({\n\t\t\tcontext: this.context,\n\t\t\tlength: 4096,\n\t\t});\n\n\t\tthis._distortion = options.distortion;\n\n\t\tthis.connectEffect(this._shaper);\n\t\tthis.distortion = options.distortion;\n\t\tthis.oversample = options.oversample;\n\t}\n\n\tstatic getDefaults(): DistortionOptions {\n\t\treturn Object.assign(Effect.getDefaults(), {\n\t\t\tdistortion: 0.4,\n\t\t\toversample: \"none\" as OverSampleType,\n\t\t});\n\t}\n\n\t/**\n\t * The amount of distortion. Nominal range is between 0 and 1.\n\t */\n\tget distortion(): number {\n\t\treturn this._distortion;\n\t}\n\tset distortion(amount) {\n\t\tthis._distortion = amount;\n\t\tconst k = amount * 100;\n\t\tconst deg = Math.PI / 180;\n\t\tthis._shaper.setMap((x) => {\n\t\t\tif (Math.abs(x) < 0.001) {\n\t\t\t\t// should output 0 when input is 0\n\t\t\t\treturn 0;\n\t\t\t} else {\n\t\t\t\treturn (3 + k) * x * 20 * deg / (Math.PI + k * Math.abs(x));\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * The oversampling of the effect. Can either be \"none\", \"2x\" or \"4x\".\n\t */\n\tget oversample(): OverSampleType {\n\t\treturn this._shaper.oversample;\n\t}\n\tset oversample(oversampling) {\n\t\tthis._shaper.oversample = oversampling;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._shaper.dispose();\n\t\treturn this;\n\t}\n}\n", "import { Gain } from \"../core/context/Gain\";\nimport { Param } from \"../core/context/Param\";\nimport { NormalRange } from \"../core/type/Units\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Effect, EffectOptions } from \"./Effect\";\n\nexport interface FeedbackEffectOptions extends EffectOptions {\n\t/**\n\t * The feedback from the output back to the input\n\t * ```\n\t * +---<--------<---+\n\t * |                |\n\t * |  +----------+  |\n\t * +--> feedback +>-+\n\t *    +----------+\n\t * ```\n\t */\n\tfeedback: NormalRange;\n}\n\n/**\n * FeedbackEffect provides a loop between an audio source and its own output.\n * This is a base-class for feedback effects.\n */\nexport abstract class FeedbackEffect<Options extends FeedbackEffectOptions> extends Effect<Options> {\n\n\treadonly name: string = \"FeedbackEffect\";\n\n\t/**\n\t * the gain which controls the feedback\n\t */\n\tprivate _feedbackGain: Gain<\"normalRange\">;\n\n\t/**\n\t * The amount of signal which is fed back into the effect input.\n\t */\n\tfeedback: Param<\"normalRange\">;\n\n\tconstructor(options: FeedbackEffectOptions) {\n\n\t\tsuper(options);\n\n\t\tthis._feedbackGain = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.feedback,\n\t\t\tunits: \"normalRange\",\n\t\t});\n\n\t\tthis.feedback = this._feedbackGain.gain;\n\t\treadOnly(this, \"feedback\");\n\n\t\t// the feedback loop\n\t\tthis.effectReturn.chain(this._feedbackGain, this.effectSend);\n\t}\n\n\tstatic getDefaults(): FeedbackEffectOptions {\n\t\treturn Object.assign(Effect.getDefaults(), {\n\t\t\tfeedback: 0.125,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._feedbackGain.dispose();\n\t\tthis.feedback.dispose();\n\t\treturn this;\n\t}\n}\n", "import { Delay } from \"../core/context/Delay\";\nimport { Param } from \"../core/context/Param\";\nimport { NormalRange, Time } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { FeedbackEffect, FeedbackEffectOptions } from \"./FeedbackEffect\";\n\ninterface FeedbackDelayOptions extends FeedbackEffectOptions {\n\tdelayTime: Time;\n\tmaxDelay: Time;\n}\n\n/**\n * FeedbackDelay is a DelayNode in which part of output signal is fed back into the delay.\n *\n * @param delayTime The delay applied to the incoming signal.\n * @param feedback The amount of the effected signal which is fed back through the delay.\n * @example\n * const feedbackDelay = new Tone.FeedbackDelay(\"8n\", 0.5).toDestination();\n * const tom = new Tone.MembraneSynth({\n * \toctaves: 4,\n * \tpitchDecay: 0.1\n * }).connect(feedbackDelay);\n * tom.triggerAttackRelease(\"A2\", \"32n\");\n * @category Effect\n */\nexport class FeedbackDelay extends FeedbackEffect<FeedbackDelayOptions> {\n\n\treadonly name: string = \"FeedbackDelay\";\n\n\t/**\n\t * the delay node\n\t */\n\tprivate _delayNode: Delay;\n\n\t/**\n\t * The delayTime of the FeedbackDelay.\n\t */\n\treadonly delayTime: Param<\"time\">;\n\n\tconstructor(delayTime?: Time, feedback?: NormalRange);\n\tconstructor(options?: Partial<FeedbackDelayOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(FeedbackDelay.getDefaults(), arguments, [\"delayTime\", \"feedback\"]));\n\t\tconst options = optionsFromArguments(FeedbackDelay.getDefaults(), arguments, [\"delayTime\", \"feedback\"]);\n\n\t\tthis._delayNode = new Delay({\n\t\t\tcontext: this.context,\n\t\t\tdelayTime: options.delayTime,\n\t\t\tmaxDelay: options.maxDelay,\n\t\t});\n\t\tthis.delayTime = this._delayNode.delayTime;\n\n\t\t// connect it up\n\t\tthis.connectEffect(this._delayNode);\n\t\treadOnly(this, \"delayTime\");\n\t}\n\n\tstatic getDefaults(): FeedbackDelayOptions {\n\t\treturn Object.assign(FeedbackEffect.getDefaults(), {\n\t\t\tdelayTime: 0.25,\n\t\t\tmaxDelay: 1,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._delayNode.dispose();\n\t\tthis.delayTime.dispose();\n\t\treturn this;\n\t}\n}\n", "import { Gain } from \"../../core/context/Gain\";\nimport { connectSeries, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\n\n/**\n * PhaseShiftAllpass is an very efficient implementation of a Hilbert Transform\n * using two Allpass filter banks whose outputs have a phase difference of 90°.\n * Here the `offset90` phase is offset by +90° in relation to `output`.\n * Coefficients and structure was developed by Olli Niemitalo.\n * For more details see: http://yehar.com/blog/?p=368\n * @category Component\n */\nexport class PhaseShiftAllpass extends ToneAudioNode<ToneAudioNodeOptions> {\n\n\treadonly name: string = \"PhaseShiftAllpass\";\n\n\treadonly input = new Gain({ context: this.context });\n\n\t/**\n\t * The Allpass filter in the first bank\n\t */\n\tprivate _bank0: IIRFilterNode[];\n\n\t/**\n\t * The Allpass filter in the seconds bank\n\t */\n\tprivate _bank1: IIRFilterNode[];\n\n\t/**\n\t * A IIR filter implementing a delay by one sample used by the first bank\n\t */\n\tprivate _oneSampleDelay: IIRFilterNode;\n\n\t/**\n\t * The phase shifted output\n\t */\n\treadonly output = new Gain({ context: this.context });\n\n\t/**\n\t * The PhaseShifted allpass output\n\t */\n\treadonly offset90 = new Gain({ context: this.context });\n\n\tconstructor(options?: Partial<ToneAudioNodeOptions>) {\n\n\t\tsuper(options);\n\n\t\tconst allpassBank1Values = [0.6923878, 0.9360654322959, 0.9882295226860, 0.9987488452737];\n\t\tconst allpassBank2Values = [0.4021921162426, 0.8561710882420, 0.9722909545651, 0.9952884791278];\n\n\t\tthis._bank0 = this._createAllPassFilterBank(allpassBank1Values);\n\t\tthis._bank1 = this._createAllPassFilterBank(allpassBank2Values);\n\t\tthis._oneSampleDelay = this.context.createIIRFilter([0.0, 1.0], [1.0, 0.0]);\n\n\t\t// connect Allpass filter banks\n\t\tconnectSeries(this.input, ...this._bank0, this._oneSampleDelay, this.output);\n\t\tconnectSeries(this.input, ...this._bank1, this.offset90);\n\t}\n\n\t/**\n\t * Create all of the IIR filters from an array of values using the coefficient calculation.\n\t */\n\tprivate _createAllPassFilterBank(bankValues: number[]): IIRFilterNode[] {\n\t\tconst nodes: IIRFilterNode[] = bankValues.map(value => {\n\t\t\tconst coefficients = [[value * value, 0, -1], [1, 0, -(value * value)]];\n\t\t\treturn this.context.createIIRFilter(coefficients[0], coefficients[1]);\n\t\t});\n\n\t\treturn nodes;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.input.dispose();\n\t\tthis.output.dispose();\n\t\tthis.offset90.dispose();\n\t\tthis._bank0.forEach(f => f.disconnect());\n\t\tthis._bank1.forEach(f => f.disconnect());\n\t\tthis._oneSampleDelay.disconnect();\n\t\treturn this;\n\t}\n}\n", "import { PhaseShiftAllpass } from \"../component/filter/PhaseShiftAllpass\";\nimport { Frequency } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Effect, EffectOptions } from \"../effect/Effect\";\nimport { Add } from \"../signal/Add\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Negate } from \"../signal/Negate\";\nimport { Signal } from \"../signal/Signal\";\nimport { Oscillator } from \"../source/oscillator/Oscillator\";\nimport { ToneOscillatorNode } from \"../source/oscillator/ToneOscillatorNode\";\n\ninterface FrequencyShifterOptions extends EffectOptions {\n\tfrequency: Frequency;\n}\n\n/**\n * FrequencyShifter can be used to shift all frequencies of a signal by a fixed amount.\n * The amount can be changed at audio rate and the effect is applied in real time.\n * The frequency shifting is implemented with a technique called single side band modulation using a ring modulator.\n * Note: Contrary to pitch shifting, all frequencies are shifted by the same amount,\n * destroying the harmonic relationship between them. This leads to the classic ring modulator timbre distortion.\n * The algorithm will produces some aliasing towards the high end, especially if your source material\n * contains a lot of high frequencies. Unfortunatelly the webaudio API does not support resampling\n * buffers in real time, so it is not possible to fix it properly. Depending on the use case it might\n * be an option to low pass filter your input before frequency shifting it to get ride of the aliasing.\n * You can find a very detailed description of the algorithm here: https://larzeitlin.github.io/RMFS/\n *\n * @example\n * const input = new Tone.Oscillator(230, \"sawtooth\").start();\n * const shift = new Tone.FrequencyShifter(42).toDestination();\n * input.connect(shift);\n * @category Effect\n */\nexport class FrequencyShifter extends Effect<FrequencyShifterOptions> {\n\n\treadonly name: string = \"FrequencyShifter\";\n\n\t/**\n\t * The ring modulators carrier frequency. This frequency determines\n\t * by how many Hertz the input signal will be shifted up or down. Default is 0.\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * The ring modulators sine carrier\n\t */\n\tprivate _sine: ToneOscillatorNode;\n\n\t/**\n\t * The ring modulators cosine carrier\n\t */\n\tprivate _cosine: Oscillator;\n\n\t/**\n\t * The sine multiply operator\n\t */\n\tprivate _sineMultiply: Multiply;\n\n\t/**\n\t * The cosine multiply operator\n\t */\n\tprivate _cosineMultiply: Multiply;\n\n\t/**\n\t * The negate operator\n\t */\n\tprivate _negate: Negate;\n\n\t/**\n\t * The final add operator\n\t */\n\tprivate _add: Add;\n\n\t/**\n\t * The phase shifter to create the initial 90° phase offset\n\t */\n\tprivate _phaseShifter: PhaseShiftAllpass;\n\n\t/**\n\t * @param frequency The incoming signal is shifted by this frequency value.\n\t */\n\tconstructor(frequency?: Frequency);\n\tconstructor(options?: Partial<FrequencyShifterOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(FrequencyShifter.getDefaults(), arguments, [\"frequency\"]));\n\t\tconst options = optionsFromArguments(FrequencyShifter.getDefaults(), arguments, [\"frequency\"]);\n\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t\tminValue: -this.context.sampleRate / 2,\n\t\t\tmaxValue: this.context.sampleRate / 2,\n\t\t});\n\n\t\tthis._sine = new ToneOscillatorNode({\n\t\t\tcontext: this.context,\n\t\t\ttype: \"sine\",\n\t\t});\n\n\t\tthis._cosine = new Oscillator({\n\t\t\tcontext: this.context,\n\t\t\tphase: -90,\n\t\t\ttype: \"sine\",\n\t\t});\n\n\t\tthis._sineMultiply = new Multiply({ context: this.context });\n\t\tthis._cosineMultiply = new Multiply({ context: this.context });\n\t\tthis._negate = new Negate({ context: this.context });\n\t\tthis._add = new Add({ context: this.context });\n\n\t\tthis._phaseShifter = new PhaseShiftAllpass({ context: this.context });\n\t\tthis.effectSend.connect(this._phaseShifter);\n\n\t\t// connect the carrier frequency signal to the two oscillators\n\t\tthis.frequency.fan(this._sine.frequency, this._cosine.frequency);\n\n\t\tthis._phaseShifter.offset90.connect(this._cosineMultiply);\n\t\tthis._cosine.connect(this._cosineMultiply.factor);\n\n\t\tthis._phaseShifter.connect(this._sineMultiply);\n\t\tthis._sine.connect(this._sineMultiply.factor);\n\t\tthis._sineMultiply.connect(this._negate);\n\n\t\tthis._cosineMultiply.connect(this._add);\n\t\tthis._negate.connect(this._add.addend);\n\n\t\tthis._add.connect(this.effectReturn);\n\n\t\t// start the oscillators at the same time\n\t\tconst now = this.immediate();\n\t\tthis._sine.start(now);\n\t\tthis._cosine.start(now);\n\t}\n\n\tstatic getDefaults(): FrequencyShifterOptions {\n\t\treturn Object.assign(Effect.getDefaults(), {\n\t\t\tfrequency: 0,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis._add.dispose();\n\t\tthis._cosine.dispose();\n\t\tthis._cosineMultiply.dispose();\n\t\tthis._negate.dispose();\n\t\tthis._phaseShifter.dispose();\n\t\tthis._sine.dispose();\n\t\tthis._sineMultiply.dispose();\n\t\treturn this;\n\t}\n}\n", "import { StereoEffect, StereoEffectOptions } from \"./StereoEffect\";\nimport { Frequency, NormalRange } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Signal } from \"../signal/Signal\";\nimport { LowpassCombFilter } from \"../component/filter/LowpassCombFilter\";\n\nexport interface FreeverbOptions extends StereoEffectOptions {\n\tdampening: Frequency;\n\troomSize: NormalRange;\n}\n\n/**\n * An array of comb filter delay values from Freeverb implementation\n */\nconst combFilterTunings = [1557 / 44100, 1617 / 44100, 1491 / 44100, 1422 / 44100, 1277 / 44100, 1356 / 44100, 1188 / 44100, 1116 / 44100];\n\n/**\n * An array of allpass filter frequency values from Freeverb implementation\n */\nconst allpassFilterFrequencies = [225, 556, 441, 341];\n\n/**\n * Freeverb is a reverb based on [Freeverb](https://ccrma.stanford.edu/~jos/pasp/Freeverb.html).\n * Read more on reverb on [Sound On Sound](https://web.archive.org/web/20160404083902/http://www.soundonsound.com:80/sos/feb01/articles/synthsecrets.asp).\n * Freeverb is now implemented with an AudioWorkletNode which may result on performance degradation on some platforms. Consider using [[Reverb]].\n * @example\n * const freeverb = new Tone.Freeverb().toDestination();\n * freeverb.dampening = 1000;\n * // routing synth through the reverb\n * const synth = new Tone.NoiseSynth().connect(freeverb);\n * synth.triggerAttackRelease(0.05);\n * @category Effect\n */\nexport class Freeverb extends StereoEffect<FreeverbOptions> {\n\n\treadonly name: string = \"Freeverb\";\n\n\t/**\n\t * The roomSize value between 0 and 1. A larger roomSize will result in a longer decay.\n\t */\n\treadonly roomSize: Signal<\"normalRange\">;\n\n\t/**\n\t * the comb filters\n\t */\n\tprivate _combFilters: LowpassCombFilter[] = [];\n\n\t/**\n\t * the allpass filters on the left\n\t */\n\tprivate _allpassFiltersL: BiquadFilterNode[] = [];\n\n\t/**\n\t * the allpass filters on the right\n\t */\n\tprivate _allpassFiltersR: BiquadFilterNode[] = [];\n\n\t/**\n\t * @param roomSize Correlated to the decay time.\n\t * @param dampening The cutoff frequency of a lowpass filter as part of the reverb.\n\t */\n\tconstructor(roomSize?: NormalRange, dampening?: Frequency);\n\tconstructor(options?: Partial<FreeverbOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Freeverb.getDefaults(), arguments, [\"roomSize\", \"dampening\"]));\n\t\tconst options = optionsFromArguments(Freeverb.getDefaults(), arguments, [\"roomSize\", \"dampening\"]);\n\n\t\tthis.roomSize = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.roomSize,\n\t\t\tunits: \"normalRange\",\n\t\t});\n\n\t\t// make the allpass filters on the right\n\t\tthis._allpassFiltersL = allpassFilterFrequencies.map(freq => {\n\t\t\tconst allpassL = this.context.createBiquadFilter();\n\t\t\tallpassL.type = \"allpass\";\n\t\t\tallpassL.frequency.value = freq;\n\t\t\treturn allpassL;\n\t\t});\n\n\t\t// make the allpass filters on the left\n\t\tthis._allpassFiltersR = allpassFilterFrequencies.map(freq => {\n\t\t\tconst allpassR = this.context.createBiquadFilter();\n\t\t\tallpassR.type = \"allpass\";\n\t\t\tallpassR.frequency.value = freq;\n\t\t\treturn allpassR;\n\t\t});\n\n\t\t// make the comb filters\n\t\tthis._combFilters = combFilterTunings.map((delayTime, index) => {\n\t\t\tconst lfpf = new LowpassCombFilter({\n\t\t\t\tcontext: this.context,\n\t\t\t\tdampening: options.dampening,\n\t\t\t\tdelayTime,\n\t\t\t});\n\t\t\tif (index < combFilterTunings.length / 2) {\n\t\t\t\tthis.connectEffectLeft(lfpf, ...this._allpassFiltersL);\n\t\t\t} else {\n\t\t\t\tthis.connectEffectRight(lfpf, ...this._allpassFiltersR);\n\t\t\t}\n\t\t\tthis.roomSize.connect(lfpf.resonance);\n\t\t\treturn lfpf;\n\t\t});\n\n\t\treadOnly(this, [\"roomSize\"]);\n\t}\n\n\tstatic getDefaults(): FreeverbOptions {\n\t\treturn Object.assign(StereoEffect.getDefaults(), {\n\t\t\troomSize: 0.7,\n\t\t\tdampening: 3000\n\t\t});\n\t}\n\n\t/**\n\t * The amount of dampening of the reverberant signal.\n\t */\n\n\tget dampening(): Frequency {\n\t\treturn this._combFilters[0].dampening;\n\t}\n\tset dampening(d) {\n\t\tthis._combFilters.forEach(c => c.dampening = d);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._allpassFiltersL.forEach(al => al.disconnect());\n\t\tthis._allpassFiltersR.forEach(ar => ar.disconnect());\n\t\tthis._combFilters.forEach(cf => cf.dispose());\n\t\tthis.roomSize.dispose();\n\t\treturn this;\n\t}\n}\n", "import { NormalRange } from \"../core/type/Units\";\nimport { StereoEffect, StereoEffectOptions } from \"./StereoEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Scale } from \"../signal/Scale\";\nimport { Signal } from \"../signal/Signal\";\nimport { FeedbackCombFilter } from \"../component/filter/FeedbackCombFilter\";\nimport { readOnly } from \"../core/util/Interface\";\n\nexport interface JCReverbOptions extends StereoEffectOptions {\n\troomSize: NormalRange;\n}\n\n/**\n * an array of the comb filter delay time values\n */\nconst combFilterDelayTimes = [1687 / 25000, 1601 / 25000, 2053 / 25000, 2251 / 25000];\n\n/**\n * the resonances of each of the comb filters\n */\nconst combFilterResonances = [0.773, 0.802, 0.753, 0.733];\n\n/**\n * the allpass filter frequencies\n */\nconst allpassFilterFreqs = [347, 113, 37];\n\n/**\n * JCReverb is a simple [Schroeder Reverberator](https://ccrma.stanford.edu/~jos/pasp/Schroeder_Reverberators.html)\n * tuned by John Chowning in 1970.\n * It is made up of three allpass filters and four [[FeedbackCombFilter]].\n * JCReverb is now implemented with an AudioWorkletNode which may result on performance degradation on some platforms. Consider using [[Reverb]].\n * @example\n * const reverb = new Tone.JCReverb(0.4).toDestination();\n * const delay = new Tone.FeedbackDelay(0.5);\n * // connecting the synth to reverb through delay\n * const synth = new Tone.DuoSynth().chain(delay, reverb);\n * synth.triggerAttackRelease(\"A4\", \"8n\");\n * \n * @category Effect\n */\nexport class JCReverb extends StereoEffect<JCReverbOptions> {\n\n\treadonly name: string = \"JCReverb\";\n\n\t/**\n\t * Room size control values. \n\t */\n\treadonly roomSize: Signal<\"normalRange\">\n\n\t/**\n\t * Scale the room size\n\t */\n\tprivate _scaleRoomSize: Scale;\n\n\t/**\n\t * a series of allpass filters\n\t */\n\tprivate _allpassFilters: BiquadFilterNode[] = [];\n\n\t/**\n\t * parallel feedback comb filters\n\t */\n\tprivate _feedbackCombFilters: FeedbackCombFilter[] = [];\n\n\t/**\n\t * @param roomSize Correlated to the decay time.\n\t */\n\tconstructor(roomSize?: NormalRange);\n\tconstructor(options?: Partial<JCReverbOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(JCReverb.getDefaults(), arguments, [\"roomSize\"]));\n\t\tconst options = optionsFromArguments(JCReverb.getDefaults(), arguments, [\"roomSize\"]);\n\n\t\tthis.roomSize = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.roomSize,\n\t\t\tunits: \"normalRange\",\n\t\t});\n\t\tthis._scaleRoomSize = new Scale({\n\t\t\tcontext: this.context,\n\t\t\tmin: -0.733,\n\t\t\tmax: 0.197,\n\t\t});\n\n\t\t// make the allpass filters\n\t\tthis._allpassFilters = allpassFilterFreqs.map(freq => {\n\t\t\tconst allpass = this.context.createBiquadFilter();\n\t\t\tallpass.type = \"allpass\";\n\t\t\tallpass.frequency.value = freq;\n\t\t\treturn allpass;\n\t\t});\n\n\t\t// and the comb filters\n\t\tthis._feedbackCombFilters = combFilterDelayTimes.map((delayTime, index) => {\n\t\t\tconst fbcf = new FeedbackCombFilter({\n\t\t\t\tcontext: this.context,\n\t\t\t\tdelayTime,\n\t\t\t});\n\t\t\tthis._scaleRoomSize.connect(fbcf.resonance);\n\t\t\tfbcf.resonance.value = combFilterResonances[index];\n\t\t\tif (index < combFilterDelayTimes.length / 2) {\n\t\t\t\tthis.connectEffectLeft(...this._allpassFilters, fbcf);\n\t\t\t} else {\n\t\t\t\tthis.connectEffectRight(...this._allpassFilters, fbcf);\n\t\t\t}\n\t\t\treturn fbcf;\n\t\t});\n\n\t\t// chain the allpass filters together\n\t\tthis.roomSize.connect(this._scaleRoomSize);\n\t\treadOnly(this, [\"roomSize\"]);\n\t}\n\n\tstatic getDefaults(): JCReverbOptions {\n\t\treturn Object.assign(StereoEffect.getDefaults(), {\n\t\t\troomSize: 0.5,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._allpassFilters.forEach(apf => apf.disconnect());\n\t\tthis._feedbackCombFilters.forEach(fbcf => fbcf.dispose());\n\t\tthis.roomSize.dispose();\n\t\tthis._scaleRoomSize.dispose();\n\t\treturn this;\n\t}\n}\n", "import { StereoFeedbackEffect, StereoFeedbackEffectOptions } from \"./StereoFeedbackEffect\";\nimport { NormalRange } from \"../core/type/Units\";\nimport { readOnly } from \"../core/util/Interface\";\n\nexport interface StereoXFeedbackEffectOptions extends StereoFeedbackEffectOptions {\n\tfeedback: NormalRange;\n}\n\n/**\n * Just like a [[StereoFeedbackEffect]], but the feedback is routed from left to right\n * and right to left instead of on the same channel.\n * ```\n * +--------------------------------+ feedbackL <-----------------------------------+\n * |                                                                                |\n * +-->                          +----->        +---->                          +-----+\n *      feedbackMerge +--> split        (EFFECT)       merge +--> feedbackSplit     | |\n * +-->                          +----->        +---->                          +---+ |\n * |                                                                                  |\n * +--------------------------------+ feedbackR <-------------------------------------+\n * ```\n */\nexport class StereoXFeedbackEffect<Options extends StereoXFeedbackEffectOptions> extends StereoFeedbackEffect<Options> {\n\t\n\tconstructor(options: StereoXFeedbackEffectOptions) {\n\n\t\tsuper(options);\n\t\t// the left output connected to the right input\n\t\tthis._feedbackL.disconnect();\n\t\tthis._feedbackL.connect(this._feedbackMerge, 0, 1);\n\n\t\t// the left output connected to the right input\n\t\tthis._feedbackR.disconnect();\n\t\tthis._feedbackR.connect(this._feedbackMerge, 0, 0);\n\t\t\n\t\treadOnly(this, [\"feedback\"]);\n\t}\n}\n", "import { StereoXFeedbackEffect, StereoXFeedbackEffectOptions } from \"./StereoXFeedbackEffect\";\nimport { NormalRange, Seconds, Time } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Delay } from \"../core/context/Delay\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\n\nexport interface PingPongDelayOptions extends StereoXFeedbackEffectOptions {\n\tdelayTime: Time;\n\tmaxDelay: Seconds;\n}\n\n/**\n * PingPongDelay is a feedback delay effect where the echo is heard\n * first in one channel and next in the opposite channel. In a stereo\n * system these are the right and left channels.\n * PingPongDelay in more simplified terms is two Tone.FeedbackDelays\n * with independent delay values. Each delay is routed to one channel\n * (left or right), and the channel triggered second will always\n * trigger at the same interval after the first.\n * @example\n * const pingPong = new Tone.PingPongDelay(\"4n\", 0.2).toDestination();\n * const drum = new Tone.MembraneSynth().connect(pingPong);\n * drum.triggerAttackRelease(\"C4\", \"32n\");\n * @category Effect\n */\nexport class PingPongDelay extends StereoXFeedbackEffect<PingPongDelayOptions> {\n\n\treadonly name: string = \"PingPongDelay\";\n\n\t/**\n\t * the delay node on the left side\n\t */\n\tprivate _leftDelay: Delay;\n\n\t/**\n\t * the delay node on the right side\n\t */\n\tprivate _rightDelay: Delay;\n\n\t/**\n\t * the predelay on the right side\n\t */\n\tprivate _rightPreDelay: Delay;\n\n\t/**\n\t * the delay time signal\n\t */\n\treadonly delayTime: Signal<\"time\">;\n\n\t/**\n\t * @param delayTime The delayTime between consecutive echos.\n\t * @param feedback The amount of the effected signal which is fed back through the delay.\n\t */\n\tconstructor(delayTime?: Time, feedback?: NormalRange);\n\tconstructor(options?: Partial<PingPongDelayOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(PingPongDelay.getDefaults(), arguments, [\"delayTime\", \"feedback\"]));\n\t\tconst options = optionsFromArguments(PingPongDelay.getDefaults(), arguments, [\"delayTime\", \"feedback\"]);\n\n\t\tthis._leftDelay = new Delay({\n\t\t\tcontext: this.context,\n\t\t\tmaxDelay: options.maxDelay,\n\t\t});\n\t\tthis._rightDelay = new Delay({\n\t\t\tcontext: this.context,\n\t\t\tmaxDelay: options.maxDelay\n\t\t});\n\t\tthis._rightPreDelay = new Delay({\n\t\t\tcontext: this.context,\n\t\t\tmaxDelay: options.maxDelay\n\t\t});\n\t\tthis.delayTime = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"time\",\n\t\t\tvalue: options.delayTime,\n\t\t});\n\n\t\t// connect it up\n\t\tthis.connectEffectLeft(this._leftDelay);\n\t\tthis.connectEffectRight(this._rightPreDelay, this._rightDelay);\n\t\tthis.delayTime.fan(this._leftDelay.delayTime, this._rightDelay.delayTime, this._rightPreDelay.delayTime);\n\t\t// rearranged the feedback to be after the rightPreDelay\n\t\tthis._feedbackL.disconnect();\n\t\tthis._feedbackL.connect(this._rightDelay);\n\t\treadOnly(this, [\"delayTime\"]);\n\t}\n\n\tstatic getDefaults(): PingPongDelayOptions {\n\t\treturn Object.assign(StereoXFeedbackEffect.getDefaults(), {\n\t\t\tdelayTime: 0.25,\n\t\t\tmaxDelay: 1\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._leftDelay.dispose();\n\t\tthis._rightDelay.dispose();\n\t\tthis._rightPreDelay.dispose();\n\t\tthis.delayTime.dispose();\n\t\treturn this;\n\t}\n}\n", "import { Interval, Seconds, Time } from \"../core/type/Units\";\nimport { FeedbackEffect, FeedbackEffectOptions } from \"./FeedbackEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Delay } from \"../core/context/Delay\";\nimport { CrossFade } from \"../component/channel/CrossFade\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Param } from \"../core/context/Param\";\nimport { intervalToFrequencyRatio } from \"../core/type/Conversions\";\n\nexport interface PitchShiftOptions extends FeedbackEffectOptions {\n\tpitch: Interval;\n\twindowSize: Seconds;\n\tdelayTime: Time;\n}\n\n/**\n * PitchShift does near-realtime pitch shifting to the incoming signal.\n * The effect is achieved by speeding up or slowing down the delayTime\n * of a DelayNode using a sawtooth wave.\n * Algorithm found in [this pdf](http://dsp-book.narod.ru/soundproc.pdf).\n * Additional reference by [Miller Pucket](http://msp.ucsd.edu/techniques/v0.11/book-html/node115.html).\n * @category Effect\n */\nexport class PitchShift extends FeedbackEffect<PitchShiftOptions> {\n\n\treadonly name: string = \"PitchShift\";\n\n\t/**\n\t * The pitch signal\n\t */\n\tprivate _frequency: Signal<\"frequency\">;\n\n\t/**\n\t * Uses two DelayNodes to cover up the jump in the sawtooth wave.\n\t */\n\tprivate _delayA: Delay;\n\n\t/**\n\t * The first LFO.\n\t */\n\tprivate _lfoA: LFO;\n\n\t/**\n\t * The second DelayNode\n\t */\n\tprivate _delayB: Delay;\n\n\t/**\n\t * The second LFO.\n\t */\n\tprivate _lfoB: LFO;\n\n\t/**\n\t * Cross fade quickly between the two delay lines to cover up the jump in the sawtooth wave\n\t */\n\tprivate _crossFade: CrossFade;\n\n\t/**\n\t * LFO which alternates between the two delay lines to cover up the disparity in the\n\t * sawtooth wave.\n\t */\n\tprivate _crossFadeLFO: LFO;\n\n\t/**\n\t * The delay node\n\t */\n\tprivate _feedbackDelay: Delay;\n\n\t/**\n\t * The amount of delay on the input signal\n\t */\n\treadonly delayTime: Param<\"time\">;\n\n\t/**\n\t * Hold the current pitch\n\t */\n\tprivate _pitch: Interval;\n\n\t/**\n\t * Hold the current windowSize\n\t */\n\tprivate _windowSize;\n\n\t/**\n\t * @param pitch The interval to transpose the incoming signal by.\n\t */\n\tconstructor(pitch?: Interval);\n\tconstructor(options?: Partial<PitchShiftOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(PitchShift.getDefaults(), arguments, [\"pitch\"]));\n\t\tconst options = optionsFromArguments(PitchShift.getDefaults(), arguments, [\"pitch\"]);\n\n\t\tthis._frequency = new Signal({ context: this.context });\n\t\tthis._delayA = new Delay({\n\t\t\tmaxDelay: 1,\n\t\t\tcontext: this.context\n\t\t});\n\t\tthis._lfoA = new LFO({\n\t\t\tcontext: this.context,\n\t\t\tmin: 0,\n\t\t\tmax: 0.1,\n\t\t\ttype: \"sawtooth\"\n\t\t}).connect(this._delayA.delayTime);\n\t\tthis._delayB = new Delay({\n\t\t\tmaxDelay: 1,\n\t\t\tcontext: this.context\n\t\t});\n\t\tthis._lfoB = new LFO({\n\t\t\tcontext: this.context,\n\t\t\tmin: 0,\n\t\t\tmax: 0.1,\n\t\t\ttype: \"sawtooth\",\n\t\t\tphase: 180\n\t\t}).connect(this._delayB.delayTime);\n\t\tthis._crossFade = new CrossFade({ context: this.context });\n\t\tthis._crossFadeLFO = new LFO({\n\t\t\tcontext: this.context,\n\t\t\tmin: 0,\n\t\t\tmax: 1,\n\t\t\ttype: \"triangle\",\n\t\t\tphase: 90\n\t\t}).connect(this._crossFade.fade);\n\t\tthis._feedbackDelay = new Delay({\n\t\t\tdelayTime: options.delayTime,\n\t\t\tcontext: this.context,\n\t\t});\n\t\tthis.delayTime = this._feedbackDelay.delayTime;\n\t\treadOnly(this, \"delayTime\");\n\t\tthis._pitch = options.pitch;\n\n\t\tthis._windowSize = options.windowSize;\n\n\t\t// connect the two delay lines up\n\t\tthis._delayA.connect(this._crossFade.a);\n\t\tthis._delayB.connect(this._crossFade.b);\n\t\t// connect the frequency\n\t\tthis._frequency.fan(this._lfoA.frequency, this._lfoB.frequency, this._crossFadeLFO.frequency);\n\t\t// route the input\n\t\tthis.effectSend.fan(this._delayA, this._delayB);\n\t\tthis._crossFade.chain(this._feedbackDelay, this.effectReturn);\n\t\t// start the LFOs at the same time\n\t\tconst now = this.now();\n\t\tthis._lfoA.start(now);\n\t\tthis._lfoB.start(now);\n\t\tthis._crossFadeLFO.start(now);\n\t\t// set the initial value\n\t\tthis.windowSize = this._windowSize;\n\t}\n\n\tstatic getDefaults(): PitchShiftOptions {\n\t\treturn Object.assign(FeedbackEffect.getDefaults(), {\n\t\t\tpitch: 0,\n\t\t\twindowSize: 0.1,\n\t\t\tdelayTime: 0,\n\t\t\tfeedback: 0\n\t\t});\n\t}\n\n\t/**\n\t * Repitch the incoming signal by some interval (measured in semi-tones).\n\t * @example\n\t * const pitchShift = new Tone.PitchShift().toDestination();\n\t * const osc = new Tone.Oscillator().connect(pitchShift).start().toDestination();\n\t * pitchShift.pitch = -12; // down one octave\n\t * pitchShift.pitch = 7; // up a fifth\n\t */\n\tget pitch() {\n\t\treturn this._pitch;\n\t}\n\tset pitch(interval) {\n\t\tthis._pitch = interval;\n\t\tlet factor = 0;\n\t\tif (interval < 0) {\n\t\t\tthis._lfoA.min = 0;\n\t\t\tthis._lfoA.max = this._windowSize;\n\t\t\tthis._lfoB.min = 0;\n\t\t\tthis._lfoB.max = this._windowSize;\n\t\t\tfactor = intervalToFrequencyRatio(interval - 1) + 1;\n\t\t} else {\n\t\t\tthis._lfoA.min = this._windowSize;\n\t\t\tthis._lfoA.max = 0;\n\t\t\tthis._lfoB.min = this._windowSize;\n\t\t\tthis._lfoB.max = 0;\n\t\t\tfactor = intervalToFrequencyRatio(interval) - 1;\n\t\t}\n\t\tthis._frequency.value = factor * (1.2 / this._windowSize);\n\t}\n\n\t/**\n\t * The window size corresponds roughly to the sample length in a looping sampler.\n\t * Smaller values are desirable for a less noticeable delay time of the pitch shifted\n\t * signal, but larger values will result in smoother pitch shifting for larger intervals.\n\t * A nominal range of 0.03 to 0.1 is recommended.\n\t */\n\tget windowSize(): Seconds {\n\t\treturn this._windowSize;\n\t}\n\tset windowSize(size) {\n\t\tthis._windowSize = this.toSeconds(size);\n\t\tthis.pitch = this._pitch;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._frequency.dispose();\n\t\tthis._delayA.dispose();\n\t\tthis._delayB.dispose();\n\t\tthis._lfoA.dispose();\n\t\tthis._lfoB.dispose();\n\t\tthis._crossFade.dispose();\n\t\tthis._crossFadeLFO.dispose();\n\t\tthis._feedbackDelay.dispose();\n\t\treturn this;\n\t}\n}\n", "import { StereoEffect, StereoEffectOptions } from \"./StereoEffect\";\nimport { Frequency, Hertz, Positive } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\n\nexport interface PhaserOptions extends StereoEffectOptions {\n\tfrequency: Frequency;\n\toctaves: Positive;\n\tstages: Positive;\n\tQ: Positive;\n\tbaseFrequency: Frequency;\n}\n\n/**\n * Phaser is a phaser effect. Phasers work by changing the phase\n * of different frequency components of an incoming signal. Read more on\n * [Wikipedia](https://en.wikipedia.org/wiki/Phaser_(effect)).\n * Inspiration for this phaser comes from [Tuna.js](https://github.com/Dinahmoe/tuna/).\n * @example\n * const phaser = new Tone.Phaser({\n * \tfrequency: 15,\n * \toctaves: 5,\n * \tbaseFrequency: 1000\n * }).toDestination();\n * const synth = new Tone.FMSynth().connect(phaser);\n * synth.triggerAttackRelease(\"E3\", \"2n\");\n * @category Effect\n */\nexport class Phaser extends StereoEffect<PhaserOptions> {\n\n\treadonly name: string = \"Phaser\";\n\n\t/**\n\t * the lfo which controls the frequency on the left side\n\t */\n\tprivate _lfoL: LFO;\n\n\t/**\n\t * the lfo which controls the frequency on the right side\n\t */\n\tprivate _lfoR: LFO;\n\n\t/**\n\t * the base modulation frequency\n\t */\n\tprivate _baseFrequency: Hertz;\n\n\t/**\n\t * the octaves of the phasing\n\t */\n\tprivate _octaves: Positive;\n\n\t/**\n\t * The quality factor of the filters\n\t */\n\treadonly Q: Signal<\"positive\">;\n\n\t/**\n\t * the array of filters for the left side\n\t */\n\tprivate _filtersL: BiquadFilterNode[];\n\n\t/**\n\t * the array of filters for the left side\n\t */\n\tprivate _filtersR: BiquadFilterNode[];\n\n\t/**\n\t * the frequency of the effect\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * @param frequency The speed of the phasing.\n\t * @param octaves The octaves of the effect.\n\t * @param baseFrequency The base frequency of the filters.\n\t */\n\tconstructor(frequency?: Frequency, octaves?: Positive, baseFrequency?: Frequency);\n\tconstructor(options?: Partial<PhaserOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Phaser.getDefaults(), arguments, [\"frequency\", \"octaves\", \"baseFrequency\"]));\n\t\tconst options = optionsFromArguments(Phaser.getDefaults(), arguments, [\"frequency\", \"octaves\", \"baseFrequency\"]);\n\n\t\tthis._lfoL = new LFO({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.frequency,\n\t\t\tmin: 0,\n\t\t\tmax: 1\n\t\t});\n\t\tthis._lfoR = new LFO({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.frequency,\n\t\t\tmin: 0,\n\t\t\tmax: 1,\n\t\t\tphase: 180,\n\t\t});\n\t\tthis._baseFrequency = this.toFrequency(options.baseFrequency);\n\t\tthis._octaves = options.octaves;\n\t\tthis.Q = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.Q,\n\t\t\tunits: \"positive\",\n\t\t});\n\t\tthis._filtersL = this._makeFilters(options.stages, this._lfoL);\n\t\tthis._filtersR = this._makeFilters(options.stages, this._lfoR);\n\n\t\tthis.frequency = this._lfoL.frequency;\n\t\tthis.frequency.value = options.frequency;\n\n\t\t// connect them up\n\t\tthis.connectEffectLeft(...this._filtersL);\n\t\tthis.connectEffectRight(...this._filtersR);\n\t\t// control the frequency with one LFO\n\t\tthis._lfoL.frequency.connect(this._lfoR.frequency);\n\t\t// set the options\n\t\tthis.baseFrequency = options.baseFrequency;\n\t\tthis.octaves = options.octaves;\n\t\t// start the lfo\n\t\tthis._lfoL.start();\n\t\tthis._lfoR.start();\n\t\treadOnly(this, [\"frequency\", \"Q\"]);\n\t}\n\n\tstatic getDefaults(): PhaserOptions {\n\t\treturn Object.assign(StereoEffect.getDefaults(), {\n\t\t\tfrequency: 0.5,\n\t\t\toctaves: 3,\n\t\t\tstages: 10,\n\t\t\tQ: 10,\n\t\t\tbaseFrequency: 350,\n\t\t});\n\t}\n\n\tprivate _makeFilters(stages: number, connectToFreq: LFO): BiquadFilterNode[] {\n\t\tconst filters: BiquadFilterNode[] = [];\n\t\t// make all the filters\n\t\tfor (let i = 0; i < stages; i++) {\n\t\t\tconst filter = this.context.createBiquadFilter();\n\t\t\tfilter.type = \"allpass\";\n\t\t\tthis.Q.connect(filter.Q);\n\t\t\tconnectToFreq.connect(filter.frequency);\n\t\t\tfilters.push(filter);\n\t\t}\n\t\treturn filters;\n\t}\n\n\t/**\n\t * The number of octaves the phase goes above the baseFrequency\n\t */\n\tget octaves() {\n\t\treturn this._octaves;\n\t}\n\tset octaves(octaves) {\n\t\tthis._octaves = octaves;\n\t\tconst max = this._baseFrequency * Math.pow(2, octaves);\n\t\tthis._lfoL.max = max;\n\t\tthis._lfoR.max = max;\n\t}\n\n\t/**\n\t * The the base frequency of the filters.\n\t */\n\tget baseFrequency(): Frequency {\n\t\treturn this._baseFrequency;\n\t}\n\tset baseFrequency(freq) {\n\t\tthis._baseFrequency = this.toFrequency(freq);\n\t\tthis._lfoL.min = this._baseFrequency;\n\t\tthis._lfoR.min = this._baseFrequency;\n\t\tthis.octaves = this._octaves;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.Q.dispose();\n\t\tthis._lfoL.dispose();\n\t\tthis._lfoR.dispose();\n\t\tthis._filtersL.forEach(f => f.disconnect());\n\t\tthis._filtersR.forEach(f => f.disconnect());\n\t\tthis.frequency.dispose();\n\t\treturn this;\n\t}\n}\n\n", "import { Merge } from \"../component/channel/Merge\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Seconds, Time } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Noise } from \"../source/Noise\";\nimport { Effect, EffectOptions } from \"./Effect\";\nimport { OfflineContext } from \"../core/context/OfflineContext\";\nimport { noOp } from \"../core/util/Interface\";\nimport { assertRange } from \"../core/util/Debug\";\n\ninterface ReverbOptions extends EffectOptions {\n\tdecay: Seconds;\n\tpreDelay: Seconds;\n}\n\n/**\n * Simple convolution created with decaying noise.\n * Generates an Impulse Response Buffer\n * with Tone.Offline then feeds the IR into ConvolverNode.\n * The impulse response generation is async, so you have\n * to wait until [[ready]] resolves before it will make a sound. \n *\n * Inspiration from [ReverbGen](https://github.com/adelespinasse/reverbGen).\n * Copyright (c) 2014 Alan deLespinasse Apache 2.0 License.\n * \n * @category Effect\n */\nexport class Reverb extends Effect<ReverbOptions> {\n\n\treadonly name: string = \"Reverb\";\n\n\t/**\n\t * Convolver node\n\t */\n\tprivate _convolver: ConvolverNode = this.context.createConvolver();\n\n\t/**\n\t * The duration of the reverb.\n\t */\n\tprivate _decay: Seconds;\n\t\n\t/**\n\t * The amount of time before the reverb is fully ramped in.\n\t */\n\tprivate _preDelay: Seconds;\n\n\t/**\n\t * Resolves when the reverb buffer is generated. Whenever either [[decay]]\n\t * or [[preDelay]] are set, you have to wait until [[ready]] resolves\n\t * before the IR is generated with the latest values. \n\t */\n\tready: Promise<void> = Promise.resolve();\n\n\t/**\n\t * @param decay The amount of time it will reverberate for.\n\t */\n\tconstructor(decay?: Seconds);\n\tconstructor(options?: Partial<ReverbOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Reverb.getDefaults(), arguments, [\"decay\"]));\n\t\tconst options = optionsFromArguments(Reverb.getDefaults(), arguments, [\"decay\"]);\n\n\t\tthis._decay = options.decay;\n\t\tthis._preDelay = options.preDelay;\n\t\tthis.generate();\n\n\t\tthis.connectEffect(this._convolver);\n\t}\n\n\tstatic getDefaults(): ReverbOptions {\n\t\treturn Object.assign(Effect.getDefaults(), {\n\t\t\tdecay: 1.5,\n\t\t\tpreDelay: 0.01,\n\t\t});\n\t}\n\n\t/**\n\t * The duration of the reverb.\n\t */\n\tget decay(): Time {\n\t\treturn this._decay;\n\t}\n\tset decay(time) {\n\t\ttime = this.toSeconds(time);\n\t\tassertRange(time, 0.001);\n\t\tthis._decay = time;\n\t\tthis.generate();\n\t}\n\n\t/**\n\t * The amount of time before the reverb is fully ramped in.\n\t */\n\tget preDelay(): Time {\n\t\treturn this._preDelay;\n\t}\n\tset preDelay(time) {\n\t\ttime = this.toSeconds(time);\n\t\tassertRange(time, 0);\n\t\tthis._preDelay = time;\n\t\tthis.generate();\n\t}\n\n\t/**\n\t * Generate the Impulse Response. Returns a promise while the IR is being generated.\n\t * @return Promise which returns this object.\n\t */\n\tasync generate(): Promise<this> {\n\t\tconst previousReady = this.ready;\n\n\t\t// create a noise burst which decays over the duration in each channel\n\t\tconst context = new OfflineContext(2, this._decay + this._preDelay, this.context.sampleRate);\n\t\tconst noiseL = new Noise({ context });\n\t\tconst noiseR = new Noise({ context });\n\t\tconst merge = new Merge({ context });\n\t\tnoiseL.connect(merge, 0, 0);\n\t\tnoiseR.connect(merge, 0, 1);\n\t\tconst gainNode = new Gain({ context }).toDestination();\n\t\tmerge.connect(gainNode);\n\t\tnoiseL.start(0);\n\t\tnoiseR.start(0);\n\t\t// predelay\n\t\tgainNode.gain.setValueAtTime(0, 0);\n\t\tgainNode.gain.setValueAtTime(1, this._preDelay);\n\t\t// decay\n\t\tgainNode.gain.exponentialApproachValueAtTime(0, this._preDelay, this.decay);\n\t\t\n\t\t// render the buffer\n\t\tconst renderPromise = context.render();\n\t\tthis.ready = renderPromise.then(noOp);\n\t\t\n\t\t// wait for the previous `ready` to resolve\n\t\tawait previousReady;\n\t\t// set the buffer\n\t\tthis._convolver.buffer = (await renderPromise).get() as AudioBuffer;\n\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._convolver.disconnect();\n\t\treturn this;\n\t}\n}\n", "import { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Split } from \"./Split\";\nimport { Add } from \"../../signal/Add\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Subtract } from \"../../signal/Subtract\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n\nexport type MidSideSplitOptions = ToneAudioNodeOptions;\n\n/**\n * Mid/Side processing separates the the 'mid' signal (which comes out of both the left and the right channel)\n * and the 'side' (which only comes out of the the side channels).\n * ```\n * Mid = (Left+Right)/sqrt(2);   // obtain mid-signal from left and right\n * Side = (Left-Right)/sqrt(2);   // obtain side-signal from left and right\n * ```\n * @category Component\n */\nexport class MidSideSplit extends ToneAudioNode<MidSideSplitOptions> {\n\t\n\treadonly name: string = \"MidSideSplit\";\n\n\treadonly input: Split;\n\n\t/**\n\t * There is no output node, use either [[mid]] or [[side]] outputs.\n\t */\n\treadonly output: undefined;\n\t/**\n\t * Split the incoming signal into left and right channels\n\t */\n\tprivate _split: Split;\n\n\t/**\n\t * Sums the left and right channels\n\t */\n\tprivate _midAdd: Add;\n\n\t/**\n\t * Subtract left and right channels. \n\t */\n\tprivate _sideSubtract: Subtract;\n\n\t/**\n\t * The \"mid\" output. `(Left+Right)/sqrt(2)`\n\t */\n\treadonly mid: ToneAudioNode;\n\n\t/**\n\t * The \"side\" output. `(Left-Right)/sqrt(2)`\n\t */\n\treadonly side: ToneAudioNode;\n\t\n\tconstructor(options?: Partial<MidSideSplitOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(MidSideSplit.getDefaults(), arguments));\n\n\t\tthis._split = this.input = new Split({\n\t\t\tchannels: 2,\n\t\t\tcontext: this.context\n\t\t});\n\t\tthis._midAdd = new Add({ context: this.context });\n\t\tthis.mid = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tvalue: Math.SQRT1_2,\n\t\t});\n\t\tthis._sideSubtract = new Subtract({ context: this.context });\n\t\tthis.side = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tvalue: Math.SQRT1_2,\n\t\t});\n\n\t\tthis._split.connect(this._midAdd, 0);\n\t\tthis._split.connect(this._midAdd.addend, 1);\n\t\tthis._split.connect(this._sideSubtract, 0);\n\t\tthis._split.connect(this._sideSubtract.subtrahend, 1);\n\t\tthis._midAdd.connect(this.mid);\n\t\tthis._sideSubtract.connect(this.side);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.mid.dispose();\n\t\tthis.side.dispose();\n\t\tthis._midAdd.dispose();\n\t\tthis._sideSubtract.dispose();\n\t\tthis._split.dispose();\n\t\treturn this;\n\t}\n}\n", "import { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Merge } from \"./Merge\";\nimport { Add } from \"../../signal/Add\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Subtract } from \"../../signal/Subtract\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n\nexport type MidSideMergeOptions = ToneAudioNodeOptions;\n\n/**\n * MidSideMerge merges the mid and side signal after they've been separated by [[MidSideSplit]]\n * ```\n * Mid = (Left+Right)/sqrt(2);   // obtain mid-signal from left and right\n * Side = (Left-Right)/sqrt(2);   // obtain side-signal from left and right\n * ```\n * @category Component\n */\nexport class MidSideMerge extends ToneAudioNode<MidSideMergeOptions> {\n\t\n\treadonly name: string = \"MidSideMerge\";\n\n\t/**\n\t * There is no input, connect sources to either [[mid]] or [[side]] inputs.\n\t */\n\treadonly input: undefined;\n\n\t/**\n\t * The merged signal\n\t */\n\treadonly output: Merge;\n\n\t/**\n\t * Merge the incoming signal into left and right channels\n\t */\n\tprivate _merge: Merge;\n\n\t/**\n\t * The \"mid\" input.\n\t */\n\treadonly mid: ToneAudioNode;\n\n\t/**\n\t * The \"side\" input.\n\t */\n\treadonly side: ToneAudioNode;\n\n\t/**\n\t * Recombine the mid/side into Left\n\t */\n\tprivate _left: Add;\n\n\t/**\n\t * Recombine the mid/side into Right\n\t */\n\tprivate _right: Subtract;\n\n\t/**\n\t * Multiply the right by sqrt(1/2)\n\t */\n\tprivate _leftMult: Multiply;\n\n\t/**\n\t * Multiply the left by sqrt(1/2)\n\t */\n\tprivate _rightMult: Multiply;\n\t\n\tconstructor(options?: Partial<MidSideMergeOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(MidSideMerge.getDefaults(), arguments));\n\t\tthis.mid = new Gain({ context: this.context });\n\t\tthis.side = new Gain({ context: this.context });\n\t\tthis._left = new Add({ context: this.context });\n\t\tthis._leftMult = new Multiply({\n\t\t\tcontext: this.context, \n\t\t\tvalue: Math.SQRT1_2\n\t\t});\n\t\tthis._right = new Subtract({ context: this.context });\n\t\tthis._rightMult = new Multiply({\n\t\t\tcontext: this.context, \n\t\t\tvalue: Math.SQRT1_2\n\t\t});\n\t\tthis._merge = this.output = new Merge({ context: this.context });\n\n\t\tthis.mid.fan(this._left);\n\t\tthis.side.connect(this._left.addend);\n\t\tthis.mid.connect(this._right);\n\t\tthis.side.connect(this._right.subtrahend);\n\t\tthis._left.connect(this._leftMult);\n\t\tthis._right.connect(this._rightMult);\n\t\tthis._leftMult.connect(this._merge, 0, 0);\n\t\tthis._rightMult.connect(this._merge, 0, 1);\n\t}\n\t\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.mid.dispose();\n\t\tthis.side.dispose();\n\t\tthis._leftMult.dispose();\n\t\tthis._rightMult.dispose();\n\t\tthis._left.dispose();\n\t\tthis._right.dispose();\n\t\treturn this;\n\t}\n}\n", "import { Effect, EffectOptions } from \"./Effect\";\nimport { MidSideSplit } from \"../component/channel/MidSideSplit\";\nimport { MidSideMerge } from \"../component/channel/MidSideMerge\";\nimport { OutputNode, ToneAudioNode } from \"../core/context/ToneAudioNode\";\n\nexport type MidSideEffectOptions = EffectOptions;\n\n/**\n * Mid/Side processing separates the the 'mid' signal\n * (which comes out of both the left and the right channel)\n * and the 'side' (which only comes out of the the side channels)\n * and effects them separately before being recombined.\n * Applies a Mid/Side seperation and recombination.\n * Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n * This is a base-class for Mid/Side Effects.\n * @category Effect\n */\nexport abstract class MidSideEffect<Options extends MidSideEffectOptions> extends Effect<Options> {\n\n\treadonly name: string = \"MidSideEffect\";\n\n\t/**\n\t * The mid/side split\n\t */\n\tprivate _midSideSplit: MidSideSplit;\n\t\n\t/**\n\t * The mid/side merge\n\t */\n\tprivate _midSideMerge: MidSideMerge;\n\t\n\t/**\n\t * The mid send. Connect to mid processing\n\t */\n\tprotected _midSend: ToneAudioNode;\n\t\n\t/**\n\t * The side send. Connect to side processing\n\t */\n\tprotected _sideSend: ToneAudioNode;\n\t\n\t/**\n\t * The mid return connection\n\t */\n\tprotected _midReturn: ToneAudioNode;\n\t\n\t/**\n\t * The side return connection\n\t */\n\tprotected _sideReturn: ToneAudioNode;\n\n\tconstructor(options: MidSideEffectOptions) {\n\n\t\tsuper(options);\n\n\t\tthis._midSideMerge = new MidSideMerge({ context: this.context });\n\t\tthis._midSideSplit = new MidSideSplit({ context: this.context });\n\t\tthis._midSend = this._midSideSplit.mid;\n\t\tthis._sideSend = this._midSideSplit.side;\n\t\tthis._midReturn = this._midSideMerge.mid;\n\t\tthis._sideReturn = this._midSideMerge.side;\n\n\t\t// the connections\n\t\tthis.effectSend.connect(this._midSideSplit);\n\t\tthis._midSideMerge.connect(this.effectReturn);\n\t}\n\n\t/**\n\t * Connect the mid chain of the effect\n\t */\n\tprotected connectEffectMid(...nodes: OutputNode[]): void{\n\t\tthis._midSend.chain(...nodes, this._midReturn);\n\t}\n\t\n\t/**\n\t * Connect the side chain of the effect\n\t */\n\tprotected connectEffectSide(...nodes: OutputNode[]): void{\n\t\tthis._sideSend.chain(...nodes, this._sideReturn);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._midSideSplit.dispose();\n\t\tthis._midSideMerge.dispose();\n\t\tthis._midSend.dispose();\n\t\tthis._sideSend.dispose();\n\t\tthis._midReturn.dispose();\n\t\tthis._sideReturn.dispose();\n\t\treturn this;\n\t}\n}\n\n", "import { MidSideEffect, MidSideEffectOptions } from \"../effect/MidSideEffect\";\nimport { Signal } from \"../signal/Signal\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Subtract } from \"../signal/Subtract\";\nimport { NormalRange } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { connect } from \"../core/context/ToneAudioNode\";\n\nexport interface StereoWidenerOptions extends MidSideEffectOptions {\n\twidth: NormalRange;\n}\n\n/**\n * Applies a width factor to the mid/side seperation.\n * 0 is all mid and 1 is all side.\n * Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n * ```\n * Mid *= 2*(1-width)<br>\n * Side *= 2*width\n * ```\n * @category Effect\n */\nexport class StereoWidener extends MidSideEffect<StereoWidenerOptions> {\n\n\treadonly name: string = \"StereoWidener\";\n\n\t/**\n\t * The width control. 0 = 100% mid. 1 = 100% side. 0.5 = no change.\n\t */\n\treadonly width: Signal<\"normalRange\">;\n\t\n\t/**\n\t * Two times the (1-width) for the mid channel\n\t */\n\tprivate _twoTimesWidthMid: Multiply;\n\t\n\t/**\n\t * Two times the width for the side channel\n\t */\n\tprivate _twoTimesWidthSide: Multiply;\n\t\n\t/**\n\t * Mid multiplier\n\t */\n\tprivate _midMult: Multiply;\n\t\n\t/**\n\t * 1 - width\n\t */\n\tprivate _oneMinusWidth: Subtract;\n\t\n\t/**\n\t * Side multiplier\n\t */\n\tprivate _sideMult: Multiply;\n\n\t/**\n\t * @param width The stereo width. A width of 0 is mono and 1 is stereo. 0.5 is no change.\n\t */\n\tconstructor(width?: NormalRange);\n\tconstructor(options?: Partial<StereoWidenerOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(StereoWidener.getDefaults(), arguments, [\"width\"]));\n\t\tconst options = optionsFromArguments(StereoWidener.getDefaults(), arguments, [\"width\"]);\n\t\tthis.width = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.width,\n\t\t\tunits: \"normalRange\",\n\t\t});\n\t\treadOnly(this, [\"width\"]);\n\t\tthis._twoTimesWidthMid = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tvalue: 2,\n\t\t});\n\t\tthis._twoTimesWidthSide = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tvalue: 2,\n\t\t});\n\t\tthis._midMult = new Multiply({ context: this.context });\n\t\tthis._twoTimesWidthMid.connect(this._midMult.factor);\n\t\tthis.connectEffectMid(this._midMult);\n\n\t\tthis._oneMinusWidth = new Subtract({ context: this.context });\n\t\tthis._oneMinusWidth.connect(this._twoTimesWidthMid);\n\t\tconnect(this.context.getConstant(1), this._oneMinusWidth);\n\t\tthis.width.connect(this._oneMinusWidth.subtrahend);\n\n\t\tthis._sideMult = new Multiply({ context: this.context });\n\t\tthis.width.connect(this._twoTimesWidthSide);\n\t\tthis._twoTimesWidthSide.connect(this._sideMult.factor);\n\t\tthis.connectEffectSide(this._sideMult);\n\t}\n\n\tstatic getDefaults(): StereoWidenerOptions {\n\t\treturn Object.assign(MidSideEffect.getDefaults(), {\n\t\t\twidth: 0.5,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.width.dispose();\n\t\tthis._midMult.dispose();\n\t\tthis._sideMult.dispose();\n\t\tthis._twoTimesWidthMid.dispose();\n\t\tthis._twoTimesWidthSide.dispose();\n\t\tthis._oneMinusWidth.dispose();\n\t\treturn this;\n\t}\n}\n", "import { StereoEffect, StereoEffectOptions } from \"./StereoEffect\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Signal } from \"../signal/Signal\";\nimport { Degrees, Frequency, NormalRange, Time } from \"../core/type/Units\";\nimport { ToneOscillatorType } from \"../source/oscillator/OscillatorInterface\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\n\nexport interface TremoloOptions extends StereoEffectOptions {\n\tfrequency: Frequency;\n\ttype: ToneOscillatorType;\n\tdepth: NormalRange;\n\tspread: Degrees;\n}\n\n/**\n * Tremolo modulates the amplitude of an incoming signal using an [[LFO]].\n * The effect is a stereo effect where the modulation phase is inverted in each channel.\n *\n * @example\n * // create a tremolo and start it's LFO\n * const tremolo = new Tone.Tremolo(9, 0.75).toDestination().start();\n * // route an oscillator through the tremolo and start it\n * const oscillator = new Tone.Oscillator().connect(tremolo).start();\n * \n * @category Effect\n */\nexport class Tremolo extends StereoEffect<TremoloOptions> {\n\n\treadonly name: string = \"Tremolo\";\n\n\t/**\n\t * The tremolo LFO in the left channel\n\t */\n\tprivate _lfoL: LFO;\n\n\t/**\n\t * The tremolo LFO in the left channel\n\t */\n\tprivate _lfoR: LFO;\n\n\t/**\n\t * Where the gain is multiplied\n\t */\n\tprivate _amplitudeL: Gain;\n\n\t/**\n\t * Where the gain is multiplied\n\t */\n\tprivate _amplitudeR: Gain;\n\n\t/**\n\t * The frequency of the tremolo.\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * The depth of the effect. A depth of 0, has no effect\n\t * on the amplitude, and a depth of 1 makes the amplitude\n\t * modulate fully between 0 and 1.\n\t */\n\treadonly depth: Signal<\"normalRange\">;\n\n\t/**\n\t * @param frequency The rate of the effect.\n\t * @param depth The depth of the effect.\n\t */\n\tconstructor(frequency?: Frequency, depth?: NormalRange);\n\tconstructor(options?: Partial<TremoloOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Tremolo.getDefaults(), arguments, [\"frequency\", \"depth\"]));\n\t\tconst options = optionsFromArguments(Tremolo.getDefaults(), arguments, [\"frequency\", \"depth\"]);\n\n\t\tthis._lfoL = new LFO({\n\t\t\tcontext: this.context,\n\t\t\ttype: options.type,\n\t\t\tmin: 1,\n\t\t\tmax: 0,\n\t\t});\n\t\tthis._lfoR = new LFO({\n\t\t\tcontext: this.context,\n\t\t\ttype: options.type,\n\t\t\tmin: 1,\n\t\t\tmax: 0,\n\t\t});\n\t\tthis._amplitudeL = new Gain({ context: this.context });\n\t\tthis._amplitudeR = new Gain({ context: this.context });\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.frequency,\n\t\t\tunits: \"frequency\",\n\t\t});\n\t\tthis.depth = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.depth,\n\t\t\tunits: \"normalRange\",\n\t\t});\n\n\t\treadOnly(this, [\"frequency\", \"depth\"]);\n\t\tthis.connectEffectLeft(this._amplitudeL);\n\t\tthis.connectEffectRight(this._amplitudeR);\n\t\tthis._lfoL.connect(this._amplitudeL.gain);\n\t\tthis._lfoR.connect(this._amplitudeR.gain);\n\t\tthis.frequency.fan(this._lfoL.frequency, this._lfoR.frequency);\n\t\tthis.depth.fan(this._lfoR.amplitude, this._lfoL.amplitude);\n\t\tthis.spread = options.spread;\n\t}\n\n\tstatic getDefaults(): TremoloOptions {\n\t\treturn Object.assign(StereoEffect.getDefaults(), {\n\t\t\tfrequency: 10,\n\t\t\ttype: \"sine\" as \"sine\",\n\t\t\tdepth: 0.5,\n\t\t\tspread: 180,\n\t\t});\n\t}\n\n\t/**\n\t * Start the tremolo.\n\t */\n\tstart(time?: Time): this {\n\t\tthis._lfoL.start(time);\n\t\tthis._lfoR.start(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the tremolo.\n\t */\n\tstop(time?: Time): this {\n\t\tthis._lfoL.stop(time);\n\t\tthis._lfoR.stop(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sync the effect to the transport.\n\t */\n\tsync(): this {\n\t\tthis._lfoL.sync();\n\t\tthis._lfoR.sync();\n\t\tthis.context.transport.syncSignal(this.frequency);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unsync the filter from the transport\n\t */\n\tunsync(): this {\n\t\tthis._lfoL.unsync();\n\t\tthis._lfoR.unsync();\n\t\tthis.context.transport.unsyncSignal(this.frequency);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The oscillator type.\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._lfoL.type;\n\t}\n\tset type(type) {\n\t\tthis._lfoL.type = type;\n\t\tthis._lfoR.type = type;\n\t}\n\n\t/**\n\t * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\n\t * When set to 180, LFO's will be panned hard left and right respectively.\n\t */\n\tget spread(): Degrees {\n\t\treturn this._lfoR.phase - this._lfoL.phase; // 180\n\t}\n\tset spread(spread) {\n\t\tthis._lfoL.phase = 90 - (spread / 2);\n\t\tthis._lfoR.phase = (spread / 2) + 90;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._lfoL.dispose();\n\t\tthis._lfoR.dispose();\n\t\tthis._amplitudeL.dispose();\n\t\tthis._amplitudeR.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.depth.dispose();\n\t\treturn this;\n\t}\n}\n", "import { Effect, EffectOptions } from \"./Effect\";\nimport { ToneOscillatorType } from \"../source/oscillator/OscillatorInterface\";\nimport { Frequency, NormalRange, Seconds } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Delay } from \"../core/context/Delay\";\nimport { Signal } from \"../signal/Signal\";\nimport { Param } from \"../core/context/Param\";\nimport { readOnly } from \"../core/util/Interface\";\n\nexport interface VibratoOptions extends EffectOptions {\n\tmaxDelay: Seconds;\n\tfrequency: Frequency;\n\tdepth: NormalRange;\n\ttype: ToneOscillatorType;\n}\n/**\n * A Vibrato effect composed of a Tone.Delay and a Tone.LFO. The LFO\n * modulates the delayTime of the delay, causing the pitch to rise and fall. \n * @category Effect\n */\nexport class Vibrato extends Effect<VibratoOptions> {\n\n\treadonly name: string = \"Vibrato\";\n\t/**\n\t * The delay node used for the vibrato effect\n\t */\n\tprivate _delayNode: Delay;\n\t\n\t/**\n\t * The LFO used to control the vibrato\n\t */\n\tprivate _lfo: LFO;\n\t\n\t/**\n\t * The frequency of the vibrato\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\t\n\t/**\n\t * The depth of the vibrato. \n\t */\n\treadonly depth: Param<\"normalRange\">;\n\n\t/**\n\t * @param frequency The frequency of the vibrato.\n\t * @param depth The amount the pitch is modulated.\n\t */\n\tconstructor(frequency?: Frequency, depth?: NormalRange);\n\tconstructor(options?: Partial<VibratoOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Vibrato.getDefaults(), arguments, [\"frequency\", \"depth\"]));\n\t\tconst options = optionsFromArguments(Vibrato.getDefaults(), arguments, [\"frequency\", \"depth\"]);\n\n\t\tthis._delayNode = new Delay({\n\t\t\tcontext: this.context,\n\t\t\tdelayTime: 0,\n\t\t\tmaxDelay: options.maxDelay,\n\t\t});\n\t\tthis._lfo = new LFO({\n\t\t\tcontext: this.context,\n\t\t\ttype: options.type,\n\t\t\tmin: 0,\n\t\t\tmax: options.maxDelay, \n\t\t\tfrequency: options.frequency,\n\t\t\tphase: -90 // offse the phase so the resting position is in the center\n\t\t}).start().connect(this._delayNode.delayTime);\n\t\tthis.frequency = this._lfo.frequency;\n\t\tthis.depth = this._lfo.amplitude;\n\n\t\tthis.depth.value = options.depth;\n\t\treadOnly(this, [\"frequency\", \"depth\"]);\n\t\tthis.effectSend.chain(this._delayNode, this.effectReturn);\n\t}\n\n\tstatic getDefaults(): VibratoOptions {\n\t\treturn Object.assign(Effect.getDefaults(), {\n\t\t\tmaxDelay: 0.005,\n\t\t\tfrequency: 5,\n\t\t\tdepth: 0.1,\n\t\t\ttype: \"sine\" as \"sine\"\n\t\t});\n\t}\n\n\t/**\n\t * Type of oscillator attached to the Vibrato.\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._lfo.type;\n\t}\n\tset type(type) {\n\t\tthis._lfo.type = type;\n\t}\n\t\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._delayNode.dispose();\n\t\tthis._lfo.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.depth.dispose();\n\t\treturn this;\n\t}\n}\n", "import { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { NormalRange, PowerOfTwo } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Split } from \"../channel/Split\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { assert, assertRange } from \"../../core/util/Debug\";\n\nexport type AnalyserType = \"fft\" | \"waveform\";\n\nexport interface AnalyserOptions extends ToneAudioNodeOptions {\n\tsize: PowerOfTwo;\n\ttype: AnalyserType;\n\tsmoothing: NormalRange;\n\tchannels: number;\n}\n\n/**\n * Wrapper around the native Web Audio's [AnalyserNode](http://webaudio.github.io/web-audio-api/#idl-def-AnalyserNode).\n * Extracts FFT or Waveform data from the incoming signal.\n * @category Component\n */\nexport class Analyser extends ToneAudioNode<AnalyserOptions> {\n\n\treadonly name: string = \"Analyser\";\n\n\treadonly input: InputNode;\n\treadonly output: OutputNode;\n\n\t/**\n\t * The analyser node.\n\t */\n\tprivate _analysers: AnalyserNode[] = [];\n\n\t/**\n\t * Input and output are a gain node\n\t */\n\tprivate _gain: Gain;\n\n\t/**\n\t * The channel splitter node\n\t */\n\tprivate _split: Split;\n\n\t/**\n\t * The analysis type\n\t */\n\tprivate _type!: AnalyserType;\n\n\t/**\n\t * The buffer that the FFT data is written to\n\t */\n\tprivate _buffers: Float32Array[] = [];\n\n\t/**\n\t * @param type The return type of the analysis, either \"fft\", or \"waveform\".\n\t * @param size The size of the FFT. This must be a power of two in the range 16 to 16384.\n\t */\n\tconstructor(type?: AnalyserType, size?: number);\n\tconstructor(options?: Partial<AnalyserOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Analyser.getDefaults(), arguments, [\"type\", \"size\"]));\n\t\tconst options = optionsFromArguments(Analyser.getDefaults(), arguments, [\"type\", \"size\"]);\n\n\t\tthis.input = this.output = this._gain = new Gain({ context: this.context });\n\t\tthis._split = new Split({\n\t\t\tcontext: this.context,\n\t\t\tchannels: options.channels,\n\t\t});\n\t\tthis.input.connect(this._split);\n\t\t\n\t\tassertRange(options.channels, 1);\n\t\t\n\t\t// create the analysers\n\t\tfor (let channel = 0; channel < options.channels; channel++) {\n\t\t\tthis._analysers[channel] = this.context.createAnalyser();\n\t\t\tthis._split.connect(this._analysers[channel], channel, 0);\n\t\t}\n\n\t\t// set the values initially\n\t\tthis.size = options.size;\n\t\tthis.type = options.type;\n\t}\n\n\tstatic getDefaults(): AnalyserOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tsize: 1024,\n\t\t\tsmoothing: 0.8,\n\t\t\ttype: \"fft\" as AnalyserType,\n\t\t\tchannels: 1,\n\t\t});\n\t}\n\n\t/**\n\t * Run the analysis given the current settings. If [[channels]] = 1,\n\t * it will return a Float32Array. If [[channels]] > 1, it will\n\t * return an array of Float32Arrays where each index in the array\n\t * represents the analysis done on a channel.\n\t */\n\tgetValue(): Float32Array | Float32Array[] {\n\t\tthis._analysers.forEach((analyser, index) => {\n\t\t\tconst buffer = this._buffers[index];\n\t\t\tif (this._type === \"fft\") {\n\t\t\t\tanalyser.getFloatFrequencyData(buffer);\n\t\t\t} else if (this._type === \"waveform\") {\n\t\t\t\tanalyser.getFloatTimeDomainData(buffer);\n\t\t\t}\n\t\t});\n\t\tif (this.channels === 1) {\n\t\t\treturn this._buffers[0];\n\t\t} else {\n\t\t\treturn this._buffers;\n\t\t}\n\t}\n\n\t/**\n\t * The size of analysis. This must be a power of two in the range 16 to 16384.\n\t */\n\tget size(): PowerOfTwo {\n\t\treturn this._analysers[0].frequencyBinCount;\n\t}\n\tset size(size: PowerOfTwo) {\n\t\tthis._analysers.forEach((analyser, index) => {\n\t\t\tanalyser.fftSize = size * 2;\n\t\t\tthis._buffers[index] = new Float32Array(size);\n\t\t});\n\t}\n\n\t/**\n\t * The number of channels the analyser does the analysis on. Channel\n\t * separation is done using [[Split]]\n\t */\n\tget channels(): number {\n\t\treturn this._analysers.length;\n\t}\n\n\t/**\n\t * The analysis function returned by analyser.getValue(), either \"fft\" or \"waveform\".\n\t */\n\tget type(): AnalyserType {\n\t\treturn this._type;\n\t}\n\tset type(type: AnalyserType) {\n\t\tassert(type === \"waveform\" || type === \"fft\", `Analyser: invalid type: ${type}`);\n\t\tthis._type = type;\n\t}\n\n\t/**\n\t * 0 represents no time averaging with the last analysis frame.\n\t */\n\tget smoothing(): NormalRange {\n\t\treturn this._analysers[0].smoothingTimeConstant;\n\t}\n\tset smoothing(val: NormalRange) {\n\t\tthis._analysers.forEach(a => a.smoothingTimeConstant = val);\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._analysers.forEach(a => a.disconnect());\n\t\tthis._split.dispose();\n\t\tthis._gain.dispose();\n\t\treturn this;\n\t}\n}\n", "import { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Analyser } from \"./Analyser\";\n\nexport type MeterBaseOptions = ToneAudioNodeOptions;\n\n/**\n * The base class for Metering classes.\n */\nexport class MeterBase<Options extends MeterBaseOptions> extends ToneAudioNode<Options> {\n\n\treadonly name: string = \"MeterBase\";\n\n\t/**\n\t * The signal to be analysed\n\t */\n\tinput: InputNode;\n\n\t/**\n\t * The output is just a pass through of the input\n\t */\n\toutput: OutputNode;\n\n\t/**\n\t * The analyser node for the incoming signal\n\t */\n\tprotected _analyser: Analyser;\n\n\tconstructor(options?: Partial<MeterBaseOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(MeterBase.getDefaults(), arguments));\n\n\t\tthis.input = this.output = this._analyser = new Analyser({\n\t\t\tcontext: this.context,\n\t\t\tsize: 256,\n\t\t\ttype: \"waveform\",\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._analyser.dispose();\n\t\treturn this;\n\t}\n}\n", "import { gainToDb } from \"../../core/type/Conversions\";\nimport { NormalRange } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { MeterBase, MeterBaseOptions } from \"./MeterBase\";\nimport { warn } from \"../../core/util/Debug\";\nimport { Analyser } from \"./Analyser\";\n\nexport interface MeterOptions extends MeterBaseOptions {\n\tsmoothing: NormalRange;\n\tnormalRange: boolean;\n\tchannels: number;\n}\n\n/**\n * Meter gets the [RMS](https://en.wikipedia.org/wiki/Root_mean_square)\n * of an input signal. It can also get the raw value of the input signal.\n *\n * @example\n * const meter = new Tone.Meter();\n * const mic = new Tone.UserMedia();\n * mic.open();\n * // connect mic to the meter\n * mic.connect(meter);\n * // the current level of the mic\n * setInterval(() => console.log(meter.getValue()), 100);\n * @category Component\n */\nexport class Meter extends MeterBase<MeterOptions> {\n\n\treadonly name: string = \"Meter\";\n\n\t/**\n\t * If the output should be in decibels or normal range between 0-1. If `normalRange` is false,\n\t * the output range will be the measured decibel value, otherwise the decibel value will be converted to\n\t * the range of 0-1\n\t */\n\tnormalRange: boolean;\n\n\t/**\n\t * A value from between 0 and 1 where 0 represents no time averaging with the last analysis frame.\n\t */\n\tsmoothing: number;\n\n\t/**\n\t * The previous frame's value\n\t */\n\tprivate _rms = 0;\n\n\t/**\n\t * @param smoothing The amount of smoothing applied between frames.\n\t */\n\tconstructor(smoothing?: NormalRange);\n\tconstructor(options?: Partial<MeterOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Meter.getDefaults(), arguments, [\"smoothing\"]));\n\t\tconst options = optionsFromArguments(Meter.getDefaults(), arguments, [\"smoothing\"]);\n\n\t\tthis.input = this.output = this._analyser = new Analyser({\n\t\t\tcontext: this.context,\n\t\t\tsize: 256,\n\t\t\ttype: \"waveform\",\n\t\t\tchannels: options.channels,\n\t\t});\n\n\t\tthis.smoothing = options.smoothing,\n\t\tthis.normalRange = options.normalRange;\n\t}\n\n\tstatic getDefaults(): MeterOptions {\n\t\treturn Object.assign(MeterBase.getDefaults(), {\n\t\t\tsmoothing: 0.8,\n\t\t\tnormalRange: false,\n\t\t\tchannels: 1,\n\t\t});\n\t}\n\n\t/**\n\t * Use [[getValue]] instead. For the previous getValue behavior, use DCMeter.\n\t * @deprecated\n\t */\n\tgetLevel(): number | number[] {\n\t\twarn(\"'getLevel' has been changed to 'getValue'\");\n\t\treturn this.getValue();\n\t}\n\n\t/**\n\t * Get the current value of the incoming signal. \n\t * Output is in decibels when [[normalRange]] is `false`.\n\t * If [[channels]] = 1, then the output is a single number\n\t * representing the value of the input signal. When [[channels]] > 1,\n\t * then each channel is returned as a value in a number array. \n\t */\n\tgetValue(): number | number[] {\n\t\tconst aValues = this._analyser.getValue();\n\t\tconst channelValues = this.channels === 1 ? [aValues as Float32Array] : aValues as Float32Array[];\n\t\tconst vals = channelValues.map(values => {\n\t\t\tconst totalSquared = values.reduce((total, current) => total + current * current, 0);\n\t\t\tconst rms = Math.sqrt(totalSquared / values.length);\n\t\t\t// the rms can only fall at the rate of the smoothing\n\t\t\t// but can jump up instantly\n\t\t\tthis._rms = Math.max(rms, this._rms * this.smoothing);\n\t\t\treturn this.normalRange ? this._rms : gainToDb(this._rms);\n\t\t});\n\t\tif (this.channels === 1) {\n\t\t\treturn vals[0];\n\t\t} else {\n\t\t\treturn vals;\n\t\t}\n\t}\n\n\t/**\n\t * The number of channels of analysis.\n\t */\n\tget channels(): number {\n\t\treturn this._analyser.channels;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._analyser.dispose();\n\t\treturn this;\n\t}\n}\n", "import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { dbToGain } from \"../../core/type/Conversions\";\nimport { Hertz, NormalRange, PowerOfTwo } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { MeterBase, MeterBaseOptions } from \"./MeterBase\";\nimport { assert } from \"../../core/util/Debug\";\n\nexport interface FFTOptions extends MeterBaseOptions {\n\tsize: PowerOfTwo;\n\tsmoothing: NormalRange;\n\tnormalRange: boolean;\n}\n\n/**\n * Get the current frequency data of the connected audio source using a fast Fourier transform.\n * @category Component\n */\nexport class FFT extends MeterBase<FFTOptions> {\n\n\treadonly name: string = \"FFT\";\n\n\t/**\n\t * If the output should be in decibels or normal range between 0-1. If `normalRange` is false,\n\t * the output range will be the measured decibel value, otherwise the decibel value will be converted to\n\t * the range of 0-1\n\t */\n\tnormalRange: boolean;\n\n\t/**\n\t * @param size The size of the FFT. Value must be a power of two in the range 16 to 16384.\n\t */\n\tconstructor(size?: PowerOfTwo);\n\tconstructor(options?: Partial<FFTOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(FFT.getDefaults(), arguments, [\"size\"]));\n\t\tconst options = optionsFromArguments(FFT.getDefaults(), arguments, [\"size\"]);\n\n\t\tthis.normalRange = options.normalRange;\n\t\tthis._analyser.type = \"fft\";\n\t\tthis.size = options.size;\n\t}\n\n\tstatic getDefaults(): FFTOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tnormalRange: false,\n\t\t\tsize: 1024,\n\t\t\tsmoothing: 0.8,\n\t\t});\n\t}\n\n\t/**\n\t * Gets the current frequency data from the connected audio source.\n\t * Returns the frequency data of length [[size]] as a Float32Array of decibel values.\n\t */\n\tgetValue(): Float32Array {\n\t\tconst values = this._analyser.getValue() as Float32Array;\n\t\treturn values.map(v => this.normalRange ? dbToGain(v) : v);\n\t}\n\n\t/**\n\t * The size of analysis. This must be a power of two in the range 16 to 16384.\n\t * Determines the size of the array returned by [[getValue]] (i.e. the number of\n\t * frequency bins). Large FFT sizes may be costly to compute.\n\t */\n\tget size(): PowerOfTwo {\n\t\treturn this._analyser.size;\n\t}\n\tset size(size) {\n\t\tthis._analyser.size = size;\n\t}\n\n\t/**\n\t * 0 represents no time averaging with the last analysis frame.\n\t */\n\tget smoothing(): NormalRange {\n\t\treturn this._analyser.smoothing;\n\t}\n\tset smoothing(val) {\n\t\tthis._analyser.smoothing = val;\n\t}\n\n\t/**\n\t * Returns the frequency value in hertz of each of the indices of the FFT's [[getValue]] response.\n\t * @example\n\t * const fft = new Tone.FFT(32);\n\t * console.log([0, 1, 2, 3, 4].map(index => fft.getFrequencyOfIndex(index)));\n\t */\n\tgetFrequencyOfIndex(index: number): Hertz {\n\t\tassert(0 <= index && index < this.size, `index must be greater than or equal to 0 and less than ${this.size}`);\n\t\treturn index * this.context.sampleRate / (this.size * 2);\n\t}\n}\n", "import { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { MeterBase, MeterBaseOptions } from \"./MeterBase\";\n\nexport type DCMeterOptions = MeterBaseOptions;\n\n/**\n * DCMeter gets the raw value of the input signal at the current time.\n *\n * @example\n * const meter = new Tone.DCMeter();\n * const mic = new Tone.UserMedia();\n * mic.open();\n * // connect mic to the meter\n * mic.connect(meter);\n * // the current level of the mic\n * const level = meter.getValue();\n * @category Component\n */\nexport class DCMeter extends MeterBase<DCMeterOptions> {\n\n\treadonly name: string = \"DCMeter\";\n\n\tconstructor(options?: Partial<DCMeterOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(DCMeter.getDefaults(), arguments));\n\n\t\tthis._analyser.type = \"waveform\";\n\t\tthis._analyser.size = 256;\n\t}\n\n\t/**\n\t * Get the signal value of the incoming signal\n\t */\n\tgetValue(): number {\n\t\tconst value = this._analyser.getValue() as Float32Array;\n\t\treturn value[0];\n\t}\n}\n", "import { PowerOfTwo } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { MeterBase, MeterBaseOptions } from \"./MeterBase\";\n\nexport interface WaveformOptions extends MeterBaseOptions {\n\t/**\n\t * The size of the Waveform. Value must be a power of two in the range 16 to 16384.\n\t */\n\tsize: PowerOfTwo;\n}\n\n/**\n * Get the current waveform data of the connected audio source.\n * @category Component\n */\nexport class Waveform extends MeterBase<WaveformOptions> {\n\n\treadonly name: string = \"Waveform\";\n\n\t/**\n\t * @param size The size of the Waveform. Value must be a power of two in the range 16 to 16384.\n\t */\n\tconstructor(size?: PowerOfTwo);\n\tconstructor(options?: Partial<WaveformOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Waveform.getDefaults(), arguments, [\"size\"]));\n\t\tconst options = optionsFromArguments(Waveform.getDefaults(), arguments, [\"size\"]);\n\n\t\tthis._analyser.type = \"waveform\";\n\t\tthis.size = options.size;\n\t}\n\n\tstatic getDefaults(): WaveformOptions {\n\t\treturn Object.assign(MeterBase.getDefaults(), {\n\t\t\tsize: 1024,\n\t\t});\n\t}\n\n\t/**\n\t * Return the waveform for the current time as a Float32Array where each value in the array\n\t * represents a sample in the waveform.\n\t */\n\tgetValue(): Float32Array {\n\t\treturn this._analyser.getValue() as Float32Array;\n\t}\n\n\t/**\n\t * The size of analysis. This must be a power of two in the range 16 to 16384.\n\t * Determines the size of the array returned by [[getValue]].\n\t */\n\tget size(): PowerOfTwo {\n\t\treturn this._analyser.size;\n\t}\n\tset size(size) {\n\t\tthis._analyser.size = size;\n\t}\n}\n", "import { BaseContext } from \"../../core/context/BaseContext\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n\nexport interface SoloOptions extends ToneAudioNodeOptions {\n\tsolo: boolean;\n}\n\n/**\n * Solo lets you isolate a specific audio stream. When an instance is set to `solo=true`,\n * it will mute all other instances of Solo.\n * @example\n * const soloA = new Tone.Solo().toDestination();\n * const oscA = new Tone.Oscillator(\"C4\", \"sawtooth\").connect(soloA);\n * const soloB = new Tone.Solo().toDestination();\n * const oscB = new Tone.Oscillator(\"E4\", \"square\").connect(soloB);\n * soloA.solo = true;\n * // no audio will pass through soloB\n * @category Component\n */\nexport class Solo extends ToneAudioNode<SoloOptions> {\n\n\treadonly name: string = \"Solo\";\n\n\treadonly input: Gain;\n\treadonly output: Gain;\n\n\t/**\n\t * @param solo If the connection should be initially solo'ed.\n\t */\n\tconstructor(solo?: boolean);\n\tconstructor(options?: Partial<SoloOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Solo.getDefaults(), arguments, [\"solo\"]));\n\t\tconst options = optionsFromArguments(Solo.getDefaults(), arguments, [\"solo\"]);\n\n\t\tthis.input = this.output = new Gain({\n\t\t\tcontext: this.context,\n\t\t});\n\n\t\tif (!Solo._allSolos.has(this.context)) {\n\t\t\tSolo._allSolos.set(this.context, new Set());\n\t\t}\n\t\t(Solo._allSolos.get(this.context) as Set<Solo>).add(this);\n\n\t\t// set initially\n\t\tthis.solo = options.solo;\n\t}\n\n\tstatic getDefaults(): SoloOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tsolo: false,\n\t\t});\n\t}\n\n\t/**\n\t * Hold all of the solo'ed tracks belonging to a specific context\n\t */\n\tprivate static _allSolos: Map<BaseContext, Set<Solo>> = new Map();\n\n\t/**\n\t * Hold the currently solo'ed instance(s)\n\t */\n\tprivate static _soloed: Map<BaseContext, Set<Solo>> = new Map();\n\n\t/**\n\t * Isolates this instance and mutes all other instances of Solo.\n\t * Only one instance can be soloed at a time. A soloed\n\t * instance will report `solo=false` when another instance is soloed.\n\t */\n\tget solo(): boolean {\n\t\treturn this._isSoloed();\n\t}\n\tset solo(solo) {\n\t\tif (solo) {\n\t\t\tthis._addSolo();\n\t\t} else {\n\t\t\tthis._removeSolo();\n\t\t}\n\t\t(Solo._allSolos.get(this.context) as Set<Solo>).forEach(instance => instance._updateSolo());\n\t}\n\n\t/**\n\t * If the current instance is muted, i.e. another instance is soloed\n\t */\n\tget muted(): boolean {\n\t\treturn this.input.gain.value === 0;\n\t}\n\n\t/**\n\t * Add this to the soloed array\n\t */\n\tprivate _addSolo(): void {\n\t\tif (!Solo._soloed.has(this.context)) {\n\t\t\tSolo._soloed.set(this.context, new Set());\n\t\t}\n\t\t(Solo._soloed.get(this.context) as Set<Solo>).add(this);\n\t}\n\n\t/**\n\t * Remove this from the soloed array\n\t */\n\tprivate _removeSolo(): void {\n\t\tif (Solo._soloed.has(this.context)) {\n\t\t\t(Solo._soloed.get(this.context) as Set<Solo>).delete(this);\n\t\t}\n\t}\n\n\t/**\n\t * Is this on the soloed array\n\t */\n\tprivate _isSoloed(): boolean {\n\t\treturn Solo._soloed.has(this.context) && (Solo._soloed.get(this.context) as Set<Solo>).has(this);\n\t}\n\n\t/**\n\t * Returns true if no one is soloed\n\t */\n\tprivate _noSolos(): boolean {\n\t\t// either does not have any soloed added\n\t\treturn !Solo._soloed.has(this.context) ||\n\t\t\t// or has a solo set but doesn't include any items\n\t\t\t(Solo._soloed.has(this.context) && (Solo._soloed.get(this.context) as Set<Solo>).size === 0);\n\t}\n\n\t/**\n\t * Solo the current instance and unsolo all other instances.\n\t */\n\tprivate _updateSolo(): void {\n\t\tif (this._isSoloed()) {\n\t\t\tthis.input.gain.value = 1;\n\t\t} else if (this._noSolos()) {\n\t\t\t// no one is soloed\n\t\t\tthis.input.gain.value = 1;\n\t\t} else {\n\t\t\tthis.input.gain.value = 0;\n\t\t}\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\t(Solo._allSolos.get(this.context) as Set<Solo>).delete(this);\n\t\tthis._removeSolo();\n\t\treturn this;\n\t}\n}\n", "import { readOnly } from \"../../core/util/Interface\";\nimport { Param } from \"../../core/context/Param\";\nimport { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { AudioRange, Decibels } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Panner } from \"./Panner\";\nimport { Volume } from \"./Volume\";\n\nexport interface PanVolOptions extends ToneAudioNodeOptions {\n\tpan: AudioRange;\n\tvolume: Decibels;\n\tmute: boolean;\n\tchannelCount: number;\n}\n\n/**\n * PanVol is a Tone.Panner and Tone.Volume in one.\n * @example\n * // pan the incoming signal left and drop the volume\n * const panVol = new Tone.PanVol(-0.25, -12).toDestination();\n * const osc = new Tone.Oscillator().connect(panVol).start();\n * @category Component\n */\nexport class PanVol extends ToneAudioNode<PanVolOptions> {\n\n\treadonly name: string = \"PanVol\";\n\n\treadonly input: InputNode;\n\treadonly output: OutputNode;\n\n\t/**\n\t * The panning node\n\t */\n\tprivate _panner: Panner;\n\n\t/**\n\t * The L/R panning control. -1 = hard left, 1 = hard right.\n\t * @min -1\n\t * @max 1\n\t */\n\treadonly pan: Param<\"audioRange\">;\n\n\t/**\n\t * The volume node\n\t */\n\tprivate _volume: Volume;\n\n\t/**\n\t * The volume control in decibels.\n\t */\n\treadonly volume: Param<\"decibels\">;\n\n\t/**\n\t * @param pan the initial pan\n\t * @param volume The output volume.\n\t */\n\tconstructor(pan?: AudioRange, volume?: Decibels);\n\tconstructor(options?: Partial<PanVolOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(PanVol.getDefaults(), arguments, [\"pan\", \"volume\"]));\n\t\tconst options = optionsFromArguments(PanVol.getDefaults(), arguments, [\"pan\", \"volume\"]);\n\n\t\tthis._panner = this.input = new Panner({\n\t\t\tcontext: this.context,\n\t\t\tpan: options.pan,\n\t\t\tchannelCount: options.channelCount,\n\t\t});\n\t\tthis.pan = this._panner.pan;\n\t\tthis._volume = this.output = new Volume({\n\t\t\tcontext: this.context,\n\t\t\tvolume: options.volume,\n\t\t});\n\t\tthis.volume = this._volume.volume;\n\n\t\t// connections\n\t\tthis._panner.connect(this._volume);\n\t\tthis.mute = options.mute;\n\n\t\treadOnly(this, [\"pan\", \"volume\"]);\n\t}\n\n\tstatic getDefaults(): PanVolOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tpan: 0,\n\t\t\tvolume: 0,\n\t\t\tchannelCount: 1,\n\t\t});\n\t}\n\n\t/**\n\t * Mute/unmute the volume\n\t */\n\tget mute(): boolean {\n\t\treturn this._volume.mute;\n\t}\n\tset mute(mute) {\n\t\tthis._volume.mute = mute;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._panner.dispose();\n\t\tthis.pan.dispose();\n\t\tthis._volume.dispose();\n\t\tthis.volume.dispose();\n\t\treturn this;\n\t}\n}\n", "import { AudioRange, Decibels } from \"../../core/type/Units\";\nimport { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Solo } from \"./Solo\";\nimport { PanVol } from \"./PanVol\";\nimport { Param } from \"../../core/context/Param\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Gain } from \"../../core/context/Gain\";\n\nexport interface ChannelOptions extends ToneAudioNodeOptions {\n\tpan: AudioRange;\n\tvolume: Decibels;\n\tsolo: boolean;\n\tmute: boolean;\n\tchannelCount: number;\n}\n\n/**\n * Channel provides a channel strip interface with volume, pan, solo and mute controls. \n * See [[PanVol]] and [[Solo]]\n * @example\n * // pan the incoming signal left and drop the volume 12db\n * const channel = new Tone.Channel(-0.25, -12);\n * @category Component\n */\nexport class Channel extends ToneAudioNode<ChannelOptions> {\n\n\treadonly name: string = \"Channel\";\n\n\treadonly input: InputNode;\n\treadonly output: OutputNode;\n\n\t/**\n\t * The soloing interface\n\t */\n\tprivate _solo: Solo;\n\n\t/**\n\t * The panning and volume node\n\t */\n\tprivate _panVol: PanVol;\n\n\t/**\n\t * The L/R panning control. -1 = hard left, 1 = hard right.\n\t * @min -1\n\t * @max 1\n\t */\n\treadonly pan: Param<\"audioRange\">;\n\n\t/**\n\t * The volume control in decibels.\n\t */\n\treadonly volume: Param<\"decibels\">;\n\n\t/**\n\t * @param volume The output volume.\n\t * @param pan the initial pan\n\t */\n\tconstructor(volume?: Decibels, pan?: AudioRange);\n\tconstructor(options?: Partial<ChannelOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Channel.getDefaults(), arguments, [\"volume\", \"pan\"]));\n\t\tconst options = optionsFromArguments(Channel.getDefaults(), arguments, [\"volume\", \"pan\"]);\n\n\t\tthis._solo = this.input = new Solo({\n\t\t\tsolo: options.solo,\n\t\t\tcontext: this.context,\n\t\t});\n\t\tthis._panVol = this.output = new PanVol({\n\t\t\tcontext: this.context,\n\t\t\tpan: options.pan,\n\t\t\tvolume: options.volume,\n\t\t\tmute: options.mute,\n\t\t\tchannelCount: options.channelCount\n\t\t});\n\t\tthis.pan = this._panVol.pan;\n\t\tthis.volume = this._panVol.volume;\n\n\t\tthis._solo.connect(this._panVol);\n\t\treadOnly(this, [\"pan\", \"volume\"]);\n\t}\n\n\tstatic getDefaults(): ChannelOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tpan: 0,\n\t\t\tvolume: 0,\n\t\t\tmute: false,\n\t\t\tsolo: false,\n\t\t\tchannelCount: 1,\n\t\t});\n\t}\n\n\t/**\n\t * Solo/unsolo the channel. Soloing is only relative to other [[Channels]] and [[Solo]] instances\n\t */\n\tget solo(): boolean {\n\t\treturn this._solo.solo;\n\t}\n\tset solo(solo) {\n\t\tthis._solo.solo = solo;\n\t}\n\n\t/**\n\t * If the current instance is muted, i.e. another instance is soloed,\n\t * or the channel is muted\n\t */\n\tget muted(): boolean {\n\t\treturn this._solo.muted || this.mute;\n\t}\n\n\t/**\n\t * Mute/unmute the volume\n\t */\n\tget mute(): boolean {\n\t\treturn this._panVol.mute;\n\t}\n\tset mute(mute) {\n\t\tthis._panVol.mute = mute;\n\t}\n\n\t/**\n\t * Store the send/receive channels by name. \n\t */\n\tprivate static buses: Map<string, Gain> = new Map();\n\n\t/**\n\t * Get the gain node belonging to the bus name. Create it if\n\t * it doesn't exist\n\t * @param name The bus name\n\t */\n\tprivate _getBus(name: string): Gain {\n\t\tif (!Channel.buses.has(name)) {\n\t\t\tChannel.buses.set(name, new Gain({ context: this.context }));\n\t\t}\n\t\treturn Channel.buses.get(name) as Gain;\n\t}\n\n\t/**\n\t * Send audio to another channel using a string. `send` is a lot like\n\t * [[connect]], except it uses a string instead of an object. This can \n\t * be useful in large applications to decouple sections since [[send]]\n\t * and [[receive]] can be invoked separately in order to connect an object\n\t * @param name The channel name to send the audio\n\t * @param volume The amount of the signal to send. \n\t * \tDefaults to 0db, i.e. send the entire signal\n\t * @returns Returns the gain node of this connection.\n\t */\n\tsend(name: string, volume: Decibels = 0): Gain<\"decibels\"> {\n\t\tconst bus = this._getBus(name);\n\t\tconst sendKnob = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"decibels\",\n\t\t\tgain: volume,\n\t\t});\n\t\tthis.connect(sendKnob);\n\t\tsendKnob.connect(bus);\n\t\treturn sendKnob;\n\t}\n\n\t/**\n\t * Receive audio from a channel which was connected with [[send]]. \n\t * @param name The channel name to receive audio from.\n\t */\n\treceive(name: string): this {\n\t\tconst bus = this._getBus(name);\n\t\tbus.connect(this);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._panVol.dispose();\n\t\tthis.pan.dispose();\n\t\tthis.volume.dispose();\n\t\tthis._solo.dispose();\n\t\treturn this;\n\t}\n}\n", "import { Gain } from \"../../core/context/Gain\";\nimport { OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Merge } from \"./Merge\";\n\nexport type MonoOptions = ToneAudioNodeOptions;\n\n/**\n * Mono coerces the incoming mono or stereo signal into a mono signal\n * where both left and right channels have the same value. This can be useful\n * for [stereo imaging](https://en.wikipedia.org/wiki/Stereo_imaging).\n * @category Component\n */\nexport class Mono extends ToneAudioNode<MonoOptions> {\n\n\treadonly name: string = \"Mono\";\n\n\t/**\n\t * merge the signal\n\t */\n\tprivate _merge: Merge;\n\n\t/**\n\t * The summed output of the multiple inputs\n\t */\n\treadonly output: OutputNode;\n\n\t/**\n\t * The stereo signal to sum to mono\n\t */\n\treadonly input: Gain;\n\n\tconstructor(options?: Partial<MonoOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Mono.getDefaults(), arguments));\n\n\t\tthis.input = new Gain({ context: this.context });\n\n\t\tthis._merge = this.output = new Merge({\n\t\t\tchannels: 2,\n\t\t\tcontext: this.context,\n\t\t});\n\n\t\tthis.input.connect(this._merge, 0, 0);\n\t\tthis.input.connect(this._merge, 0, 1);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._merge.dispose();\n\t\tthis.input.dispose();\n\t\treturn this;\n\t}\n}\n", "import { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Frequency, Positive } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Filter } from \"../filter/Filter\";\n\ninterface MultibandSplitOptions extends ToneAudioNodeOptions {\n\tQ: Positive;\n\tlowFrequency: Frequency;\n\thighFrequency: Frequency;\n}\n\n/**\n * Split the incoming signal into three bands (low, mid, high)\n * with two crossover frequency controls.\n * ```\n *            +----------------------+\n *          +-> input < lowFrequency +------------------> low\n *          | +----------------------+\n *          |\n *          | +--------------------------------------+\n * input ---+-> lowFrequency < input < highFrequency +--> mid\n *          | +--------------------------------------+\n *          |\n *          | +-----------------------+\n *          +-> highFrequency < input +-----------------> high\n *            +-----------------------+\n * ```\n * @category Component\n */\nexport class MultibandSplit extends ToneAudioNode<MultibandSplitOptions> {\n\n\treadonly name: string = \"MultibandSplit\";\n\n\t/**\n\t * the input\n\t */\n\treadonly input = new Gain({ context: this.context });\n\n\t/**\n\t * no output node, use either low, mid or high outputs\n\t */\n\treadonly output = undefined;\n\n\t/**\n\t * The low band.\n\t */\n\treadonly low = new Filter({\n\t\tcontext: this.context,\n\t\tfrequency: 0,\n\t\ttype: \"lowpass\",\n\t});\n\n\t/**\n\t * the lower filter of the mid band\n\t */\n\tprivate _lowMidFilter = new Filter({\n\t\tcontext: this.context,\n\t\tfrequency: 0,\n\t\ttype: \"highpass\",\n\t});\n\n\t/**\n\t * The mid band output.\n\t */\n\treadonly mid = new Filter({\n\t\tcontext: this.context,\n\t\tfrequency: 0,\n\t\ttype: \"lowpass\",\n\t});\n\n\t/**\n\t * The high band output.\n\t */\n\treadonly high = new Filter({\n\t\tcontext: this.context,\n\t\tfrequency: 0,\n\t\ttype: \"highpass\",\n\t});\n\n\t/**\n\t * The low/mid crossover frequency.\n\t */\n\treadonly lowFrequency: Signal<\"frequency\">;\n\n\t/**\n\t * The mid/high crossover frequency.\n\t */\n\treadonly highFrequency: Signal<\"frequency\">;\n\n\tprotected _internalChannels = [this.low, this.mid, this.high];\n\n\t/**\n\t * The Q or Quality of the filter\n\t */\n\treadonly Q: Signal<\"positive\">;\n\n\t/**\n\t * @param lowFrequency the low/mid crossover frequency\n\t * @param highFrequency the mid/high crossover frequency\n\t */\n\tconstructor(lowFrequency?: Frequency, highFrequency?: Frequency);\n\tconstructor(options?: Partial<MultibandSplitOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(MultibandSplit.getDefaults(), arguments, [\"lowFrequency\", \"highFrequency\"]));\n\t\tconst options = optionsFromArguments(MultibandSplit.getDefaults(), arguments, [\"lowFrequency\", \"highFrequency\"]);\n\n\t\tthis.lowFrequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.lowFrequency,\n\t\t});\n\n\t\tthis.highFrequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.highFrequency,\n\t\t});\n\n\t\tthis.Q = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.Q,\n\t\t});\n\n\t\tthis.input.fan(this.low, this.high);\n\t\tthis.input.chain(this._lowMidFilter, this.mid);\n\t\t// the frequency control signal\n\t\tthis.lowFrequency.fan(this.low.frequency, this._lowMidFilter.frequency);\n\t\tthis.highFrequency.fan(this.mid.frequency, this.high.frequency);\n\t\t// the Q value\n\t\tthis.Q.connect(this.low.Q);\n\t\tthis.Q.connect(this._lowMidFilter.Q);\n\t\tthis.Q.connect(this.mid.Q);\n\t\tthis.Q.connect(this.high.Q);\n\n\t\treadOnly(this, [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n\t}\n\n\tstatic getDefaults(): MultibandSplitOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tQ: 1,\n\t\t\thighFrequency: 2500,\n\t\t\tlowFrequency: 400,\n\t\t});\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\twritable(this, [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n\t\tthis.low.dispose();\n\t\tthis._lowMidFilter.dispose();\n\t\tthis.mid.dispose();\n\t\tthis.high.dispose();\n\t\tthis.lowFrequency.dispose();\n\t\tthis.highFrequency.dispose();\n\t\tthis.Q.dispose();\n\t\treturn this;\n\t}\n\n}\n", "import { ToneAudioNode, ToneAudioNodeOptions } from \"./ToneAudioNode\";\nimport { Param } from \"./Param\";\nimport { onContextClose, onContextInit } from \"./ContextInitialization\";\n\nexport interface ListenerOptions extends ToneAudioNodeOptions{\n\tpositionX: number;\n\tpositionY: number;\n\tpositionZ: number;\n\tforwardX: number;\n\tforwardY: number;\n\tforwardZ: number;\n\tupX: number;\n\tupY: number;\n\tupZ: number;\n}\n\n/**\n * Tone.Listener is a thin wrapper around the AudioListener. Listener combined\n * with [[Panner3D]] makes up the Web Audio API's 3D panning system. Panner3D allows you \n * to place sounds in 3D and Listener allows you to navigate the 3D sound environment from\n * a first-person perspective. There is only one listener per audio context. \n */\nexport class Listener extends ToneAudioNode<ListenerOptions> {\n\n\treadonly name: string = \"Listener\";\n\n\t/**\n\t * The listener has no inputs or outputs. \n\t */\n\toutput: undefined; \n\tinput: undefined; \n\n\treadonly positionX: Param = new Param({\n\t\tcontext: this.context,\n\t\tparam: this.context.rawContext.listener.positionX,\n\t})\n\n\treadonly positionY: Param = new Param({\n\t\tcontext: this.context,\n\t\tparam: this.context.rawContext.listener.positionY,\n\t})\n\n\treadonly positionZ: Param = new Param({\n\t\tcontext: this.context,\n\t\tparam: this.context.rawContext.listener.positionZ,\n\t})\n\n\treadonly forwardX: Param = new Param({\n\t\tcontext: this.context,\n\t\tparam: this.context.rawContext.listener.forwardX,\n\t})\n\n\treadonly forwardY: Param = new Param({\n\t\tcontext: this.context,\n\t\tparam: this.context.rawContext.listener.forwardY,\n\t})\n\n\treadonly forwardZ: Param = new Param({\n\t\tcontext: this.context,\n\t\tparam: this.context.rawContext.listener.forwardZ,\n\t})\n\n\treadonly upX: Param = new Param({\n\t\tcontext: this.context,\n\t\tparam: this.context.rawContext.listener.upX,\n\t})\n\n\treadonly upY: Param = new Param({\n\t\tcontext: this.context,\n\t\tparam: this.context.rawContext.listener.upY,\n\t})\n\n\treadonly upZ: Param = new Param({\n\t\tcontext: this.context,\n\t\tparam: this.context.rawContext.listener.upZ,\n\t})\n\n\tstatic getDefaults(): ListenerOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tpositionX: 0,\n\t\t\tpositionY: 0,\n\t\t\tpositionZ: 0,\n\t\t\tforwardX: 0,\n\t\t\tforwardY: 0,\n\t\t\tforwardZ: -1,\n\t\t\tupX: 0,\n\t\t\tupY: 1,\n\t\t\tupZ: 0,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.positionX.dispose();\n\t\tthis.positionY.dispose();\n\t\tthis.positionZ.dispose();\n\t\tthis.forwardX.dispose();\n\t\tthis.forwardY.dispose();\n\t\tthis.forwardZ.dispose();\n\t\tthis.upX.dispose();\n\t\tthis.upY.dispose();\n\t\tthis.upZ.dispose();\n\t\treturn this;\n\t}\n}\n\n//-------------------------------------\n// \tINITIALIZATION\n//-------------------------------------\n\nonContextInit(context => {\n\tcontext.listener = new Listener({ context });\n});\n\nonContextClose(context => {\n\tcontext.listener.dispose();\n});\n", "import { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Degrees, GainFactor } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport \"../../core/context/Listener\";\n\nexport interface Panner3DOptions extends ToneAudioNodeOptions {\n\tconeInnerAngle: Degrees;\n\tconeOuterAngle: Degrees;\n\tconeOuterGain: GainFactor;\n\tdistanceModel: DistanceModelType;\n\tmaxDistance: number;\n\torientationX: number;\n\torientationY: number;\n\torientationZ: number;\n\tpanningModel: PanningModelType;\n\tpositionX: number;\n\tpositionY: number;\n\tpositionZ: number;\n\trefDistance: number;\n\trolloffFactor: number;\n}\n\n/**\n * A spatialized panner node which supports equalpower or HRTF panning.\n * @category Component\n */\nexport class Panner3D extends ToneAudioNode<Panner3DOptions> {\n\n\treadonly name: string = \"Panner3D\";\n\n\t/**\n\t * The panning object\n\t */\n\tprivate _panner: PannerNode;\n\treadonly input: PannerNode;\n\treadonly output: PannerNode;\n\n\treadonly positionX: Param<\"number\">;\n\treadonly positionY: Param<\"number\">;\n\treadonly positionZ: Param<\"number\">;\n\n\treadonly orientationX: Param<\"number\">;\n\treadonly orientationY: Param<\"number\">;\n\treadonly orientationZ: Param<\"number\">;\n\n\t/**\n\t * @param positionX The initial x position.\n\t * @param positionY The initial y position.\n\t * @param positionZ The initial z position.\n\t */\n\tconstructor(positionX: number, positionY: number, positionZ: number);\n\tconstructor(options?: Partial<Panner3DOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Panner3D.getDefaults(), arguments, [\"positionX\", \"positionY\", \"positionZ\"]));\n\t\tconst options = optionsFromArguments(Panner3D.getDefaults(), arguments, [\"positionX\", \"positionY\", \"positionZ\"]);\n\n\t\tthis._panner = this.input = this.output = this.context.createPanner();\n\t\t// set some values\n\t\tthis.panningModel = options.panningModel;\n\t\tthis.maxDistance = options.maxDistance;\n\t\tthis.distanceModel = options.distanceModel;\n\t\tthis.coneOuterGain = options.coneOuterGain;\n\t\tthis.coneOuterAngle = options.coneOuterAngle;\n\t\tthis.coneInnerAngle = options.coneInnerAngle;\n\t\tthis.refDistance = options.refDistance;\n\t\tthis.rolloffFactor = options.rolloffFactor;\n\n\t\tthis.positionX = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._panner.positionX,\n\t\t\tvalue: options.positionX,\n\t\t});\n\t\tthis.positionY = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._panner.positionY,\n\t\t\tvalue: options.positionY,\n\t\t});\n\t\tthis.positionZ = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._panner.positionZ,\n\t\t\tvalue: options.positionZ,\n\t\t});\n\t\tthis.orientationX = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._panner.orientationX,\n\t\t\tvalue: options.orientationX,\n\t\t});\n\t\tthis.orientationY = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._panner.orientationY,\n\t\t\tvalue: options.orientationY,\n\t\t});\n\t\tthis.orientationZ = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._panner.orientationZ,\n\t\t\tvalue: options.orientationZ,\n\t\t});\n\t}\n\n\tstatic getDefaults(): Panner3DOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tconeInnerAngle: 360,\n\t\t\tconeOuterAngle: 360,\n\t\t\tconeOuterGain: 0,\n\t\t\tdistanceModel: \"inverse\" as DistanceModelType,\n\t\t\tmaxDistance: 10000,\n\t\t\torientationX: 0,\n\t\t\torientationY: 0,\n\t\t\torientationZ: 0,\n\t\t\tpanningModel: \"equalpower\" as PanningModelType,\n\t\t\tpositionX: 0,\n\t\t\tpositionY: 0,\n\t\t\tpositionZ: 0,\n\t\t\trefDistance: 1,\n\t\t\trolloffFactor: 1,\n\t\t});\n\t}\n\n\t/**\n\t * Sets the position of the source in 3d space.\n\t */\n\tsetPosition(x: number, y: number, z: number): this {\n\t\tthis.positionX.value = x;\n\t\tthis.positionY.value = y;\n\t\tthis.positionZ.value = z;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the orientation of the source in 3d space.\n\t */\n\tsetOrientation(x: number, y: number, z: number): this {\n\t\tthis.orientationX.value = x;\n\t\tthis.orientationY.value = y;\n\t\tthis.orientationZ.value = z;\n\t\treturn this;\n\t}\n\n\t/**\n\t * The panning model. Either \"equalpower\" or \"HRTF\".\n\t */\n\tget panningModel(): PanningModelType {\n\t\treturn this._panner.panningModel;\n\t}\n\tset panningModel(val) {\n\t\tthis._panner.panningModel = val;\n\t}\n\n\t/**\n\t * A reference distance for reducing volume as source move further from the listener\n\t */\n\tget refDistance(): number {\n\t\treturn this._panner.refDistance;\n\t}\n\tset refDistance(val) {\n\t\tthis._panner.refDistance = val;\n\t}\n\n\t/**\n\t * Describes how quickly the volume is reduced as source moves away from listener.\n\t */\n\tget rolloffFactor(): number {\n\t\treturn this._panner.rolloffFactor;\n\t}\n\tset rolloffFactor(val) {\n\t\tthis._panner.rolloffFactor = val;\n\t}\n\n\t/**\n\t * The distance model used by,  \"linear\", \"inverse\", or \"exponential\".\n\t */\n\tget distanceModel(): DistanceModelType {\n\t\treturn this._panner.distanceModel;\n\t}\n\tset distanceModel(val) {\n\t\tthis._panner.distanceModel = val;\n\t}\n\n\t/**\n\t * The angle, in degrees, inside of which there will be no volume reduction\n\t */\n\tget coneInnerAngle(): Degrees {\n\t\treturn this._panner.coneInnerAngle;\n\t}\n\tset coneInnerAngle(val) {\n\t\tthis._panner.coneInnerAngle = val;\n\t}\n\n\t/**\n\t * The angle, in degrees, outside of which the volume will be reduced\n\t * to a constant value of coneOuterGain\n\t */\n\tget coneOuterAngle(): Degrees {\n\t\treturn this._panner.coneOuterAngle;\n\t}\n\tset coneOuterAngle(val) {\n\t\tthis._panner.coneOuterAngle = val;\n\t}\n\n\t/**\n\t * The gain outside of the coneOuterAngle\n\t */\n\tget coneOuterGain(): GainFactor {\n\t\treturn this._panner.coneOuterGain;\n\t}\n\tset coneOuterGain(val) {\n\t\tthis._panner.coneOuterGain = val;\n\t}\n\n\t/**\n\t * The maximum distance between source and listener,\n\t * after which the volume will not be reduced any further.\n\t */\n\tget maxDistance(): number {\n\t\treturn this._panner.maxDistance;\n\t}\n\tset maxDistance(val) {\n\t\tthis._panner.maxDistance = val;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._panner.disconnect();\n\t\tthis.orientationX.dispose();\n\t\tthis.orientationY.dispose();\n\t\tthis.orientationZ.dispose();\n\t\tthis.positionX.dispose();\n\t\tthis.positionY.dispose();\n\t\tthis.positionZ.dispose();\n\t\treturn this;\n\t}\n}\n", "import { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { assert } from \"../../core/util/Debug\";\nimport { theWindow } from \"../../core/context/AudioContext\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { PlaybackState } from \"../../core/util/StateTimeline\";\n\nexport interface RecorderOptions extends ToneAudioNodeOptions {\n\tmimeType?: string;\n}\n\n/**\n * A wrapper around the MediaRecorder API. Unlike the rest of Tone.js, this module does not offer\n * any sample-accurate scheduling because it is not a feature of the MediaRecorder API.\n * This is only natively supported in Chrome and Firefox. \n * For a cross-browser shim, install (audio-recorder-polyfill)[https://www.npmjs.com/package/audio-recorder-polyfill]. \n * @example\n * const recorder = new Tone.Recorder();\n * const synth = new Tone.Synth().connect(recorder);\n * // start recording\n * recorder.start();\n * // generate a few notes\n * synth.triggerAttackRelease(\"C3\", 0.5);\n * synth.triggerAttackRelease(\"C4\", 0.5, \"+1\");\n * synth.triggerAttackRelease(\"C5\", 0.5, \"+2\");\n * // wait for the notes to end and stop the recording\n * setTimeout(async () => {\n * \t// the recorded audio is returned as a blob\n * \tconst recording = await recorder.stop();\n * \t// download the recording by creating an anchor element and blob url\n * \tconst url = URL.createObjectURL(recording);\n * \tconst anchor = document.createElement(\"a\");\n * \tanchor.download = \"recording.webm\";\n * \tanchor.href = url;\n * \tanchor.click();\n * }, 4000);\n * @category Component\n */\nexport class Recorder extends ToneAudioNode<RecorderOptions> {\n\n\treadonly name = \"Recorder\";\n\n\t/**\n\t * Recorder uses the Media Recorder API\n\t */\n\tprivate _recorder: MediaRecorder;\n\n\t/**\n\t * MediaRecorder requires \n\t */\n\tprivate _stream: MediaStreamAudioDestinationNode;\n\n\treadonly input: Gain;\n\treadonly output: undefined;\n\n\tconstructor(options?: Partial<RecorderOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Recorder.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Recorder.getDefaults(), arguments);\n\n\t\tthis.input = new Gain({\n\t\t\tcontext: this.context\n\t\t});\n\n\t\tassert(Recorder.supported, \"Media Recorder API is not available\");\n\n\t\tthis._stream = this.context.createMediaStreamDestination();\n\t\tthis.input.connect(this._stream);\n\t\tthis._recorder = new MediaRecorder(this._stream.stream, {\n\t\t\tmimeType: options.mimeType\n\t\t});\n\t}\n\n\tstatic getDefaults(): RecorderOptions {\n\t\treturn ToneAudioNode.getDefaults();\n\t}\n\n\t/**\n\t * The mime type is the format that the audio is encoded in. For Chrome \n\t * that is typically webm encoded as \"vorbis\". \n\t */\n\tget mimeType(): string {\n\t\treturn this._recorder.mimeType;\n\t}\n\n\t/**\n\t * Test if your platform supports the Media Recorder API. If it's not available, \n\t * try installing this (polyfill)[https://www.npmjs.com/package/audio-recorder-polyfill].\n\t */\n\tstatic get supported(): boolean {\n\t\treturn theWindow !== null && Reflect.has(theWindow, \"MediaRecorder\");\n\t}\n\n\t/**\n\t * Get the playback state of the Recorder, either \"started\", \"stopped\" or \"paused\"\n\t */\n\tget state(): PlaybackState {\n\t\tif (this._recorder.state === \"inactive\") {\n\t\t\treturn \"stopped\";\n\t\t} else if (this._recorder.state === \"paused\") {\n\t\t\treturn \"paused\";\n\t\t} else {\n\t\t\treturn \"started\";\n\t\t}\n\t}\n\n\t/**\n\t * Start the Recorder. Returns a promise which resolves\n\t * when the recorder has started.\n\t */\n\tasync start() {\n\t\tassert(this.state !== \"started\", \"Recorder is already started\");\n\t\tconst startPromise = new Promise(done => {\n\t\t\tconst handleStart = () => {\n\t\t\t\tthis._recorder.removeEventListener(\"start\", handleStart, false);\n\n\t\t\t\tdone();\n\t\t\t};\n\n\t\t\tthis._recorder.addEventListener(\"start\", handleStart, false);\n\t\t});\n\n\t\tthis._recorder.start();\n\t\treturn await startPromise;\n\t}\n\n\t/**\n\t * Stop the recorder. Returns a promise with the recorded content until this point\n\t * encoded as [[mimeType]]\n\t */\n\tasync stop(): Promise<Blob> {\n\t\tassert(this.state !== \"stopped\", \"Recorder is not started\");\n\t\tconst dataPromise: Promise<Blob> = new Promise(done => {\n\t\t\tconst handleData = (e: BlobEvent) => {\n\t\t\t\tthis._recorder.removeEventListener(\"dataavailable\", handleData, false);\n\n\t\t\t\tdone(e.data);\n\t\t\t};\n\n\t\t\tthis._recorder.addEventListener(\"dataavailable\", handleData, false);\n\t\t});\n\t\tthis._recorder.stop();\n\t\treturn await dataPromise;\n\t}\n\n\t/**\n\t * Pause the recorder\n\t */\n\tpause(): this {\n\t\tassert(this.state === \"started\", \"Recorder must be started\");\n\t\tthis._recorder.pause();\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.input.dispose();\n\t\tthis._stream.disconnect();\n\t\treturn this;\n\t}\n}\n", "import { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Decibels, Positive, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\n\nexport interface CompressorOptions extends ToneAudioNodeOptions {\n\tattack: Time;\n\tknee: Decibels;\n\tratio: Positive;\n\trelease: Time;\n\tthreshold: Decibels;\n}\n\n/**\n * Compressor is a thin wrapper around the Web Audio\n * [DynamicsCompressorNode](http://webaudio.github.io/web-audio-api/#the-dynamicscompressornode-interface).\n * Compression reduces the volume of loud sounds or amplifies quiet sounds\n * by narrowing or \"compressing\" an audio signal's dynamic range.\n * Read more on [Wikipedia](https://en.wikipedia.org/wiki/Dynamic_range_compression).\n * @example\n * const comp = new Tone.Compressor(-30, 3);\n * @category Component\n */\nexport class Compressor extends ToneAudioNode<CompressorOptions> {\n\n\treadonly name: string = \"Compressor\";\n\n\t/**\n\t * the compressor node\n\t */\n\tprivate _compressor: DynamicsCompressorNode = this.context.createDynamicsCompressor();\n\treadonly input = this._compressor;\n\treadonly output = this._compressor;\n\n\t/**\n\t * The decibel value above which the compression will start taking effect.\n\t * @min -100\n\t * @max 0\n\t */\n\treadonly threshold: Param<\"decibels\">;\n\n\t/**\n\t * The amount of time (in seconds) to reduce the gain by 10dB.\n\t * @min 0\n\t * @max 1\n\t */\n\treadonly attack: Param<\"time\">;\n\n\t/**\n\t * The amount of time (in seconds) to increase the gain by 10dB.\n\t * @min 0\n\t * @max 1\n\t */\n\treadonly release: Param<\"time\">;\n\n\t/**\n\t * A decibel value representing the range above the threshold where the\n\t * curve smoothly transitions to the \"ratio\" portion.\n\t * @min 0\n\t * @max 40\n\t */\n\treadonly knee: Param<\"decibels\">;\n\n\t/**\n\t * The amount of dB change in input for a 1 dB change in output.\n\t * @min 1\n\t * @max 20\n\t */\n\treadonly ratio: Param<\"positive\">;\n\n\t/**\n\t * @param threshold The value above which the compression starts to be applied.\n\t * @param ratio The gain reduction ratio.\n\t */\n\tconstructor(threshold?: Decibels, ratio?: Positive);\n\tconstructor(options?: Partial<CompressorOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Compressor.getDefaults(), arguments, [\"threshold\", \"ratio\"]));\n\t\tconst options = optionsFromArguments(Compressor.getDefaults(), arguments, [\"threshold\", \"ratio\"]);\n\n\t\tthis.threshold = new Param({\n\t\t\tminValue: this._compressor.threshold.minValue,\n\t\t\tmaxValue: this._compressor.threshold.maxValue,\n\t\t\tcontext: this.context,\n\t\t\tconvert: false,\n\t\t\tparam: this._compressor.threshold,\n\t\t\tunits: \"decibels\",\n\t\t\tvalue: options.threshold,\n\t\t});\n\n\t\tthis.attack = new Param({\n\t\t\tminValue: this._compressor.attack.minValue,\n\t\t\tmaxValue: this._compressor.attack.maxValue,\n\t\t\tcontext: this.context,\n\t\t\tparam: this._compressor.attack,\n\t\t\tunits: \"time\",\n\t\t\tvalue: options.attack,\n\t\t});\n\n\t\tthis.release = new Param({\n\t\t\tminValue: this._compressor.release.minValue,\n\t\t\tmaxValue: this._compressor.release.maxValue,\n\t\t\tcontext: this.context,\n\t\t\tparam: this._compressor.release,\n\t\t\tunits: \"time\",\n\t\t\tvalue: options.release,\n\t\t});\n\n\t\tthis.knee = new Param({\n\t\t\tminValue: this._compressor.knee.minValue,\n\t\t\tmaxValue: this._compressor.knee.maxValue,\n\t\t\tcontext: this.context,\n\t\t\tconvert: false,\n\t\t\tparam: this._compressor.knee,\n\t\t\tunits: \"decibels\",\n\t\t\tvalue: options.knee,\n\t\t});\n\n\t\tthis.ratio = new Param({\n\t\t\tminValue: this._compressor.ratio.minValue,\n\t\t\tmaxValue: this._compressor.ratio.maxValue,\n\t\t\tcontext: this.context,\n\t\t\tconvert: false,\n\t\t\tparam: this._compressor.ratio,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.ratio,\n\t\t});\n\n\t\t// set the defaults\n\t\treadOnly(this, [\"knee\", \"release\", \"attack\", \"ratio\", \"threshold\"]);\n\t}\n\n\tstatic getDefaults(): CompressorOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tattack: 0.003,\n\t\t\tknee: 30,\n\t\t\tratio: 12,\n\t\t\trelease: 0.25,\n\t\t\tthreshold: -24,\n\t\t});\n\t}\n\n\t/**\n\t * A read-only decibel value for metering purposes, representing the current amount of gain\n\t * reduction that the compressor is applying to the signal. If fed no signal the value will be 0 (no gain reduction).\n\t */\n\tget reduction(): Decibels {\n\t\treturn this._compressor.reduction;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._compressor.disconnect();\n\t\tthis.attack.dispose();\n\t\tthis.release.dispose();\n\t\tthis.threshold.dispose();\n\t\tthis.ratio.dispose();\n\t\tthis.knee.dispose();\n\t\treturn this;\n\t}\n}\n", "import { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Decibels, Time } from \"../../core/type/Units\";\nimport { GreaterThan } from \"../../signal/GreaterThan\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { Follower } from \"../analysis/Follower\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { dbToGain, gainToDb } from \"../../core/type/Conversions\";\n\nexport interface GateOptions extends ToneAudioNodeOptions {\n\tthreshold: Decibels;\n\tsmoothing: Time;\n}\n\n/**\n * Gate only passes a signal through when the incoming\n * signal exceeds a specified threshold. It uses [[Follower]] to follow the ampltiude\n * of the incoming signal and compares it to the [[threshold]] value using [[GreaterThan]].\n *\n * @example\n * const gate = new Tone.Gate(-30, 0.2).toDestination();\n * const mic = new Tone.UserMedia().connect(gate);\n * // the gate will only pass through the incoming\n * // signal when it's louder than -30db\n * @category Component\n */\nexport class Gate extends ToneAudioNode<GateOptions> {\n\n\treadonly name: string = \"Gate\";\n\n\treadonly input: ToneAudioNode;\n\treadonly output: ToneAudioNode;\n\n\t/**\n\t * Follow the incoming signal\n\t */\n\tprivate _follower: Follower;\n\n\t/**\n\t * Test if it's greater than the threshold\n\t */\n\tprivate _gt: GreaterThan;\n\n\t/**\n\t * Gate the incoming signal when it does not exceed the threshold\n\t */\n\tprivate _gate: Gain;\n\n\t/**\n\t * @param threshold The threshold above which the gate will open.\n\t * @param smoothing The follower's smoothing time\n\t */\n\tconstructor(threshold?: Decibels, smoothing?: Time);\n\tconstructor(options?: Partial<GateOptions>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Gate.getDefaults(), arguments, [\"threshold\", \"smoothing\"])));\n\t\tconst options = optionsFromArguments(Gate.getDefaults(), arguments, [\"threshold\", \"smoothing\"]);\n\n\t\tthis._follower = new Follower({\n\t\t\tcontext: this.context,\n\t\t\tsmoothing: options.smoothing,\n\t\t});\n\t\tthis._gt = new GreaterThan({\n\t\t\tcontext: this.context,\n\t\t\tvalue: dbToGain(options.threshold),\n\t\t});\n\t\tthis.input = new Gain({ context: this.context });\n\t\tthis._gate = this.output = new Gain({ context: this.context });\n\n\t\t// connections\n\t\tthis.input.connect(this._gate);\n\t\t// the control signal\n\t\tthis.input.chain(this._follower, this._gt, this._gate.gain);\n\t}\n\n\tstatic getDefaults(): GateOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tsmoothing: 0.1,\n\t\t\tthreshold: -40\n\t\t});\n\t}\n\n\t/**\n\t * The threshold of the gate in decibels\n\t */\n\tget threshold(): Decibels {\n\t\treturn gainToDb(this._gt.value);\n\t}\n\tset threshold(thresh) {\n\t\tthis._gt.value = dbToGain(thresh);\n\t}\n\n\t/**\n\t * The attack/decay speed of the gate. See [[Follower.smoothing]]\n\t */\n\tget smoothing(): Time {\n\t\treturn this._follower.smoothing;\n\t}\n\tset smoothing(smoothingTime) {\n\t\tthis._follower.smoothing = smoothingTime;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.input.dispose();\n\t\tthis._follower.dispose();\n\t\tthis._gt.dispose();\n\t\tthis._gate.dispose();\n\t\treturn this;\n\t}\n}\n", "import { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Decibels } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Compressor } from \"./Compressor\";\nimport { Param } from \"../../core/context/Param\";\nimport { readOnly } from \"../../core/util/Interface\";\n\nexport interface LimiterOptions extends ToneAudioNodeOptions {\n\tthreshold: Decibels;\n};\n\n/**\n * Limiter will limit the loudness of an incoming signal.\n * Under the hood it's composed of a [[Compressor]] with a fast attack\n * and release and max compression ratio. \n *\n * @example\n * const limiter = new Tone.Limiter(-20).toDestination();\n * const oscillator = new Tone.Oscillator().connect(limiter);\n * oscillator.start();\n * @category Component\n */\nexport class Limiter extends ToneAudioNode<LimiterOptions> {\n\n\treadonly name: string = \"Limiter\";\n\n\treadonly input: InputNode;\n\treadonly output: OutputNode;\n\n\t/**\n\t * The compressor which does the limiting\n\t */\n\tprivate _compressor: Compressor;\n\n\treadonly threshold: Param<\"decibels\">\n\n\t/**\n\t * @param threshold The threshold above which the gain reduction is applied.\n\t */\n\tconstructor(threshold?: Decibels);\n\tconstructor(options?: Partial<LimiterOptions>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Limiter.getDefaults(), arguments, [\"threshold\"])));\n\t\tconst options = optionsFromArguments(Limiter.getDefaults(), arguments, [\"threshold\"]);\n\n\t\tthis._compressor = this.input = this.output = new Compressor({\n\t\t\tcontext: this.context,\n\t\t\tratio: 20,\n\t\t\tattack: 0.003,\n\t\t\trelease: 0.01,\n\t\t\tthreshold: options.threshold\n\t\t});\n\n\t\tthis.threshold = this._compressor.threshold;\n\t\treadOnly(this, \"threshold\");\n\t}\n\n\tstatic getDefaults(): LimiterOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tthreshold: -12\n\t\t});\n\t}\n\n\t/**\n\t * A read-only decibel value for metering purposes, representing the current amount of gain\n\t * reduction that the compressor is applying to the signal. \n\t */\n\tget reduction(): Decibels {\n\t\treturn this._compressor.reduction;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._compressor.dispose();\n\t\tthis.threshold.dispose();\n\t\treturn this;\n\t}\n}\n", "import { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Compressor, CompressorOptions } from \"./Compressor\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { MidSideSplit } from \"../channel/MidSideSplit\";\nimport { MidSideMerge } from \"../channel/MidSideMerge\";\nimport { readOnly, RecursivePartial } from \"../../core/util/Interface\";\n\nexport interface MidSideCompressorOptions extends ToneAudioNodeOptions {\n\tmid: Omit<CompressorOptions, keyof ToneAudioNodeOptions>;\n\tside: Omit<CompressorOptions, keyof ToneAudioNodeOptions>;\n}\n\n/**\n * MidSideCompressor applies two different compressors to the [[mid]]\n * and [[side]] signal components of the input. See [[MidSideSplit]] and [[MidSideMerge]].\n * @category Component\n */\nexport class MidSideCompressor extends ToneAudioNode<MidSideCompressorOptions> {\n\n\treadonly name: string = \"MidSideCompressor\";\n\n\treadonly input: InputNode;\n\treadonly output: OutputNode;\n\n\t/**\n\t * Split the incoming signal into Mid/Side\n\t */\n\tprivate _midSideSplit: MidSideSplit;\n\n\t/**\n\t * Merge the compressed signal back into a single stream\n\t */\n\tprivate _midSideMerge: MidSideMerge;\n\n\t/**\n\t * The compression applied to the mid signal\n\t */\n\treadonly mid: Compressor;\n\n\t/**\n\t * The compression applied to the side signal\n\t */\n\treadonly side: Compressor;\n\n\tconstructor(options?: RecursivePartial<MidSideCompressorOptions>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(MidSideCompressor.getDefaults(), arguments)));\n\t\tconst options = optionsFromArguments(MidSideCompressor.getDefaults(), arguments);\n\n\t\tthis._midSideSplit = this.input = new MidSideSplit({ context: this.context });\n\t\tthis._midSideMerge = this.output = new MidSideMerge({ context: this.context });\n\t\tthis.mid = new Compressor(Object.assign(options.mid, { context: this.context }));\n\t\tthis.side = new Compressor(Object.assign(options.side, { context: this.context }));\n\n\t\tthis._midSideSplit.mid.chain(this.mid, this._midSideMerge.mid);\n\t\tthis._midSideSplit.side.chain(this.side, this._midSideMerge.side);\n\t\treadOnly(this, [\"mid\", \"side\"]);\n\t}\n\n\tstatic getDefaults(): MidSideCompressorOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmid: {\n\t\t\t\tratio: 3,\n\t\t\t\tthreshold: -24,\n\t\t\t\trelease: 0.03,\n\t\t\t\tattack: 0.02,\n\t\t\t\tknee: 16\n\t\t\t},\n\t\t\tside: {\n\t\t\t\tratio: 6,\n\t\t\t\tthreshold: -30,\n\t\t\t\trelease: 0.25,\n\t\t\t\tattack: 0.03,\n\t\t\t\tknee: 10\n\t\t\t}\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.mid.dispose();\n\t\tthis.side.dispose();\n\t\tthis._midSideSplit.dispose();\n\t\tthis._midSideMerge.dispose();\n\t\treturn this;\n\t}\n}\n", "import { InputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Compressor, CompressorOptions } from \"./Compressor\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, RecursivePartial } from \"../../core/util/Interface\";\nimport { Frequency } from \"../../core/type/Units\";\nimport { MultibandSplit } from \"../channel/MultibandSplit\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Gain } from \"../../core/context/Gain\";\n\nexport interface MultibandCompressorOptions extends ToneAudioNodeOptions {\n\tmid: Omit<CompressorOptions, keyof ToneAudioNodeOptions>;\n\tlow: Omit<CompressorOptions, keyof ToneAudioNodeOptions>;\n\thigh: Omit<CompressorOptions, keyof ToneAudioNodeOptions>;\n\tlowFrequency: Frequency;\n\thighFrequency: Frequency;\n}\n\n/**\n * A compressor with separate controls over low/mid/high dynamics. See [[Compressor]] and [[MultibandSplit]]\n *\n * @example\n * const multiband = new Tone.MultibandCompressor({\n * \tlowFrequency: 200,\n * \thighFrequency: 1300,\n * \tlow: {\n * \t\tthreshold: -12\n * \t}\n * });\n * @category Component\n */\nexport class MultibandCompressor extends ToneAudioNode<MultibandCompressorOptions> {\n\n\treadonly name: string = \"MultibandCompressor\";\n\n\treadonly input: InputNode;\n\treadonly output: ToneAudioNode;\n\n\t/**\n\t * Split the incoming signal into high/mid/low\n\t */\n\tprivate _splitter: MultibandSplit;\n\n\t/**\n\t * low/mid crossover frequency.\n\t */\n\treadonly lowFrequency: Signal<\"frequency\">;\n\n\t/**\n\t * mid/high crossover frequency.\n\t */\n\treadonly highFrequency: Signal<\"frequency\">;\n\n\t/**\n\t * The compressor applied to the low frequencies\n\t */\n\treadonly low: Compressor;\n\n\t/**\n\t * The compressor applied to the mid frequencies\n\t */\n\treadonly mid: Compressor;\n\n\t/**\n\t * The compressor applied to the high frequencies\n\t */\n\treadonly high: Compressor;\n\n\tconstructor(options?: RecursivePartial<MultibandCompressorOptions>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(MultibandCompressor.getDefaults(), arguments)));\n\t\tconst options = optionsFromArguments(MultibandCompressor.getDefaults(), arguments);\n\n\t\tthis._splitter = this.input = new MultibandSplit({\n\t\t\tcontext: this.context,\n\t\t\tlowFrequency: options.lowFrequency,\n\t\t\thighFrequency: options.highFrequency\n\t\t});\n\t\tthis.lowFrequency = this._splitter.lowFrequency;\n\t\tthis.highFrequency = this._splitter.highFrequency;\n\t\tthis.output = new Gain({ context: this.context });\n\t\tthis.low = new Compressor(Object.assign(options.low, { context: this.context }));\n\t\tthis.mid = new Compressor(Object.assign(options.mid, { context: this.context }));\n\t\tthis.high = new Compressor(Object.assign(options.high, { context: this.context }));\n\n\t\t// connect the compressor\n\t\tthis._splitter.low.chain(this.low, this.output);\n\t\tthis._splitter.mid.chain(this.mid, this.output);\n\t\tthis._splitter.high.chain(this.high, this.output);\n\n\t\treadOnly(this, [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n\t}\n\n\tstatic getDefaults(): MultibandCompressorOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tlowFrequency: 250,\n\t\t\thighFrequency: 2000,\n\t\t\tlow: {\n\t\t\t\tratio: 6,\n\t\t\t\tthreshold: -30,\n\t\t\t\trelease: 0.25,\n\t\t\t\tattack: 0.03,\n\t\t\t\tknee: 10\n\t\t\t},\n\t\t\tmid: {\n\t\t\t\tratio: 3,\n\t\t\t\tthreshold: -24,\n\t\t\t\trelease: 0.03,\n\t\t\t\tattack: 0.02,\n\t\t\t\tknee: 16\n\t\t\t},\n\t\t\thigh: {\n\t\t\t\tratio: 3,\n\t\t\t\tthreshold: -24,\n\t\t\t\trelease: 0.03,\n\t\t\t\tattack: 0.02,\n\t\t\t\tknee: 16\n\t\t\t},\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._splitter.dispose();\n\t\tthis.low.dispose();\n\t\tthis.mid.dispose();\n\t\tthis.high.dispose();\n\t\tthis.output.dispose();\n\t\treturn this;\n\t}\n}\n", "import { Gain } from \"../../core/context/Gain\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Decibels, Frequency } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { MultibandSplit } from \"../channel/MultibandSplit\";\n\ninterface EQ3Options extends ToneAudioNodeOptions {\n\tlow: Decibels;\n\tmid: Decibels;\n\thigh: Decibels;\n\tlowFrequency: Frequency;\n\thighFrequency: Frequency;\n}\n\n/**\n * EQ3 provides 3 equalizer bins: Low/Mid/High. \n * @category Component\n */\nexport class EQ3 extends ToneAudioNode<EQ3Options> {\n\n\treadonly name: string = \"EQ3\";\n\n\t/**\n\t * the input\n\t */\n\treadonly input: MultibandSplit;\n\n\t/**\n\t * the output\n\t */\n\treadonly output = new Gain({ context: this.context });\n\n\t/**\n\t * Splits the input into three outputs\n\t */\n\tprivate _multibandSplit: MultibandSplit;\n\n\t/**\n\t * The gain for the lower signals\n\t */\n\tprivate _lowGain: Gain<\"decibels\">;\n\n\t/**\n\t * The gain for the mid signals\n\t */\n\tprivate _midGain: Gain<\"decibels\">;\n\n\t/**\n\t * The gain for the high signals\n\t */\n\tprivate _highGain: Gain<\"decibels\">;\n\n\t/**\n\t * The gain in decibels of the low part\n\t */\n\treadonly low: Param<\"decibels\">;\n\n\t/**\n\t * The gain in decibels of the mid part\n\t */\n\treadonly mid: Param<\"decibels\">;\n\n\t/**\n\t * The gain in decibels of the high part\n\t */\n\treadonly high: Param<\"decibels\">;\n\n\t/**\n\t * The Q value for all of the filters.\n\t */\n\treadonly Q: Signal<\"positive\">;\n\n\t/**\n\t * The low/mid crossover frequency.\n\t */\n\treadonly lowFrequency: Signal<\"frequency\">;\n\n\t/**\n\t * The mid/high crossover frequency.\n\t */\n\treadonly highFrequency: Signal<\"frequency\">;\n\n\tprotected _internalChannels: ToneAudioNode[] = [];\n\n\tconstructor(lowLevel?: Decibels, midLevel?: Decibels, highLevel?: Decibels);\n\tconstructor(options: Partial<EQ3Options>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(EQ3.getDefaults(), arguments, [\"low\", \"mid\", \"high\"]));\n\t\tconst options = optionsFromArguments(EQ3.getDefaults(), arguments, [\"low\", \"mid\", \"high\"]);\n\n\t\tthis.input = this._multibandSplit = new MultibandSplit({\n\t\t\tcontext: this.context,\n\t\t\thighFrequency: options.highFrequency,\n\t\t\tlowFrequency: options.lowFrequency,\n\t\t});\n\n\t\tthis._lowGain = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.low,\n\t\t\tunits: \"decibels\",\n\t\t});\n\n\t\tthis._midGain = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.mid,\n\t\t\tunits: \"decibels\",\n\t\t});\n\n\t\tthis._highGain = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.high,\n\t\t\tunits: \"decibels\",\n\t\t});\n\n\t\tthis.low = this._lowGain.gain;\n\t\tthis.mid = this._midGain.gain;\n\t\tthis.high = this._highGain.gain;\n\t\tthis.Q = this._multibandSplit.Q;\n\t\tthis.lowFrequency = this._multibandSplit.lowFrequency;\n\t\tthis.highFrequency\t= this._multibandSplit.highFrequency;\n\n\t\t// the frequency bands\n\t\tthis._multibandSplit.low.chain(this._lowGain, this.output);\n\t\tthis._multibandSplit.mid.chain(this._midGain, this.output);\n\t\tthis._multibandSplit.high.chain(this._highGain, this.output);\n\n\t\treadOnly(this, [\"low\", \"mid\", \"high\", \"lowFrequency\", \"highFrequency\"]);\n\t\tthis._internalChannels = [this._multibandSplit];\n\t}\n\n\tstatic getDefaults(): EQ3Options {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\thigh: 0,\n\t\t\thighFrequency: 2500,\n\t\t\tlow: 0,\n\t\t\tlowFrequency: 400,\n\t\t\tmid: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\twritable(this, [\"low\", \"mid\", \"high\", \"lowFrequency\", \"highFrequency\"]);\n\t\tthis._multibandSplit.dispose();\n\t\tthis.lowFrequency.dispose();\n\t\tthis.highFrequency.dispose();\n\t\tthis._lowGain.dispose();\n\t\tthis._midGain.dispose();\n\t\tthis._highGain.dispose();\n\t\tthis.low.dispose();\n\t\tthis.mid.dispose();\n\t\tthis.high.dispose();\n\t\tthis.Q.dispose();\n\t\treturn this;\n\t}\n\n}\n", "import { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { noOp } from \"../../core/util/Interface\";\n\nexport interface ConvolverOptions extends ToneAudioNodeOptions {\n\tonload: () => void;\n\tnormalize: boolean;\n\turl?: string | AudioBuffer | ToneAudioBuffer;\n}\n\n/**\n * Convolver is a wrapper around the Native Web Audio\n * [ConvolverNode](http://webaudio.github.io/web-audio-api/#the-convolvernode-interface).\n * Convolution is useful for reverb and filter emulation. Read more about convolution reverb on\n * [Wikipedia](https://en.wikipedia.org/wiki/Convolution_reverb).\n *\n * @example\n * // initializing the convolver with an impulse response\n * const convolver = new Tone.Convolver(\"./path/to/ir.wav\").toDestination();\n * @category Component\n */\nexport class Convolver extends ToneAudioNode<ConvolverOptions> {\n\n\treadonly name: string = \"Convolver\";\n\n\t/**\n\t * The native ConvolverNode\n\t */\n\tprivate _convolver: ConvolverNode = this.context.createConvolver();\n\n\t/**\n\t * The Buffer belonging to the convolver\n\t */\n\tprivate _buffer: ToneAudioBuffer;\n\n\treadonly input: Gain;\n\treadonly output: Gain;\n\n\t/**\n\t * @param url The URL of the impulse response or the ToneAudioBuffer containing the impulse response.\n\t * @param onload The callback to invoke when the url is loaded.\n\t */\n\tconstructor(url?: string | AudioBuffer | ToneAudioBuffer, onload?: () => void);\n\tconstructor(options?: Partial<ConvolverOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Convolver.getDefaults(), arguments, [\"url\", \"onload\"]));\n\t\tconst options = optionsFromArguments(Convolver.getDefaults(), arguments, [\"url\", \"onload\"]);\n\n\t\tthis._buffer = new ToneAudioBuffer(options.url, buffer => {\n\t\t\tthis.buffer = buffer;\n\t\t\toptions.onload();\n\t\t});\n\n\t\tthis.input = new Gain({ context: this.context });\n\t\tthis.output = new Gain({ context: this.context });\n\n\t\t// set if it's already loaded, set it immediately\n\t\tif (this._buffer.loaded) {\n\t\t\tthis.buffer = this._buffer;\n\t\t}\n\n\t\t// initially set normalization\n\t\tthis.normalize = options.normalize;\n\n\t\t// connect it up\n\t\tthis.input.chain(this._convolver, this.output);\n\t}\n\n\tstatic getDefaults(): ConvolverOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tnormalize: true,\n\t\t\tonload: noOp,\n\t\t});\n\t}\n\n\t/**\n\t * Load an impulse response url as an audio buffer.\n\t * Decodes the audio asynchronously and invokes\n\t * the callback once the audio buffer loads.\n\t * @param url The url of the buffer to load. filetype support depends on the browser.\n\t */\n\tasync load(url: string): Promise<void> {\n\t\tthis.buffer = await this._buffer.load(url);\n\t}\n\n\t/**\n\t * The convolver's buffer\n\t */\n\tget buffer(): ToneAudioBuffer | null {\n\t\tif (this._buffer.length) {\n\t\t\treturn this._buffer;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\tset buffer(buffer) {\n\t\tif (buffer) {\n\t\t\tthis._buffer.set(buffer);\n\t\t}\n\t\t// if it's already got a buffer, create a new one\n\t\tif (this._convolver.buffer) {\n\t\t\t// disconnect the old one\n\t\t\tthis.input.disconnect();\n\t\t\tthis._convolver.disconnect();\n\t\t\t// create and connect a new one\n\t\t\tthis._convolver = this.context.createConvolver();\n\t\t\tthis.input.chain(this._convolver, this.output);\n\t\t}\n\t\tconst buff = this._buffer.get();\n\t\tthis._convolver.buffer = buff ? buff : null;\n\t}\n\n\t/**\n\t * The normalize property of the ConvolverNode interface is a boolean that\n\t * controls whether the impulse response from the buffer will be scaled by\n\t * an equal-power normalization when the buffer attribute is set, or not.\n\t */\n\tget normalize(): boolean {\n\t\treturn this._convolver.normalize;\n\t}\n\tset normalize(norm) {\n\t\tthis._convolver.normalize = norm;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._buffer.dispose();\n\t\tthis._convolver.disconnect();\n\t\treturn this;\n\t}\n}\n", "export { getContext, setContext } from \"./core/Global\";\nexport * from \"./classes\";\nexport * from \"./version\";\nimport { getContext } from \"./core/Global\";\nimport { ToneAudioBuffer } from \"./core/context/ToneAudioBuffer\";\nexport { start } from \"./core/Global\";\nimport { Seconds } from \"./core/type/Units\";\nexport { supported } from \"./core/context/AudioContext\";\n\n/**\n * The current audio context time of the global [[Context]]. \n * See [[Context.now]]\n * @category Core\n */\nexport function now(): Seconds {\n\treturn getContext().now();\n}\n\n/**\n * The current audio context time of the global [[Context]] without the [[Context.lookAhead]]\n * See [[Context.immediate]]\n * @category Core\n */\nexport function immediate(): Seconds {\n\treturn getContext().immediate();\n}\n\n/**\n * The Transport object belonging to the global Tone.js Context.\n * See [[Transport]]\n * @category Core\n */\nexport const Transport = getContext().transport;\n\n/**\n * The Transport object belonging to the global Tone.js Context.\n * See [[Transport]]\n * @category Core\n */\nexport function getTransport(): import(\"./core/clock/Transport\").Transport {\n\treturn getContext().transport;\n}\n\n/**\n * The Destination (output) belonging to the global Tone.js Context.\n * See [[Destination]]\n * @category Core\n */\nexport const Destination = getContext().destination;\n\n/**\n * @deprecated Use [[Destination]]\n */\nexport const Master = getContext().destination;\n\n/**\n * The Destination (output) belonging to the global Tone.js Context.\n * See [[Destination]]\n * @category Core\n */\nexport function getDestination(): import(\"./core/context/Destination\").Destination {\n\treturn getContext().destination;\n}\n\n/**\n * The [[Listener]] belonging to the global Tone.js Context.\n * @category Core\n */\nexport const Listener = getContext().listener;\n\n/**\n * The [[Listener]] belonging to the global Tone.js Context.\n * @category Core\n */\nexport function getListener(): import(\"./core/context/Listener\").Listener {\n\treturn getContext().listener;\n}\n\n/**\n * Draw is used to synchronize the draw frame with the Transport's callbacks. \n * See [[Draw]]\n * @category Core\n */\nexport const Draw = getContext().draw;\n\n/**\n * Get the singleton attached to the global context. \n * Draw is used to synchronize the draw frame with the Transport's callbacks. \n * See [[Draw]]\n * @category Core\n */\nexport function getDraw(): import(\"./core/util/Draw\").Draw {\n\treturn getContext().draw;\n}\n\n/**\n * A reference to the global context\n * See [[Context]]\n */\nexport const context = getContext();\n\n/**\n * Promise which resolves when all of the loading promises are resolved. \n * Alias for static [[ToneAudioBuffer.loaded]] method.\n * @category Core\n */\nexport function loaded() {\n\treturn ToneAudioBuffer.loaded();\n}\n\n// this fills in name changes from 13.x to 14.x\nimport { ToneAudioBuffers } from \"./core/context/ToneAudioBuffers\";\nimport { ToneBufferSource } from \"./source/buffer/ToneBufferSource\";\nexport const Buffer: typeof ToneAudioBuffer = ToneAudioBuffer;\nexport const Buffers: typeof ToneAudioBuffers = ToneAudioBuffers;\nexport const BufferSource: typeof ToneBufferSource = ToneBufferSource;\n"],
  "mappings": "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",
  "names": ["now", "context", "now", "context", "context", "now", "context", "now", "context", "start", "now", "now", "context", "start", "workletName", "workletName", "now", "now", "context", "context", "Transport", "Destination", "Listener", "Draw"]
}
